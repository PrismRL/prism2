{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PRISM A comprehensive traditional roguelike engine for L\u00d6VE . \"Traditional\" roguelike? Prism is geared towards classic roguelike games like NetHack or Brogue. These are turn-based games set in randomly generated grid levels. Getting started Download (zipped release here) and unzip it. Drag the folder containing main.lua over the love executable, or run it using \"love .\" in the terminal.","title":"Home"},{"location":"#prism","text":"A comprehensive traditional roguelike engine for L\u00d6VE .","title":"PRISM"},{"location":"#traditional-roguelike","text":"Prism is geared towards classic roguelike games like NetHack or Brogue. These are turn-based games set in randomly generated grid levels.","title":"\"Traditional\" roguelike?"},{"location":"#getting-started","text":"Download (zipped release here) and unzip it. Drag the folder containing main.lua over the love executable, or run it using \"love .\" in the terminal.","title":"Getting started"},{"location":"architecture-primer/","text":"Prism's Architecture: A Primer This is an overview of how a game made with Prism fits together. Actors Actors are the entities that populate the game world. They include the player, monsters, items, chests, and any other interactive elements. Each actor consists of components\u2014data structures that define their state and behavior. Components Components store the data that define an actor\u2019s properties and abilities. A monster\u2019s health, a poison effect, or a player\u2019s sight range are all represented as components. Components determine what actions an actor can perform. Actions Actions are how actors interact with the game world. Moving, attacking, and casting spells are all actions. Actions require actors to have specific components and trigger state changes within the level. Systems Systems handle game logic based on events. They process changes, such as reducing an actor\u2019s health due to poison at the end of their turn or checking if a floating creature should fall into a pit. Systems operate at the level-wide scale being fed all events from that level. Level The level manages all actors and maintains the game state. It tracks turns, processes actions, moves actors, and holds the map and various caches for the game world. Cells Cells define the physical structure of the level. They represent terrain elements such as walls, floors, water, and lava\u2014determining where actors can move and interact.","title":"Architecture Primer"},{"location":"architecture-primer/#prisms-architecture-a-primer","text":"This is an overview of how a game made with Prism fits together.","title":"Prism's Architecture: A Primer"},{"location":"architecture-primer/#actors","text":"Actors are the entities that populate the game world. They include the player, monsters, items, chests, and any other interactive elements. Each actor consists of components\u2014data structures that define their state and behavior.","title":"Actors"},{"location":"architecture-primer/#components","text":"Components store the data that define an actor\u2019s properties and abilities. A monster\u2019s health, a poison effect, or a player\u2019s sight range are all represented as components. Components determine what actions an actor can perform.","title":"Components"},{"location":"architecture-primer/#actions","text":"Actions are how actors interact with the game world. Moving, attacking, and casting spells are all actions. Actions require actors to have specific components and trigger state changes within the level.","title":"Actions"},{"location":"architecture-primer/#systems","text":"Systems handle game logic based on events. They process changes, such as reducing an actor\u2019s health due to poison at the end of their turn or checking if a floating creature should fall into a pit. Systems operate at the level-wide scale being fed all events from that level.","title":"Systems"},{"location":"architecture-primer/#level","text":"The level manages all actors and maintains the game state. It tracks turns, processes actions, moves actors, and holds the map and various caches for the game world.","title":"Level"},{"location":"architecture-primer/#cells","text":"Cells define the physical structure of the level. They represent terrain elements such as walls, floors, water, and lava\u2014determining where actors can move and interact.","title":"Cells"},{"location":"doc/","text":"Action __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Action : __new ( owner : Actor, targets ? : [ Object ], source ? : Actor ) Constructor for the Action class. @ param owner \u2014 The actor that is performing the action. @ param targets \u2014 An optional list of target actors. Not all actions require targets. @ param source \u2014 An optional actor indicating the source of that action, for stuff like a wand or scroll. _canPerform ( method ) Action : _canPerform ( level : Level, ... any ) -> canPerform : boolean This method should be overriden by subclasses. This is called to make sure an action is valid for the actor. This would be useful for _perform ( method ) Action : _perform ( level : Level, ... any ) Performs the action. This should be overriden on all subclasses @ param level \u2014 The level the action is being performed in. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown canPerform ( method ) Action : canPerform ( level : Level) -> canPerform : boolean Call this function to check if the action is valid and can be executed in the given level. This calls the inner overrideable _canPerform, and unpacks the target objects. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getNumTargets ( method ) Action : getNumTargets () -> numTargets : number Returns the number of targets associated with this action. @ return numTargets \u2014 The number of targets associated with this action. getTarget ( method ) Action : getTarget ( n : number) -> target : any Returns the target actor at the specified index. @ param n \u2014 The index of the target actor to retrieve. @ return target \u2014 The target actor at the specified index. getTargetObject ( method ) Action : getTargetObject ( index : any) -> targetObject : Target| nil Returns the target object at the specified index. @tparam number index The index of the target object to retrieve. hasRequisiteComponents ( method ) Action : hasRequisiteComponents ( actor : Actor) -> hasRequisiteComponents : boolean hasTarget ( method ) Action : hasTarget ( actor : any) -> boolean Determines if the specified actor is a target of this action. @tparam Actor actor The actor to check if they are a target of this action. @treturn boolean true if the specified actor is a target of this action, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The actor taking the action. perform ( method ) Action : perform ( level : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requiredComponents Component [] serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table silent boolean A silent action doesn't generate messages source Actor ? An object granting the owner of the action this action. A wand's zap action is a good example. stripName boolean targetObjects [ Object ] targets [ Target ] time number The time it takes to perform this action. Lower is better. validateTarget ( method ) Action : validateTarget ( n : number, owner : Actor, toValidate : Actor, targets : [ any]) -> true : boolean _validates the specified target for this action. @ param n \u2014 The index of the target object to _validate. @ param owner \u2014 The actor that is performing the action. @ param toValidate \u2014 The target actor to _validate. @ param targets \u2014 The previously selected targets. @ return true \u2014 if the specified target actor is valid for this action, false otherwise. ActionDecision __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActionDecision : __new ( actor : Actor) _serializationBlacklist table action Action | nil An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more. actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setAction ( method ) ActionDecision : setAction ( action : any) stripName boolean validateResponse ( method ) ActionDecision : validateResponse () -> boolean ActionMessage __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActionMessage : __new ( action : Action) _serializationBlacklist table action Action An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more. actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Actor __addComponent ( method ) Actor : __addComponent ( component : Component) Adds a component to the actor. This function will check if the component's prerequisites are met and will throw an error if they are not. @ param component \u2014 The component to add to the actor. __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Actor : __new () Constructor for an actor. Initializes and copies the actor's fields from its prototype. __removeComponent ( method ) Actor : __removeComponent ( component : Component) -> unknown Removes a component from the actor. This function will throw an error if the component is not present on the actor. @ param component \u2014 The component to remove from the actor. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown char string The character to draw for this actor. className string A unique name for this class. By convention this should match the annotation name you use. componentCache table This is a cache for component queries, reducing most queries to a hashmap lookup. components Component [] A table containing all of the actor's component instances. Generated at runtime. deserialize function Object. deserialize ( data : any) -> unknown expectComponent ( method ) Actor : expectComponent ( prototype : < T>) -> < T > Expects a component, returning it or erroring on nil. @ param prototype \u2014 The type of the component to return. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActions ( method ) Actor : getActions () -> totalActions : Action[] Get a list of actions that the actor can perform. @ return totalActions \u2014 Returns a table of all actions. getComponent ( method ) Actor : getComponent ( prototype : < T>) -> < T > ? Searches for a component that inherits from the supplied prototype @ param prototype \u2014 The type of the component to return. getPosition ( method ) Actor : getPosition () -> position : Vector2 Returns the current position of the actor. @ return position \u2014 Returns a copy of the actor's current position. getRange ( method ) Actor : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , actor : Actor) -> Returns : number Get the range from this actor to another actor. @ param actor \u2014 The other actor to get the range to. @ return Returns \u2014 the calculated range. type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\" getRangeVec ( method ) Actor : getRangeVec ( type : any , vector : any) -> number Get the range from this actor to a given vector. @function Actor:getRangeVec @tparam string type The type of range calculation to use. @tparam Vector2 vector The vector to get the range to. @treturn number Returns the calculated range. hasComponent ( method ) Actor : hasComponent ( prototype : Component) -> hasComponent : boolean Returns a bool indicating whether the actor has a component of the given type. @ param prototype \u2014 The prototype of the component to check for. initialize ( method ) Actor : initialize () -> Component [] Creates the components for the actor. Override this. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string The string name of the actor, used for display to the user. position Vector2 An actor's position in the game world. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean ActorStorage __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActorStorage : __new ( insertSparseMapCallback : any, removeSparseMapCallback : any) The constructor for the 'ActorStorage' class. Initializes the list, spatial map, and component cache. _serializationBlacklist table actorToID table < Actor , integer ? > A hashmap of actors to ids. actors Actor [] The list of actors in the storage. addActor ( method ) ActorStorage : addActor ( actor : Actor) Adds an actor to the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. componentCache table The cache for storing actor components. deserialize function Object. deserialize ( data : any) -> unknown eachActor ( method ) ActorStorage : eachActor (... Component ? ) -> iter : function Returns an iterator over the actors in the storage. If a component is specified, only actors with that component will be returned. @ param ... \u2014 The components to filter by. @ return iter \u2014 An iterator over the actors in the storage. eachActorAt ( method ) ActorStorage : eachActorAt ( x : number, y : number) -> iterator : function Returns an iterator over the actors in the storage at the given position. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return iterator \u2014 An iterator over the actors at the given position. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActorByType ( method ) ActorStorage : getActorByType ( prototype : Actor) -> The : Actor| nil Returns an iterator over the actors in the storage that have the specified prototype. @ param prototype \u2014 The prototype to filter by. @ return The \u2014 first actor that matches the prototype, or nil if no actor matches. getActorsAt ( method ) ActorStorage : getActorsAt ( x : number, y : number) -> actors : Actor[] Returns a table of actors in the storage at the given position. TODO: Return an ActorStorage object instead of a table. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return actors \u2014 A table of actors at the given position. getID ( method ) ActorStorage : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the ActorStorage but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found. hasActor ( method ) ActorStorage : hasActor ( actor : Actor) -> True : boolean Returns whether the storage contains the specified actor. @ param actor \u2014 The actor to check. @ return True \u2014 if the storage contains the actor, false otherwise. ids SparseArray A sparse array of references to the Actors in the storage. The ID is derived from this. insertSparseMapCallback function insertSparseMapEntries ( method ) ActorStorage : insertSparseMapEntries ( actor : Actor) Inserts the specified actor into the spatial map. @ param actor \u2014 The actor to insert. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. merge ( method ) ActorStorage : merge ( other : ActorStorage) Merges another ActorStorage instance with this one. @ param other \u2014 The other ActorStorage instance to merge with this one. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onDeserialize ( method ) ActorStorage : onDeserialize () prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) ActorStorage : removeActor ( actor : Actor) Removes an actor from the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to remove. removeComponentCache ( method ) ActorStorage : removeComponentCache ( actor : Actor) Removes the specified actor from the component cache. @ param actor \u2014 The actor to remove from the component cache. removeSparseMapCallback function removeSparseMapEntries ( method ) ActorStorage : removeSparseMapEntries ( actor : Actor) Removes the specified actor from the spatial map. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setCallbacks ( method ) ActorStorage : setCallbacks ( insertCallback : any, removeCallback : any) sparseMap SparseMap The spatial map for storing actor positions. stripName boolean updateComponentCache ( method ) ActorStorage : updateComponentCache ( actor : Actor) Updates the component cache for the specified actor. @ param actor \u2014 The actor to update the component cache for. BTConditional __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTConditional : __new ( conditionFunc : fun ( self : any, level : Level, actor : Actor): boolean ) Creates a new BTConditional. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. conditionFunc fun ( self : any, level : Level, actor : Actor): boolean deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTConditional : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the conditional node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean BTNode __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTNode : __new ( run : fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action ) You can also construct an anonymous node like: prism.BTNode(function(level, actor) return true end) For this reason simple nodes like succeeders, inverters, failers etc. should just be created using these anonymous nodes. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean BTRoot __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTRoot : __new ( children : BTNode[]) Creates a new BTRoot. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTRoot : run ( level : Level, actor : Actor, controller : ControllerComponent) -> Action Runs the behavior tree starting from this root node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean BTSelector __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSelector : __new ( children : BTNode[]) Creates a new BTSelector. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSelector : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the selector node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean BTSequence __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSequence : __new ( children : BTNode[]) Creates a new BTSequence. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSequence : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the sequence node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean BTSucceeder __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSucceeder : __new ( node : BTNode) Creates a new BTSucceeder. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. node BTNode The base class for all nodes in the behavior tree. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSucceeder : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the succeeder node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Bitmask BitmaskBuffer __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BitmaskBuffer : __new ( w : integer, h : integer) Constructor for the BitmaskBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown buffer ffi .cdata* Initialize the buffer with zeroed 16-bit values className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) BitmaskBuffer : clear () Clear the buffer, setting all values to zero. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getBit ( method ) BitmaskBuffer : getBit ( x : integer, y : integer, bitIndex : integer) -> value : boolean Get the value of a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to retrieve. @ return value \u2014 The value of the bit (true if set, false if not). getIndex ( method ) BitmaskBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array. getMask ( method ) BitmaskBuffer : getMask ( x : integer, y : integer) -> value : integer Get the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The 16-bit mask value. h integer instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setBit ( method ) BitmaskBuffer : setBit ( x : integer, y : integer, bitIndex : integer, v : boolean) Set a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to set. @ param v \u2014 The value to set (true to set, false to clear). setMask ( method ) BitmaskBuffer : setMask ( x : integer, y : integer, value : integer) Set the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param value \u2014 The 16-bit value to set. stripName boolean w integer BooleanBuffer __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BooleanBuffer : __new ( w : integer, h : integer) Constructor for the BooleanBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown buffer ffi .cdata* Initialize the buffer with false values className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) BooleanBuffer : clear () Clear the buffer, setting all values to false. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) BooleanBuffer : get ( x : integer, y : integer) -> value : boolean Get the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The value at the given coordinates. getIndex ( method ) BooleanBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array. h integer The height of the buffer. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) BooleanBuffer : set ( x : integer, y : integer, v : boolean) Set the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param v \u2014 The value to set. stripName boolean w integer The width of the buffer. BoundingBox __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BoundingBox : __new ( x : any, y : any, i : any, j : any) __tostring ( method ) BoundingBox : __tostring () -> string _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. contains ( method ) BoundingBox : contains ( x : any, y : any) -> boolean deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getHeight ( method ) BoundingBox : getHeight () -> unknown getWidth ( method ) BoundingBox : getWidth () -> unknown i any instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. intersects ( method ) BoundingBox : intersects ( other : any) -> boolean is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. j any mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean union ( method ) BoundingBox : union ( other : any) -> BoundingBox x any y any Button __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props ButtonProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check ButtonInit ButtonProps _internal Inky .Props.Internal disabled boolean disabledQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser hovered boolean hoveredQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser onPress fun ( pointer : Inky.Pointer) ? a function called after pressing the button onRelease fun ( pointer : Inky.Pointer) ? a function called after releasing the button pressed boolean whether the button is pressed pressedQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser tileset love .Image Drawable image type. Open in Browser toggle boolean whether the button stays pressed after clicking unpressedQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser untoggle boolean if the button is toggleable, whether you can untoggle Camera __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Camera : __new ( x : any, y : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getPosition ( method ) Camera : getPosition () -> x : number 2. y : number @ return x \u2014 The x position. @ return y \u2014 The y position. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. move ( method ) Camera : move ( dx : number, dy : number) pop ( method ) Camera : pop () Pops the camera's transform. Call this after drawing. position Vector2 prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) Camera : push () Pushes the camera's transform. Call this before drawing. rotation number scale Vector2 scaleAroundPoint ( method ) Camera : scaleAroundPoint ( factorX : number, factorY : number, pointX : number, pointY : number) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setPosition ( method ) Camera : setPosition ( x : number, y : number) setRotation ( method ) Camera : setRotation ( rotation : number) setScale ( method ) Camera : setScale ( scaleX : number, scaleY : number) stripName boolean toWorldSpace ( method ) Camera : toWorldSpace ( x : number, y : number) -> number 2. number Cell __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Cell : __new () Constructor for the Cell class. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) Cell : afterAction ( level : Level, actor : Actor, action : Action) Called right after an action is taken on the cell. @ param level \u2014 The level where the action took place. @ param actor \u2014 The actor that took the action. @ param action \u2014 The action that was taken. allowedMovetypes string [] ? beforeAction ( method ) Cell : beforeAction ( level : Level, actor : Actor, action : Action) Called right before an action takes place on this cell. className string A unique name for this class. By convention this should match the annotation name you use. collisionMask integer Defines whether a cell can moved through. deserialize function Object. deserialize ( data : any) -> unknown drawable DrawableComponent extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getComponent ( method ) Cell : getComponent ( component : any) -> DrawableComponent instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Displayed in the user interface. onEnter ( method ) Cell : onEnter ( level : Level, actor : Actor) Called when an actor enters the cell. @ param level \u2014 The level where the actor entered the cell. @ param actor \u2014 The actor that entered the cell. onLeave ( method ) Cell : onLeave ( level : Level, actor : Actor) Called when an actor leaves the cell. @ param level \u2014 The level where the actor left the cell. @ param actor \u2014 The actor that left the cell. opaque boolean Defines whether a cell can be seen through. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean ColliderComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ColliderComponent : __new ( options : ColliderOptions) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mask integer mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean ColliderOptions allowedMovetypes string [] CollisionMask Color4 BLACK Color4 Predefined colors BLUE Color4 GREEN Color4 RED Color4 TRANSPARENT Color4 WHITE Color4 __add function Color4. __add ( a : Color4, b : Color4) -> The : Color4 Adds two colors together. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 sum of the two colors. __call function __eq function Color4. __eq ( a : Color4, b : Color4) -> True : boolean Checks equality between two colors. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return True \u2014 if the colors are equal, false otherwise. __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __mul function Color4. __mul ( self : Color4, scalar : number) -> The : Color4 Multiplies the color's components by a scalar. @ param scalar \u2014 The scalar value. @ return The \u2014 scaled color. __new ( method ) Color4 : __new ( r : number, g : number, b : number, a : number) Constructor for Color4 accepts red, green, blue, and alpha values. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1). __sub function Color4. __sub ( a : Color4, b : Color4) -> The : Color4 Subtracts one color from another. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 difference of the two colors. __tostring ( method ) Color4 : __tostring () -> The : string Creates a string representation of the color. @ return The \u2014 string representation. __unm function Color4. __unm ( self : Color4) -> The : Color4 Negates the color's components. @ return The \u2014 negated color. _serializationBlacklist table a number The alpha component (0-1). adopt ( method ) Object : adopt ( o : any) -> unknown b number The blue component (0-1). clamp ( method ) Color4 : clamp () -> The : Color4 Clamps the components of the color between 0 and 1. @ return The \u2014 clamped color. className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) Color4 : copy () -> A : Color4 Returns a copy of the color. @ return A \u2014 copy of the color. decompose ( method ) Color4 : decompose () -> r : number 2. g : number 3. b : number 4. a : number Returns the components of the color as numbers. @ return r,g,b,a \u2014 The components of the color. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fromHex function Color4. fromHex ( hex : number) Constructor for Color4 that accepts a hexadecimal number. @ param hex \u2014 A hex number representing a color, e.g. 0xFFFFFF. Alpha is optional and defaults to 1. g number The green component (0-1). instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. lerp ( method ) Color4 : lerp ( target : Color4, t : number) -> The : Color4 Linearly interpolates between two colors. @ param target \u2014 The target color. @ param t \u2014 A value between 0 and 1, where 0 is this color and 1 is the target color. @ return The \u2014 interpolated color. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. r number The red component (0-1). serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Component __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean ControllerComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table act ( method ) ControllerComponent : act ( level : any, actor : any) -> Action adopt ( method ) Object : adopt ( o : any) -> unknown blackboard table | nil checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean DebugMessage __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) DebugMessage : __new ( message : string) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. message string A human readable message for why we stopped her. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Decision __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean validateResponse ( method ) Decision : validateResponse () Display __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Display : __new ( spriteAtlas : SpriteAtlas, cellSize : Vector2, attachable : SpectrumAttachable) Initializes a new Display instance. @ param spriteAtlas \u2014 The sprite atlas for rendering. @ param cellSize \u2014 Size of each cell in pixels. @ param attachable \u2014 Object containing cells and actors to render. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterDrawActors ( method ) Display : afterDrawActors () Hook for custom behavior after drawing actors. attachable SpectrumAttachable The current level being displayed. beforeDrawActors ( method ) Display : beforeDrawActors () Hook for custom behavior before drawing actors. beforeDrawCells ( method ) Display : beforeDrawCells () Hook for custom behavior before drawing cells. buildSenseInfo function Display. buildSenseInfo ( primary : SensesComponent[], secondary : SensesComponent[]) -> SparseGrid 2. SparseGrid 3. table 4. table 5. SparseGrid @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses. camera Camera The camera used to render the display. cellSize Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Display : draw () Renders the display. drawActor ( method ) Display : drawActor ( actor : Actor, alpha ? : number , color ? : Color4 , drawnSet ? : table , x : any, y : any) Draws an actor. @ param actor \u2014 The actor to draw. @ param alpha \u2014 Optional alpha transparency. @ param color \u2014 Optional color tint. @ param drawnSet \u2014 Optional set to track drawn actors. drawDrawable function Display. drawDrawable ( drawable : DrawableComponent, spriteAtlas : SpriteAtlas, cellSize : Vector2, x : integer, y : integer, color ? : Color4 , alpha ? : number ) Draws a drawable object. @ param drawable \u2014 Drawable to render. @ param spriteAtlas \u2014 Sprite atlas to use. @ param cellSize \u2014 Size of each cell. @ param x \u2014 X-coordinate. @ param y \u2014 Y-coordinate. @ param color \u2014 Optional color tint. @ param alpha \u2014 Optional alpha transparency. drawPerspective ( method ) Display : drawPerspective ( primary : SensesComponent[], secondary : SensesComponent[]) Draws the perspective of primary and secondary senses. @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses. dt number Delta time for updates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCellUnderMouse ( method ) Display : getCellUnderMouse () -> integer 2. The : integer Gets the cell under the mouse cursor. @ return The \u2014 X and Y coordinates of the cell. getQuad function Display. getQuad ( spriteAtlas : SpriteAtlas, drawable : DrawableComponent) -> The : love.Quad| nil Retrieves the quad for a drawable. @ param spriteAtlas \u2014 The sprite atlas. @ param drawable \u2014 The drawable component. @ return The \u2014 quad used for rendering. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. message nil mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. override fun ( dt : integer, drawnSet : table< Actor , boolean >)| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setOverride ( method ) Display : setOverride ( functionFactory : fun ( display : Display, message : any): fun ( dt : number): boolean , message : any) Sets an override rendering function. @ param functionFactory \u2014 A factory for override functions. @ param message \u2014 Optional message to pass to the function. spriteAtlas SpriteAtlas The sprite atlas used for rendering graphics. stripName boolean update ( method ) Display : update ( dt : number) Updates the display state. @ param dt \u2014 Delta time for updates. DistanceType DrawableComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) DrawableComponent : __new ( index : string| integer , color : Color4) Index needs to be a string associated with a sprite in the SpriteAtlas, or an integer index associated with a sprite. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. color Color4 deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. index string | integer initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Editor __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Editor : __new ( attachable : any, display : any, fileEnabled : any) _serializationBlacklist table active boolean adopt ( method ) Object : adopt ( o : any) -> unknown attachable SpectrumAttachable camera Camera className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown display Display draw ( method ) Editor : draw () editorRoot EditorRoot execute ( method ) Editor : execute ( modification : Modification) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fileEnabled boolean filepath string | nil fillMode boolean instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. isActive ( method ) Editor : isActive () -> boolean keybindsEnabled boolean keypressed ( method ) Editor : keypressed ( key : any, scancode : any) mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) Editor : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) Editor : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) Editor : mousereleased ( x : any, y : any, button : any) placeable Actor | Cell | nil An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. redo ( method ) Editor : redo () redoStack Modification [] selectorMode string selectorModes table < string , string > serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setAttachable ( method ) Editor : setAttachable ( attachable : SpectrumAttachable) startEditing ( method ) Editor : startEditing () stripName boolean textinput ( method ) Editor : textinput ( text : any) tool Tool undo ( method ) Editor : undo () undoStack Modification [] update ( method ) Editor : update ( dt : any) wheelmoved ( method ) Editor : wheelmoved ( dx : any, dy : any) EditorGrid __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props EditorGridProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check EditorGridInit EditorGridProps _internal Inky .Props.Internal attachable SpectrumAttachable display Display editor Editor offset Vector2 scale Vector2 EditorRoot __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props EditorRootProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check EditorRootProps _internal Inky .Props.Internal attachable SpectrumAttachable display Display editor Editor gridPosition Vector2 quit boolean scale Vector2 EditorState __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EditorState : __new ( attachable : SpectrumAttachable, display : any, fileEnabled : any) Create a new Editor managing gamestate, attached to a SpectrumAttachable, this is a Level|MapBuilder interface. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) EditorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any) EllipseModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EllipseModification : __new ( placeable : Actor| Cell , center : any, rx : any, ry : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 center any className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) EllipseModification : execute ( attachable : SpectrumAttachable, editor : Editor) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. rx any ry any serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. EllipseTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown center Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EllipseTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) EllipseTool : mouseclicked ( editor : Editor, attachable : any, x : number, y : number) mousereleased ( method ) EllipseTool : mousereleased ( editor : Editor, level : any, x : number, y : number) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance. EraseModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EraseModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) EraseModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. EraseTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EraseTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EraseTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) EraseTool : getCurrentRect () -> topleftx : number ? 2. toplefy : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) EraseTool : mouseclicked ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) EraseTool : mousereleased ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) -> nil @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) EraseTool : update ( dt : number, editor : Editor) FilePanel __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props FilePanelProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check FilePanelInit FilePanelProps _internal Inky .Props.Internal editor Editor name string open boolean overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser scale Vector2 Fill __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bucket ( method ) Fill : bucket ( attachable : SpectrumAttachable, x : any, y : any) className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals. drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) Fill : mouseclicked ( editor : Editor, level : Level, cellx : number, celly : number) Begins a paint drag. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked. mousereleased ( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release. overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Fill : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. Fraction __add function Fraction. __add ( lhs : any, rhs : any) __call function __eq function Fraction. __eq ( lhs : any, rhs : any) -> boolean __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __le function Fraction. __le ( lhs : any, rhs : any) -> boolean __lt function Fraction. __lt ( lhs : any, rhs : any) -> boolean __mul ( method ) Fraction : __mul ( other : any) __new ( method ) Fraction : __new ( numerator : any, denominator : any) __sub function Fraction. __sub ( lhs : any, rhs : any) __tostring ( method ) Fraction : __tostring () -> unknown __unm ( method ) Fraction : __unm () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. denominator any deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. numerator any prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean tonumber ( method ) Fraction : tonumber () -> unknown GameState __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) GameState : draw () Called on each draw. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress. load ( method ) GameState : load () Called when the gamestate is started. manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousepressed ( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) GameState : update ( dt : any) Called on each update. wheelmoved ( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved. GameStateManager __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) GameStateManager : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) GameStateManager : draw () Called each draw, calls draw on top state in stack. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameStateManager : keypressed ( key : any, scancode : any) Called on keypress, calls keypressed on top state in stack mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) GameStateManager : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) GameStateManager : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) mousereleased ( method ) GameStateManager : mousereleased ( x : any, y : any, button : any) pop ( method ) GameStateManager : pop () -> unknown Pops the state from the top of the stack. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) GameStateManager : push ( state : GameState) @ param state \u2014 State to push to the top of the stack. replace ( method ) GameStateManager : replace ( state : GameState) @ param state \u2014 Swap the top of the stack with this state. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stateStack table stripName boolean textinput ( method ) GameStateManager : textinput ( text : any) update ( method ) GameStateManager : update ( dt : any) Called each update, calls update on top state in stack. wheelmoved ( method ) GameStateManager : wheelmoved ( dx : any, dy : any) Grid __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Grid : __new ( w : integer, h : integer, initialValue : < T>) -> The : Grid<< T >> The constructor for the 'Grid' class. Initializes the grid with the specified dimensions and initial value. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param initialValue \u2014 The initial value to fill the grid with. @ return The \u2014 initialized grid. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. data any [] The data stored in the grid. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fill ( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with. fromData ( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid. get ( method ) Grid : get ( x : integer, y : integer) -> value : < T> ? Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if out of bounds. getIndex ( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds. h integer The height of the grid. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) Grid : set ( x : integer, y : integer, value : < T>) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. stripName boolean w integer The width of the grid. IBehavior __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run fun ( self : any, level : Level, actor : Actor, controller : ControllerComponent): Action serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Inky.Element __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props Inky .Props|{ [ string ]: any } render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check Inky.Element.Draw Inky.Element.Effect Inky.Element.Initializer Inky.Element.Internal _depth number _draw fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ) _effects { [ string ]: fun ( element : Inky.Element): nil [] } _element Inky .Element _h number _initializer fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ) _isInitialized boolean _onCallbacks { [ string ]: fun ( element : Inky.Element, ... any ): nil [] } _onDisableCallbacks fun ( element : Inky.Element): nil [] _onEnableCallbacks fun ( element : Inky.Element): nil [] _onPointerCallbacks { [ string ]: fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil [] } _onPointerEnterCallbacks fun ( element : Inky.Element, pointer : Inky.Pointer): nil [] _onPointerExitCallbacks fun ( element : Inky.Element, pointer : Inky.Pointer): nil [] _onPointerInHierarchyCallbacks { [ string ]: fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil [] } _overlapCheck fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean _props Inky .Props|{ [ string ]: any } _scene Inky .Scene _w number _x number _y number constructor ( method ) Inky .Element.Internal: constructor ( element : Inky.Element, scene : Inky.Scene, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) doesPointPassBoundingboxCheck ( method ) Inky .Element.Internal: doesPointPassBoundingboxCheck ( px : number, py : number) -> boolean doesPointPassOverlapCheck ( method ) Inky .Element.Internal: doesPointPassOverlapCheck ( px : number, py : number) -> boolean doesViewDiffer ( method ) Inky .Element.Internal: doesViewDiffer ( x : number, y : number, w : number, h : number) -> boolean getDepth ( method ) Inky .Element.Internal: getDepth () -> number getProps ( method ) Inky .Element.Internal: getProps () -> Inky .Props|{ [ string ]: any } getView ( method ) Inky .Element.Internal: getView () -> x : number 2. y : number 3. w : number 4. h : number initialize ( method ) Inky .Element.Internal: initialize () isInitialized ( method ) Inky .Element.Internal: isInitialized () -> boolean on ( method ) Inky .Element.Internal: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element.Internal onDisable ( method ) Inky .Element.Internal: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element.Internal onEnable ( method ) Inky .Element.Internal: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element.Internal onPointer ( method ) Inky .Element.Internal: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element.Internal onPointerEnter ( method ) Inky .Element.Internal: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element.Internal onPointerExit ( method ) Inky .Element.Internal: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element.Internal onPointerInHierarchy ( method ) Inky .Element.Internal: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element.Internal raiseDisable ( method ) Inky .Element.Internal: raiseDisable () -> accepted : boolean raiseEnable ( method ) Inky .Element.Internal: raiseEnable () -> accepted : boolean raiseOn ( method ) Inky .Element.Internal: raiseOn ( eventName : string, ... any ) -> accepted : boolean raiseOnPointer ( method ) Inky .Element.Internal: raiseOnPointer ( eventName : string, pointer : Inky.Pointer, ... any ) -> accepted : boolean 2. consumed : boolean raiseOnPointerInHierarchy ( method ) Inky .Element.Internal: raiseOnPointerInHierarchy ( eventName : string, pointer : Inky.Pointer, ... any ) -> accepted : boolean raisePointerEnter ( method ) Inky .Element.Internal: raisePointerEnter ( pointer : Inky.Pointer) -> accepted : boolean raisePointerExit ( method ) Inky .Element.Internal: raisePointerExit ( pointer : Inky.Pointer) -> accepted : boolean render ( method ) Inky .Element.Internal: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element.Internal renderIntoScene ( method ) Inky .Element.Internal: renderIntoScene ( scene : Inky.Scene, x : number, y : number, w : number, h : number, depth : number) setView ( method ) Inky .Element.Internal: setView ( x : number, y : number, w : number, h : number) -> Inky .Element.Internal useEffect ( method ) Inky .Element.Internal: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element.Internal useOverlapCheck ( method ) Inky .Element.Internal: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element.Internal Inky.Element.OnCallback Inky.Element.OnDisableCallback Inky.Element.OnEnableCallback Inky.Element.OnPointerCallback Inky.Element.OnPointerEnterCallback Inky.Element.OnPointerExitCallback Inky.Element.OnPointerInHierarchyCallback Inky.Element.OverlapPredicate Inky.Pointer __getInternal ( method ) Inky .Pointer: __getInternal () -> Inky .Pointer.Internal Get the internal representation of the Pointer For internal use\\ Don't touch unless you know what you're doing _internal Inky .Pointer.Internal captureElement ( method ) Inky .Pointer: captureElement ( element : Inky.Element, shouldCapture ? : boolean ) -> Inky .Pointer Capture a Element, meaning all raised events will be able to be sent to it, even if it's not being hovered \\ See: * Inky.Element.onPointer * Inky.Element.onPointerInHierarchy constructor ( method ) Inky .Pointer: constructor ( scene : Inky.Scene) doesCaptureElement ( method ) Inky .Pointer: doesCaptureElement ( element : Inky.Element) -> boolean Get if the Pointer captures the Element doesOverlapAnyElement ( method ) Inky .Pointer: doesOverlapAnyElement () -> boolean Get if the Pointer overlaps any Elements doesOverlapElement ( method ) Inky .Pointer: doesOverlapElement ( element : Inky.Element) -> boolean Gets if the Pointer overlaps the Element getMode ( method ) Inky .Pointer: getMode () -> Inky .PointerMode Gets the mode of the Pointer getPosition ( method ) Inky .Pointer: getPosition () -> x : number ? 2. y : number ? Gets the position of the Pointer getTarget ( method ) Inky .Pointer: getTarget () -> ( Inky .Element) ? Gets the target of the Pointer isActive ( method ) Inky .Pointer: isActive () -> boolean Gets if the Pointer is active raise ( method ) Inky .Pointer: raise ( eventName : string, ... any ) -> boolean Raise a Pointer event, to be caught by Elements \\ See: * Inky.Element.onPointer * Inky.Element.onPointerInHierarchy setActive ( method ) Inky .Pointer: setActive ( active : boolean) -> Inky .Pointer Sets if the Pointer is active, to potentially enter or exit Elements \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback setPosition ( method ) Inky .Pointer: setPosition ( x : number, y : number) -> Inky .Pointer Sets the position of the Pointer, to potentially enter or exit Elements \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback setTarget ( method ) Inky .Pointer: setTarget ( target : Inky.Element) -> Inky .Pointer Sets the target of the Pointer, to potentially enter or exit Elements A 'target' Pointer is useful for keyboard navigation, or invoking events on Elements programmatically \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback Inky.Pointer.Internal _active boolean _capturedElements Inky .HashSet _mode Inky .PointerMode _overlappingElements Inky .HashSet _pointer ( Inky .Pointer) ? _scene ( Inky .Scene) ? _target ( Inky .Element) ? _x number ? _y number ? captureElement ( method ) Inky .Pointer.Internal: captureElement ( element : Inky.Element, shouldCapture ? : boolean ) -> Inky .Pointer.Internal constructor ( method ) Inky .Pointer.Internal: constructor ( pointer : Inky.Pointer, scene : Inky.Scene) doesCaptureElement ( method ) Inky .Pointer.Internal: doesCaptureElement ( element : Inky.Element) -> boolean doesOverlapAnyElement ( method ) Inky .Pointer.Internal: doesOverlapAnyElement () -> boolean doesOverlapElement ( method ) Inky .Pointer.Internal: doesOverlapElement ( element : Inky.Element) -> boolean getMode ( method ) Inky .Pointer.Internal: getMode () -> Inky .PointerMode getPosition ( method ) Inky .Pointer.Internal: getPosition () -> x : number ? 2. y : number ? getTarget ( method ) Inky .Pointer.Internal: getTarget () -> ( Inky .Element) ? isActive ( method ) Inky .Pointer.Internal: isActive () -> boolean raise ( method ) Inky .Pointer.Internal: raise ( eventName : string, ... any ) -> boolean setActive ( method ) Inky .Pointer.Internal: setActive ( active : boolean) -> Inky .Pointer.Internal setOverlappingElements ( method ) Inky .Pointer.Internal: setOverlappingElements ( overlappingElements ? : Inky .HashSet) setPosition ( method ) Inky .Pointer.Internal: setPosition ( x : number, y : number) -> Inky .Pointer.Internal setTarget ( method ) Inky .Pointer.Internal: setTarget ( target : Inky.Element) -> Inky .Pointer.Internal Inky.Props _internal Inky .Props.Internal Inky.Props.Internal changedValues Inky .HashSet constructor ( method ) Inky .Props.Internal: constructor () values { [ string ]: any } Inky.Scene __getInternal ( method ) Inky .Scene: __getInternal () -> Inky .Scene.Internal Get the internal representation of the Scene For internal use\\ Don't touch unless you know what you're doing _internal Inky .Scene.Internal beginFrame ( method ) Inky .Scene: beginFrame () -> Inky .Scene Begin a frame to render Elements in Note: A frame must have been begun before Elements can be drawn \\ See: Inky.Element.render constructor ( method ) Inky .Scene: constructor ( spatialHashSize ? : integer ) didBeginFrame ( method ) Inky .Scene: didBeginFrame () -> boolean Get if frame did begin finishFrame ( method ) Inky .Scene: finishFrame () -> Inky .Scene End a frame to render Elements in A frame must have been finished before Elements can be acted on raise ( method ) Inky .Scene: raise ( eventName : string, ... unknown ) -> Inky .Scene Raise a Scene event, to be caught by Elements \\ See: Inky.Element.OnCallback Inky.Scene.Internal _beganFrame boolean _beginElement ( method ) Inky .Scene.Internal: _beginElement ( element : Inky.Element, x : any, y : any, w : any, h : any) -> Inky .Scene.Internal _elements Inky .HashSet _elementsChanged boolean _finishElement ( method ) Inky .Scene.Internal: _finishElement ( element : Inky.Element) -> Inky .Scene.Internal _parentStack Inky .Element[] _parents { [ Inky .Element]: Inky .Element } _pointers Inky .HashSet _resolvePointerOverlappingElements ( method ) Inky .Scene.Internal: _resolvePointerOverlappingElements ( pointer : Inky.Pointer) -> Inky .Scene.Internal| nil _scene Inky .Scene _spatialHash Inky .SpatialHash _suppliedElements Inky .HashSet addPointer ( method ) Inky .Scene.Internal: addPointer ( pointer : Inky.Pointer) -> Inky .Scene.Internal beginFrame ( method ) Inky .Scene.Internal: beginFrame () -> Inky .Scene.Internal constructor ( method ) Inky .Scene.Internal: constructor ( scene : Inky.Scene, spatialHashSize ? : integer ) didBeginFrame ( method ) Inky .Scene.Internal: didBeginFrame () -> boolean Get if frame did begin finishFrame ( method ) Inky .Scene.Internal: finishFrame () -> Inky .Scene.Internal getElementParent ( method ) Inky .Scene.Internal: getElementParent ( element : Inky.Element) -> ( Inky .Element) ? onPointerActiveChanged ( method ) Inky .Scene.Internal: onPointerActiveChanged ( pointer : Inky.Pointer) onPointerPositionChanged ( method ) Inky .Scene.Internal: onPointerPositionChanged ( pointer : Inky.Pointer) onPointerTargetChanged ( method ) Inky .Scene.Internal: onPointerTargetChanged ( pointer : Inky.Pointer) raise ( method ) Inky .Scene.Internal: raise ( eventName : string, ... unknown ) Raise an event render ( method ) Inky .Scene.Internal: render ( element : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ) Inky.SpatialHash _cells Inky .HashSet[] _elements { [ Inky .Scene]: Inky .HashSet[] } _hash ( method ) Inky .SpatialHash: _hash ( x : integer, y : integer) -> hash : number _inverseHash ( method ) Inky .SpatialHash: _inverseHash ( hash : integer) -> x : integer 2. y : integer _size integer _toCell ( method ) Inky .SpatialHash: _toCell ( v : integer) -> cellV : integer _toCellBounds ( method ) Inky .SpatialHash: _toCellBounds ( x : number, y : number, w : number, h : number) -> topLeftCellX : integer 2. topLeftCellY : integer 3. bottomRightCellX : integer 4. bottomRightCellY : integer add ( method ) Inky .SpatialHash: add ( element : Inky.Element) -> Inky .SpatialHash constructor ( method ) Inky .SpatialHash: constructor ( size : any) getElementsAtPoint ( method ) Inky .SpatialHash: getElementsAtPoint ( x : integer, y : integer) -> Inky .HashSet move ( method ) Inky .SpatialHash: move ( element : Inky.Element) -> Inky .SpatialHash remove ( method ) Inky .SpatialHash: remove ( element : Inky.Element) -> Inky .SpatialHash Inky.SpatialHash.Cell Keybinding __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Keybinding : __new ( schema : table) Constructor for the Keybinding class. Initializes the keymap and modes with a predefined schema and defaults. @ param schema \u2014 A list of predefined keybindings with their schema and defaults. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) Keybinding : clear ( mode : string| nil ) Resets keybindings for a specific mode or all modes to their defaults. @ param mode \u2014 The mode to reset. If nil, resets all modes. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keymap table Stores modifications keypressed ( method ) Keybinding : keypressed ( key : string, mode : string| nil ) -> The : string| nil Handles key press events and retrieves the associated action if a binding exists. Falls back to the schema if no modification is found. @ param key \u2014 The key that was pressed. @ param mode \u2014 The mode to use for the keybinding. @ return The \u2014 action associated with the key, or nil if no binding exists. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. schema table Holds the schema for all modes, including \"default\" serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) Keybinding : set ( key : string, action : string, mode : string| nil ) Sets or updates a keybinding, validating it exists in the schema. @ param key \u2014 The key to bind. @ param action \u2014 The new action to associate with the key. @ param mode \u2014 An optional mode for the binding (defaults to \"default\"). stripName boolean Level RNG RNG The level's local random number generator, use this for randomness within the level like attack rolls. __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Level : __new ( map : Map, actors : [ Actor], systems : [ System], scheduler : any, seed : any) Constructor for the Level class. @ param map \u2014 The map to use for the level. @ param actors \u2014 A list of actors to _serializationBlacklist table actorStorage ActorStorage The main actor storage containing all of the level's actors. addActor ( method ) Level : addActor ( actor : Actor) Adds an actor to the level. Handles updating the component cache and inserting the actor into the sparse map. It will also add the actor to the scheduler if it has a controller. @ param actor \u2014 The actor to add. addComponent ( method ) Level : addComponent ( actor : Actor, component : Component) Adds a component to an actor. It handles updating the component cache and the opacity cache. You can do this manually, but it's easier to use this function. @ param actor \u2014 The actor to add the component to. @ param component \u2014 The component to add. addSystem ( method ) Level : addSystem ( system : System) Attaches a system to the level. This function will error if the system doesn't have a name or if a system with the same name already exists, or if the system has a requirement that hasn't been attached yet. @ param system \u2014 The system to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. computeFOV ( method ) Level : computeFOV ( origin : any, maxDepth : any, callback : any) debug boolean debugYield ( method ) Level : debugYield ( stringMessage : any) decision ActionDecision Used during deserialization to resume. deserialize function Object. deserialize ( data : any) -> unknown eachActor ( method ) Level : eachActor (... Component ) -> An : function This method returns an iterator that will return all actors in the level that have the given components. If no components are given it iterate over all actors. A thin wrapper over the inner ActorStorage. @ param ... \u2014 The components to filter by. @ return An \u2014 iterator that returns the next actor that matches the given components. eachActorAt ( method ) Level : eachActorAt ( x : number, y : number) -> iter : function Returns an iterator that will return all actors at the given position. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return iter \u2014 An iterator that returns the next actor at the given position. eachCell ( method ) Level : eachCell () -> fun (): number , number , < T > extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. findPath ( method ) Level : findPath ( startPos : Vector2, goalPos : Vector2, minDistance : any, mask : any) -> Path | nil Finds a path from startpos to endpos getAOE ( method ) Level : getAOE ( type : \"box\" | \"fov\" , position : Vector2, range : number) -> actors : table ? 2. fov : table ? Returns a list of all actors that are within the given range of the given position. The type parameter determines the type of range to use. Currently only \"fov\" and \"box\" are supported. The fov type uses a field of view algorithm to determine what actors are visible from the given position. The box type uses a simple box around the given position. @ param type \u2014 The type of range to use. @ param position \u2014 The position to check from. @ param range \u2014 The range to check. @ return actors @ return fov \u2014 A list of actors within the given range. type : | \"box\" | \"fov\" getActorByType ( method ) Level : getActorByType ( prototype : Actor) -> The : Actor| nil Returns the first actor that extends the given prototype, or nil if no actor is found. Useful for one offs like stairs in some games. @ param prototype \u2014 The prototype to check for. @ return The \u2014 first actor that extends the given prototype, or nil if no actor is found. getActorController ( method ) Level : getActorController ( actor : Actor) -> controller : ControllerComponent Gets the actor's controller. This is a utility function that checks the actor's conditions for an override controller and returns it if it exists. Otherwise it returns the actor's normal controller. @ param actor \u2014 The actor to get the controller for. @ return controller \u2014 The actor's controller. getActorsAt ( method ) Level : getActorsAt ( x : number, y : number) -> A : table Returns a list of all actors at the given position. A thin wrapper over the inner ActorStorage. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return A \u2014 list of all actors at the given position. getCell ( method ) Level : getCell ( x : number, y : number) -> The : Cell Gets the cell at the given position. @ param x \u2014 The x component of the position to get. @ param y \u2014 The y component of the position to get. @ return The \u2014 cell at the given position. getCellOpaque ( method ) Level : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the given position is opaque, false otherwise. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is opaque, false otherwise. getCellPassable ( method ) Level : getCellPassable ( x : number, y : number, mask : integer) -> True : boolean Returns true if the cell at the given position is passable, false otherwise. Considers actors in the sparse map as well as the cell's passable property. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is passable, false otherwise. getID ( method ) Level : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the Level but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found. getOpacityCache ( method ) Level : getOpacityCache () -> map : BooleanBuffer Returns the opacity cache for the level. This generally shouldn't be used outside of systems that need to know about opacity. @ return map \u2014 The opacity cache for the level. getSystem ( method ) Level : getSystem ( className : string) -> system : System ? Gets a system by name. @ param className \u2014 The name of the system to get. @ return system \u2014 The system with the given name. hasActor ( method ) Level : hasActor ( actor : Actor) -> hasActor : boolean Returns true if the level contains the given actor, false otherwise. A thin wrapper over the inner ActorStorage. @ param actor \u2014 The actor to check for. @ return hasActor \u2014 True if the level contains the given actor, false otherwise. inBounds ( method ) Level : inBounds ( x : integer, y : integer) -> boolean Is there a cell at this x, y? Part of the interface with MapBuilder @ param x \u2014 The x component to check if in bounds. initialize ( method ) Level : initialize ( actors : [ Actor], systems : [ System]) initializeOpacityCache ( method ) Level : initializeOpacityCache () Initialize the opacity cache. This should be called after the level is created and before the game loop starts. It will initialize the opacity cache with the cell opacity cache. This is handled automatically by the Level class. initializePassabilityCache ( method ) Level : initializePassabilityCache () Initialize the passable cache. This should be called after the level is created and before the game loop starts. It will initialize the passable cache with the cell passable cache. This is handled automatically by the Level class. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. map Map The level's map. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. moveActor ( method ) Level : moveActor ( actor : Actor, pos : Vector2, skipSparseMap : boolean) Moves an actor to the given position. This function doesn't do any checking for overlaps or collisions. It's used by the moveActorChecked function, you should generally not invoke this yourself using moveActorChecked instead. @ param actor \u2014 The actor to move. @ param pos \u2014 The position to move the actor to. @ param skipSparseMap \u2014 If true the sparse map won't be updated. onDeserialize ( method ) Level : onDeserialize () opacityCache BooleanBuffer A cache of cell opacity || actor opacity for each cell. Used to speed up fov/lighting calculations. passableCache BitmaskBuffer A cache of cell passability || actor passability for each cell. Used to speed up pathfinding. performAction ( method ) Level : performAction ( action : Action, silent ? : boolean ) Executes an Action, updating the level's state and triggering any events through the systems attached to the Actor or Level respectively. It also updates the 'Scheduler' if the action isn't a reaction or free action. Lastly, it calls the 'onAction' method on the 'Cell' that the 'Actor' is standing on. @ param action \u2014 The action to perform. @ param silent \u2014 If true this action emits no events. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Level : removeActor ( actor : Actor) Removes an actor from the level. Handles updating the component cache and removing the actor from the sparse map. It will also remove the actor from the scheduler if it has a controller. @ param actor \u2014 The actor to remove. removeComponent ( method ) Level : removeComponent ( actor : Actor, component : Component) Removes a component from an actor. It handles updating the component cache and the opacity cache. @ param actor \u2014 The actor to remove the component from. @ param component \u2014 The component to remove. run ( method ) Level : run () Initializes the level, Update is the main game loop for a level. It's a coroutine that yields back to the main thread when it needs to wait for input from the player. This function is the heart of the game loop. scheduler Scheduler The main scheduler driving the loop of the game. serializationBlacklist table serialize function Object. serialize ( object : any) -> table setCell ( method ) Level : setCell ( x : number, y : number, cell : Cell) Sets the cell at the given position to the given cell. @ param x \u2014 The x component of the position to set. @ param y \u2014 The y component of the position to set. @ param cell \u2014 The cell to set. sparseMapCallback ( method ) Level : sparseMapCallback () -> function step ( method ) Level : step () stripName boolean systemManager SystemManager A table containing all of the systems active in the level, set in the constructor. trigger ( method ) Level : trigger ( eventName : any, ... any ) updateCaches ( method ) Level : updateCaches ( x : any, y : any) updateOpacityCache ( method ) Level : updateOpacityCache ( x : number, y : number) Updates the opacity cache at the given position. This should be called whenever an actor moves or a cell's opacity changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update. updatePassabilityCache ( method ) Level : updatePassabilityCache ( x : number, y : number) Updates the passability cache at the given position. This should be called whenever an actor moves or a cell's passability changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update. yield ( method ) Level : yield ( message : Message) -> Decision | nil Yields to the main 'thread', a coroutine in this case. This is called in run, and a few systems. Any time you want the interface to update you should call this. Avoid calling coroutine.yield directly, as this function will call the onYield method on all systems. LevelState __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LevelState : __new ( level : Level, display : Display, actionHandlers : table< fun (): fun ()>) Constructs a new LevelState. Sets up the game loop, initializes decision handlers, and binds custom callbacks for drawing. @ param level \u2014 The level object to be managed by this state. @ param display \u2014 The display object for rendering the level. @ param actionHandlers \u2014 A table of callback generators for handling actions. _serializationBlacklist table actionHandlers table < fun (): fun ()> adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. decision Decision The current decision being processed, if any. deserialize function Object. deserialize ( data : any) -> unknown display Display The display object used for rendering. draw ( method ) LevelState : draw () Draws the current state of the level, including the perspective of relevant actors. drawBeforeCells ( method ) LevelState : drawBeforeCells ( display : Display) Draws content before rendering cells. Override in subclasses for custom behavior. @ param display \u2014 The display object used for drawing. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. geometer EditorState An editor state for debugging or managing geometry. getManager ( method ) GameState : getManager () -> GameStateManager handleActionMessage ( method ) LevelState : handleActionMessage ( message : ActionMessage) Handles an action message by determining visibility and setting display overrides. @ param message \u2014 The action message to handle. handleMessage ( method ) LevelState : handleMessage ( message : any) Handles incoming messages from the coroutine. Processes decisions, action messages, and debug messages as appropriate. @ param message \u2014 The message to handle. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress. level Level The level object representing the game environment. load ( method ) GameState : load () Called when the gamestate is started. manager GameStateManager message ActionMessage The most recent action message. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousepressed ( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table shouldAdvance ( method ) LevelState : shouldAdvance () -> shouldAdvance : boolean| nil Determines if the coroutine should proceed to the next step. @ return shouldAdvance \u2014 True if the coroutine should advance; false otherwise. stripName boolean time integer unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) LevelState : update ( dt : number) Updates the state of the level. Advances the coroutine and processes decisions or messages if necessary. @ param dt \u2014 The time delta since the last update. updateCoroutine thread updateDecision ( method ) LevelState : updateDecision ( dt : number, actor : Actor, decision : ActionDecision) This method is invoked each update when a decision exists and its response is not yet valid.. Override this method in subclasses to implement custom decision-handling logic. @ param dt \u2014 The time delta since the last update. @ param actor \u2014 The actor responsible for making the decision. @ param decision \u2014 The decision being updated. wheelmoved ( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved. LineModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LineModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) LineModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. LineTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LineTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) LineTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) LineTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) LineTool : mousereleased ( editor : Editor) origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean to Vector2 update ( method ) LineTool : update ( dt : number, editor : Editor) LuaLS Map __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Map : __new ( w : number, h : number, initialValue : Cell) The constructor for the 'Map' class. Initializes the map with the specified dimensions and initial value, and sets up the opacity caches. @ param w \u2014 The width of the map. @ param h \u2014 The height of the map. @ param initialValue \u2014 The initial value to fill the map with. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. data any [] The data stored in the grid. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fill ( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with. fromData ( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid. get ( method ) Map : get ( x : number, y : number) -> cell : Cell Gets the cell at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return cell \u2014 The cell at the specified coordinates. getCellOpaque ( method ) Map : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the specified coordinates is opaque, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is opaque, false otherwise. getCellPassable ( method ) Map : getCellPassable ( x : number, y : number, mask : any) -> True : boolean Returns true if the cell at the specified coordinates is passable, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is passable, false otherwise. getIndex ( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds. h integer The height of the grid. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onDeserialize ( method ) Map : onDeserialize () opacityCache BooleanBuffer Caches the opaciy of the cell + actors in each tile for faster fov calculation. passableCache BitmaskBuffer A class representing a 2D bitmask buffer using 16-bit integers. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table serialize function Object. serialize ( object : any) -> table set ( method ) Map : set ( x : number, y : number, cell : Cell) Sets the cell at the specified coordinates to the given value. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param cell \u2014 The cell to set. stripName boolean updateCaches ( method ) Map : updateCaches ( x : number, y : number) Updates the opacity cache at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. w integer The width of the grid. MapBuilder __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) MapBuilder : __new ( initialValue : Cell) The constructor for the 'MapBuilder' class. Initializes the map with an empty data table and actors list. @ param initialValue \u2014 The initial value to fill the map with. _serializationBlacklist table actors ActorStorage A list of actors present in the map. addActor ( method ) MapBuilder : addActor ( actor : table, x ? : number , y ? : number ) Adds an actor to the map at the specified coordinates. @ param actor \u2014 The actor to add. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. addPadding ( method ) MapBuilder : addPadding ( width : number, cell : Cell) Adds padding around the map with a specified width and cell value. @ param width \u2014 The width of the padding to add. @ param cell \u2014 The cell value to use for padding. adopt ( method ) Object : adopt ( o : any) -> unknown blit ( method ) MapBuilder : blit ( source : MapBuilder, destX : number, destY : number, maskFn : fun ( x : integer, y : integer, source : Cell, dest : Cell)| nil ) Blits the source MapBuilder onto this MapBuilder at the specified coordinates. @ param source \u2014 The source MapBuilder to copy from. @ param destX \u2014 The x-coordinate of the top-left corner in the destination MapBuilder. @ param destY \u2014 The y-coordinate of the top-left corner in the destination MapBuilder. @ param maskFn \u2014 A callback function for masking. Should return true if the cell should be copied, false otherwise. build ( method ) MapBuilder : build () -> Map 2. actors : table Builds the map and returns the map and list of actors. Converts the sparse grid to a contiguous grid. @ return actors \u2014 map and the list of actors. className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseGrid : clear () Clears all values in the sparse grid. data table debug boolean deserialize function Object. deserialize ( data : any) -> unknown drawEllipse ( method ) MapBuilder : drawEllipse ( cx : number, cy : number, rx : number, ry : number, cell : Cell) Draws an ellipse on the map. @ param cx \u2014 The x-coordinate of the center. @ param cy \u2014 The y-coordinate of the center. @ param rx \u2014 The radius along the x-axis. @ param ry \u2014 The radius along the y-axis. @ param cell \u2014 The cell to fill the ellipse with. drawLine ( method ) MapBuilder : drawLine ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a line on the map using Bresenham's line algorithm. @ param x1 \u2014 The x-coordinate of the starting point. @ param y1 \u2014 The y-coordinate of the starting point. @ param x2 \u2014 The x-coordinate of the ending point. @ param y2 \u2014 The y-coordinate of the ending point. @ param cell \u2014 The cell to draw the line with. drawRectangle ( method ) MapBuilder : drawRectangle ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a rectangle on the map. @ param x1 \u2014 The x-coordinate of the top-left corner. @ param y1 \u2014 The y-coordinate of the top-left corner. @ param x2 \u2014 The x-coordinate of the bottom-right corner. @ param y2 \u2014 The y-coordinate of the bottom-right corner. @ param cell \u2014 The cell to fill the rectangle with. each ( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry. eachActor ( method ) MapBuilder : eachActor (... any ) -> function eachActorAt ( method ) MapBuilder : eachActorAt ( x : any, y : any) -> function eachCell ( method ) MapBuilder : eachCell () -> fun ( x : integer, y : integer, V : any) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) MapBuilder : get ( x : number, y : number) -> value : any Gets the value at the specified coordinates, or the initialValue if not set. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or the initialValue if not set. getActorsAt fun ( self : any, x : integer, y : integer) getCell ( method ) MapBuilder : getCell ( x : any, y : any) -> unknown inBounds ( method ) MapBuilder : inBounds ( x : any, y : any) -> boolean initialValue Cell The initial value to fill the map with. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) MapBuilder : removeActor ( actor : table) Removes an actor from the map. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) MapBuilder : set ( x : number, y : number, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. setCell ( method ) MapBuilder : setCell ( x : any, y : any, value : any) Mirror set. stripName boolean MapGeneratorState __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) MapGeneratorState : __new ( generator : fun ( mapbuilder : MapBuilder): fun ()) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. generator thread getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) MapGeneratorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any) Message __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean Modification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) Modification : execute ( attachable : SpectrumAttachable, editor : Editor) Executes the modification. Override this method in subclasses to define the behavior of the modification. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placed table prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. Neighborhood Object __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean OpaqueComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean PasteModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PasteModification : __new ( cells : SparseGrid, actors : SparseMap, topLeft : Vector2) _serializationBlacklist table actors SparseMap A sparse grid of buckets that objects can be placed into. Used for tracking actors by x,y position in Level. adopt ( method ) Object : adopt ( o : any) -> unknown cells SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) PasteModification : execute ( attachable : SpectrumAttachable, editor : Editor) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placed table prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topLeft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. Path __call function __index Path A class to represent the A* path and its cost __new ( method ) Path : __new ( path : Vector2[], costIndex : integer[]) -> Path Constructor for the Path class _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. cost number The total cost to traverse the path costIndex integer [] deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getPath ( method ) Path : getPath () -> Vector2 [] Get the path as a table of nodes getTotalCost ( method ) Path : getTotalCost () -> number Get the total cost of the path instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. length ( method ) Path : length () -> integer Get the length of the path (number of nodes) mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. path Vector2 [] The path as an ordered list of Vector2 nodes pop ( method ) Path : pop () -> Vector2 | nil Pop the first node from the path @ return \u2014 The removed node, or nil if the path is empty popBack ( method ) Path : popBack () -> unknown | nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean totalCostAt ( method ) Path : totalCostAt ( index : integer) -> number Get the total cost at a specific index in the path @ param index \u2014 The index in the path @ return \u2014 The total cost up to the specified index trim ( method ) Path : trim ( maxCost : number) -> Path Trim the path to a given total cost @ param maxCost \u2014 The maximum allowable cost for the trimmed path @ return \u2014 A new Path object with the trimmed path PenModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PenModification : __new ( placeable : Actor| Cell , locations : SparseGrid) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) PenModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. PenTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown dragging boolean draw ( method ) PenTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) PenTool : mouseclicked ( editor : Editor, level : any, x : number, y : number) mousereleased ( method ) PenTool : mousereleased ( editor : Editor, level : any, x : number, y : number) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) PenTool : update ( dt : number, editor : Editor) Placeable PlayerControllerComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table act ( method ) PlayerControllerComponent : act ( level : Level, actor : Actor) -> Action | nil adopt ( method ) Object : adopt ( o : any) -> unknown blackboard table | nil checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean PrefabEditorState __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PrefabEditorState : __new ( mb : SpectrumAttachable) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) PrefabEditorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any) PriorityQueue __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PriorityQueue : __new () _bubbleDown ( method ) PriorityQueue : _bubbleDown ( i : integer) Bubble down the element at index i to its proper place in the heap _bubbleUp ( method ) PriorityQueue : _bubbleUp ( i : integer) Bubble up the element at index i to its proper place in the heap _heap table _serializationBlacklist table _swap ( method ) PriorityQueue : _swap ( i : integer, j : integer) Swap elements at indices i and j in the heap adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. isEmpty ( method ) PriorityQueue : isEmpty () -> boolean mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. pop ( method ) PriorityQueue : pop () -> < T >| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) PriorityQueue : push ( data : any, priority : integer) Push a new element to the PriorityQueue. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table size ( method ) PriorityQueue : size () -> integer stripName boolean Proto Quadrant __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Quadrant : __new ( cardinal : any, origin : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown cardinal any className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. ox unknown oy unknown prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean transform ( method ) Quadrant : transform ( row : any, col : any) -> unknown 2. unknown Queue __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Queue : __new () Initializes a new Queue instance. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) Queue : clear () Removes all elements from the queue. contains ( method ) Queue : contains ( value : any) -> True : boolean Checks if the queue contains a specific value. @ param value \u2014 The value to check for. @ return True \u2014 if the value is in the queue, false otherwise. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) Queue : empty () -> True : boolean Checks if the queue is empty. @ return True \u2014 if the queue is empty, false otherwise. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. first integer instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. last integer mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. peek ( method ) Queue : peek () -> The : any Returns the element at the start of the queue without removing it. @ return The \u2014 value at the start of the queue. pop ( method ) Queue : pop () -> The : any Removes and returns the element from the start of the queue. @ return The \u2014 value at the start of the queue. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) Queue : push ( value : any) Adds an element to the end of the queue. @ param value \u2014 The value to be added to the queue. queue table remove ( method ) Queue : remove ( value : any) -> True : boolean Removes the first occurrence of the specified value from the queue. @ param value \u2014 The value to be removed from the queue. @ return True \u2014 if the value was removed, false otherwise. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table size ( method ) Queue : size () -> The : number Returns the number of elements in the queue. @ return The \u2014 size of the queue. stripName boolean RNG __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RNG : __new ( seed : any) Initializes a new RNG instance. @ param seed \u2014 The seed for the RNG (optional). _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown carrier integer className string A unique name for this class. By convention this should match the annotation name you use. clone ( method ) RNG : clone () -> The : RNG Clones the RNG. @ return The \u2014 cloned RNG. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getNormal ( method ) RNG : getNormal ( mean : number, stddev : number) -> normal : number Gets a normally distributed random number with the given mean and standard deviation. @ param mean \u2014 The mean (optional, default is 0). @ param stddev \u2014 The standard deviation (optional, default is 1). @ return normal \u2014 A normally distributed random number. getPercentage ( method ) RNG : getPercentage () -> percentage : number Gets a random percentage between 1 and 100. @ return percentage \u2014 A random percentage. getSeed ( method ) RNG : getSeed () -> seed : any Gets the current seed. @ return seed \u2014 The current seed. getState ( method ) RNG : getState () -> The : table Gets the current state of the RNG. @ return The \u2014 current state. getUniform ( method ) RNG : getUniform () -> uniform : number Gets a uniform random number between 0 and 1. @ return uniform \u2014 A uniform random number. getUniformInt ( method ) RNG : getUniformInt ( lowerBound : number, upperBound : number) -> uniformInteger : number Gets a uniform random integer between lowerBound and upperBound. @ param lowerBound \u2014 The lower bound. @ param upperBound \u2014 The upper bound. @ return uniformInteger \u2014 A uniform random integer. getWeightedValue ( method ) RNG : getWeightedValue ( tbl : table<< K >, < V >>) -> value : < V> Gets a random value from a weighted table. @ param tbl \u2014 The weighted table. @ return value \u2014 The selected value. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. random ( method ) RNG : random ( a : number, b : number) -> A : number Gets a random number. @ param a \u2014 The lower threshold (optional). @ param b \u2014 The upper threshold (optional). @ return A \u2014 random number. randomseed function seed string serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setSeed ( method ) RNG : setSeed ( seed : string) Sets the seed for the RNG. @ param seed \u2014 The seed to set (optional). setState ( method ) RNG : setState ( stateTable : table) Sets the state of the RNG. @ param stateTable \u2014 The state to set. state0 integer state1 integer state2 integer stripName boolean RectModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RectModification : __new ( placeable : Actor| Cell , topLeft : Vector2, bottomRight : Vector2, fillMode : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomRight Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) RectModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fillMode any instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeBoundaryCell ( method ) RectModification : placeBoundaryCell ( attachable : SpectrumAttachable, x : number, y : number) Helper function to place a cell on the boundary placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topLeft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. RectTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RectTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) RectTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) RectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) RectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) RectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) RectTool : update ( dt : number, editor : Editor) Row __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Row : __new ( depth : any, startSlope : any, endSlope : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. depth integer deserialize function Object. deserialize ( data : any) -> unknown eachTile ( method ) Row : eachTile () -> function endSlope Fraction extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) Row : next () -> Row prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. roundTiesDown function Row. roundTiesDown ( n : any) -> integer roundTiesUp function Row. roundTiesUp ( n : any) -> integer serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table startSlope Fraction stripName boolean Scheduler __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Scheduler : __new () Constructor for the Scheduler class. Initializes an empty queue and sets the actCount to 0. _serializationBlacklist table add ( method ) Scheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) Scheduler : empty () extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. has ( method ) Scheduler : has ( actor : Actor) -> hasActor : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return hasActor \u2014 True if the actor is in the scheduler, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) Scheduler : next () -> next : Actor Returns the next actor to act. @ return next \u2014 The actor who is next to act. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) Scheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean timestamp ( method ) Scheduler : timestamp () SelectTool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SelectTool : __new () _serializationBlacklist table actors SparseMap the copied actors from the attachable adopt ( method ) Object : adopt ( o : any) -> unknown cells Grid the copied cells from the attachable className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) SelectTool : copy ( attachable : SpectrumAttachable) deserialize function Object. deserialize ( data : any) -> unknown dragOrigin Vector2 where we started dragging from when moving a pasted selection dragging boolean whether we're dragging, either actively creating a selection or pasting one draw ( method ) SelectTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) SelectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) SelectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) SelectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 location of the first point in a selection (creating or pasted) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) paste ( method ) SelectTool : paste () pasted boolean whether a selection is currently pasted/active prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 location of the other point in a selection (creating or pasted) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) SelectTool : update ( dt : number, editor : Editor) SelectionGrid __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props SelectionGridProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check SelectionGridInit SelectionGridProps _internal Inky .Props.Internal display Display elements TileElement [] endRange number filtered number [] onSelect function overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeables Actor | Cell [] selected Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. size Vector2 the final size of a tile in editor startRange number SelectionPanel __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props SelectionPanelProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check SelectionPanelInit SelectionPanelProps _internal Inky .Props.Internal display Display editor Editor filtered number [] overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeables Actor | Cell [] selected Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. selectedText love .Text Drawable text. Open in Browser size Vector2 SensesComponent __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table actors ActorStorage An actor storage with the actors the player is aware of. adopt ( method ) Object : adopt ( o : any) -> unknown cells SparseGrid A sparse grid of cells representing the portion of the map the actor's senses reveal. checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown explored SparseGrid A sparse grid of cells the actor's senses have previously revealed. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) SensesComponent : initialize ( actor : Actor) instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unknown SparseMap < Vector2 > Unkown actors are things the player is aware of the location of, but not the components. SensesSystem __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed. afterActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. afterOpacityChanged ( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute. beforeActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. beforeMove ( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. global boolean A system defined global can only be attached to the Game object. It will see all events from all levels. initialize ( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string onActorAdded ( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added. onActorRemoved ( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed. onDescend ( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to. onMove ( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to. onTick ( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to. onTurn ( method ) SensesSystem : onTurn ( level : Level, actor : Actor) onTurnEnd ( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onYield ( method ) SensesSystem : onYield ( level : Level, event : Message) owner Level ? The level that holds this system. postInitialize ( method ) SensesSystem : postInitialize ( level : Level) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table The message system requires the Senses system. While we don't directly reference it here we do grab data off the Senses component serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table softRequirements string [] A table of optional requirements that ensure proper order if both Systems are attached. stripName boolean triggerRebuild ( method ) SensesSystem : triggerRebuild ( level : any, actor : any) SensesTracker __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SensesTracker : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. createSensedMaps ( method ) SensesTracker : createSensedMaps ( level : Level, curActor : Actor| nil ) deserialize function Object. deserialize ( data : any) -> unknown exploredCells SparseGrid A grid tracking cells that have been explored by any actor with a PlayerController. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. otherSensedActors SparseMap A map tracking actors sensed by other actors (excluding the current actor). otherSensedCells SparseGrid A grid tracking cells sensed by other actors (excluding the current actor). passableCallback ( method ) SensesTracker : passableCallback () -> function prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean totalSensedActors SparseMap A map tracking all actors sensed by the current actor or others. SimpleScheduler __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SimpleScheduler : __new () Constructor for the SimpleScheduler class. Initializes an empty queue and sets the round count to 0. _serializationBlacklist table add ( method ) SimpleScheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. currentQueue Queue A basic FIFO (First In, First Out) queue implementation. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) SimpleScheduler : empty () -> boolean extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. has ( method ) SimpleScheduler : has ( actor : Actor) -> True : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return True \u2014 if the actor is in the scheduler, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) SimpleScheduler : next () -> The : Actor Returns the next actor to act. Moves the actor to the next queue and returns the actor. If the current queue is empty, it swaps the current and next queues and increments the round count. @ return The \u2014 actor who is next to act. nextQueue Queue A basic FIFO (First In, First Out) queue implementation. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SimpleScheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove. roundCount integer serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean swapQueues ( method ) SimpleScheduler : swapQueues () Swaps the current and next queues. timestamp ( method ) SimpleScheduler : timestamp () -> The : number Returns the current round count as a timestamp. @ return The \u2014 current round count. SparseArray __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseArray : __new () Constructor for SparseArray. _serializationBlacklist table add ( method ) SparseArray : add ( item : any) -> index : number Adds an item to the sparse array. @ param item \u2014 The item to add. @ return index \u2014 The index where the item was added. adopt ( method ) Object : adopt ( o : any) -> unknown bake ( method ) SparseArray : bake () -> The : table Bakes the sparse array into a dense array. This removes all nil values and reassigns indices. @ return The \u2014 new dense array. className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseArray : clear () Clears the sparse array. data table Holds the actual values debugPrint ( method ) SparseArray : debugPrint () Prints the sparse array for debugging purposes. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. freeIndices table Tracks free indices get ( method ) SparseArray : get ( index : number) -> The : any Gets an item from the sparse array. @ param index \u2014 The index of the item. @ return The \u2014 item at the specified index, or nil if none exists. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SparseArray : remove ( index : number) Removes an item from the sparse array. @ param index \u2014 The index to remove the item from. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean SparseGrid __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseGrid : __new () -> SparseGrid The constructor for the 'SparseGrid' class. Initializes the sparse grid with an empty data table. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseGrid : clear () Clears all values in the sparse grid. data table deserialize function Object. deserialize ( data : any) -> unknown each ( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) SparseGrid : get ( x : integer, y : integer) -> value : any Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if not set. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) SparseGrid : set ( x : integer, y : integer, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. stripName boolean SparseMap __call function __count integer __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseMap : __new () The constructor for the 'SparseMap' class. Initializes the map and counters. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. contains ( method ) SparseMap : contains ( value : any) -> containsValue : boolean Checks where the specified value exists within the map. count ( method ) SparseMap : count () -> The : number Returns the total number of entries in the sparse map. @ return The \u2014 total number of entries. countCell ( method ) SparseMap : countCell ( x : integer, y : integer) -> The : number Returns the number of values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 number of values stored at the specified coordinates. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) SparseMap : each () -> An : function Returns an iterator over all entries in the sparse map. @ return An \u2014 iterator that returns the value, coordinates, and hash for each entry. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) SparseMap : get ( x : integer, y : integer) -> elements : table Gets the values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return elements \u2014 A set[actor]=bool of values stored at the specified coordinates, or an empty table if none. getByHash ( method ) SparseMap : getByHash ( hash : number) -> A : table Gets the values stored at the specified hash. @ param hash \u2014 The hash value of the coordinates. @ return A \u2014 table of values stored at the specified hash, or an empty table if none. has ( method ) SparseMap : has ( x : integer, y : integer, value : any) -> True : boolean Checks whether the specified value is stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to check. @ return True \u2014 if the value is stored at the specified coordinates, false otherwise. insert ( method ) SparseMap : insert ( x : integer, y : integer, val : any) Inserts a value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to insert. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. list table map table mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SparseMap : remove ( x : integer, y : integer, val : any) -> True : boolean Removes a value from the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to remove. @ return True \u2014 if the value was successfully removed, false otherwise. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean SpectrumAttachable __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table addActor fun ( self : any, actor : Actor) adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. debug boolean deserialize function Object. deserialize ( data : any) -> unknown eachActor fun ( self : any): fun () eachActorAt fun ( self : any, x : integer, y : integer): fun () eachCell fun ( self : any): fun () extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActorsAt fun ( self : any, x : integer, y : integer) getCell fun ( self : any, x : integer, y : integer): Cell inBounds fun ( self : any, x : integer, y : integer) instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor fun ( self : any, actor : Actor) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setCell fun ( self : any, x : integer, y : integer, cell : Cell| nil ) stripName boolean SpriteAtlas __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SpriteAtlas : __new ( imagePath : string, spriteData : table, names : string[]) The constructor for the SpriteAtlas class @ param imagePath \u2014 The path to the texture atlas image @ param spriteData \u2014 A table containing sprite names and their respective quads _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown drawByIndex ( method ) SpriteAtlas : drawByIndex ( index : number, x : number, y : number) Draws a sprite by index at the given position @ param index \u2014 The index of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite drawByName ( method ) SpriteAtlas : drawByName ( name : string, x : number, y : number) Draws a sprite by name at the given position @ param name \u2014 The name of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fromAtlased function SpriteAtlas. fromAtlased ( imagePath : string, jsonPath : string) -> The : SpriteAtlas Creates a SpriteAtlas from an Atlased JSON and PNG file @ param imagePath \u2014 The path to the texture atlas image @ param jsonPath \u2014 The path to the Atlased JSON file @ return The \u2014 created SpriteAtlas instance fromGrid function SpriteAtlas. fromGrid ( imagePath : string, cellWidth : number, cellHeight : number, names ? : table ) -> The : SpriteAtlas Creates a SpriteAtlas from a grid of cells @ param imagePath \u2014 The path to the texture atlas image @ param cellWidth \u2014 The width of each cell in the grid @ param cellHeight \u2014 The height of each cell in the grid @ param names \u2014 The names of the sprites, mapping left to right, top to bottom. If not supplied the quads will be sorted by index not name. @ return The \u2014 created SpriteAtlas instance getQuadByIndex ( method ) SpriteAtlas : getQuadByIndex ( index : number) -> quad : any Gets a quad by index @ param index \u2014 The index of the sprite @ return quad \u2014 The love quad associated with the sprite index getQuadByName ( method ) SpriteAtlas : getQuadByName ( name : string) -> quad : any Gets a quad by name @ param name \u2014 The name of the sprite @ return quad \u2014 The love quad associated with the sprite name image any The texture atlas love image instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. quadsByIndex table < number , any > A table of quads indexed by sprite indices quadsByName table < string , any > A table of quads indexed by sprite names serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean System __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed. afterActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. afterOpacityChanged ( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute. beforeActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. beforeMove ( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. global boolean A system defined global can only be attached to the Game object. It will see all events from all levels. initialize ( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string A system must define a name that is unique to the System. onActorAdded ( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added. onActorRemoved ( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed. onDescend ( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to. onMove ( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to. onTick ( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to. onTurn ( method ) System : onTurn ( level : Level, actor : Actor) This method is called when a new turn begins. The actor is the actor that is about to take their turn. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onTurnEnd ( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onYield ( method ) System : onYield ( level : Level, event : Message) This method is called whenever the level yields back to the interface. The most common usage for this right now is updating the sight component of any input controlled actors in the Sight system. @ param level \u2014 The Level object this System is attached to. @ param event \u2014 The event data that caused the yield. owner Level ? The level that holds this system. postInitialize ( method ) System : postInitialize ( level : Level) This method is called after the Level is initialized. It is called after all of the Systems have been initialized. @ param level \u2014 The Level object this System is attached to. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements string [] A table of requirements that must be met for the System to be attached to a Level. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table softRequirements string [] A table of optional requirements that ensure proper order if both Systems are attached. stripName boolean SystemManager __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SystemManager : __new ( owner : Level) _serializationBlacklist table addSystem ( method ) SystemManager : addSystem ( system : System) Adds a system to the manager. @ param system \u2014 The system to add. adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) SystemManager : afterAction ( level : Level, actor : Actor, action : Action) Calls the afterAction method for all systems. @ param level \u2014 The level to call afterAction for. @ param actor \u2014 The actor that has taken an action. @ param action \u2014 The action the actor has executed. afterOpacityChanged ( method ) SystemManager : afterOpacityChanged ( level : Level, x : number, y : number) Calls the afterOpacityChanged method for all systems. @ param level \u2014 The level to call afterOpacityChanged for. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) SystemManager : beforeAction ( level : Level, actor : Actor, action : Action) Calls the beforeAction method for all systems. @ param level \u2014 The level to call beforeAction for. @ param actor \u2014 The actor that has selected an action. @ param action \u2014 The action the actor has selected. beforeMove ( method ) SystemManager : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the beforeMove method for all systems. @ param level \u2014 The level to call beforeMove for. @ param actor \u2014 The actor that is moving. @ param from \u2014 The position the actor is moving from. @ param to \u2014 The position the actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getSystem ( method ) SystemManager : getSystem ( systemName : string) -> The : System ? Gets a system by name. @ param systemName \u2014 The name of the system to get. @ return The \u2014 system with the given name, or nil if not found. initialize ( method ) SystemManager : initialize ( level : Level) Initializes all systems attached to the manager. @ param level \u2014 The level to initialize the systems for. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onActorAdded ( method ) SystemManager : onActorAdded ( level : Level, actor : Actor) Calls the onActorAdded method for all systems. @ param level \u2014 The level to call onActorAdded for. @ param actor \u2014 The actor that has been added. onActorRemoved ( method ) SystemManager : onActorRemoved ( level : Level, actor : Actor) Calls the onActorRemoved method for all systems. @ param level \u2014 The level to call onActorRemoved for. @ param actor \u2014 The actor that has been removed. onMove ( method ) SystemManager : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the onMove method for all systems. @ param level \u2014 The level to call onMove for. @ param actor \u2014 The actor that has moved. @ param from \u2014 The position the actor moved from. @ param to \u2014 The position the actor moved to. onTick ( method ) SystemManager : onTick ( level : Level) Calls the onTick method for all systems. @ param level \u2014 The level to call onTick for. onTurn ( method ) SystemManager : onTurn ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn. onTurnEnd ( method ) SystemManager : onTurnEnd ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn. onYield ( method ) SystemManager : onYield ( level : Level, event : Message) Calls the on yield method for each system right before the level hands a Decision back to the interface. Used by the Sight system to ensure that the player's fov is always updated when we yield even if it's not their turn. @ param level \u2014 The level to call onYield for. @ param event \u2014 The event data that caused the yield. owner Level The 'Level' holds all of the actors and systems, and runs the game loop. Through the ActorStorage and SystemManager postInitialize ( method ) SystemManager : postInitialize ( level : Level) Post-initializes all systems after the level has been populated. @ param level \u2014 The level to post-initialize the systems for. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean systems System [] trigger ( method ) SystemManager : trigger ( eventString : string, ... any ) This is useful for calling custom events you define in your Actions, Systems, etc. An example usage of this can be found in the Sight system. @ param eventString \u2014 The key of the event handler method into the system. @ param ... \u2014 The arguments to be passed to the event handler method. Target __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table _validate ( method ) Target : _validate ( owner : Actor, targetObject : any, targets : [ Object]) -> boolean @ param owner \u2014 The owner of the action. @ param targetObject \u2014 The target object of the action. @ param targets \u2014 A list of the previous targets. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown distanceType \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. range number The distance in tiles this actor can be away from the Action's owner. If nil this check is skipped. rangeLastTarget nil rangeType \"chebyshev\" | \"manhattan\" serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean typesAllowed table < \"Actor\" | \"Any\" | \"Cell\" | \"Point\" , true > unique boolean If true this will make sure this target is unique, and not one of the targets already selected. validate ( method ) Target : validate ( owner : Actor, targetObject : Actor| Cell | Vector2 , targets : any) -> boolean The inner validate for the target. This is what you override with your own custom logic. @ param owner \u2014 The actor performing the action. @ param targetObject \u2014 The target to validate. TargetType TextInput __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props TextInputProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check TextInputInit TextInputProps _internal Inky .Props.Internal content string focused boolean font love .Font Defines the shape of characters that can be drawn onto the screen. Open in Browser limit number the number of characters before we start panning onEdit function ? overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeholder string size Vector2 TileElement __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props TileElementProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check TileElementProps _internal Inky .Props.Internal display Display onSelect function overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. size Vector2 the final size of a tile in editor Tool __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals. drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) Tool : mouseclicked ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse click events. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked. mousereleased ( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release. overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance. Tools __getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props ToolsProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check ToolsInit ToolsProps _internal Inky .Props.Internal editor Editor selected Button Trace UnfloatSelectionModification __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) UnfloatSelectionModification : __new ( placeable : any, position : any, floatingSelection : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) UnfloatSelectionModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. floatingSelection MapBuilder A map builder class that extends the SparseGrid class to handle map-specific functionalities. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed table position Vector2 prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone. Vector2 DOWN Vector2 The static DOWN vector. DOWN_LEFT Vector2 The static DOWN_LEFT vector. DOWN_RIGHT Vector2 The static DOWN_RIGHT vector. LEFT Vector2 The static LEFT vector. RIGHT Vector2 The static RIGHT vector. UP Vector2 The static UP vector. UP_LEFT Vector2 The static UP_LEFT vector. UP_RIGHT Vector2 The static UP_RIGHT vector. __add function Vector2. __add ( a : Vector2, b : Vector2) -> Vector2 Adds two vectors together. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The sum of the two vectors. __call function __eq function Vector2. __eq ( a : Vector2, b : Vector2) -> boolean Checks the equality of two vectors. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 True if the vectors are equal, false otherwise. __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __mul function Vector2. __mul ( a : Vector2, b : number) -> Vector2 Multiplies a vector by a scalar. @ param a \u2014 The vector. @ param b \u2014 The scalar. @ return \u2014 The product of the vector and the scalar. __new ( method ) Vector2 : __new ( x : number, y : number) Constructor for Vector2 accepts two numbers, x and y. @ param x \u2014 The x component of the vector. @ param y \u2014 The y component of the vector. __sub function Vector2. __sub ( a : Vector2, b : Vector2) -> Vector2 Subtracts vector b from vector a. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The difference of the two vectors. __tostring ( method ) Vector2 : __tostring () -> string Creates a string representation of the vector. @ return \u2014 The string representation of the vector. __unm function Vector2. __unm ( a : Vector2) -> Vector2 Negates the vector. @ param a \u2014 The vector to negate. @ return \u2014 The negated vector. _hash function Vector2. _hash ( x : integer, y : integer) -> integer _serializationBlacklist table _unhash function Vector2. _unhash ( hash : number) -> number 2. integer adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) Vector2 : copy () -> Vector2 Returns a copy of the vector. @ return \u2014 A copy of the vector. decompose ( method ) Vector2 : decompose () -> x : number 2. y : number @ return x \u2014 The x component of the vector. @ return y \u2014 The y component of the vector. deserialize function Object. deserialize ( data : any) -> unknown distance ( method ) Vector2 : distance ( vec : Vector2) -> distance : number Euclidian distance from another point. distanceChebyshev ( method ) Vector2 : distanceChebyshev ( vec : Vector2) -> distance : number Chebyshev distance from another point. distanceManhattan ( method ) Vector2 : distanceManhattan ( vec : Vector2) -> distance : number Manhattan distance from another point. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getRange ( method ) Vector2 : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , vec : Vector2) -> number Gets the range, a ciel'd integer representing the number of tiles away the other vector is type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\" hash ( method ) Vector2 : hash () -> hash : number instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. length ( method ) Vector2 : length () -> number Returns the length of the vector. @ return \u2014 The length of the vector. lerp ( method ) Vector2 : lerp ( vec : Vector2, t : number) -> Vector2 Linearly interpolates between two vectors. @ param self \u2014 The starting vector (A). @ param vec \u2014 The ending vector (B). @ param t \u2014 The interpolation factor (0 <= t <= 1). @ return \u2014 The interpolated vector. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. neighborhood4 Vector2 [] neighborhood8 Vector2 [] prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. rotateClockwise ( method ) Vector2 : rotateClockwise () -> The : Vector2 Rotates the vector clockwise. @ return The \u2014 rotated vector. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unhash function Vector2. unhash ( hash : any) -> Vector2 x number The x component of the vector. y number The y component of the vector. _G _G _G _VERSION string any arg string [] assert function assert ( v ? : < T >, message ? : any , ... any ) -> < T > 2. ... any bit bitlib bit.arshift function bit. arshift ( x : integer, n : integer) -> y : integer bit.band function bit. band ( x : integer, ... integer ) -> y : integer bit.bnot function bit. bnot ( x : integer) -> y : integer bit.bor function bit. bor ( x : integer, ... integer ) -> y : integer bit.bswap function bit. bswap ( x : integer) -> y : integer bit.bxor function bit. bxor ( x : integer, ... integer ) -> y : integer bit.lshift function bit. lshift ( x : integer, n : integer) -> y : integer bit.rol function bit. rol ( x : integer, n : integer) -> y : integer bit.ror function bit. ror ( x : integer, n : integer) -> y : integer bit.rshift function bit. rshift ( x : integer, n : integer) -> y : integer bit.tobit function bit. tobit ( x : integer) -> y : integer bit.tohex function bit. tohex ( x : integer, n ? : integer ) -> y : string bitlib arshift function bit. arshift ( x : integer, n : integer) -> y : integer band function bit. band ( x : integer, ... integer ) -> y : integer bnot function bit. bnot ( x : integer) -> y : integer bor function bit. bor ( x : integer, ... integer ) -> y : integer bswap function bit. bswap ( x : integer) -> y : integer bxor function bit. bxor ( x : integer, ... integer ) -> y : integer lshift function bit. lshift ( x : integer, n : integer) -> y : integer rol function bit. rol ( x : integer, n : integer) -> y : integer ror function bit. ror ( x : integer, n : integer) -> y : integer rshift function bit. rshift ( x : integer, n : integer) -> y : integer tobit function bit. tobit ( x : integer) -> y : integer tohex function bit. tohex ( x : integer, n ? : integer ) -> y : string boolean collectgarbage function collectgarbage ( opt ? : \"collect\" | \"count\" | \"isrunning\" | \"restart\" | \"setpause\" ...(+ 3 ), arg ? : integer ) -> any coroutine coroutinelib coroutine.close function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any coroutine.create function coroutine. create ( f : fun (... any ):... unknown ) -> thread coroutine.isyieldable function coroutine. isyieldable () -> boolean coroutine.resume function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any coroutine.running function coroutine. running () -> running : thread 2. ismain : boolean coroutine.status function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" coroutine.wrap function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown coroutine.yield ( async ) function coroutine. yield (... any ) -> ... any coroutinelib close function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any Closes coroutine co , closing all its pending to-be-closed variables and putting the coroutine in a dead state. View documents create function coroutine. create ( f : fun (... any ):... unknown ) -> thread Creates a new coroutine, with body f . f must be a function. Returns this new coroutine, an object with type \"thread\" . View documents isyieldable function coroutine. isyieldable () -> boolean Returns true when the running coroutine can yield. View documents resume function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any Starts or continues the execution of coroutine co . View documents running function coroutine. running () -> running : thread 2. ismain : boolean Returns the running coroutine plus a boolean, true when the running coroutine is the main one. View documents status function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" Returns the status of coroutine co . View documents return # 1 : | \"running\" -- Is running. | \"suspended\" -- Is suspended or not started. | \"normal\" -- Is active but not running. | \"dead\" -- Has finished or stopped with an error. wrap function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown Creates a new coroutine, with body f ; f must be a function. Returns a function that resumes the coroutine each time it is called. View documents yield ( async ) function coroutine. yield (... any ) -> ... any Suspends the execution of the calling coroutine. View documents debug debuglib debug.debug function debug. debug () debug.getfenv function debug. getfenv ( o : any) -> table debug.gethook function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer debug.getinfo function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo debug.getlocal function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any debug.getmetatable function debug. getmetatable ( object : any) -> metatable : table debug.getregistry function debug. getregistry () -> table debug.getupvalue function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any debug.getuservalue function debug. getuservalue ( u : userdata) -> any debug.setcstacklimit function debug. setcstacklimit ( limit : integer) -> boolean | integer debug.setfenv function debug. setfenv ( object : < T>, env : table) -> object : < T> debug.sethook function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) debug.setlocal function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string debug.setmetatable function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> debug.setupvalue function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string debug.setuservalue function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata debug.traceback function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string debug.upvalueid function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata debug.upvaluejoin function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer) debuginfo activelines table currentline integer func function istailcall boolean isvararg boolean lastlinedefined integer linedefined integer name string namewhat string nparams integer nups integer short_src string source string what string debuglib debug function debug. debug () Enters an interactive mode with the user, running each string that the user enters. View documents getfenv function debug. getfenv ( o : any) -> table Returns the environment of object o . View documents gethook function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer Returns the current hook settings of the thread. View documents getinfo function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo Returns a table with information about a function. View documents what : +> \" n \" -- `name` and `namewhat` +> \" S \" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what` +> \" l \" -- `currentline` +> \" t \" -- `istailcall` +> \" u \" -- `nups`, `nparams`, and `isvararg` +> \" f \" -- `func` +> \" L \" -- `activelines` getlocal function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any Returns the name and the value of the local variable with index local of the function at level f of the stack. View documents getmetatable function debug. getmetatable ( object : any) -> metatable : table Returns the metatable of the given value. View documents getregistry function debug. getregistry () -> table Returns the registry table. View documents getupvalue function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any Returns the name and the value of the upvalue with index up of the function. View documents getuservalue function debug. getuservalue ( u : userdata) -> any Returns the Lua value associated to u. View documents setcstacklimit function debug. setcstacklimit ( limit : integer) -> boolean | integer Deprecated in Lua 5.4.2 Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. In case of success, this function returns the old limit. In case of error, it returns false . View documents setfenv function debug. setfenv ( object : < T>, env : table) -> object : < T> Sets the environment of the given object to the given table . View documents sethook function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) Sets the given function as a hook. View documents mask : +> \" c \" -- Calls hook when Lua calls a function. +> \" r \" -- Calls hook when Lua returns from a function. +> \" l \" -- Calls hook when Lua enters a new line of code. setlocal function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string Assigns the value to the local variable with index local of the function at level of the stack. View documents setmetatable function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> Sets the metatable for the given value to the given table (which can be nil ). View documents setupvalue function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string Assigns the value to the upvalue with index up of the function. View documents setuservalue function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata Sets the given value as the Lua value associated to the given udata. View documents traceback function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback. View documents upvalueid function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata Returns a unique identifier (as a light userdata) for the upvalue numbered n from the given function. View documents upvaluejoin function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer) Make the n1 -th upvalue of the Lua closure f1 refer to the n2 -th upvalue of the Lua closure f2 . View documents dofile function dofile ( filename ? : string ) -> ... any error function error ( message : any, level ? : integer ) exitcode false ffi.VLA* ffi.VLS* ffi.cb* free ( method ) ffi .cb*: free () set ( method ) ffi .cb*: set ( func : function) ffi.cdata* ffi.cdecl* byte function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents char function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents dump function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents find function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured format function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents gmatch function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents gsub function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents len function string. len ( s : string| number ) -> integer Returns its length. View documents lower function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents match function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents pack function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents packsize function string. packsize ( fmt : string) -> integer Miss locale View documents rep function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents reverse function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents sub function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents unpack function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents upper function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents ffi.ct* ffi.ctype* ffi.namespace* [string] function ffilib C ffi .namespace* abi function ffilib. abi ( param : string) -> status : boolean alignof function ffilib. alignof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*) -> align : integer arch string cast function ffilib. cast ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, init : any) -> cdata : ffi.cdata* cdef function ffilib. cdef ( def : string, params ? : any , ... any ) copy function ffilib. copy ( dst : any, src : any, len : integer) errno function ffilib. errno ( newerr ? : integer ) -> err : integer fill function ffilib. fill ( dst : any, len : integer, c ? : any ) gc function ffilib. gc ( cdata : ffi.cdata*, finalizer ? : function ) -> cdata: ffi. cdata * istype function ffilib. istype ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, obj : any) -> status : boolean load function ffilib. load ( name : string, global ? : boolean ) -> clib : ffi.namespace* metatype function ffilib. metatype ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, metatable : table) -> ctype : ffi.ctype* new function ffilib. new ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, nelem ? : integer , init ? : any , ... any ) -> cdata : ffi.cdata* offsetof function ffilib. offsetof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, field : string) -> ofs : integer 2. bpos : integer ? 3. bsize : integer ? os string sizeof function ffilib. sizeof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, nelem ? : integer ) -> size : integer| nil string function ffilib. string ( ptr : any, len ? : integer ) -> str : string typeof function ffilib. typeof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, params ? : any , ... any ) -> ctype : ffi.ctype* file* close ( method ) file *: close () -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Close file . View documents exitcode : | \" exit \" | \" signal \" flush ( method ) file *: flush () Saves any written data to file . View documents lines ( method ) file *: lines (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown for c in file : lines (...) do body end View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line. read ( method ) file *: read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any Reads the file , according to the given formats, which specify what to read. View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line. seek ( method ) file *: seek ( whence ? : \"cur\" | \"end\" | \"set\" , offset ? : integer ) -> offset : integer 2. errmsg : string ? Sets and gets the file position, measured from the beginning of the file. View documents whence : | \" set \" -- Base is beginning of the file. -> \" cur \" -- Base is current position. | \" end \" -- Base is end of file. setvbuf ( method ) file *: setvbuf ( mode : \" full \"|\" line \"|\" no \", size?: integer) Sets the buffering mode for an output file. View documents mode : | \" no \" -- Output operation appears immediately. | \" full \" -- Performed only when the buffer is full. | \" line \" -- Buffered until a newline is output. write ( method ) file *: write (... string | number ) -> file * ? 2. errmsg : string ? Writes the value of each of its arguments to file . View documents filetype function gcoptions geometer table geometer.Editor unknown geometer.EditorState unknown geometer.MapGeneratorState unknown geometer.Modification unknown geometer.PrefabEditorState unknown geometer.Tool unknown geometer.assetPath string geometer.path unknown geometer.require function geometer. require ( p : any) -> unknown 2. nil getfenv function getfenv ( f ? : integer | fun (... any ):... unknown ) -> table getmetatable function getmetatable ( object : any) -> metatable : table hookmask infowhat integer io iolib io.close function io. close ( file ? : file *) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? io.flush function io. flush () io.input function io. input ( file : string| file *) io.lines function io. lines ( filename ? : string , ... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown io.open function io. open ( filename : string, mode ? : \"a\" | \"a+\" | \"a+b\" | \"ab\" | \"r\" ...(+ 7 )) -> file * ? 2. errmsg : string ? io.output function io. output ( file : string| file *) io.popen function io. popen ( prog : string, mode ? : \"r\" | \"w\" ) -> file * ? 2. errmsg : string ? io.read function io. read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any io.tmpfile function io. tmpfile () -> file * io.type function io. type ( file : file*) -> \"closed file\" | \"file\" | ` nil ` io.write function io. write (... any ) -> file * 2. errmsg : string ? iolib close function io. close ( file ? : file *) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Close file or default output file. View documents exitcode : | \" exit \" | \" signal \" flush function io. flush () Saves any written data to default output file. View documents input function io. input ( file : string| file *) Sets file as the default input file. View documents lines function io. lines ( filename ? : string , ... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown for c in io.lines ( filename , ...) do body end View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line. open function io. open ( filename : string, mode ? : \"a\" | \"a+\" | \"a+b\" | \"ab\" | \"r\" ...(+ 7 )) -> file * ? 2. errmsg : string ? Opens a file, in the mode specified in the string mode . View documents mode : -> \" r \" -- Read mode. | \" w \" -- Write mode. | \" a \" -- Append mode. | \" r + \" -- Update mode, all previous data is preserved. | \" w + \" -- Update mode, all previous data is erased. | \" a + \" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. | \" rb \" -- Read mode. (in binary mode.) | \" wb \" -- Write mode. (in binary mode.) | \" ab \" -- Append mode. (in binary mode.) | \" r + b \" -- Update mode, all previous data is preserved. (in binary mode.) | \" w + b \" -- Update mode, all previous data is erased. (in binary mode.) | \" a + b \" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.) output function io. output ( file : string| file *) Sets file as the default output file. View documents popen function io. popen ( prog : string, mode ? : \"r\" | \"w\" ) -> file * ? 2. errmsg : string ? Starts program prog in a separated process. View documents mode : | \" r \" -- Read data from this program by `file`. | \" w \" -- Write data to this program by `file`. read function io. read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any Reads the file , according to the given formats, which specify what to read. View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line. stderr file * standard error. View documents stdin file * standard input. View documents stdout file * standard output. View documents tmpfile function io. tmpfile () -> file * In case of success, returns a handle for a temporary file. View documents type function io. type ( file : file*) -> \"closed file\" | \"file\" | ` nil ` Checks whether obj is a valid file handle. View documents return # 1 : | \"file\" -- Is an open file handle. | \"closed file\" -- Is a closed file handle. | ` nil ` -- Is not a file handle. write function io. write (... any ) -> file * 2. errmsg : string ? Writes the value of each of its arguments to default output file. View documents ipairs function ipairs ( t : < T:table>) -> fun ( table : < V>[], i ? : integer ): integer , < V > 2. < T :table> 3. i : integer jit jitlib jit.flush function jit. flush ( func : boolean| function , recursive ? : boolean ) jit.funcinfo.c ffid integer | nil jit.funcinfo.lua jit.off function jit. off ( func : boolean| function , recursive ? : boolean ) jit.on function jit. on ( func : boolean| function , recursive ? : boolean ) jit.opt table jit.opt.start function jit.opt. start (... any ) jit.snap jit.status function jit. status () -> status : boolean 2. ... string jit.traceinfo jitlib arch string | 'arm' | 'arm64' | 'arm64be' | 'mips' ...(+ 8 ) flush function jit. flush ( func : boolean| function , recursive ? : boolean ) off function jit. off ( func : boolean| function , recursive ? : boolean ) on function jit. on ( func : boolean| function , recursive ? : boolean ) opt table os 'BSD' | 'Linux' | 'OSX' | 'Other' | 'POSIX' ...(+ 1 ) status function jit. status () -> status : boolean 2. ... string version string version_num number lightuserdata load function load ( chunk : string| function , chunkname ? : string , mode ? : \"b\" | \"bt\" | \"t\" , env ? : table ) -> function ? 2 . error_message: string ? loadfile function loadfile ( filename ? : string , mode ? : \"b\" | \"bt\" | \"t\" , env ? : table ) -> function ? 2 . error_message: string ? loadmode loadstring function loadstring ( text : string, chunkname ? : string ) -> function ? 2 . error_message: string ? localecategory love audio love .audio Provides an interface to create noise with the user's speakers. Open in Browser conf function love. conf ( t : any) data love .data Provides functionality for creating and transforming data. Open in Browser event love .event Manages events, like keypresses. Open in Browser filesystem love .filesystem Provides an interface to the user's filesystem. Open in Browser font love .font Allows you to work with fonts. Open in Browser getVersion function love. getVersion () -> major : number 2. minor : number 3. revision : number 4. codename : string Gets the current running version of L\u00d6VE. Open in Browser @ return major \u2014 The major version of L\u00d6VE, i.e. 0 for version 0.9.1. @ return minor \u2014 The minor version of L\u00d6VE, i.e. 9 for version 0.9.1. @ return revision \u2014 The revision version of L\u00d6VE, i.e. 1 for version 0.9.1. @ return codename \u2014 The codename of the current version, i.e. 'Baby Inspector' for version 0.9.1. graphics love .graphics The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Canvases) and managing screen geometry. L\u00d6VE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom. In many cases, you draw images or shapes in terms of their upper-left corner. Many of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way. Open in Browser hasDeprecationOutput function love. hasDeprecationOutput () -> enabled : boolean Gets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise. When deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console. Open in Browser @ return enabled \u2014 Whether deprecation output is enabled. image love .image Provides an interface to decode encoded image data. Open in Browser isVersionCompatible function love. isVersionCompatible ( version : string) -> compatible : boolean Gets whether the given version is compatible with the current running version of L\u00d6VE. Open in Browser @ param version \u2014 The version to check (for example '11.3' or '0.10.2'). @ return compatible \u2014 Whether the given version is compatible with the current running version of L\u00d6VE. joystick love .joystick Provides an interface to the user's joystick. Open in Browser keyboard love .keyboard Provides an interface to the user's keyboard. Open in Browser math love .math Provides system-independent mathematical functions. Open in Browser mouse love .mouse Provides an interface to the user's mouse. Open in Browser physics love .physics Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible. Open in Browser setDeprecationOutput function love. setDeprecationOutput ( enable : boolean) Sets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise. When deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console. Open in Browser @ param enable \u2014 Whether to enable or disable deprecation output. sound love .sound This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that. Open in Browser system love .system Provides access to information about the user's system. Open in Browser thread love .thread Allows you to work with threads. Threads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited. All LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time. When a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require. Open in Browser timer love .timer Provides an interface to the user's clock. Open in Browser touch love .touch Provides an interface to touch-screen presses. Open in Browser video love .video This module is responsible for decoding, controlling, and streaming video files. It can't draw the videos, see love.graphics.newVideo and Video objects for that. Open in Browser window love .window Provides an interface for modifying and retrieving information about the program's window. Open in Browser love love love.AlignMode love.ArcType love.AreaSpreadDistribution love.BezierCurve evaluate ( method ) love .BezierCurve: evaluate ( t : number) -> x : number 2. y : number Evaluate B\u00e9zier curve at parameter t. The parameter must be between 0 and 1 (inclusive). This function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see BezierCurve:render for that purpose. Open in Browser @ param t \u2014 Where to evaluate the curve. @ return x \u2014 x coordinate of the curve at parameter t. @ return y \u2014 y coordinate of the curve at parameter t. getControlPoint ( method ) love .BezierCurve: getControlPoint ( i : number) -> x : number 2. y : number Get coordinates of the i-th control point. Indices start with 1. Open in Browser @ param i \u2014 Index of the control point. @ return x \u2014 Position of the control point along the x axis. @ return y \u2014 Position of the control point along the y axis. getControlPointCount ( method ) love .BezierCurve: getControlPointCount () -> count : number Get the number of control points in the B\u00e9zier curve. Open in Browser @ return count \u2014 The number of control points. getDegree ( method ) love .BezierCurve: getDegree () -> degree : number Get degree of the B\u00e9zier curve. The degree is equal to number-of-control-points - 1. Open in Browser @ return degree \u2014 Degree of the B\u00e9zier curve. getDerivative ( method ) love .BezierCurve: getDerivative () -> derivative : love.BezierCurve Get the derivative of the B\u00e9zier curve. This function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t. Open in Browser @ return derivative \u2014 The derivative curve. getSegment ( method ) love .BezierCurve: getSegment ( startpoint : number, endpoint : number) -> curve : love.BezierCurve Gets a BezierCurve that corresponds to the specified segment of this BezierCurve. Open in Browser @ param startpoint \u2014 The starting point along the curve. Must be between 0 and 1. @ param endpoint \u2014 The end of the segment. Must be between 0 and 1. @ return curve \u2014 A BezierCurve that corresponds to the specified segment. insertControlPoint ( method ) love .BezierCurve: insertControlPoint ( x : number, y : number, i ? : number ) Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc. Open in Browser @ param x \u2014 Position of the control point along the x axis. @ param y \u2014 Position of the control point along the y axis. @ param i \u2014 Index of the control point. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. removeControlPoint ( method ) love .BezierCurve: removeControlPoint ( index : number) Removes the specified control point. Open in Browser @ param index \u2014 The index of the control point to remove. render ( method ) love .BezierCurve: render ( depth ? : number ) -> coordinates : table Get a list of coordinates to be used with love.graphics.line. This function samples the B\u00e9zier curve using recursive subdivision. You can control the recursion depth using the depth parameter. If you are just interested to know the position on the curve given a parameter, use BezierCurve:evaluate. Open in Browser @ param depth \u2014 Number of recursive subdivision steps. @ return coordinates \u2014 List of x,y-coordinate pairs of points on the curve. renderSegment ( method ) love .BezierCurve: renderSegment ( startpoint : number, endpoint : number, depth ? : number ) -> coordinates : table Get a list of coordinates on a specific part of the curve, to be used with love.graphics.line. This function samples the B\u00e9zier curve using recursive subdivision. You can control the recursion depth using the depth parameter. If you are just need to know the position on the curve given a parameter, use BezierCurve:evaluate. Open in Browser @ param startpoint \u2014 The starting point along the curve. Must be between 0 and 1. @ param endpoint \u2014 The end of the segment to render. Must be between 0 and 1. @ param depth \u2014 Number of recursive subdivision steps. @ return coordinates \u2014 List of x,y-coordinate pairs of points on the specified part of the curve. rotate ( method ) love .BezierCurve: rotate ( angle : number, ox ? : number , oy ? : number ) Rotate the B\u00e9zier curve by an angle. Open in Browser @ param angle \u2014 Rotation angle in radians. @ param ox \u2014 X coordinate of the rotation center. @ param oy \u2014 Y coordinate of the rotation center. scale ( method ) love .BezierCurve: scale ( s : number, ox ? : number , oy ? : number ) Scale the B\u00e9zier curve by a factor. Open in Browser @ param s \u2014 Scale factor. @ param ox \u2014 X coordinate of the scaling center. @ param oy \u2014 Y coordinate of the scaling center. setControlPoint ( method ) love .BezierCurve: setControlPoint ( i : number, x : number, y : number) Set coordinates of the i-th control point. Indices start with 1. Open in Browser @ param i \u2014 Index of the control point. @ param x \u2014 Position of the control point along the x axis. @ param y \u2014 Position of the control point along the y axis. translate ( method ) love .BezierCurve: translate ( dx : number, dy : number) Move the B\u00e9zier curve by an offset. Open in Browser @ param dx \u2014 Offset along the x axis. @ param dy \u2014 Offset along the y axis. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.BlendAlphaMode love.BlendMode love.Body applyAngularImpulse ( method ) love .Body: applyAngularImpulse ( impulse : number) Applies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce. Open in Browser @ param impulse \u2014 The impulse in kilogram-square meter per second. applyForce ( method ) love .Body: applyForce ( fx : number, fy : number) Apply force to a Body. A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse. If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the force components and position must be given in world coordinates. Open in Browser @ param fx \u2014 The x component of force to apply to the center of mass. @ param fy \u2014 The y component of force to apply to the center of mass. applyLinearImpulse ( method ) love .Body: applyLinearImpulse ( ix : number, iy : number) Applies an impulse to a body. This makes a single, instantaneous addition to the body momentum. An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce. If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the impulse components and position must be given in world coordinates. Open in Browser @ param ix \u2014 The x component of the impulse applied to the center of mass. @ param iy \u2014 The y component of the impulse applied to the center of mass. applyTorque ( method ) love .Body: applyTorque ( torque : number) Apply torque to a body. Torque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has. Open in Browser @ param torque \u2014 The torque to apply. destroy ( method ) love .Body: destroy () Explicitly destroys the Body and all fixtures and joints attached to it. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAngle ( method ) love .Body: getAngle () -> angle : number Get the angle of the body. The angle is measured in radians. If you need to transform it to degrees, use math.deg. A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view. Open in Browser @ return angle \u2014 The angle in radians. getAngularDamping ( method ) love .Body: getAngularDamping () -> damping : number Gets the Angular damping of the Body The angular damping is the ''rate of decrease of the angular velocity over time'': A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning. Damping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE). Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1. Open in Browser @ return damping \u2014 The value of the angular damping. getAngularVelocity ( method ) love .Body: getAngularVelocity () -> w : number Get the angular velocity of the Body. The angular velocity is the ''rate of change of angle over time''. It is changed in World:update by applying torques, off centre forces/impulses, and angular damping. It can be set directly with Body:setAngularVelocity. If you need the ''rate of change of position over time'', use Body:getLinearVelocity. Open in Browser @ return w \u2014 The angular velocity in radians/second. getContacts ( method ) love .Body: getContacts () -> contacts : table Gets a list of all Contacts attached to the Body. Open in Browser @ return contacts \u2014 A list with all contacts associated with the Body. getFixtures ( method ) love .Body: getFixtures () -> fixtures : table Returns a table with all fixtures. Open in Browser @ return fixtures \u2014 A sequence with all fixtures. getGravityScale ( method ) love .Body: getGravityScale () -> scale : number Returns the gravity scale factor. Open in Browser @ return scale \u2014 The gravity scale factor. getInertia ( method ) love .Body: getInertia () -> inertia : number Gets the rotational inertia of the body. The rotational inertia is how hard is it to make the body spin. Open in Browser @ return inertia \u2014 The rotational inertial of the body. getJoints ( method ) love .Body: getJoints () -> joints : table Returns a table containing the Joints attached to this Body. Open in Browser @ return joints \u2014 A sequence with the Joints attached to the Body. getLinearDamping ( method ) love .Body: getLinearDamping () -> damping : number Gets the linear damping of the Body. The linear damping is the ''rate of decrease of the linear velocity over time''. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving. Damping is not the same as friction - they can be modelled together. Open in Browser @ return damping \u2014 The value of the linear damping. getLinearVelocity ( method ) love .Body: getLinearVelocity () -> x : number 2. y : number Gets the linear velocity of the Body from its center of mass. The linear velocity is the ''rate of change of position over time''. If you need the ''rate of change of angle over time'', use Body:getAngularVelocity. If you need to get the linear velocity of a point different from the center of mass: Body:getLinearVelocityFromLocalPoint allows you to specify the point in local coordinates. Body:getLinearVelocityFromWorldPoint allows you to specify the point in world coordinates. See page 136 of 'Essential Mathematics for Games and Interactive Applications' for definitions of local and world coordinates. Open in Browser @ return x \u2014 The x-component of the velocity vector @ return y \u2014 The y-component of the velocity vector getLinearVelocityFromLocalPoint ( method ) love .Body: getLinearVelocityFromLocalPoint ( x : number, y : number) -> vx : number 2. vy : number Get the linear velocity of a point on the body. The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning. The point on the body must given in local coordinates. Use Body:getLinearVelocityFromWorldPoint to specify this with world coordinates. Open in Browser @ param x \u2014 The x position to measure velocity. @ param y \u2014 The y position to measure velocity. @ return vx \u2014 The x component of velocity at point (x,y). @ return vy \u2014 The y component of velocity at point (x,y). getLinearVelocityFromWorldPoint ( method ) love .Body: getLinearVelocityFromWorldPoint ( x : number, y : number) -> vx : number 2. vy : number Get the linear velocity of a point on the body. The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning. The point on the body must given in world coordinates. Use Body:getLinearVelocityFromLocalPoint to specify this with local coordinates. Open in Browser @ param x \u2014 The x position to measure velocity. @ param y \u2014 The y position to measure velocity. @ return vx \u2014 The x component of velocity at point (x,y). @ return vy \u2014 The y component of velocity at point (x,y). getLocalCenter ( method ) love .Body: getLocalCenter () -> x : number 2. y : number Get the center of mass position in local coordinates. Use Body:getWorldCenter to get the center of mass in world coordinates. Open in Browser @ return x \u2014 The x coordinate of the center of mass. @ return y \u2014 The y coordinate of the center of mass. getLocalPoint ( method ) love .Body: getLocalPoint ( worldX : number, worldY : number) -> localX : number 2. localY : number Transform a point from world coordinates to local coordinates. Open in Browser @ param worldX \u2014 The x position in world coordinates. @ param worldY \u2014 The y position in world coordinates. @ return localX \u2014 The x position in local coordinates. @ return localY \u2014 The y position in local coordinates. getLocalPoints ( method ) love .Body: getLocalPoints ( x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Transforms multiple points from world coordinates to local coordinates. Open in Browser @ param x1 \u2014 (Argument) The x position of the first point. @ param y1 \u2014 (Argument) The y position of the first point. @ param x2 \u2014 (Argument) The x position of the second point. @ param y2 \u2014 (Argument) The y position of the second point. @ return x1 \u2014 (Result) The transformed x position of the first point. @ return y1 \u2014 (Result) The transformed y position of the first point. @ return x2 \u2014 (Result) The transformed x position of the second point. @ return y2 \u2014 (Result) The transformed y position of the second point. getLocalVector ( method ) love .Body: getLocalVector ( worldX : number, worldY : number) -> localX : number 2. localY : number Transform a vector from world coordinates to local coordinates. Open in Browser @ param worldX \u2014 The vector x component in world coordinates. @ param worldY \u2014 The vector y component in world coordinates. @ return localX \u2014 The vector x component in local coordinates. @ return localY \u2014 The vector y component in local coordinates. getMass ( method ) love .Body: getMass () -> mass : number Get the mass of the body. Static bodies always have a mass of 0. Open in Browser @ return mass \u2014 The mass of the body (in kilograms). getMassData ( method ) love .Body: getMassData () -> x : number 2. y : number 3. mass : number 4. inertia : number Returns the mass, its center, and the rotational inertia. Open in Browser @ return x \u2014 The x position of the center of mass. @ return y \u2014 The y position of the center of mass. @ return mass \u2014 The mass of the body. @ return inertia \u2014 The rotational inertia. getPosition ( method ) love .Body: getPosition () -> x : number 2. y : number Get the position of the body. Note that this may not be the center of mass of the body. Open in Browser @ return x \u2014 The x position. @ return y \u2014 The y position. getTransform ( method ) love .Body: getTransform () -> x : number 2. y : number 3. angle : number Get the position and angle of the body. Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view. Open in Browser @ return x \u2014 The x component of the position. @ return y \u2014 The y component of the position. @ return angle \u2014 The angle in radians. getType ( method ) love .Body: getType () -> type : \"dynamic\" | \"kinematic\" | \"static\" Returns the type of the body. Open in Browser @ return type \u2014 The body type. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies. getUserData ( method ) love .Body: getUserData () -> value : any Returns the Lua value associated with this Body. Open in Browser @ return value \u2014 The Lua value associated with the Body. getWorld ( method ) love .Body: getWorld () -> world : love.World Gets the World the body lives in. Open in Browser @ return world \u2014 The world the body lives in. getWorldCenter ( method ) love .Body: getWorldCenter () -> x : number 2. y : number Get the center of mass position in world coordinates. Use Body:getLocalCenter to get the center of mass in local coordinates. Open in Browser @ return x \u2014 The x coordinate of the center of mass. @ return y \u2014 The y coordinate of the center of mass. getWorldPoint ( method ) love .Body: getWorldPoint ( localX : number, localY : number) -> worldX : number 2. worldY : number Transform a point from local coordinates to world coordinates. Open in Browser @ param localX \u2014 The x position in local coordinates. @ param localY \u2014 The y position in local coordinates. @ return worldX \u2014 The x position in world coordinates. @ return worldY \u2014 The y position in world coordinates. getWorldPoints ( method ) love .Body: getWorldPoints ( x1 : number, y1 : number, x2 : number, y2 : number) -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Transforms multiple points from local coordinates to world coordinates. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return x1 \u2014 The transformed x position of the first point. @ return y1 \u2014 The transformed y position of the first point. @ return x2 \u2014 The transformed x position of the second point. @ return y2 \u2014 The transformed y position of the second point. getWorldVector ( method ) love .Body: getWorldVector ( localX : number, localY : number) -> worldX : number 2. worldY : number Transform a vector from local coordinates to world coordinates. Open in Browser @ param localX \u2014 The vector x component in local coordinates. @ param localY \u2014 The vector y component in local coordinates. @ return worldX \u2014 The vector x component in world coordinates. @ return worldY \u2014 The vector y component in world coordinates. getX ( method ) love .Body: getX () -> x : number Get the x position of the body in world coordinates. Open in Browser @ return x \u2014 The x position in world coordinates. getY ( method ) love .Body: getY () -> y : number Get the y position of the body in world coordinates. Open in Browser @ return y \u2014 The y position in world coordinates. isActive ( method ) love .Body: isActive () -> status : boolean Returns whether the body is actively used in the simulation. Open in Browser @ return status \u2014 True if the body is active or false if not. isAwake ( method ) love .Body: isAwake () -> status : boolean Returns the sleep status of the body. Open in Browser @ return status \u2014 True if the body is awake or false if not. isBullet ( method ) love .Body: isBullet () -> status : boolean Get the bullet status of a body. There are two methods to check for body collisions: at their location when the world is updated (default) using continuous collision detection (CCD) The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly. Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet. Open in Browser @ return status \u2014 The bullet status of the body. isDestroyed ( method ) love .Body: isDestroyed () -> destroyed : boolean Gets whether the Body is destroyed. Destroyed bodies cannot be used. Open in Browser @ return destroyed \u2014 Whether the Body is destroyed. isFixedRotation ( method ) love .Body: isFixedRotation () -> fixed : boolean Returns whether the body rotation is locked. Open in Browser @ return fixed \u2014 True if the body's rotation is locked or false if not. isSleepingAllowed ( method ) love .Body: isSleepingAllowed () -> allowed : boolean Returns the sleeping behaviour of the body. Open in Browser @ return allowed \u2014 True if the body is allowed to sleep or false if not. isTouching ( method ) love .Body: isTouching ( otherbody : love.Body) -> touching : boolean Gets whether the Body is touching the given other Body. Open in Browser @ param otherbody \u2014 The other body to check. @ return touching \u2014 True if this body is touching the other body, false otherwise. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. resetMassData ( method ) love .Body: resetMassData () Resets the mass of the body by recalculating it from the mass properties of the fixtures. Open in Browser setActive ( method ) love .Body: setActive ( active : boolean) Sets whether the body is active in the world. An inactive body does not take part in the simulation. It will not move or cause any collisions. Open in Browser @ param active \u2014 If the body is active or not. setAngle ( method ) love .Body: setAngle ( angle : number) Set the angle of the body. The angle is measured in radians. If you need to transform it from degrees, use math.rad. A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view. It is possible to cause a collision with another body by changing its angle. Open in Browser @ param angle \u2014 The angle in radians. setAngularDamping ( method ) love .Body: setAngularDamping ( damping : number) Sets the angular damping of a Body See Body:getAngularDamping for a definition of angular damping. Angular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic. Open in Browser @ param damping \u2014 The new angular damping. setAngularVelocity ( method ) love .Body: setAngularVelocity ( w : number) Sets the angular velocity of a Body. The angular velocity is the ''rate of change of angle over time''. This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. Open in Browser @ param w \u2014 The new angular velocity, in radians per second setAwake ( method ) love .Body: setAwake ( awake : boolean) Wakes the body up or puts it to sleep. Open in Browser @ param awake \u2014 The body sleep status. setBullet ( method ) love .Body: setBullet ( status : boolean) Set the bullet status of a body. There are two methods to check for body collisions: at their location when the world is updated (default) using continuous collision detection (CCD) The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly. Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet. Open in Browser @ param status \u2014 The bullet status of the body. setFixedRotation ( method ) love .Body: setFixedRotation ( isFixed : boolean) Set whether a body has fixed rotation. Bodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset. Open in Browser @ param isFixed \u2014 Whether the body should have fixed rotation. setGravityScale ( method ) love .Body: setGravityScale ( scale : number) Sets a new gravity scale factor for the body. Open in Browser @ param scale \u2014 The new gravity scale factor. setInertia ( method ) love .Body: setInertia ( inertia : number) Set the inertia of a body. Open in Browser @ param inertia \u2014 The new moment of inertia, in kilograms * pixel squared. setLinearDamping ( method ) love .Body: setLinearDamping ( ld : number) Sets the linear damping of a Body See Body:getLinearDamping for a definition of linear damping. Linear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look 'floaty'(if gravity is enabled). Open in Browser @ param ld \u2014 The new linear damping setLinearVelocity ( method ) love .Body: setLinearVelocity ( x : number, y : number) Sets a new linear velocity for the Body. This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. Open in Browser @ param x \u2014 The x-component of the velocity vector. @ param y \u2014 The y-component of the velocity vector. setMass ( method ) love .Body: setMass ( mass : number) Sets a new body mass. Open in Browser @ param mass \u2014 The mass, in kilograms. setMassData ( method ) love .Body: setMassData ( x : number, y : number, mass : number, inertia : number) Overrides the calculated mass data. Open in Browser @ param x \u2014 The x position of the center of mass. @ param y \u2014 The y position of the center of mass. @ param mass \u2014 The mass of the body. @ param inertia \u2014 The rotational inertia. setPosition ( method ) love .Body: setPosition ( x : number, y : number) Set the position of the body. Note that this may not be the center of mass of the body. This function cannot wake up the body. Open in Browser @ param x \u2014 The x position. @ param y \u2014 The y position. setSleepingAllowed ( method ) love .Body: setSleepingAllowed ( allowed : boolean) Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed. Open in Browser @ param allowed \u2014 True if the body is allowed to sleep or false if not. setTransform ( method ) love .Body: setTransform ( x : number, y : number, angle : number) Set the position and angle of the body. Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view. This function cannot wake up the body. Open in Browser @ param x \u2014 The x component of the position. @ param y \u2014 The y component of the position. @ param angle \u2014 The angle in radians. setType ( method ) love .Body: setType ( type : \"dynamic\" | \"kinematic\" | \"static\" ) Sets a new body type. Open in Browser @ param type \u2014 The new type. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies. setUserData ( method ) love .Body: setUserData ( value : any) Associates a Lua value with the Body. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Body. setX ( method ) love .Body: setX ( x : number) Set the x position of the body. This function cannot wake up the body. Open in Browser @ param x \u2014 The x position. setY ( method ) love .Body: setY ( y : number) Set the y position of the body. This function cannot wake up the body. Open in Browser @ param y \u2014 The y position. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.BodyType love.BufferMode love.ByteData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Canvas generateMipmaps ( method ) love .Canvas: generateMipmaps () Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level. The Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target. If the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen. Open in Browser getDPIScale ( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture. getDepth ( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture. getDepthSampleMode ( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. getDimensions ( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture. getFilter ( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getFormat ( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getHeight ( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture. getLayerCount ( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture. getMSAA ( method ) love .Canvas: getMSAA () -> samples : number Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas. This may be different than the number used as an argument to love.graphics.newCanvas if the system running L\u00d6VE doesn't support that number. Open in Browser @ return samples \u2014 The number of multisample antialiasing samples used by the canvas when drawing to it. getMipmapCount ( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture. getMipmapFilter ( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getMipmapMode ( method ) love .Canvas: getMipmapMode () -> mode : \" auto \"|\" manual \"|\" none \" Gets the MipmapMode this Canvas was created with. Open in Browser @ return mode \u2014 The mipmap mode this Canvas was created with. -- -- Controls whether a Canvas has mipmaps, and its behaviour when it does. -- -- -- [Open in Browser](https://love2d.org/wiki/MipmapMode) -- mode : | \" none \" -- The Canvas has no mipmaps. | \" auto \" -- The Canvas has mipmaps. love.graphics.setCanvas can be used to render to a specific mipmap level, or Canvas:generateMipmaps can (re-)compute all mipmap levels based on the base level. | \" manual \" -- The Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with love.graphics.setCanvas. getPixelDimensions ( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelHeight ( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelWidth ( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. getTextureType ( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis. getWidth ( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture. getWrap ( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) isReadable ( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable. newImageData ( method ) love .Canvas: newImageData () -> data : love.ImageData Generates ImageData from the contents of the Canvas. Open in Browser @ return data \u2014 The new ImageData made from the Canvas' contents. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. renderTo ( method ) love .Canvas: renderTo ( func : function) Render to the Canvas using a function. This is a shortcut to love.graphics.setCanvas: canvas:renderTo( func ) is the same as love.graphics.setCanvas( canvas ) func() love.graphics.setCanvas() Open in Browser @ param func \u2014 A function performing drawing operations. setDepthSampleMode ( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. setFilter ( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setMipmapFilter ( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setWrap ( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ChainShape computeAABB ( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. computeMass ( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia. getChildCount ( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children. getChildEdge ( method ) love .ChainShape: getChildEdge ( index : number) -> shape : love.EdgeShape Returns a child of the shape as an EdgeShape. Open in Browser @ param index \u2014 The index of the child. @ return shape \u2014 The child as an EdgeShape. getNextVertex ( method ) love .ChainShape: getNextVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the next shape. Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called. getPoint ( method ) love .ChainShape: getPoint ( index : number) -> x : number 2. y : number Returns a point of the shape. Open in Browser @ param index \u2014 The index of the point to return. @ return x \u2014 The x-coordinate of the point. @ return y \u2014 The y-coordinate of the point. getPoints ( method ) love .ChainShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns all points of the shape. Open in Browser @ return x1 \u2014 The x-coordinate of the first point. @ return y1 \u2014 The y-coordinate of the first point. @ return x2 \u2014 The x-coordinate of the second point. @ return y2 \u2014 The y-coordinate of the second point. getPreviousVertex ( method ) love .ChainShape: getPreviousVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the previous shape. Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called. getRadius ( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape. getType ( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape. getVertexCount ( method ) love .ChainShape: getVertexCount () -> count : number Returns the number of vertices the shape has. Open in Browser @ return count \u2014 The number of vertices. rayCast ( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setNextVertex ( method ) love .ChainShape: setNextVertex ( x : number, y : number) Sets a vertex that establishes a connection to the next shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex. setPreviousVertex ( method ) love .ChainShape: setPreviousVertex ( x : number, y : number) Sets a vertex that establishes a connection to the previous shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex. testPoint ( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Channel clear ( method ) love .Channel: clear () Clears all the messages in the Channel queue. Open in Browser demand ( method ) love .Channel: demand () -> value : any Retrieves the value of a Channel message and removes it from the message queue. It waits until a message is in the queue then returns the message value. Open in Browser @ return value \u2014 The contents of the message. getCount ( method ) love .Channel: getCount () -> count : number Retrieves the number of messages in the thread Channel queue. Open in Browser @ return count \u2014 The number of messages in the queue. hasRead ( method ) love .Channel: hasRead ( id : number) -> hasread : boolean Gets whether a pushed value has been popped or otherwise removed from the Channel. Open in Browser @ param id \u2014 An id value previously returned by Channel:push. @ return hasread \u2014 Whether the value represented by the id has been removed from the Channel via Channel:pop, Channel:demand, or Channel:clear. peek ( method ) love .Channel: peek () -> value : any Retrieves the value of a Channel message, but leaves it in the queue. It returns nil if there's no message in the queue. Open in Browser @ return value \u2014 The contents of the message. performAtomic ( method ) love .Channel: performAtomic ( func : function, arg1 : any, ... any ) -> ret1 : any Executes the specified function atomically with respect to this Channel. Calling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.) This method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned. Open in Browser @ param func \u2014 The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called. @ param arg1 \u2014 Additional arguments that the given function will receive when it is called. @ return ret1 \u2014 The first return value of the given function (if any.) pop ( method ) love .Channel: pop () -> value : any Retrieves the value of a Channel message and removes it from the message queue. It returns nil if there are no messages in the queue. Open in Browser @ return value \u2014 The contents of the message. push ( method ) love .Channel: push ( value : any) -> id : number Send a message to the thread Channel. See Variant for the list of supported types. Open in Browser @ param value \u2014 The contents of the message. @ return id \u2014 Identifier which can be supplied to Channel:hasRead release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. supply ( method ) love .Channel: supply ( value : any) -> success : boolean Send a message to the thread Channel and wait for a thread to accept it. See Variant for the list of supported types. Open in Browser @ param value \u2014 The contents of the message. @ return success \u2014 Whether the message was successfully supplied (always true). type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.CircleShape computeAABB ( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. computeMass ( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia. getChildCount ( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children. getPoint ( method ) love .CircleShape: getPoint () -> x : number 2. y : number Gets the center point of the circle shape. Open in Browser @ return x \u2014 The x-component of the center point of the circle. @ return y \u2014 The y-component of the center point of the circle. getRadius ( method ) love .CircleShape: getRadius () -> radius : number Gets the radius of the circle shape. Open in Browser @ return radius \u2014 The radius of the circle getType ( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape. rayCast ( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setPoint ( method ) love .CircleShape: setPoint ( x : number, y : number) Sets the location of the center of the circle shape. Open in Browser @ param x \u2014 The x-component of the new center point of the circle. @ param y \u2014 The y-component of the new center point of the circle. setRadius ( method ) love .CircleShape: setRadius ( radius : number) Sets the radius of the circle. Open in Browser @ param radius \u2014 The radius of the circle testPoint ( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.CompareMode love.CompressedData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getFormat ( method ) love .CompressedData: getFormat () -> format : \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \" Gets the compression format of the CompressedData. Open in Browser @ return format \u2014 The format of the CompressedData. -- -- Compressed data formats. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedDataFormat) -- format : | \" lz4 \" -- The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here. | \" zlib \" -- The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio. | \" gzip \" -- The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format. | \" deflate \" -- Raw DEFLATE-compressed data (no header). getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.CompressedDataFormat love.CompressedImageData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getDimensions ( method ) love .CompressedImageData: getDimensions () -> width : number 2. height : number Gets the width and height of the CompressedImageData. Open in Browser @ return width \u2014 The width of the CompressedImageData. @ return height \u2014 The height of the CompressedImageData. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getFormat ( method ) love .CompressedImageData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+31) Gets the format of the CompressedImageData. Open in Browser @ return format \u2014 The format of the CompressedImageData. -- -- Compressed image data formats. Here and here are a couple overviews of many of the formats. -- -- Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedImageFormat) -- format : | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getHeight ( method ) love .CompressedImageData: getHeight () -> height : number Gets the height of the CompressedImageData. Open in Browser @ return height \u2014 The height of the CompressedImageData. getMipmapCount ( method ) love .CompressedImageData: getMipmapCount () -> mipmaps : number Gets the number of mipmap levels in the CompressedImageData. The base mipmap level (original image) is included in the count. Open in Browser @ return mipmaps \u2014 The number of mipmap levels stored in the CompressedImageData. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. getWidth ( method ) love .CompressedImageData: getWidth () -> width : number Gets the width of the CompressedImageData. Open in Browser @ return width \u2014 The width of the CompressedImageData. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.CompressedImageFormat love.Contact getChildren ( method ) love .Contact: getChildren () -> indexA : number 2. indexB : number Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain. Used together with Fixture:rayCast or ChainShape:getChildEdge. Open in Browser @ return indexA \u2014 The child index of the first fixture's shape. @ return indexB \u2014 The child index of the second fixture's shape. getFixtures ( method ) love .Contact: getFixtures () -> fixtureA : love.Fixture 2. fixtureB : love.Fixture Gets the two Fixtures that hold the shapes that are in contact. Open in Browser @ return fixtureA \u2014 The first Fixture. @ return fixtureB \u2014 The second Fixture. getFriction ( method ) love .Contact: getFriction () -> friction : number Get the friction between two shapes that are in contact. Open in Browser @ return friction \u2014 The friction of the contact. getNormal ( method ) love .Contact: getNormal () -> nx : number 2. ny : number Get the normal vector between two shapes that are in contact. This function returns the coordinates of a unit vector that points from the first shape to the second. Open in Browser @ return nx \u2014 The x component of the normal vector. @ return ny \u2014 The y component of the normal vector. getPositions ( method ) love .Contact: getPositions () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns the contact points of the two colliding fixtures. There can be one or two points. Open in Browser @ return x1 \u2014 The x coordinate of the first contact point. @ return y1 \u2014 The y coordinate of the first contact point. @ return x2 \u2014 The x coordinate of the second contact point. @ return y2 \u2014 The y coordinate of the second contact point. getRestitution ( method ) love .Contact: getRestitution () -> restitution : number Get the restitution between two shapes that are in contact. Open in Browser @ return restitution \u2014 The restitution between the two shapes. isEnabled ( method ) love .Contact: isEnabled () -> enabled : boolean Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback. Open in Browser @ return enabled \u2014 True if enabled, false otherwise. isTouching ( method ) love .Contact: isTouching () -> touching : boolean Returns whether the two colliding fixtures are touching each other. Open in Browser @ return touching \u2014 True if they touch or false if not. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. resetFriction ( method ) love .Contact: resetFriction () Resets the contact friction to the mixture value of both fixtures. Open in Browser resetRestitution ( method ) love .Contact: resetRestitution () Resets the contact restitution to the mixture value of both fixtures. Open in Browser setEnabled ( method ) love .Contact: setEnabled ( enabled : boolean) Enables or disables the contact. Open in Browser @ param enabled \u2014 True to enable or false to disable. setFriction ( method ) love .Contact: setFriction ( friction : number) Sets the contact friction. Open in Browser @ param friction \u2014 The contact friction. setRestitution ( method ) love .Contact: setRestitution ( restitution : number) Sets the contact restitution. Open in Browser @ param restitution \u2014 The contact restitution. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ContainerType love.CullMode love.Cursor getType ( method ) love .Cursor: getType () -> ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8) Gets the type of the Cursor. Open in Browser @ return ctype \u2014 The type of the Cursor. -- -- Types of hardware cursors. -- -- -- [Open in Browser](https://love2d.org/wiki/CursorType) -- ctype : | \" image \" -- The cursor is using a custom image. | \" arrow \" -- An arrow pointer. | \" ibeam \" -- An I-beam, normally used when mousing over editable or selectable text. | \" wait \" -- Wait graphic. | \" waitarrow \" -- Small wait cursor with an arrow pointer. | \" crosshair \" -- Crosshair symbol. | \" sizenwse \" -- Double arrow pointing to the top-left and bottom-right. | \" sizenesw \" -- Double arrow pointing to the top-right and bottom-left. | \" sizewe \" -- Double arrow pointing left and right. | \" sizens \" -- Double arrow pointing up and down. | \" sizeall \" -- Four-pointed arrow pointing up, down, left, and right. | \" no \" -- Slashed circle or crossbones. | \" hand \" -- Hand symbol. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.CursorType love.Data clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Decoder clone ( method ) love .Decoder: clone () -> decoder : love.Decoder Creates a new copy of current decoder. The new decoder will start decoding from the beginning of the audio stream. Open in Browser @ return decoder \u2014 New copy of the decoder. decode ( method ) love .Decoder: decode () -> soundData : love.SoundData Decodes the audio and returns a SoundData object containing the decoded audio data. Open in Browser @ return soundData \u2014 Decoded audio data. getBitDepth ( method ) love .Decoder: getBitDepth () -> bitDepth : number Returns the number of bits per sample. Open in Browser @ return bitDepth \u2014 Either 8, or 16. getChannelCount ( method ) love .Decoder: getChannelCount () -> channels : number Returns the number of channels in the stream. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo. getDuration ( method ) love .Decoder: getDuration () -> duration : number Gets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all. Open in Browser @ return duration \u2014 The duration of the sound file in seconds, or -1 if it cannot be determined. getSampleRate ( method ) love .Decoder: getSampleRate () -> rate : number Returns the sample rate of the Decoder. Open in Browser @ return rate \u2014 Number of samples per second. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. seek ( method ) love .Decoder: seek ( offset : number) Sets the currently playing position of the Decoder. Open in Browser @ param offset \u2014 The position to seek to, in seconds. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.DisplayOrientation love.DistanceJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getDampingRatio ( method ) love .DistanceJoint: getDampingRatio () -> ratio : number Gets the damping ratio. Open in Browser @ return ratio \u2014 The damping ratio. getFrequency ( method ) love .DistanceJoint: getFrequency () -> Hz : number Gets the response speed. Open in Browser @ return Hz \u2014 The response speed. getLength ( method ) love .DistanceJoint: getLength () -> l : number Gets the equilibrium distance between the two Bodies. Open in Browser @ return l \u2014 The length between the two Bodies. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setDampingRatio ( method ) love .DistanceJoint: setDampingRatio ( ratio : number) Sets the damping ratio. Open in Browser @ param ratio \u2014 The damping ratio. setFrequency ( method ) love .DistanceJoint: setFrequency ( Hz : number) Sets the response speed. Open in Browser @ param Hz \u2014 The response speed. setLength ( method ) love .DistanceJoint: setLength ( l : number) Sets the equilibrium distance between the two Bodies. Open in Browser @ param l \u2014 The length between the two Bodies. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.DistanceModel love.DrawMode love.Drawable release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.DroppedFile close ( method ) love .File: close () -> success : boolean Closes a File. Open in Browser @ return success \u2014 Whether closing was successful. flush ( method ) love .File: flush () -> success : boolean 2. err : string Flushes any buffered written data in the file to the disk. Open in Browser @ return success \u2014 Whether the file successfully flushed any buffered data to the disk. @ return err \u2014 The error string, if an error occurred and the file could not be flushed. getBuffer ( method ) love .File: getBuffer () -> mode : \" full \"|\" line \"|\" none \" 2. size: number Gets the buffer mode of a file. Open in Browser @ return mode \u2014 The current buffer mode of the file. @ return size \u2014 The maximum size in bytes of the file's buffer. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached. getFilename ( method ) love .File: getFilename () -> filename : string Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path. Open in Browser @ return filename \u2014 The filename of the File. getMode ( method ) love .File: getMode () -> mode : \" a \"|\" c \"|\" r \"|\" w \" Gets the FileMode the file has been opened with. Open in Browser @ return mode \u2014 The mode this file has been opened with. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.) getSize ( method ) love .File: getSize () -> size : number Returns the file size. Open in Browser @ return size \u2014 The file size in bytes. isEOF ( method ) love .File: isEOF () -> eof : boolean Gets whether end-of-file has been reached. Open in Browser @ return eof \u2014 Whether EOF has been reached. isOpen ( method ) love .File: isOpen () -> open : boolean Gets whether the file is open. Open in Browser @ return open \u2014 True if the file is currently open, false otherwise. lines ( method ) love .File: lines () -> iterator : function Iterate over all the lines in a file. Open in Browser @ return iterator \u2014 The iterator (can be used in for loops). open ( method ) love .File: open ( mode : \" a \"|\" c \"|\" r \"|\" w \") -> ok: boolean 2. err: string Open the file for write, read or append. Open in Browser @ param mode \u2014 The mode to open the file in. @ return ok \u2014 True on success, false otherwise. @ return err \u2014 The error string if an error occurred. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.) read ( method ) love .File: read ( bytes ? : number ) -> contents : string 2. size : number Read a number of bytes from a file. Open in Browser @ param bytes \u2014 The number of bytes to read. @ return contents \u2014 The contents of the read bytes. @ return size \u2014 How many bytes have been read. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. seek ( method ) love .File: seek ( pos : number) -> success : boolean Seek to a position in a file Open in Browser @ param pos \u2014 The position to seek to @ return success \u2014 Whether the operation was successful setBuffer ( method ) love .File: setBuffer ( mode : \" full \"|\" line \"|\" none \", size?: number) -> success: boolean 2. errorstr: string Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode. File:flush will force any buffered data to be written to the disk. Open in Browser @ param mode \u2014 The buffer mode to use. @ param size \u2014 The maximum size in bytes of the file's buffer. @ return success \u2014 Whether the buffer mode was successfully set. @ return errorstr \u2014 The error string, if the buffer mode could not be set and an error occurred. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached. tell ( method ) love .File: tell () -> pos : number Returns the position in the file. Open in Browser @ return pos \u2014 The current position. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. write ( method ) love .File: write ( data : string, size ? : number ) -> success : boolean 2. err : string Write data to a file. Open in Browser @ param data \u2014 The string data to write. @ param size \u2014 How many bytes to write. @ return success \u2014 Whether the operation was successful. @ return err \u2014 The error string if an error occurred. love.EdgeShape computeAABB ( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. computeMass ( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia. getChildCount ( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children. getNextVertex ( method ) love .EdgeShape: getNextVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the next shape. Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called. getPoints ( method ) love .EdgeShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns the local coordinates of the edge points. Open in Browser @ return x1 \u2014 The x-component of the first vertex. @ return y1 \u2014 The y-component of the first vertex. @ return x2 \u2014 The x-component of the second vertex. @ return y2 \u2014 The y-component of the second vertex. getPreviousVertex ( method ) love .EdgeShape: getPreviousVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the previous shape. Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called. getRadius ( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape. getType ( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape. rayCast ( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setNextVertex ( method ) love .EdgeShape: setNextVertex ( x : number, y : number) Sets a vertex that establishes a connection to the next shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex. setPreviousVertex ( method ) love .EdgeShape: setPreviousVertex ( x : number, y : number) Sets a vertex that establishes a connection to the previous shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex. testPoint ( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.EffectType love.EffectWaveform love.EncodeFormat love.Event love.File close ( method ) love .File: close () -> success : boolean Closes a File. Open in Browser @ return success \u2014 Whether closing was successful. flush ( method ) love .File: flush () -> success : boolean 2. err : string Flushes any buffered written data in the file to the disk. Open in Browser @ return success \u2014 Whether the file successfully flushed any buffered data to the disk. @ return err \u2014 The error string, if an error occurred and the file could not be flushed. getBuffer ( method ) love .File: getBuffer () -> mode : \" full \"|\" line \"|\" none \" 2. size: number Gets the buffer mode of a file. Open in Browser @ return mode \u2014 The current buffer mode of the file. @ return size \u2014 The maximum size in bytes of the file's buffer. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached. getFilename ( method ) love .File: getFilename () -> filename : string Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path. Open in Browser @ return filename \u2014 The filename of the File. getMode ( method ) love .File: getMode () -> mode : \" a \"|\" c \"|\" r \"|\" w \" Gets the FileMode the file has been opened with. Open in Browser @ return mode \u2014 The mode this file has been opened with. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.) getSize ( method ) love .File: getSize () -> size : number Returns the file size. Open in Browser @ return size \u2014 The file size in bytes. isEOF ( method ) love .File: isEOF () -> eof : boolean Gets whether end-of-file has been reached. Open in Browser @ return eof \u2014 Whether EOF has been reached. isOpen ( method ) love .File: isOpen () -> open : boolean Gets whether the file is open. Open in Browser @ return open \u2014 True if the file is currently open, false otherwise. lines ( method ) love .File: lines () -> iterator : function Iterate over all the lines in a file. Open in Browser @ return iterator \u2014 The iterator (can be used in for loops). open ( method ) love .File: open ( mode : \" a \"|\" c \"|\" r \"|\" w \") -> ok: boolean 2. err: string Open the file for write, read or append. Open in Browser @ param mode \u2014 The mode to open the file in. @ return ok \u2014 True on success, false otherwise. @ return err \u2014 The error string if an error occurred. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.) read ( method ) love .File: read ( bytes ? : number ) -> contents : string 2. size : number Read a number of bytes from a file. Open in Browser @ param bytes \u2014 The number of bytes to read. @ return contents \u2014 The contents of the read bytes. @ return size \u2014 How many bytes have been read. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. seek ( method ) love .File: seek ( pos : number) -> success : boolean Seek to a position in a file Open in Browser @ param pos \u2014 The position to seek to @ return success \u2014 Whether the operation was successful setBuffer ( method ) love .File: setBuffer ( mode : \" full \"|\" line \"|\" none \", size?: number) -> success: boolean 2. errorstr: string Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode. File:flush will force any buffered data to be written to the disk. Open in Browser @ param mode \u2014 The buffer mode to use. @ param size \u2014 The maximum size in bytes of the file's buffer. @ return success \u2014 Whether the buffer mode was successfully set. @ return errorstr \u2014 The error string, if the buffer mode could not be set and an error occurred. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached. tell ( method ) love .File: tell () -> pos : number Returns the position in the file. Open in Browser @ return pos \u2014 The current position. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. write ( method ) love .File: write ( data : string, size ? : number ) -> success : boolean 2. err : string Write data to a file. Open in Browser @ param data \u2014 The string data to write. @ param size \u2014 How many bytes to write. @ return success \u2014 Whether the operation was successful. @ return err \u2014 The error string if an error occurred. love.FileData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getExtension ( method ) love .FileData: getExtension () -> ext : string Gets the extension of the FileData. Open in Browser @ return ext \u2014 The extension of the file the FileData represents. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getFilename ( method ) love .FileData: getFilename () -> name : string Gets the filename of the FileData. Open in Browser @ return name \u2014 The name of the file the FileData represents. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.FileDecoder love.FileMode love.FileType love.FilterMode love.FilterType love.Fixture destroy ( method ) love .Fixture: destroy () Destroys the fixture. Open in Browser getBody ( method ) love .Fixture: getBody () -> body : love.Body Returns the body to which the fixture is attached. Open in Browser @ return body \u2014 The parent body. getBoundingBox ( method ) love .Fixture: getBoundingBox ( index ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape. Open in Browser @ param index \u2014 A bounding box of the fixture. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. getCategory ( method ) love .Fixture: getCategory () Returns the categories the fixture belongs to. Open in Browser getDensity ( method ) love .Fixture: getDensity () -> density : number Returns the density of the fixture. Open in Browser @ return density \u2014 The fixture density in kilograms per square meter. getFilterData ( method ) love .Fixture: getFilterData () -> categories : number 2. mask : number 3. group : number Returns the filter data of the fixture. Categories and masks are encoded as the bits of a 16-bit integer. Open in Browser @ return categories \u2014 The categories as an integer from 0 to 65535. @ return mask \u2014 The mask as an integer from 0 to 65535. @ return group \u2014 The group as an integer from -32768 to 32767. getFriction ( method ) love .Fixture: getFriction () -> friction : number Returns the friction of the fixture. Open in Browser @ return friction \u2014 The fixture friction. getGroupIndex ( method ) love .Fixture: getGroupIndex () -> group : number Returns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group. The groups range from -32768 to 32767. Open in Browser @ return group \u2014 The group of the fixture. getMask ( method ) love .Fixture: getMask () Returns which categories this fixture should '''NOT''' collide with. Open in Browser getMassData ( method ) love .Fixture: getMassData () -> x : number 2. y : number 3. mass : number 4. inertia : number Returns the mass, its center and the rotational inertia. Open in Browser @ return x \u2014 The x position of the center of mass. @ return y \u2014 The y position of the center of mass. @ return mass \u2014 The mass of the fixture. @ return inertia \u2014 The rotational inertia. getRestitution ( method ) love .Fixture: getRestitution () -> restitution : number Returns the restitution of the fixture. Open in Browser @ return restitution \u2014 The fixture restitution. getShape ( method ) love .Fixture: getShape () -> shape : love.Shape Returns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps. Open in Browser @ return shape \u2014 The fixture's shape. getUserData ( method ) love .Fixture: getUserData () -> value : any Returns the Lua value associated with this fixture. Open in Browser @ return value \u2014 The Lua value associated with the fixture. isDestroyed ( method ) love .Fixture: isDestroyed () -> destroyed : boolean Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used. Open in Browser @ return destroyed \u2014 Whether the Fixture is destroyed. isSensor ( method ) love .Fixture: isSensor () -> sensor : boolean Returns whether the fixture is a sensor. Open in Browser @ return sensor \u2014 If the fixture is a sensor. rayCast ( method ) love .Fixture: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setCategory ( method ) love .Fixture: setCategory (... number ) Sets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16. All fixture's default category is 1. Open in Browser setDensity ( method ) love .Fixture: setDensity ( density : number) Sets the density of the fixture. Call Body:resetMassData if this needs to take effect immediately. Open in Browser @ param density \u2014 The fixture density in kilograms per square meter. setFilterData ( method ) love .Fixture: setFilterData ( categories : number, mask : number, group : number) Sets the filter data of the fixture. Groups, categories, and mask can be used to define the collision behaviour of the fixture. If two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set. There can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer. When created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0. This function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use Fixture:setCategory, Fixture:setMask or Fixture:setGroupIndex respectively. Open in Browser @ param categories \u2014 The categories as an integer from 0 to 65535. @ param mask \u2014 The mask as an integer from 0 to 65535. @ param group \u2014 The group as an integer from -32768 to 32767. setFriction ( method ) love .Fixture: setFriction ( friction : number) Sets the friction of the fixture. Friction determines how shapes react when they 'slide' along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0. Open in Browser @ param friction \u2014 The fixture friction. setGroupIndex ( method ) love .Fixture: setGroupIndex ( group : number) Sets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group. The groups range from -32768 to 32767. Open in Browser @ param group \u2014 The group as an integer from -32768 to 32767. setMask ( method ) love .Fixture: setMask (... number ) Sets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16. This fixture will '''NOT''' collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected. Open in Browser setRestitution ( method ) love .Fixture: setRestitution ( restitution : number) Sets the restitution of the fixture. Open in Browser @ param restitution \u2014 The fixture restitution. setSensor ( method ) love .Fixture: setSensor ( sensor : boolean) Sets whether the fixture should act as a sensor. Sensors do not cause collision responses, but the begin-contact and end-contact World callbacks will still be called for this fixture. Open in Browser @ param sensor \u2014 The sensor status. setUserData ( method ) love .Fixture: setUserData ( value : any) Associates a Lua value with the fixture. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the fixture. testPoint ( method ) love .Fixture: testPoint ( x : number, y : number) -> isInside : boolean Checks if a point is inside the shape of the fixture. Open in Browser @ param x \u2014 The x position of the point. @ param y \u2014 The y position of the point. @ return isInside \u2014 True if the point is inside or false if it is outside. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Font getAscent ( method ) love .Font: getAscent () -> ascent : number Gets the ascent of the Font. The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline. Open in Browser @ return ascent \u2014 The ascent of the Font in pixels. getBaseline ( method ) love .Font: getBaseline () -> baseline : number Gets the baseline of the Font. Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline. Open in Browser @ return baseline \u2014 The baseline of the Font in pixels. getDPIScale ( method ) love .Font: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Font. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1. The font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, L\u00d6VE uses the screen's DPI scale factor when creating TrueType fonts. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Font. getDescent ( method ) love .Font: getDescent () -> descent : number Gets the descent of the Font. The descent spans the distance between the baseline and the lowest descending glyph in a typeface. Open in Browser @ return descent \u2014 The descent of the Font in pixels. getFilter ( method ) love .Font: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode for a font. Open in Browser @ return min \u2014 Filter mode used when minifying the font. @ return mag \u2014 Filter mode used when magnifying the font. @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getHeight ( method ) love .Font: getHeight () -> height : number Gets the height of the Font. The height of the font is the size including any spacing; the height which it will need. Open in Browser @ return height \u2014 The height of the Font in pixels. getKerning ( method ) love .Font: getKerning ( leftchar : string, rightchar : string) -> kerning : number Gets the kerning between two characters in the Font. Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually. Open in Browser @ param leftchar \u2014 The left character. @ param rightchar \u2014 The right character. @ return kerning \u2014 The kerning amount to add to the spacing between the two characters. May be negative. getLineHeight ( method ) love .Font: getLineHeight () -> height : number Gets the line height. This will be the value previously set by Font:setLineHeight, or 1.0 by default. Open in Browser @ return height \u2014 The current line height. getWidth ( method ) love .Font: getWidth ( text : string| number ) -> width : number Determines the maximum width (accounting for newlines) taken by the given string. Open in Browser @ param text \u2014 A string or number. @ return width \u2014 The width of the text. getWrap ( method ) love .Font: getWrap ( text : string, wraplimit : number) -> width : number 2. wrappedtext : table Gets formatting information for text, given a wrap limit. This function accounts for newlines correctly (i.e. '\\n'). Open in Browser @ param text \u2014 The text that will be wrapped. @ param wraplimit \u2014 The maximum width in pixels of each line that ''text'' is allowed before wrapping. @ return width \u2014 The maximum width of the wrapped text. @ return wrappedtext \u2014 A sequence containing each line of text that was wrapped. hasGlyphs ( method ) love .Font: hasGlyphs ( text : string) -> hasglyph : boolean Gets whether the Font can render a character or string. Open in Browser @ param text \u2014 A UTF-8 encoded unicode string. @ return hasglyph \u2014 Whether the font can render all the UTF-8 characters in the string. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setFallbacks ( method ) love .Font: setFallbacks ( fallbackfont1 : love.Font, ... love .Font) Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS). Open in Browser @ param fallbackfont1 \u2014 The first fallback Font to use. setFilter ( method ) love .Font: setFilter ( min : \" linear \"|\" nearest \", mag: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode for a font. Open in Browser @ param min \u2014 How to scale a font down. @ param mag \u2014 How to scale a font up. @ param anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setLineHeight ( method ) love .Font: setLineHeight ( height : number) Sets the line height. When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0. Open in Browser @ param height \u2014 The new line height. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.FrictionJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getMaxForce ( method ) love .FrictionJoint: getMaxForce () -> force : number Gets the maximum friction force in Newtons. Open in Browser @ return force \u2014 Maximum force in Newtons. getMaxTorque ( method ) love .FrictionJoint: getMaxTorque () -> torque : number Gets the maximum friction torque in Newton-meters. Open in Browser @ return torque \u2014 Maximum torque in Newton-meters. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setMaxForce ( method ) love .FrictionJoint: setMaxForce ( maxForce : number) Sets the maximum friction force in Newtons. Open in Browser @ param maxForce \u2014 Max force in Newtons. setMaxTorque ( method ) love .FrictionJoint: setMaxTorque ( torque : number) Sets the maximum friction torque in Newton-meters. Open in Browser @ param torque \u2014 Maximum torque in Newton-meters. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.FullscreenType love.GamepadAxis love.GamepadButton love.GearJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getJoints ( method ) love .GearJoint: getJoints () -> joint1 : love.Joint 2. joint2 : love.Joint Get the Joints connected by this GearJoint. Open in Browser @ return joint1 \u2014 The first connected Joint. @ return joint2 \u2014 The second connected Joint. getRatio ( method ) love .GearJoint: getRatio () -> ratio : number Get the ratio of a gear joint. Open in Browser @ return ratio \u2014 The ratio of the joint. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setRatio ( method ) love .GearJoint: setRatio ( ratio : number) Set the ratio of a gear joint. Open in Browser @ param ratio \u2014 The new ratio of the joint. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.GlyphData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getAdvance ( method ) love .GlyphData: getAdvance () -> advance : number Gets glyph advance. Open in Browser @ return advance \u2014 Glyph advance. getBearing ( method ) love .GlyphData: getBearing () -> bx : number 2. by : number Gets glyph bearing. Open in Browser @ return bx \u2014 Glyph bearing X. @ return by \u2014 Glyph bearing Y. getBoundingBox ( method ) love .GlyphData: getBoundingBox () -> x : number 2. y : number 3. width : number 4. height : number Gets glyph bounding box. Open in Browser @ return x \u2014 Glyph position x. @ return y \u2014 Glyph position y. @ return width \u2014 Glyph width. @ return height \u2014 Glyph height. getDimensions ( method ) love .GlyphData: getDimensions () -> width : number 2. height : number Gets glyph dimensions. Open in Browser @ return width \u2014 Glyph width. @ return height \u2014 Glyph height. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getFormat ( method ) love .GlyphData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets glyph pixel format. Open in Browser @ return format \u2014 Glyph pixel format. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getGlyph ( method ) love .GlyphData: getGlyph () -> glyph : number Gets glyph number. Open in Browser @ return glyph \u2014 Glyph number. getGlyphString ( method ) love .GlyphData: getGlyphString () -> glyph : string Gets glyph string. Open in Browser @ return glyph \u2014 Glyph string. getHeight ( method ) love .GlyphData: getHeight () -> height : number Gets glyph height. Open in Browser @ return height \u2014 Glyph height. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. getWidth ( method ) love .GlyphData: getWidth () -> width : number Gets glyph width. Open in Browser @ return width \u2014 Glyph width. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.GraphicsFeature love.GraphicsLimit love.HashFunction love.HintingMode love.Image getDPIScale ( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture. getDepth ( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture. getDepthSampleMode ( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. getDimensions ( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture. getFilter ( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getFormat ( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getHeight ( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture. getLayerCount ( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture. getMipmapCount ( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture. getMipmapFilter ( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getPixelDimensions ( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelHeight ( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelWidth ( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. getTextureType ( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis. getWidth ( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture. getWrap ( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) isCompressed ( method ) love .Image: isCompressed () -> compressed : boolean Gets whether the Image was created from CompressedData. Compressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data. Open in Browser @ return compressed \u2014 Whether the Image is stored as a compressed texture on the GPU. isFormatLinear ( method ) love .Image: isFormatLinear () -> linear : boolean Gets whether the Image was created with the linear (non-gamma corrected) flag set to true. This method always returns false when gamma-correct rendering is not enabled. Open in Browser @ return linear \u2014 Whether the Image's internal pixel format is linear (not gamma corrected), when gamma-correct rendering is enabled. isReadable ( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. replacePixels ( method ) love .Image: replacePixels ( data : love.ImageData, slice ? : number , mipmap ? : number , x ? : number , y ? : number , reloadmipmaps ? : boolean ) Replace the contents of an Image. Open in Browser @ param data \u2014 The new ImageData to replace the contents with. @ param slice \u2014 Which cubemap face, array index, or volume layer to replace, if applicable. @ param mipmap \u2014 The mimap level to replace, if the Image has mipmaps. @ param x \u2014 The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level. @ param y \u2014 The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level. @ param reloadmipmaps \u2014 Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise. setDepthSampleMode ( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. setFilter ( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setMipmapFilter ( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setWrap ( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ImageData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. encode ( method ) love .ImageData: encode ( format : \" bmp \"|\" jpg \"|\" png \"|\" tga \", filename?: string) -> filedata: love.FileData Encodes the ImageData and optionally writes it to the save directory. Open in Browser @ param format \u2014 The format to encode the image as. @ param filename \u2014 The filename to write the file to. If nil, no file will be written but the FileData will still be returned. @ return filedata \u2014 The encoded image as a new FileData object. -- -- Encoded image formats. -- -- -- [Open in Browser](https://love2d.org/wiki/ImageFormat) -- format : | \" tga \" -- Targa image format. | \" png \" -- PNG image format. | \" jpg \" -- JPG image format. | \" bmp \" -- BMP image format. getDimensions ( method ) love .ImageData: getDimensions () -> width : number 2. height : number Gets the width and height of the ImageData in pixels. Open in Browser @ return width \u2014 The width of the ImageData in pixels. @ return height \u2014 The height of the ImageData in pixels. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getFormat ( method ) love .ImageData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the ImageData. Open in Browser @ return format \u2014 The pixel format the ImageData was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getHeight ( method ) love .ImageData: getHeight () -> height : number Gets the height of the ImageData in pixels. Open in Browser @ return height \u2014 The height of the ImageData in pixels. getPixel ( method ) love .ImageData: getPixel ( x : number, y : number) -> r : number 2. g : number 3. b : number 4. a : number Gets the color of a pixel at a specific position in the image. Valid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param x \u2014 The position of the pixel on the x-axis. @ param y \u2014 The position of the pixel on the y-axis. @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1). getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. getWidth ( method ) love .ImageData: getWidth () -> width : number Gets the width of the ImageData in pixels. Open in Browser @ return width \u2014 The width of the ImageData in pixels. mapPixel ( method ) love .ImageData: mapPixel ( pixelFunction : function, x ? : number , y ? : number , width ? : number , height ? : number ) Transform an image by applying a function to every pixel. This function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData. The passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel. function pixelFunction(x, y, r, g, b, a) -- template for defining your own pixel mapping function -- perform computations giving the new values for r, g, b and a -- ... return r, g, b, a end In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param pixelFunction \u2014 Function to apply to every pixel. @ param x \u2014 The x-axis of the top-left corner of the area within the ImageData to apply the function to. @ param y \u2014 The y-axis of the top-left corner of the area within the ImageData to apply the function to. @ param width \u2014 The width of the area within the ImageData to apply the function to. @ param height \u2014 The height of the area within the ImageData to apply the function to. paste ( method ) love .ImageData: paste ( source : love.ImageData, dx : number, dy : number, sx : number, sy : number, sw : number, sh : number) Paste into ImageData from another source ImageData. Open in Browser @ param source \u2014 Source ImageData from which to copy. @ param dx \u2014 Destination top-left position on x-axis. @ param dy \u2014 Destination top-left position on y-axis. @ param sx \u2014 Source top-left position on x-axis. @ param sy \u2014 Source top-left position on y-axis. @ param sw \u2014 Source width. @ param sh \u2014 Source height. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setPixel ( method ) love .ImageData: setPixel ( x : number, y : number, r : number, g : number, b : number, a : number) Sets the color of a pixel at a specific position in the image. Valid x and y values start at 0 and go up to image width and height minus 1. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param x \u2014 The position of the pixel on the x-axis. @ param y \u2014 The position of the pixel on the y-axis. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1). type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ImageFormat love.IndexDataType love.Joint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.JointType love.Joystick getAxes ( method ) love .Joystick: getAxes () -> axisDir1 : number 2. axisDir2 : number 3. axisDirN : number Gets the direction of each axis. Open in Browser @ return axisDir1 \u2014 Direction of axis1. @ return axisDir2 \u2014 Direction of axis2. @ return axisDirN \u2014 Direction of axisN. getAxis ( method ) love .Joystick: getAxis ( axis : number) -> direction : number Gets the direction of an axis. Open in Browser @ param axis \u2014 The index of the axis to be checked. @ return direction \u2014 Current value of the axis. getAxisCount ( method ) love .Joystick: getAxisCount () -> axes : number Gets the number of axes on the joystick. Open in Browser @ return axes \u2014 The number of axes available. getButtonCount ( method ) love .Joystick: getButtonCount () -> buttons : number Gets the number of buttons on the joystick. Open in Browser @ return buttons \u2014 The number of buttons available. getDeviceInfo ( method ) love .Joystick: getDeviceInfo () -> vendorID : number 2. productID : number 3. productVersion : number Gets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems. Can be used to show different icons, etc. for different gamepads. Open in Browser @ return vendorID \u2014 The USB vendor ID of the joystick. @ return productID \u2014 The USB product ID of the joystick. @ return productVersion \u2014 The product version of the joystick. getGUID ( method ) love .Joystick: getGUID () -> guid : string Gets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent. Open in Browser @ return guid \u2014 The Joystick type's OS-dependent unique identifier. getGamepadAxis ( method ) love .Joystick: getGamepadAxis ( axis : \" leftx \"|\" lefty \"|\" rightx \"|\" righty \"|\" triggerleft \"...(+1)) -> direction: number Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a gamepad or isn't connected, this function will always return 0. Open in Browser @ param axis \u2014 The virtual axis to be checked. @ return direction \u2014 Current value of the axis. -- -- Virtual gamepad axes. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadAxis) -- axis : | \" leftx \" -- The x-axis of the left thumbstick. | \" lefty \" -- The y-axis of the left thumbstick. | \" rightx \" -- The x-axis of the right thumbstick. | \" righty \" -- The y-axis of the right thumbstick. | \" triggerleft \" -- Left analog trigger. | \" triggerright \" -- Right analog trigger. getGamepadMapping ( method ) love .Joystick: getGamepadMapping ( axis : \" leftx \"|\" lefty \"|\" rightx \"|\" righty \"|\" triggerleft \"...(+1)) -> inputtype: \" axis \"|\" button \"|\" hat \" 2. inputindex: number 3. hatdirection: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4) Gets the button, axis or hat that a virtual gamepad input is bound to. Open in Browser @ param axis \u2014 The virtual gamepad axis to get the binding for. @ return inputtype \u2014 The type of input the virtual gamepad axis is bound to. @ return inputindex \u2014 The index of the Joystick's button, axis or hat that the virtual gamepad axis is bound to. @ return hatdirection \u2014 The direction of the hat, if the virtual gamepad axis is bound to a hat. nil otherwise. -- -- Virtual gamepad axes. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadAxis) -- axis : | \" leftx \" -- The x-axis of the left thumbstick. | \" lefty \" -- The y-axis of the left thumbstick. | \" rightx \" -- The x-axis of the right thumbstick. | \" righty \" -- The y-axis of the right thumbstick. | \" triggerleft \" -- Left analog trigger. | \" triggerright \" -- Right analog trigger. -- -- Types of Joystick inputs. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickInputType) -- inputtype: | \" axis \" -- Analog axis. | \" button \" -- Button. | \" hat \" -- 8-direction hat value. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- hatdirection: | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up getGamepadMappingString ( method ) love .Joystick: getGamepadMappingString () -> mappingstring : string Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a gamepad. The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings. Open in Browser @ return mappingstring \u2014 A string containing the Joystick's gamepad mappings, or nil if the Joystick is not recognized as a gamepad. getHat ( method ) love .Joystick: getHat ( hat : number) -> direction : \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4) Gets the direction of the Joystick's hat. Open in Browser @ param hat \u2014 The index of the hat to be checked. @ return direction \u2014 The direction the hat is pushed. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- direction : | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up getHatCount ( method ) love .Joystick: getHatCount () -> hats : number Gets the number of hats on the joystick. Open in Browser @ return hats \u2014 How many hats the joystick has. getID ( method ) love .Joystick: getID () -> id : number 2. instanceid : number Gets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it '''will''' change when the game is re-launched. Open in Browser @ return id \u2014 The Joystick's unique identifier. Remains the same as long as the game is running. @ return instanceid \u2014 Unique instance identifier. Changes every time the Joystick is reconnected. nil if the Joystick is not connected. getName ( method ) love .Joystick: getName () -> name : string Gets the name of the joystick. Open in Browser @ return name \u2014 The name of the joystick. getVibration ( method ) love .Joystick: getVibration () -> left : number 2. right : number Gets the current vibration motor strengths on a Joystick with rumble support. Open in Browser @ return left \u2014 Current strength of the left vibration motor on the Joystick. @ return right \u2014 Current strength of the right vibration motor on the Joystick. isConnected ( method ) love .Joystick: isConnected () -> connected : boolean Gets whether the Joystick is connected. Open in Browser @ return connected \u2014 True if the Joystick is currently connected, false otherwise. isDown ( method ) love .Joystick: isDown ( buttonN : number) -> anyDown : boolean Checks if a button on the Joystick is pressed. L\u00d6VE 0.9.0 had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in 0.9.1. Open in Browser @ param buttonN \u2014 The index of a button to check. @ return anyDown \u2014 True if any supplied button is down, false if not. isGamepad ( method ) love .Joystick: isGamepad () -> isgamepad : boolean Gets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via Joystick:getGamepadAxis, Joystick:isGamepadDown, love.gamepadpressed, and related functions. L\u00d6VE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with love.joystick.setGamepadMapping. Open in Browser @ return isgamepad \u2014 True if the Joystick is recognized as a gamepad, false otherwise. isGamepadDown ( method ) love .Joystick: isGamepadDown ( buttonN : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10)) -> anyDown: boolean Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a Gamepad or isn't connected, then this function will always return false. Open in Browser @ param buttonN \u2014 The gamepad button to check. @ return anyDown \u2014 True if any supplied button is down, false if not. -- -- Virtual gamepad buttons. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadButton) -- buttonN : | \" a \" -- Bottom face button (A). | \" b \" -- Right face button (B). | \" x \" -- Left face button (X). | \" y \" -- Top face button (Y). | \" back \" -- Back button. | \" guide \" -- Guide button. | \" start \" -- Start button. | \" leftstick \" -- Left stick click button. | \" rightstick \" -- Right stick click button. | \" leftshoulder \" -- Left bumper. | \" rightshoulder \" -- Right bumper. | \" dpup \" -- D-pad up. | \" dpdown \" -- D-pad down. | \" dpleft \" -- D-pad left. | \" dpright \" -- D-pad right. isVibrationSupported ( method ) love .Joystick: isVibrationSupported () -> supported : boolean Gets whether the Joystick supports vibration. Open in Browser @ return supported \u2014 True if rumble / force feedback vibration is supported on this Joystick, false if not. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setVibration ( method ) love .Joystick: setVibration ( left : number, right : number) -> success : boolean Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check. Open in Browser @ param left \u2014 Strength of the left vibration motor on the Joystick. Must be in the range of 1. @ param right \u2014 Strength of the right vibration motor on the Joystick. Must be in the range of 1. @ return success \u2014 True if the vibration was successfully applied, false if not. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.JoystickHat love.JoystickInputType love.KeyConstant love.LineJoin love.LineStyle love.MatrixLayout love.Mesh attachAttribute ( method ) love .Mesh: attachAttribute ( name : string, mesh : love.Mesh) Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes. Open in Browser @ param name \u2014 The name of the vertex attribute to attach. @ param mesh \u2014 The Mesh to get the vertex attribute from. detachAttribute ( method ) love .Mesh: detachAttribute ( name : string) -> success : boolean Removes a previously attached vertex attribute from this Mesh. Open in Browser @ param name \u2014 The name of the attached vertex attribute to detach. @ return success \u2014 Whether the attribute was successfully detached. flush ( method ) love .Mesh: flush () Immediately sends all modified vertex data in the Mesh to the graphics card. Normally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using Mesh:flush gives more control over when the work happens. If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls. Open in Browser getDrawMode ( method ) love .Mesh: getDrawMode () -> mode : \" fan \"|\" points \"|\" strip \"|\" triangles \" Gets the mode used when drawing the Mesh. Open in Browser @ return mode \u2014 The mode used when drawing the Mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.) getDrawRange ( method ) love .Mesh: getDrawRange () -> min : number 2. max : number Gets the range of vertices used when drawing the Mesh. Open in Browser @ return min \u2014 The index of the first vertex used when drawing, or the index of the first value in the vertex map used if one is set for this Mesh. @ return max \u2014 The index of the last vertex used when drawing, or the index of the last value in the vertex map used if one is set for this Mesh. getTexture ( method ) love .Mesh: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used when drawing the Mesh. Open in Browser @ return texture \u2014 The Image or Canvas to texture the Mesh with when drawing, or nil if none is set. getVertex ( method ) love .Mesh: getVertex ( index : number) -> attributecomponent : number Gets the properties of a vertex in the Mesh. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param index \u2014 The one-based index of the vertex you want to retrieve the information for. @ return attributecomponent \u2014 The first component of the first vertex attribute in the specified vertex. getVertexAttribute ( method ) love .Mesh: getVertexAttribute ( vertexindex : number, attributeindex : number) -> value1 : number 2. value2 : number Gets the properties of a specific attribute within a vertex in the Mesh. Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute. Open in Browser @ param vertexindex \u2014 The index of the the vertex you want to retrieve the attribute for (one-based). @ param attributeindex \u2014 The index of the attribute within the vertex to be retrieved (one-based). @ return value1 \u2014 The value of the first component of the attribute. @ return value2 \u2014 The value of the second component of the attribute. getVertexCount ( method ) love .Mesh: getVertexCount () -> count : number Gets the total number of vertices in the Mesh. Open in Browser @ return count \u2014 The total number of vertices in the mesh. getVertexFormat ( method ) love .Mesh: getVertexFormat () -> format : { attribute: table } Gets the vertex format that the Mesh was created with. Open in Browser @ return format \u2014 The vertex format of the Mesh, which is a table containing tables for each vertex attribute the Mesh was created with, in the form of {attribute, ...}. getVertexMap ( method ) love .Mesh: getVertexMap () -> map : table Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen. If no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in L\u00d6VE 0.10.0+, or an empty table in 0.9.2 and older. Open in Browser @ return map \u2014 A table containing the list of vertex indices used when drawing. isAttributeEnabled ( method ) love .Mesh: isAttributeEnabled ( name : string) -> enabled : boolean Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh. Open in Browser @ param name \u2014 The name of the vertex attribute to be checked. @ return enabled \u2014 Whether the vertex attribute is used when drawing this Mesh. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setAttributeEnabled ( method ) love .Mesh: setAttributeEnabled ( name : string, enable : boolean) Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh. Open in Browser @ param name \u2014 The name of the vertex attribute to enable or disable. @ param enable \u2014 Whether the vertex attribute is used when drawing this Mesh. setDrawMode ( method ) love .Mesh: setDrawMode ( mode : \" fan \"|\" points \"|\" strip \"|\" triangles \") Sets the mode used when drawing the Mesh. Open in Browser @ param mode \u2014 The mode to use when drawing the Mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.) setDrawRange ( method ) love .Mesh: setDrawRange ( start : number, count : number) Restricts the drawn vertices of the Mesh to a subset of the total. Open in Browser @ param start \u2014 The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh. @ param count \u2014 The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh. setTexture ( method ) love .Mesh: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) used when drawing the Mesh. Open in Browser @ param texture \u2014 The Image or Canvas to texture the Mesh with when drawing. setVertex ( method ) love .Mesh: setVertex ( index : number, attributecomponent : number, ... number ) Sets the properties of a vertex in the Mesh. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param index \u2014 The index of the the vertex you want to modify (one-based). @ param attributecomponent \u2014 The first component of the first vertex attribute in the specified vertex. setVertexAttribute ( method ) love .Mesh: setVertexAttribute ( vertexindex : number, attributeindex : number, value1 : number, value2 : number, ... number ) Sets the properties of a specific attribute within a vertex in the Mesh. Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute. Open in Browser @ param vertexindex \u2014 The index of the the vertex to be modified (one-based). @ param attributeindex \u2014 The index of the attribute within the vertex to be modified (one-based). @ param value1 \u2014 The new value for the first component of the attribute. @ param value2 \u2014 The new value for the second component of the attribute. setVertexMap ( method ) love .Mesh: setVertexMap ( map : table) Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen. The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes. Open in Browser @ param map \u2014 A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount(). setVertices ( method ) love .Mesh: setVertices ( vertices : { attributecomponent: number }, startvertex ? : number , count ? : number ) Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop. Open in Browser @ param vertices \u2014 The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}. @ param startvertex \u2014 The index of the first vertex to replace. @ param count \u2014 Amount of vertices to replace. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.MeshDrawMode love.MessageBoxType love.MipmapMode love.MotorJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getAngularOffset ( method ) love .MotorJoint: getAngularOffset () -> angleoffset : number Gets the target angular offset between the two Bodies the Joint is attached to. Open in Browser @ return angleoffset \u2014 The target angular offset in radians: the second body's angle minus the first body's angle. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getLinearOffset ( method ) love .MotorJoint: getLinearOffset () -> x : number 2. y : number Gets the target linear offset between the two Bodies the Joint is attached to. Open in Browser @ return x \u2014 The x component of the target linear offset, relative to the first Body. @ return y \u2014 The y component of the target linear offset, relative to the first Body. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setAngularOffset ( method ) love .MotorJoint: setAngularOffset ( angleoffset : number) Sets the target angluar offset between the two Bodies the Joint is attached to. Open in Browser @ param angleoffset \u2014 The target angular offset in radians: the second body's angle minus the first body's angle. setLinearOffset ( method ) love .MotorJoint: setLinearOffset ( x : number, y : number) Sets the target linear offset between the two Bodies the Joint is attached to. Open in Browser @ param x \u2014 The x component of the target linear offset, relative to the first Body. @ param y \u2014 The y component of the target linear offset, relative to the first Body. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.MouseJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getDampingRatio ( method ) love .MouseJoint: getDampingRatio () -> ratio : number Returns the damping ratio. Open in Browser @ return ratio \u2014 The new damping ratio. getFrequency ( method ) love .MouseJoint: getFrequency () -> freq : number Returns the frequency. Open in Browser @ return freq \u2014 The frequency in hertz. getMaxForce ( method ) love .MouseJoint: getMaxForce () -> f : number Gets the highest allowed force. Open in Browser @ return f \u2014 The max allowed force. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getTarget ( method ) love .MouseJoint: getTarget () -> x : number 2. y : number Gets the target point. Open in Browser @ return x \u2014 The x-component of the target. @ return y \u2014 The x-component of the target. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setDampingRatio ( method ) love .MouseJoint: setDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio. setFrequency ( method ) love .MouseJoint: setFrequency ( freq : number) Sets a new frequency. Open in Browser @ param freq \u2014 The new frequency in hertz. setMaxForce ( method ) love .MouseJoint: setMaxForce ( f : number) Sets the highest allowed force. Open in Browser @ param f \u2014 The max allowed force. setTarget ( method ) love .MouseJoint: setTarget ( x : number, y : number) Sets the target point. Open in Browser @ param x \u2014 The x-component of the target. @ param y \u2014 The y-component of the target. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Object release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ParticleInsertMode love.ParticleSystem clone ( method ) love .ParticleSystem: clone () -> particlesystem : love.ParticleSystem Creates an identical copy of the ParticleSystem in the stopped state. Open in Browser @ return particlesystem \u2014 The new identical copy of this ParticleSystem. emit ( method ) love .ParticleSystem: emit ( numparticles : number) Emits a burst of particles from the particle emitter. Open in Browser @ param numparticles \u2014 The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached. getBufferSize ( method ) love .ParticleSystem: getBufferSize () -> size : number Gets the maximum number of particles the ParticleSystem can have at once. Open in Browser @ return size \u2014 The maximum number of particles. getColors ( method ) love .ParticleSystem: getColors () -> r1 : number 2. g1 : number 3. b1 : number 4. a1 : number 5. r2 : number 6. g2 : number 7. b2 : number 8. a2 : number 9. r8 : number 10. g8 : number 11. b8 : number 12. a8 : number Gets the series of colors applied to the particle sprite. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r1 \u2014 First color, red component (0-1). @ return g1 \u2014 First color, green component (0-1). @ return b1 \u2014 First color, blue component (0-1). @ return a1 \u2014 First color, alpha component (0-1). @ return r2 \u2014 Second color, red component (0-1). @ return g2 \u2014 Second color, green component (0-1). @ return b2 \u2014 Second color, blue component (0-1). @ return a2 \u2014 Second color, alpha component (0-1). @ return r8 \u2014 Eighth color, red component (0-1). @ return g8 \u2014 Eighth color, green component (0-1). @ return b8 \u2014 Eighth color, blue component (0-1). @ return a8 \u2014 Eighth color, alpha component (0-1). getCount ( method ) love .ParticleSystem: getCount () -> count : number Gets the number of particles that are currently in the system. Open in Browser @ return count \u2014 The current number of live particles. getDirection ( method ) love .ParticleSystem: getDirection () -> direction : number Gets the direction of the particle emitter (in radians). Open in Browser @ return direction \u2014 The direction of the emitter (radians). getEmissionArea ( method ) love .ParticleSystem: getEmissionArea () -> distribution : \" borderellipse \"|\" borderrectangle \"|\" ellipse \"|\" none \"|\" normal \"...(+1) 2. dx: number 3. dy: number 4. angle: number 5. directionRelativeToCenter: boolean Gets the area-based spawn parameters for the particles. Open in Browser @ return distribution \u2014 The type of distribution for new particles. @ return dx \u2014 The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution. @ return dy \u2014 The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution. @ return angle \u2014 The angle in radians of the emission area. @ return directionRelativeToCenter \u2014 True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise. -- -- Types of particle area spread distribution. -- -- -- [Open in Browser](https://love2d.org/wiki/AreaSpreadDistribution) -- distribution : | \" uniform \" -- Uniform distribution. | \" normal \" -- Normal (gaussian) distribution. | \" ellipse \" -- Uniform distribution in an ellipse. | \" borderellipse \" -- Distribution in an ellipse with particles spawning at the edges of the ellipse. | \" borderrectangle \" -- Distribution in a rectangle with particles spawning at the edges of the rectangle. | \" none \" -- No distribution - area spread is disabled. getEmissionRate ( method ) love .ParticleSystem: getEmissionRate () -> rate : number Gets the amount of particles emitted per second. Open in Browser @ return rate \u2014 The amount of particles per second. getEmitterLifetime ( method ) love .ParticleSystem: getEmitterLifetime () -> life : number Gets how long the particle system will emit particles (if -1 then it emits particles forever). Open in Browser @ return life \u2014 The lifetime of the emitter (in seconds). getInsertMode ( method ) love .ParticleSystem: getInsertMode () -> mode : \" bottom \"|\" random \"|\" top \" Gets the mode used when the ParticleSystem adds new particles. Open in Browser @ return mode \u2014 The mode used when the ParticleSystem adds new particles. -- -- How newly created particles are added to the ParticleSystem. -- -- -- [Open in Browser](https://love2d.org/wiki/ParticleInsertMode) -- mode : | \" top \" -- Particles are inserted at the top of the ParticleSystem's list of particles. | \" bottom \" -- Particles are inserted at the bottom of the ParticleSystem's list of particles. | \" random \" -- Particles are inserted at random positions in the ParticleSystem's list of particles. getLinearAcceleration ( method ) love .ParticleSystem: getLinearAcceleration () -> xmin : number 2. ymin : number 3. xmax : number 4. ymax : number Gets the linear acceleration (acceleration along the x and y axes) for particles. Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax. Open in Browser @ return xmin \u2014 The minimum acceleration along the x axis. @ return ymin \u2014 The minimum acceleration along the y axis. @ return xmax \u2014 The maximum acceleration along the x axis. @ return ymax \u2014 The maximum acceleration along the y axis. getLinearDamping ( method ) love .ParticleSystem: getLinearDamping () -> min : number 2. max : number Gets the amount of linear damping (constant deceleration) for particles. Open in Browser @ return min \u2014 The minimum amount of linear damping applied to particles. @ return max \u2014 The maximum amount of linear damping applied to particles. getOffset ( method ) love .ParticleSystem: getOffset () -> ox : number 2. oy : number Gets the particle image's draw offset. Open in Browser @ return ox \u2014 The x coordinate of the particle image's draw offset. @ return oy \u2014 The y coordinate of the particle image's draw offset. getParticleLifetime ( method ) love .ParticleSystem: getParticleLifetime () -> min : number 2. max : number Gets the lifetime of the particles. Open in Browser @ return min \u2014 The minimum life of the particles (in seconds). @ return max \u2014 The maximum life of the particles (in seconds). getPosition ( method ) love .ParticleSystem: getPosition () -> x : number 2. y : number Gets the position of the emitter. Open in Browser @ return x \u2014 Position along x-axis. @ return y \u2014 Position along y-axis. getQuads ( method ) love .ParticleSystem: getQuads () -> quads : table Gets the series of Quads used for the particle sprites. Open in Browser @ return quads \u2014 A table containing the Quads used. getRadialAcceleration ( method ) love .ParticleSystem: getRadialAcceleration () -> min : number 2. max : number Gets the radial acceleration (away from the emitter). Open in Browser @ return min \u2014 The minimum acceleration. @ return max \u2014 The maximum acceleration. getRotation ( method ) love .ParticleSystem: getRotation () -> min : number 2. max : number Gets the rotation of the image upon particle creation (in radians). Open in Browser @ return min \u2014 The minimum initial angle (radians). @ return max \u2014 The maximum initial angle (radians). getSizeVariation ( method ) love .ParticleSystem: getSizeVariation () -> variation : number Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ return variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end). getSizes ( method ) love .ParticleSystem: getSizes () -> size1 : number 2. size2 : number 3. size8 : number Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime. Open in Browser @ return size1 \u2014 The first size. @ return size2 \u2014 The second size. @ return size8 \u2014 The eighth size. getSpeed ( method ) love .ParticleSystem: getSpeed () -> min : number 2. max : number Gets the speed of the particles. Open in Browser @ return min \u2014 The minimum linear speed of the particles. @ return max \u2014 The maximum linear speed of the particles. getSpin ( method ) love .ParticleSystem: getSpin () -> min : number 2. max : number 3. variation : number Gets the spin of the sprite. Open in Browser @ return min \u2014 The minimum spin (radians per second). @ return max \u2014 The maximum spin (radians per second). @ return variation \u2014 The degree of variation (0 meaning no variation and 1 meaning full variation between start and end). getSpinVariation ( method ) love .ParticleSystem: getSpinVariation () -> variation : number Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ return variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end). getSpread ( method ) love .ParticleSystem: getSpread () -> spread : number Gets the amount of directional spread of the particle emitter (in radians). Open in Browser @ return spread \u2014 The spread of the emitter (radians). getTangentialAcceleration ( method ) love .ParticleSystem: getTangentialAcceleration () -> min : number 2. max : number Gets the tangential acceleration (acceleration perpendicular to the particle's direction). Open in Browser @ return min \u2014 The minimum acceleration. @ return max \u2014 The maximum acceleration. getTexture ( method ) love .ParticleSystem: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used for the particles. Open in Browser @ return texture \u2014 The Image or Canvas used for the particles. hasRelativeRotation ( method ) love .ParticleSystem: hasRelativeRotation () -> enable : boolean Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle. Open in Browser @ return enable \u2014 True if relative particle rotation is enabled, false if it's disabled. isActive ( method ) love .ParticleSystem: isActive () -> active : boolean Checks whether the particle system is actively emitting particles. Open in Browser @ return active \u2014 True if system is active, false otherwise. isPaused ( method ) love .ParticleSystem: isPaused () -> paused : boolean Checks whether the particle system is paused. Open in Browser @ return paused \u2014 True if system is paused, false otherwise. isStopped ( method ) love .ParticleSystem: isStopped () -> stopped : boolean Checks whether the particle system is stopped. Open in Browser @ return stopped \u2014 True if system is stopped, false otherwise. moveTo ( method ) love .ParticleSystem: moveTo ( x : number, y : number) Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame. Open in Browser @ param x \u2014 Position along x-axis. @ param y \u2014 Position along y-axis. pause ( method ) love .ParticleSystem: pause () Pauses the particle emitter. Open in Browser release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. reset ( method ) love .ParticleSystem: reset () Resets the particle emitter, removing any existing particles and resetting the lifetime counter. Open in Browser setBufferSize ( method ) love .ParticleSystem: setBufferSize ( size : number) Sets the size of the buffer (the max allowed amount of particles in the system). Open in Browser @ param size \u2014 The buffer size. setColors ( method ) love .ParticleSystem: setColors ( r1 : number, g1 : number, b1 : number, a1 ? : number , r2 ? : number , g2 ? : number , b2 ? : number , a2 ? : number , r8 ? : number , g8 ? : number , b8 ? : number , a8 ? : number ) Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime. Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param r1 \u2014 First color, red component (0-1). @ param g1 \u2014 First color, green component (0-1). @ param b1 \u2014 First color, blue component (0-1). @ param a1 \u2014 First color, alpha component (0-1). @ param r2 \u2014 Second color, red component (0-1). @ param g2 \u2014 Second color, green component (0-1). @ param b2 \u2014 Second color, blue component (0-1). @ param a2 \u2014 Second color, alpha component (0-1). @ param r8 \u2014 Eighth color, red component (0-1). @ param g8 \u2014 Eighth color, green component (0-1). @ param b8 \u2014 Eighth color, blue component (0-1). @ param a8 \u2014 Eighth color, alpha component (0-1). setDirection ( method ) love .ParticleSystem: setDirection ( direction : number) Sets the direction the particles will be emitted in. Open in Browser @ param direction \u2014 The direction of the particles (in radians). setEmissionArea ( method ) love .ParticleSystem: setEmissionArea ( distribution : \" borderellipse \"|\" borderrectangle \"|\" ellipse \"|\" none \"|\" normal \"...(+1), dx: number, dy: number, angle?: number, directionRelativeToCenter?: boolean) Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function. Open in Browser @ param distribution \u2014 The type of distribution for new particles. @ param dx \u2014 The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution. @ param dy \u2014 The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution. @ param angle \u2014 The angle in radians of the emission area. @ param directionRelativeToCenter \u2014 True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise. -- -- Types of particle area spread distribution. -- -- -- [Open in Browser](https://love2d.org/wiki/AreaSpreadDistribution) -- distribution : | \" uniform \" -- Uniform distribution. | \" normal \" -- Normal (gaussian) distribution. | \" ellipse \" -- Uniform distribution in an ellipse. | \" borderellipse \" -- Distribution in an ellipse with particles spawning at the edges of the ellipse. | \" borderrectangle \" -- Distribution in a rectangle with particles spawning at the edges of the rectangle. | \" none \" -- No distribution - area spread is disabled. setEmissionRate ( method ) love .ParticleSystem: setEmissionRate ( rate : number) Sets the amount of particles emitted per second. Open in Browser @ param rate \u2014 The amount of particles per second. setEmitterLifetime ( method ) love .ParticleSystem: setEmitterLifetime ( life : number) Sets how long the particle system should emit particles (if -1 then it emits particles forever). Open in Browser @ param life \u2014 The lifetime of the emitter (in seconds). setInsertMode ( method ) love .ParticleSystem: setInsertMode ( mode : \" bottom \"|\" random \"|\" top \") Sets the mode to use when the ParticleSystem adds new particles. Open in Browser @ param mode \u2014 The mode to use when the ParticleSystem adds new particles. -- -- How newly created particles are added to the ParticleSystem. -- -- -- [Open in Browser](https://love2d.org/wiki/ParticleInsertMode) -- mode : | \" top \" -- Particles are inserted at the top of the ParticleSystem's list of particles. | \" bottom \" -- Particles are inserted at the bottom of the ParticleSystem's list of particles. | \" random \" -- Particles are inserted at random positions in the ParticleSystem's list of particles. setLinearAcceleration ( method ) love .ParticleSystem: setLinearAcceleration ( xmin : number, ymin : number, xmax ? : number , ymax ? : number ) Sets the linear acceleration (acceleration along the x and y axes) for particles. Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax. Open in Browser @ param xmin \u2014 The minimum acceleration along the x axis. @ param ymin \u2014 The minimum acceleration along the y axis. @ param xmax \u2014 The maximum acceleration along the x axis. @ param ymax \u2014 The maximum acceleration along the y axis. setLinearDamping ( method ) love .ParticleSystem: setLinearDamping ( min : number, max ? : number ) Sets the amount of linear damping (constant deceleration) for particles. Open in Browser @ param min \u2014 The minimum amount of linear damping applied to particles. @ param max \u2014 The maximum amount of linear damping applied to particles. setOffset ( method ) love .ParticleSystem: setOffset ( x : number, y : number) Set the offset position which the particle sprite is rotated around. If this function is not used, the particles rotate around their center. Open in Browser @ param x \u2014 The x coordinate of the rotation offset. @ param y \u2014 The y coordinate of the rotation offset. setParticleLifetime ( method ) love .ParticleSystem: setParticleLifetime ( min : number, max ? : number ) Sets the lifetime of the particles. Open in Browser @ param min \u2014 The minimum life of the particles (in seconds). @ param max \u2014 The maximum life of the particles (in seconds). setPosition ( method ) love .ParticleSystem: setPosition ( x : number, y : number) Sets the position of the emitter. Open in Browser @ param x \u2014 Position along x-axis. @ param y \u2014 Position along y-axis. setQuads ( method ) love .ParticleSystem: setQuads ( quad1 : love.Quad, quad2 : love.Quad) Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems. Open in Browser @ param quad1 \u2014 The first Quad to use. @ param quad2 \u2014 The second Quad to use. setRadialAcceleration ( method ) love .ParticleSystem: setRadialAcceleration ( min : number, max ? : number ) Set the radial acceleration (away from the emitter). Open in Browser @ param min \u2014 The minimum acceleration. @ param max \u2014 The maximum acceleration. setRelativeRotation ( method ) love .ParticleSystem: setRelativeRotation ( enable : boolean) Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle. Open in Browser @ param enable \u2014 True to enable relative particle rotation, false to disable it. setRotation ( method ) love .ParticleSystem: setRotation ( min : number, max ? : number ) Sets the rotation of the image upon particle creation (in radians). Open in Browser @ param min \u2014 The minimum initial angle (radians). @ param max \u2014 The maximum initial angle (radians). setSizeVariation ( method ) love .ParticleSystem: setSizeVariation ( variation : number) Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ param variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end). setSizes ( method ) love .ParticleSystem: setSizes ( size1 : number, size2 ? : number , size8 ? : number ) Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime. At least one size must be specified. A maximum of eight may be used. Open in Browser @ param size1 \u2014 The first size. @ param size2 \u2014 The second size. @ param size8 \u2014 The eighth size. setSpeed ( method ) love .ParticleSystem: setSpeed ( min : number, max ? : number ) Sets the speed of the particles. Open in Browser @ param min \u2014 The minimum linear speed of the particles. @ param max \u2014 The maximum linear speed of the particles. setSpin ( method ) love .ParticleSystem: setSpin ( min : number, max ? : number ) Sets the spin of the sprite. Open in Browser @ param min \u2014 The minimum spin (radians per second). @ param max \u2014 The maximum spin (radians per second). setSpinVariation ( method ) love .ParticleSystem: setSpinVariation ( variation : number) Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ param variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end). setSpread ( method ) love .ParticleSystem: setSpread ( spread : number) Sets the amount of spread for the system. Open in Browser @ param spread \u2014 The amount of spread (radians). setTangentialAcceleration ( method ) love .ParticleSystem: setTangentialAcceleration ( min : number, max ? : number ) Sets the tangential acceleration (acceleration perpendicular to the particle's direction). Open in Browser @ param min \u2014 The minimum acceleration. @ param max \u2014 The maximum acceleration. setTexture ( method ) love .ParticleSystem: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) to be used for the particles. Open in Browser @ param texture \u2014 An Image or Canvas to use for the particles. start ( method ) love .ParticleSystem: start () Starts the particle emitter. Open in Browser stop ( method ) love .ParticleSystem: stop () Stops the particle emitter, resetting the lifetime counter. Open in Browser type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. update ( method ) love .ParticleSystem: update ( dt : number) Updates the particle system; moving, creating and killing particles. Open in Browser @ param dt \u2014 The time (seconds) since last frame. love.PixelFormat love.PolygonShape computeAABB ( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. computeMass ( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia. getChildCount ( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children. getPoints ( method ) love .PolygonShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the local coordinates of the polygon's vertices. This function has a variable number of return values. It can be used in a nested fashion with love.graphics.polygon. Open in Browser @ return x1 \u2014 The x-component of the first vertex. @ return y1 \u2014 The y-component of the first vertex. @ return x2 \u2014 The x-component of the second vertex. @ return y2 \u2014 The y-component of the second vertex. getRadius ( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape. getType ( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape. rayCast ( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. testPoint ( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.PowerState love.PrismaticJoint areLimitsEnabled ( method ) love .PrismaticJoint: areLimitsEnabled () -> enabled : boolean Checks whether the limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise. destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getAxis ( method ) love .PrismaticJoint: getAxis () -> x : number 2. y : number Gets the world-space axis vector of the Prismatic Joint. Open in Browser @ return x \u2014 The x-axis coordinate of the world-space axis vector. @ return y \u2014 The y-axis coordinate of the world-space axis vector. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getJointSpeed ( method ) love .PrismaticJoint: getJointSpeed () -> s : number Get the current joint angle speed. Open in Browser @ return s \u2014 Joint angle speed in meters/second. getJointTranslation ( method ) love .PrismaticJoint: getJointTranslation () -> t : number Get the current joint translation. Open in Browser @ return t \u2014 Joint translation, usually in meters.. getLimits ( method ) love .PrismaticJoint: getLimits () -> lower : number 2. upper : number Gets the joint limits. Open in Browser @ return lower \u2014 The lower limit, usually in meters. @ return upper \u2014 The upper limit, usually in meters. getLowerLimit ( method ) love .PrismaticJoint: getLowerLimit () -> lower : number Gets the lower limit. Open in Browser @ return lower \u2014 The lower limit, usually in meters. getMaxMotorForce ( method ) love .PrismaticJoint: getMaxMotorForce () -> f : number Gets the maximum motor force. Open in Browser @ return f \u2014 The maximum motor force, usually in N. getMotorForce ( method ) love .PrismaticJoint: getMotorForce ( invdt : number) -> force : number Returns the current motor force. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return force \u2014 The force on the motor in newtons. getMotorSpeed ( method ) love .PrismaticJoint: getMotorSpeed () -> s : number Gets the motor speed. Open in Browser @ return s \u2014 The motor speed, usually in meters per second. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getReferenceAngle ( method ) love .PrismaticJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUpperLimit ( method ) love .PrismaticJoint: getUpperLimit () -> upper : number Gets the upper limit. Open in Browser @ return upper \u2014 The upper limit, usually in meters. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. isMotorEnabled ( method ) love .PrismaticJoint: isMotorEnabled () -> enabled : boolean Checks whether the motor is enabled. Open in Browser @ return enabled \u2014 True if enabled, false if disabled. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setLimits ( method ) love .PrismaticJoint: setLimits ( lower : number, upper : number) Sets the limits. Open in Browser @ param lower \u2014 The lower limit, usually in meters. @ param upper \u2014 The upper limit, usually in meters. setLimitsEnabled ( method ) love .PrismaticJoint: setLimitsEnabled () -> enable : boolean Enables/disables the joint limit. Open in Browser @ return enable \u2014 True if enabled, false if disabled. setLowerLimit ( method ) love .PrismaticJoint: setLowerLimit ( lower : number) Sets the lower limit. Open in Browser @ param lower \u2014 The lower limit, usually in meters. setMaxMotorForce ( method ) love .PrismaticJoint: setMaxMotorForce ( f : number) Set the maximum motor force. Open in Browser @ param f \u2014 The maximum motor force, usually in N. setMotorEnabled ( method ) love .PrismaticJoint: setMotorEnabled ( enable : boolean) Enables/disables the joint motor. Open in Browser @ param enable \u2014 True to enable, false to disable. setMotorSpeed ( method ) love .PrismaticJoint: setMotorSpeed ( s : number) Sets the motor speed. Open in Browser @ param s \u2014 The motor speed, usually in meters per second. setUpperLimit ( method ) love .PrismaticJoint: setUpperLimit ( upper : number) Sets the upper limit. Open in Browser @ param upper \u2014 The upper limit, usually in meters. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.PulleyJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getConstant ( method ) love .PulleyJoint: getConstant () -> length : number Get the total length of the rope. Open in Browser @ return length \u2014 The length of the rope in the joint. getGroundAnchors ( method ) love .PulleyJoint: getGroundAnchors () -> a1x : number 2. a1y : number 3. a2x : number 4. a2y : number Get the ground anchor positions in world coordinates. Open in Browser @ return a1x \u2014 The x coordinate of the first anchor. @ return a1y \u2014 The y coordinate of the first anchor. @ return a2x \u2014 The x coordinate of the second anchor. @ return a2y \u2014 The y coordinate of the second anchor. getLengthA ( method ) love .PulleyJoint: getLengthA () -> length : number Get the current length of the rope segment attached to the first body. Open in Browser @ return length \u2014 The length of the rope segment. getLengthB ( method ) love .PulleyJoint: getLengthB () -> length : number Get the current length of the rope segment attached to the second body. Open in Browser @ return length \u2014 The length of the rope segment. getMaxLengths ( method ) love .PulleyJoint: getMaxLengths () -> len1 : number 2. len2 : number Get the maximum lengths of the rope segments. Open in Browser @ return len1 \u2014 The maximum length of the first rope segment. @ return len2 \u2014 The maximum length of the second rope segment. getRatio ( method ) love .PulleyJoint: getRatio () -> ratio : number Get the pulley ratio. Open in Browser @ return ratio \u2014 The pulley ratio of the joint. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setConstant ( method ) love .PulleyJoint: setConstant ( length : number) Set the total length of the rope. Setting a new length for the rope updates the maximum length values of the joint. Open in Browser @ param length \u2014 The new length of the rope in the joint. setMaxLengths ( method ) love .PulleyJoint: setMaxLengths ( max1 : number, max2 : number) Set the maximum lengths of the rope segments. The physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values. Open in Browser @ param max1 \u2014 The new maximum length of the first segment. @ param max2 \u2014 The new maximum length of the second segment. setRatio ( method ) love .PulleyJoint: setRatio ( ratio : number) Set the pulley ratio. Open in Browser @ param ratio \u2014 The new pulley ratio of the joint. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Quad getTextureDimensions ( method ) love .Quad: getTextureDimensions () -> sw : number 2. sh : number Gets reference texture dimensions initially specified in love.graphics.newQuad. Open in Browser @ return sw \u2014 The Texture width used by the Quad. @ return sh \u2014 The Texture height used by the Quad. getViewport ( method ) love .Quad: getViewport () -> x : number 2. y : number 3. w : number 4. h : number Gets the current viewport of this Quad. Open in Browser @ return x \u2014 The top-left corner along the x-axis. @ return y \u2014 The top-left corner along the y-axis. @ return w \u2014 The width of the viewport. @ return h \u2014 The height of the viewport. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setViewport ( method ) love .Quad: setViewport ( x : number, y : number, w : number, h : number, sw : number, sh : number) Sets the texture coordinates according to a viewport. Open in Browser @ param x \u2014 The top-left corner along the x-axis. @ param y \u2014 The top-left corner along the y-axis. @ param w \u2014 The width of the viewport. @ param h \u2014 The height of the viewport. @ param sw \u2014 The reference width, the width of the Image. (Must be greater than 0.) @ param sh \u2014 The reference height, the height of the Image. (Must be greater than 0.) type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.RandomGenerator getSeed ( method ) love .RandomGenerator: getSeed () -> low : number 2. high : number Gets the seed of the random number generator object. The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53, but the seed value is an integer number in the range of 2^64 - 1. Open in Browser @ return low \u2014 Integer number representing the lower 32 bits of the RandomGenerator's 64 bit seed value. @ return high \u2014 Integer number representing the higher 32 bits of the RandomGenerator's 64 bit seed value. getState ( method ) love .RandomGenerator: getState () -> state : string Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of L\u00d6VE. This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number. Open in Browser @ return state \u2014 The current state of the RandomGenerator object, represented as a string. random ( method ) love .RandomGenerator: random () -> number : number Generates a pseudo-random number in a platform independent manner. Open in Browser @ return number \u2014 The pseudo-random number. randomNormal ( method ) love .RandomGenerator: randomNormal ( stddev ? : number , mean ? : number ) -> number : number Get a normally distributed pseudo random number. Open in Browser @ param stddev \u2014 Standard deviation of the distribution. @ param mean \u2014 The mean of the distribution. @ return number \u2014 Normally distributed random number with variance (stddev)\u00b2 and the specified mean. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setSeed ( method ) love .RandomGenerator: setSeed ( seed : number) Sets the seed of the random number generator using the specified integer number. Open in Browser @ param seed \u2014 The integer number with which you want to seed the randomization. Must be within the range of 2^53. setState ( method ) love .RandomGenerator: setState ( state : string) Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of L\u00d6VE. This is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value. Open in Browser @ param state \u2014 The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Rasterizer getAdvance ( method ) love .Rasterizer: getAdvance () -> advance : number Gets font advance. Open in Browser @ return advance \u2014 Font advance. getAscent ( method ) love .Rasterizer: getAscent () -> height : number Gets ascent height. Open in Browser @ return height \u2014 Ascent height. getDescent ( method ) love .Rasterizer: getDescent () -> height : number Gets descent height. Open in Browser @ return height \u2014 Descent height. getGlyphCount ( method ) love .Rasterizer: getGlyphCount () -> count : number Gets number of glyphs in font. Open in Browser @ return count \u2014 Glyphs count. getGlyphData ( method ) love .Rasterizer: getGlyphData ( glyph : string) -> glyphData : love.GlyphData Gets glyph data of a specified glyph. Open in Browser @ param glyph \u2014 Glyph @ return glyphData \u2014 Glyph data getHeight ( method ) love .Rasterizer: getHeight () -> height : number Gets font height. Open in Browser @ return height \u2014 Font height getLineHeight ( method ) love .Rasterizer: getLineHeight () -> height : number Gets line height of a font. Open in Browser @ return height \u2014 Line height of a font. hasGlyphs ( method ) love .Rasterizer: hasGlyphs ( glyph1 : string| number , glyph2 : string| number , ... string | number ) -> hasGlyphs : boolean Checks if font contains specified glyphs. Open in Browser @ param glyph1 \u2014 Glyph @ param glyph2 \u2014 Glyph @ return hasGlyphs \u2014 Whatever font contains specified glyphs. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.RecordingDevice getBitDepth ( method ) love .RecordingDevice: getBitDepth () -> bits : number Gets the number of bits per sample in the data currently being recorded. Open in Browser @ return bits \u2014 The number of bits per sample in the data that's currently being recorded. getChannelCount ( method ) love .RecordingDevice: getChannelCount () -> channels : number Gets the number of channels currently being recorded (mono or stereo). Open in Browser @ return channels \u2014 The number of channels being recorded (1 for mono, 2 for stereo). getData ( method ) love .RecordingDevice: getData () -> data : love.SoundData Gets all recorded audio SoundData stored in the device's internal ring buffer. The internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost. Open in Browser @ return data \u2014 The recorded audio data, or nil if the device isn't recording. getName ( method ) love .RecordingDevice: getName () -> name : string Gets the name of the recording device. Open in Browser @ return name \u2014 The name of the device. getSampleCount ( method ) love .RecordingDevice: getSampleCount () -> samples : number Gets the number of currently recorded samples. Open in Browser @ return samples \u2014 The number of samples that have been recorded so far. getSampleRate ( method ) love .RecordingDevice: getSampleRate () -> rate : number Gets the number of samples per second currently being recorded. Open in Browser @ return rate \u2014 The number of samples being recorded per second (sample rate). isRecording ( method ) love .RecordingDevice: isRecording () -> recording : boolean Gets whether the device is currently recording. Open in Browser @ return recording \u2014 True if the recording, false otherwise. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. start ( method ) love .RecordingDevice: start ( samplecount : number, samplerate ? : number , bitdepth ? : number , channels ? : number ) -> success : boolean Begins recording audio using this device. Open in Browser @ param samplecount \u2014 The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called. @ param samplerate \u2014 The number of samples per second to store when recording. @ param bitdepth \u2014 The number of bits per sample. @ param channels \u2014 Whether to record in mono or stereo. Most microphones don't support more than 1 channel. @ return success \u2014 True if the device successfully began recording using the specified parameters, false if not. stop ( method ) love .RecordingDevice: stop () -> data : love.SoundData Stops recording audio from this device. Any sound data currently in the device's buffer will be returned. Open in Browser @ return data \u2014 The sound data currently in the device's buffer, or nil if the device wasn't recording. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.RevoluteJoint areLimitsEnabled ( method ) love .RevoluteJoint: areLimitsEnabled () -> enabled : boolean Checks whether limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise. destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getJointAngle ( method ) love .RevoluteJoint: getJointAngle () -> angle : number Get the current joint angle. Open in Browser @ return angle \u2014 The joint angle in radians. getJointSpeed ( method ) love .RevoluteJoint: getJointSpeed () -> s : number Get the current joint angle speed. Open in Browser @ return s \u2014 Joint angle speed in radians/second. getLimits ( method ) love .RevoluteJoint: getLimits () -> lower : number 2. upper : number Gets the joint limits. Open in Browser @ return lower \u2014 The lower limit, in radians. @ return upper \u2014 The upper limit, in radians. getLowerLimit ( method ) love .RevoluteJoint: getLowerLimit () -> lower : number Gets the lower limit. Open in Browser @ return lower \u2014 The lower limit, in radians. getMaxMotorTorque ( method ) love .RevoluteJoint: getMaxMotorTorque () -> f : number Gets the maximum motor force. Open in Browser @ return f \u2014 The maximum motor force, in Nm. getMotorSpeed ( method ) love .RevoluteJoint: getMotorSpeed () -> s : number Gets the motor speed. Open in Browser @ return s \u2014 The motor speed, radians per second. getMotorTorque ( method ) love .RevoluteJoint: getMotorTorque () -> f : number Get the current motor force. Open in Browser @ return f \u2014 The current motor force, in Nm. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getReferenceAngle ( method ) love .RevoluteJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUpperLimit ( method ) love .RevoluteJoint: getUpperLimit () -> upper : number Gets the upper limit. Open in Browser @ return upper \u2014 The upper limit, in radians. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. hasLimitsEnabled ( method ) love .RevoluteJoint: hasLimitsEnabled () -> enabled : boolean Checks whether limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. isMotorEnabled ( method ) love .RevoluteJoint: isMotorEnabled () -> enabled : boolean Checks whether the motor is enabled. Open in Browser @ return enabled \u2014 True if enabled, false if disabled. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setLimits ( method ) love .RevoluteJoint: setLimits ( lower : number, upper : number) Sets the limits. Open in Browser @ param lower \u2014 The lower limit, in radians. @ param upper \u2014 The upper limit, in radians. setLimitsEnabled ( method ) love .RevoluteJoint: setLimitsEnabled ( enable : boolean) Enables/disables the joint limit. Open in Browser @ param enable \u2014 True to enable, false to disable. setLowerLimit ( method ) love .RevoluteJoint: setLowerLimit ( lower : number) Sets the lower limit. Open in Browser @ param lower \u2014 The lower limit, in radians. setMaxMotorTorque ( method ) love .RevoluteJoint: setMaxMotorTorque ( f : number) Set the maximum motor force. Open in Browser @ param f \u2014 The maximum motor force, in Nm. setMotorEnabled ( method ) love .RevoluteJoint: setMotorEnabled ( enable : boolean) Enables/disables the joint motor. Open in Browser @ param enable \u2014 True to enable, false to disable. setMotorSpeed ( method ) love .RevoluteJoint: setMotorSpeed ( s : number) Sets the motor speed. Open in Browser @ param s \u2014 The motor speed, radians per second. setUpperLimit ( method ) love .RevoluteJoint: setUpperLimit ( upper : number) Sets the upper limit. Open in Browser @ param upper \u2014 The upper limit, in radians. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.RopeJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getMaxLength ( method ) love .RopeJoint: getMaxLength () -> maxLength : number Gets the maximum length of a RopeJoint. Open in Browser @ return maxLength \u2014 The maximum length of the RopeJoint. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setMaxLength ( method ) love .RopeJoint: setMaxLength ( maxLength : number) Sets the maximum length of a RopeJoint. Open in Browser @ param maxLength \u2014 The new maximum length of the RopeJoint. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Scancode love.Shader getWarnings ( method ) love .Shader: getWarnings () -> warnings : string Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like. Open in Browser @ return warnings \u2014 Warning and error messages (if any). hasUniform ( method ) love .Shader: hasUniform ( name : string) -> hasuniform : boolean Gets whether a uniform / extern variable exists in the Shader. If a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case. Open in Browser @ param name \u2014 The name of the uniform variable. @ return hasuniform \u2014 Whether the uniform exists in the shader and affects its final output. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. send ( method ) love .Shader: send ( name : string, number : number, ... number ) Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g. uniform float time; // 'float' is the typical number type used in GLSL shaders. uniform float varsvec2 light_pos; uniform vec4 colors[4; The corresponding send calls would be shader:send('time', t) shader:send('vars',a,b) shader:send('light_pos', {light_x, light_y}) shader:send('colors', {r1, g1, b1, a1}, {r2, g2, b2, a2}, {r3, g3, b3, a3}, {r4, g4, b4, a4}) Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each. Open in Browser @ param name \u2014 Name of the number to send to the shader. @ param number \u2014 Number to send to store in the uniform variable. sendColor ( method ) love .Shader: sendColor ( name : string, color : table, ... table ) Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled. Extern variables must be marked using the ''extern'' keyword, e.g. extern vec4 Color; The corresponding sendColor call would be shader:sendColor('Color', {r, g, b, a}) Extern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param name \u2014 The name of the color extern variable to send to in the shader. @ param color \u2014 A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Shape computeAABB ( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point. computeMass ( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia. getChildCount ( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children. getRadius ( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape. getType ( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape. rayCast ( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. testPoint ( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.ShapeType love.SoundData clone ( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy. getBitDepth ( method ) love .SoundData: getBitDepth () -> bitdepth : number Returns the number of bits per sample. Open in Browser @ return bitdepth \u2014 Either 8, or 16. getChannelCount ( method ) love .SoundData: getChannelCount () -> channels : number Returns the number of channels in the SoundData. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo. getDuration ( method ) love .SoundData: getDuration () -> duration : number Gets the duration of the sound data. Open in Browser @ return duration \u2014 The duration of the sound data in seconds. getFFIPointer ( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable. getPointer ( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data. getSample ( method ) love .SoundData: getSample ( i : number) -> sample : number Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order. Open in Browser @ param i \u2014 An integer value specifying the position of the sample (starting at 0). @ return sample \u2014 The normalized samplepoint (range -1.0 to 1.0). getSampleCount ( method ) love .SoundData: getSampleCount () -> count : number Returns the number of samples per channel of the SoundData. Open in Browser @ return count \u2014 Total number of samples. getSampleRate ( method ) love .SoundData: getSampleRate () -> rate : number Returns the sample rate of the SoundData. Open in Browser @ return rate \u2014 Number of samples per second. getSize ( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes. getString ( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setSample ( method ) love .SoundData: setSample ( i : number, sample : number) Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order. Open in Browser @ param i \u2014 An integer value specifying the position of the sample (starting at 0). @ param sample \u2014 The normalized samplepoint (range -1.0 to 1.0). type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Source clone ( method ) love .Source: clone () -> source : love.Source Creates an identical copy of the Source in the stopped state. Static Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound. Open in Browser @ return source \u2014 The new identical copy of this Source. getActiveEffects ( method ) love .Source: getActiveEffects () -> effects : table Gets a list of the Source's active effect names. Open in Browser @ return effects \u2014 A list of the source's active effect names. getAirAbsorption ( method ) love .Source: getAirAbsorption () -> amount : number Gets the amount of air absorption applied to the Source. By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter. Open in Browser @ return amount \u2014 The amount of air absorption applied to the Source. getAttenuationDistances ( method ) love .Source: getAttenuationDistances () -> ref : number 2. max : number Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener. Open in Browser @ return ref \u2014 The current reference attenuation distance. If the current DistanceModel is clamped, this is the minimum distance before the Source is no longer attenuated. @ return max \u2014 The current maximum attenuation distance. getChannelCount ( method ) love .Source: getChannelCount () -> channels : number Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo. getCone ( method ) love .Source: getCone () -> innerAngle : number 2. outerAngle : number 3. outerVolume : number Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction. Open in Browser @ return innerAngle \u2014 The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle. @ return outerAngle \u2014 The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles. @ return outerVolume \u2014 The Source's volume when the listener is outside both the inner and outer cone angles. getDirection ( method ) love .Source: getDirection () -> x : number 2. y : number 3. z : number Gets the direction of the Source. Open in Browser @ return x \u2014 The X part of the direction vector. @ return y \u2014 The Y part of the direction vector. @ return z \u2014 The Z part of the direction vector. getDuration ( method ) love .Source: getDuration ( unit ? : \"samples\" | \"seconds\" ) -> duration : number Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all. Open in Browser @ param unit \u2014 The time unit for the return value. @ return duration \u2014 The duration of the Source, or -1 if it cannot be determined. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples. getEffect ( method ) love .Source: getEffect ( name : string, filtersettings : table) -> filtersettings : { volume: number, highgain : number, lowgain : number } Gets the filter settings associated to a specific effect. This function returns nil if the effect was applied with no filter settings associated to it. Open in Browser @ param name \u2014 The name of the effect. @ param filtersettings \u2014 An optional empty table that will be filled with the filter settings. @ return filtersettings \u2014 The settings for the filter associated to this effect, or nil if the effect is not present in this Source or has no filter associated. The table has the following fields: getFilter ( method ) love .Source: getFilter () -> settings : { type: \" bandpass \"|\" highpass \"|\" lowpass \", volume: number, highgain: number, lowgain: number } Gets the filter settings currently applied to the Source. Open in Browser @ return settings \u2014 The filter settings to use for this Source, or nil if the Source has no active filter. The table has the following fields: getFreeBufferCount ( method ) love .Source: getFreeBufferCount () -> buffers : number Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with. Open in Browser @ return buffers \u2014 How many more SoundData objects can be queued up. getPitch ( method ) love .Source: getPitch () -> pitch : number Gets the current pitch of the Source. Open in Browser @ return pitch \u2014 The pitch, where 1.0 is normal. getPosition ( method ) love .Source: getPosition () -> x : number 2. y : number 3. z : number Gets the position of the Source. Open in Browser @ return x \u2014 The X position of the Source. @ return y \u2014 The Y position of the Source. @ return z \u2014 The Z position of the Source. getRolloff ( method ) love .Source: getRolloff () -> rolloff : number Returns the rolloff factor of the source. Open in Browser @ return rolloff \u2014 The rolloff factor. getType ( method ) love .Source: getType () -> sourcetype : \" queue \"|\" static \"|\" stream \" Gets the type of the Source. Open in Browser @ return sourcetype \u2014 The type of the source. -- -- Types of audio sources. -- -- A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once. -- -- -- [Open in Browser](https://love2d.org/wiki/SourceType) -- sourcetype : | \" static \" -- The whole audio is decoded. | \" stream \" -- The audio is decoded in chunks when needed. | \" queue \" -- The audio must be manually queued by the user. getVelocity ( method ) love .Source: getVelocity () -> x : number 2. y : number 3. z : number Gets the velocity of the Source. Open in Browser @ return x \u2014 The X part of the velocity vector. @ return y \u2014 The Y part of the velocity vector. @ return z \u2014 The Z part of the velocity vector. getVolume ( method ) love .Source: getVolume () -> volume : number Gets the current volume of the Source. Open in Browser @ return volume \u2014 The volume of the Source, where 1.0 is normal volume. getVolumeLimits ( method ) love .Source: getVolumeLimits () -> min : number 2. max : number Returns the volume limits of the source. Open in Browser @ return min \u2014 The minimum volume. @ return max \u2014 The maximum volume. isLooping ( method ) love .Source: isLooping () -> loop : boolean Returns whether the Source will loop. Open in Browser @ return loop \u2014 True if the Source will loop, false otherwise. isPlaying ( method ) love .Source: isPlaying () -> playing : boolean Returns whether the Source is playing. Open in Browser @ return playing \u2014 True if the Source is playing, false otherwise. isRelative ( method ) love .Source: isRelative () -> relative : boolean Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener. Open in Browser @ return relative \u2014 True if the position, velocity, direction and cone angles are relative to the listener, false if they're absolute. pause ( method ) love .Source: pause () Pauses the Source. Open in Browser play ( method ) love .Source: play () -> success : boolean Starts playing the Source. Open in Browser @ return success \u2014 Whether the Source was able to successfully start playing. queue ( method ) love .Source: queue ( sounddata : love.SoundData) -> success : boolean Queues SoundData for playback in a queueable Source. This method requires the Source to be created via love.audio.newQueueableSource. Open in Browser @ param sounddata \u2014 The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's. @ return success \u2014 True if the data was successfully queued for playback, false if there were no available buffers to use for queueing. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. seek ( method ) love .Source: seek ( offset : number, unit ? : \"samples\" | \"seconds\" ) Sets the currently playing position of the Source. Open in Browser @ param offset \u2014 The position to seek to. @ param unit \u2014 The unit of the position value. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples. setAirAbsorption ( method ) love .Source: setAirAbsorption ( amount : number) Sets the amount of air absorption applied to the Source. By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter. Air absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area. Open in Browser @ param amount \u2014 The amount of air absorption applied to the Source. Must be between 0 and 10. setAttenuationDistances ( method ) love .Source: setAttenuationDistances ( ref : number, max : number) Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance. Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio. Open in Browser @ param ref \u2014 The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance. @ param max \u2014 The new maximum attenuation distance. setCone ( method ) love .Source: setCone ( innerAngle : number, outerAngle : number, outerVolume ? : number ) Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction. Open in Browser @ param innerAngle \u2014 The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle. @ param outerAngle \u2014 The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles. @ param outerVolume \u2014 The Source's volume when the listener is outside both the inner and outer cone angles. setDirection ( method ) love .Source: setDirection ( x : number, y : number, z : number) Sets the direction vector of the Source. A zero vector makes the source non-directional. Open in Browser @ param x \u2014 The X part of the direction vector. @ param y \u2014 The Y part of the direction vector. @ param z \u2014 The Z part of the direction vector. setEffect ( method ) love .Source: setEffect ( name : string, enable ? : boolean ) -> success : boolean Applies an audio effect to the Source. The effect must have been previously defined using love.audio.setEffect. Open in Browser @ param name \u2014 The name of the effect previously set up with love.audio.setEffect. @ param enable \u2014 If false and the given effect name was previously enabled on this Source, disables the effect. @ return success \u2014 Whether the effect was successfully applied to this Source. setFilter ( method ) love .Source: setFilter ( settings : { type: \" bandpass \"|\" highpass \"|\" lowpass \", volume: number, highgain: number, lowgain: number }) -> success: boolean Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source. Open in Browser @ param settings \u2014 The filter settings to use for this Source, with the following fields: @ return success \u2014 Whether the filter was successfully applied to the Source. setLooping ( method ) love .Source: setLooping ( loop : boolean) Sets whether the Source should loop. Open in Browser @ param loop \u2014 True if the source should loop, false otherwise. setPitch ( method ) love .Source: setPitch ( pitch : number) Sets the pitch of the Source. Open in Browser @ param pitch \u2014 Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value. setPosition ( method ) love .Source: setPosition ( x : number, y : number, z : number) Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files! Open in Browser @ param x \u2014 The X position of the Source. @ param y \u2014 The Y position of the Source. @ param z \u2014 The Z position of the Source. setRelative ( method ) love .Source: setRelative ( enable ? : boolean ) Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute. By default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. Open in Browser @ param enable \u2014 True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute. setRolloff ( method ) love .Source: setRolloff ( rolloff : number) Sets the rolloff factor which affects the strength of the used distance attenuation. Extended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification. Open in Browser @ param rolloff \u2014 The new rolloff factor. setVelocity ( method ) love .Source: setVelocity ( x : number, y : number, z : number) Sets the velocity of the Source. This does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect. Open in Browser @ param x \u2014 The X part of the velocity vector. @ param y \u2014 The Y part of the velocity vector. @ param z \u2014 The Z part of the velocity vector. setVolume ( method ) love .Source: setVolume ( volume : number) Sets the current volume of the Source. Open in Browser @ param volume \u2014 The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0. setVolumeLimits ( method ) love .Source: setVolumeLimits ( min : number, max : number) Sets the volume limits of the source. The limits have to be numbers from 0 to 1. Open in Browser @ param min \u2014 The minimum volume. @ param max \u2014 The maximum volume. stop ( method ) love .Source: stop () Stops a Source. Open in Browser tell ( method ) love .Source: tell ( unit ? : \"samples\" | \"seconds\" ) -> position : number Gets the currently playing position of the Source. Open in Browser @ param unit \u2014 The type of unit for the return value. @ return position \u2014 The currently playing position of the Source. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.SourceType love.SpriteBatch add ( method ) love .SpriteBatch: add ( x : number, y : number, r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> id : number Adds a sprite to the batch. Sprites are drawn in the order they are added. Open in Browser @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shear factor (x-axis). @ param ky \u2014 Shear factor (y-axis). @ return id \u2014 An identifier for the added sprite. addLayer ( method ) love .SpriteBatch: addLayer ( layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> spriteindex : number Adds a sprite to a batch created with an Array Texture. Open in Browser @ param layerindex \u2014 The index of the layer to use for this sprite. @ param x \u2014 The position to draw the sprite (x-axis). @ param y \u2014 The position to draw the sprite (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). @ return spriteindex \u2014 The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer. attachAttribute ( method ) love .SpriteBatch: attachAttribute ( name : string, mesh : love.Mesh) Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors. Each sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ). Open in Browser @ param name \u2014 The name of the vertex attribute to attach. @ param mesh \u2014 The Mesh to get the vertex attribute from. clear ( method ) love .SpriteBatch: clear () Removes all sprites from the buffer. Open in Browser flush ( method ) love .SpriteBatch: flush () Immediately sends all new and modified sprite data in the batch to the graphics card. Normally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens. If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls. Open in Browser getBufferSize ( method ) love .SpriteBatch: getBufferSize () -> size : number Gets the maximum number of sprites the SpriteBatch can hold. Open in Browser @ return size \u2014 The maximum number of sprites the batch can hold. getColor ( method ) love .SpriteBatch: getColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the color that will be used for the next add and set operations. If no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1). getCount ( method ) love .SpriteBatch: getCount () -> count : number Gets the number of sprites currently in the SpriteBatch. Open in Browser @ return count \u2014 The number of sprites currently in the batch. getTexture ( method ) love .SpriteBatch: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used by the SpriteBatch. Open in Browser @ return texture \u2014 The Image or Canvas used by the SpriteBatch. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. set ( method ) love .SpriteBatch: set ( spriteindex : number, x : number, y : number, r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer. Open in Browser @ param spriteindex \u2014 The index of the sprite that will be changed. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shear factor (x-axis). @ param ky \u2014 Shear factor (y-axis). setColor ( method ) love .SpriteBatch: setColor ( r : number, g : number, b : number, a ? : number ) Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color. Open in Browser @ param r \u2014 The amount of red. @ param g \u2014 The amount of green. @ param b \u2014 The amount of blue. @ param a \u2014 The amount of alpha. setDrawRange ( method ) love .SpriteBatch: setDrawRange ( start : number, count : number) Restricts the drawn sprites in the SpriteBatch to a subset of the total. Open in Browser @ param start \u2014 The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add. @ param count \u2014 The number of sprites to draw. setLayer ( method ) love .SpriteBatch: setLayer ( spriteindex : number, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture. Open in Browser @ param spriteindex \u2014 The index of the existing sprite to replace. @ param layerindex \u2014 The index of the layer in the Array Texture to use for this sprite. @ param x \u2014 The position to draw the sprite (x-axis). @ param y \u2014 The position to draw the sprite (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). setTexture ( method ) love .SpriteBatch: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing. Open in Browser @ param texture \u2014 The new Image or Canvas to use for the sprites in the batch. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.SpriteBatchUsage love.StackType love.StencilAction love.Text add ( method ) love .Text: add ( textstring : string, x ? : number , y ? : number , angle ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> index : number Adds additional colored text to the Text object at the specified position. Open in Browser @ param textstring \u2014 The text to add to the object. @ param x \u2014 The position of the new text on the x-axis. @ param y \u2014 The position of the new text on the y-axis. @ param angle \u2014 The orientation of the new text in radians. @ param sx \u2014 Scale factor on the x-axis. @ param sy \u2014 Scale factor on the y-axis. @ param ox \u2014 Origin offset on the x-axis. @ param oy \u2014 Origin offset on the y-axis. @ param kx \u2014 Shearing / skew factor on the x-axis. @ param ky \u2014 Shearing / skew factor on the y-axis. @ return index \u2014 An index number that can be used with Text:getWidth or Text:getHeight. addf ( method ) love .Text: addf ( textstring : string, wraplimit : number, align : \" center \"|\" justify \"|\" left \"|\" right \", x: number, y: number, angle?: number, sx?: number, sy?: number, ox?: number, oy?: number, kx?: number, ky?: number) -> index: number Adds additional formatted / colored text to the Text object at the specified position. The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change. Open in Browser @ param textstring \u2014 The text to add to the object. @ param wraplimit \u2014 The maximum width in pixels of the text before it gets automatically wrapped to a new line. @ param align \u2014 The alignment of the text. @ param x \u2014 The position of the new text (x-axis). @ param y \u2014 The position of the new text (y-axis). @ param angle \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing / skew factor (x-axis). @ param ky \u2014 Shearing / skew factor (y-axis). @ return index \u2014 An index number that can be used with Text:getWidth or Text:getHeight. -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right. clear ( method ) love .Text: clear () Clears the contents of the Text object. Open in Browser getDimensions ( method ) love .Text: getDimensions () -> width : number 2. height : number Gets the width and height of the text in pixels. Open in Browser @ return width \u2014 The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned. @ return height \u2014 The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned. getFont ( method ) love .Text: getFont () -> font : love.Font Gets the Font used with the Text object. Open in Browser @ return font \u2014 The font used with this Text object. getHeight ( method ) love .Text: getHeight () -> height : number Gets the height of the text in pixels. Open in Browser @ return height \u2014 The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned. getWidth ( method ) love .Text: getWidth () -> width : number Gets the width of the text in pixels. Open in Browser @ return width \u2014 The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. set ( method ) love .Text: set ( textstring : string) Replaces the contents of the Text object with a new unformatted string. Open in Browser @ param textstring \u2014 The new string of text to use. setFont ( method ) love .Text: setFont ( font : love.Font) Replaces the Font used with the text. Open in Browser @ param font \u2014 The new font to use with this Text object. setf ( method ) love .Text: setf ( textstring : string, wraplimit : number, align : \" center \"|\" justify \"|\" left \"|\" right \") Replaces the contents of the Text object with a new formatted string. Open in Browser @ param textstring \u2014 The new string of text to use. @ param wraplimit \u2014 The maximum width in pixels of the text before it gets automatically wrapped to a new line. @ param align \u2014 The alignment of the text. -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.Texture getDPIScale ( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture. getDepth ( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture. getDepthSampleMode ( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. getDimensions ( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture. getFilter ( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getFormat ( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel. getHeight ( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture. getLayerCount ( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture. getMipmapCount ( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture. getMipmapFilter ( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getPixelDimensions ( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelHeight ( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels. getPixelWidth ( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. getTextureType ( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis. getWidth ( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture. getWrap ( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) isReadable ( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setDepthSampleMode ( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. setFilter ( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setMipmapFilter ( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setWrap ( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.TextureType love.Thread getError ( method ) love .Thread: getError () -> err : string Retrieves the error string from the thread if it produced an error. Open in Browser @ return err \u2014 The error message, or nil if the Thread has not caused an error. isRunning ( method ) love .Thread: isRunning () -> value : boolean Returns whether the thread is currently running. Threads which are not running can be (re)started with Thread:start. Open in Browser @ return value \u2014 True if the thread is running, false otherwise. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. start ( method ) love .Thread: start () Starts the thread. Beginning with version 0.9.0, threads can be restarted after they have completed their execution. Open in Browser type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. wait ( method ) love .Thread: wait () Wait for a thread to finish. This call will block until the thread finishes. Open in Browser love.TimeUnit love.Transform apply ( method ) love .Transform: apply ( other : love.Transform) -> transform : love.Transform Applies the given other Transform object to this one. This effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object. Open in Browser @ param other \u2014 The other Transform object to apply to this Transform. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. clone ( method ) love .Transform: clone () -> clone : love.Transform Creates a new copy of this Transform. Open in Browser @ return clone \u2014 The copy of this Transform. getMatrix ( method ) love .Transform: getMatrix () -> e1_1 : number 2. e1_2 : number 3. e1_3 : number 4. e1_4 : number 5. e2_1 : number 6. e2_2 : number 7. e2_3 : number 8. e2_4 : number 9. e3_1 : number 10. e3_2 : number 11. e3_3 : number 12. e3_4 : number 13. e4_1 : number 14. e4_2 : number 15. e4_3 : number 16. e4_4 : number Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order. Open in Browser @ return e1_1 \u2014 The first column of the first row of the matrix. @ return e1_2 \u2014 The second column of the first row of the matrix. @ return e1_3 \u2014 The third column of the first row of the matrix. @ return e1_4 \u2014 The fourth column of the first row of the matrix. @ return e2_1 \u2014 The first column of the second row of the matrix. @ return e2_2 \u2014 The second column of the second row of the matrix. @ return e2_3 \u2014 The third column of the second row of the matrix. @ return e2_4 \u2014 The fourth column of the second row of the matrix. @ return e3_1 \u2014 The first column of the third row of the matrix. @ return e3_2 \u2014 The second column of the third row of the matrix. @ return e3_3 \u2014 The third column of the third row of the matrix. @ return e3_4 \u2014 The fourth column of the third row of the matrix. @ return e4_1 \u2014 The first column of the fourth row of the matrix. @ return e4_2 \u2014 The second column of the fourth row of the matrix. @ return e4_3 \u2014 The third column of the fourth row of the matrix. @ return e4_4 \u2014 The fourth column of the fourth row of the matrix. inverse ( method ) love .Transform: inverse () -> inverse : love.Transform Creates a new Transform containing the inverse of this Transform. Open in Browser @ return inverse \u2014 A new Transform object representing the inverse of this Transform's matrix. inverseTransformPoint ( method ) love .Transform: inverseTransformPoint ( localX : number, localY : number) -> globalX : number 2. globalY : number Applies the reverse of the Transform object's transformation to the given 2D position. This effectively converts the given position from the local coordinate space of the Transform into global coordinates. One use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game. Open in Browser @ param localX \u2014 The x component of the position with the transform applied. @ param localY \u2014 The y component of the position with the transform applied. @ return globalX \u2014 The x component of the position in global coordinates. @ return globalY \u2014 The y component of the position in global coordinates. isAffine2DTransform ( method ) love .Transform: isAffine2DTransform () -> affine : boolean Checks whether the Transform is an affine transformation. Open in Browser @ return affine \u2014 true if the transform object is an affine transformation, false otherwise. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. reset ( method ) love .Transform: reset () -> transform : love.Transform Resets the Transform to an identity state. All previously applied transformations are erased. Open in Browser @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. rotate ( method ) love .Transform: rotate ( angle : number) -> transform : love.Transform Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param angle \u2014 The relative angle in radians to rotate this Transform by. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. scale ( method ) love .Transform: scale ( sx : number, sy ? : number ) -> transform : love.Transform Scales the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param sx \u2014 The relative scale factor along the x-axis. @ param sy \u2014 The relative scale factor along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. setMatrix ( method ) love .Transform: setMatrix ( e1_1 : number, e1_2 : number, e1_3 : number, e1_4 : number, e2_1 : number, e2_2 : number, e2_3 : number, e2_4 : number, e3_1 : number, e3_2 : number, e3_3 : number, e3_4 : number, e4_1 : number, e4_2 : number, e4_3 : number, e4_4 : number) -> transform : love.Transform Directly sets the Transform's internal 4x4 transformation matrix. Open in Browser @ param e1_1 \u2014 The first column of the first row of the matrix. @ param e1_2 \u2014 The second column of the first row of the matrix. @ param e1_3 \u2014 The third column of the first row of the matrix. @ param e1_4 \u2014 The fourth column of the first row of the matrix. @ param e2_1 \u2014 The first column of the second row of the matrix. @ param e2_2 \u2014 The second column of the second row of the matrix. @ param e2_3 \u2014 The third column of the second row of the matrix. @ param e2_4 \u2014 The fourth column of the second row of the matrix. @ param e3_1 \u2014 The first column of the third row of the matrix. @ param e3_2 \u2014 The second column of the third row of the matrix. @ param e3_3 \u2014 The third column of the third row of the matrix. @ param e3_4 \u2014 The fourth column of the third row of the matrix. @ param e4_1 \u2014 The first column of the fourth row of the matrix. @ param e4_2 \u2014 The second column of the fourth row of the matrix. @ param e4_3 \u2014 The third column of the fourth row of the matrix. @ param e4_4 \u2014 The fourth column of the fourth row of the matrix. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. setTransformation ( method ) love .Transform: setTransformation ( x : number, y : number, angle ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> transform : love.Transform Resets the Transform to the specified transformation parameters. Open in Browser @ param x \u2014 The position of the Transform on the x-axis. @ param y \u2014 The position of the Transform on the y-axis. @ param angle \u2014 The orientation of the Transform in radians. @ param sx \u2014 Scale factor on the x-axis. @ param sy \u2014 Scale factor on the y-axis. @ param ox \u2014 Origin offset on the x-axis. @ param oy \u2014 Origin offset on the y-axis. @ param kx \u2014 Shearing / skew factor on the x-axis. @ param ky \u2014 Shearing / skew factor on the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. shear ( method ) love .Transform: shear ( kx : number, ky : number) -> transform : love.Transform Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param kx \u2014 The shear factor along the x-axis. @ param ky \u2014 The shear factor along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. transformPoint ( method ) love .Transform: transformPoint ( globalX : number, globalY : number) -> localX : number 2. localY : number Applies the Transform object's transformation to the given 2D position. This effectively converts the given position from global coordinates into the local coordinate space of the Transform. Open in Browser @ param globalX \u2014 The x component of the position in global coordinates. @ param globalY \u2014 The y component of the position in global coordinates. @ return localX \u2014 The x component of the position with the transform applied. @ return localY \u2014 The y component of the position with the transform applied. translate ( method ) love .Transform: translate ( dx : number, dy : number) -> transform : love.Transform Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param dx \u2014 The relative translation along the x-axis. @ param dy \u2014 The relative translation along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.VertexAttributeStep love.VertexWinding love.Video getDimensions ( method ) love .Video: getDimensions () -> width : number 2. height : number Gets the width and height of the Video in pixels. Open in Browser @ return width \u2014 The width of the Video. @ return height \u2014 The height of the Video. getFilter ( method ) love .Video: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the scaling filters used when drawing the Video. Open in Browser @ return min \u2014 The filter mode used when scaling the Video down. @ return mag \u2014 The filter mode used when scaling the Video up. @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getHeight ( method ) love .Video: getHeight () -> height : number Gets the height of the Video in pixels. Open in Browser @ return height \u2014 The height of the Video. getSource ( method ) love .Video: getSource () -> source : love.Source Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument. Open in Browser @ return source \u2014 The audio Source used for audio playback, or nil if the video has no audio. getStream ( method ) love .Video: getStream () -> stream : love.VideoStream Gets the VideoStream object used for decoding and controlling the video. Open in Browser @ return stream \u2014 The VideoStream used for decoding and controlling the video. getWidth ( method ) love .Video: getWidth () -> width : number Gets the width of the Video in pixels. Open in Browser @ return width \u2014 The width of the Video. isPlaying ( method ) love .Video: isPlaying () -> playing : boolean Gets whether the Video is currently playing. Open in Browser @ return playing \u2014 Whether the video is playing. pause ( method ) love .Video: pause () Pauses the Video. Open in Browser play ( method ) love .Video: play () Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw. Open in Browser release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. rewind ( method ) love .Video: rewind () Rewinds the Video to the beginning. Open in Browser seek ( method ) love .Video: seek ( offset : number) Sets the current playback position of the Video. Open in Browser @ param offset \u2014 The time in seconds since the beginning of the Video. setFilter ( method ) love .Video: setFilter ( min : \" linear \"|\" nearest \", mag: \" linear \"|\" nearest \", anisotropy?: number) Sets the scaling filters used when drawing the Video. Open in Browser @ param min \u2014 The filter mode used when scaling the Video down. @ param mag \u2014 The filter mode used when scaling the Video up. @ param anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setSource ( method ) love .Video: setSource ( source ? : love .Source) Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization. Open in Browser @ param source \u2014 The audio Source used for audio playback, or nil to disable audio synchronization. tell ( method ) love .Video: tell () -> seconds : number Gets the current playback position of the Video. Open in Browser @ return seconds \u2014 The time in seconds since the beginning of the Video. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.VideoStream getFilename ( method ) love .VideoStream: getFilename () -> filename : string Gets the filename of the VideoStream. Open in Browser @ return filename \u2014 The filename of the VideoStream isPlaying ( method ) love .VideoStream: isPlaying () -> playing : boolean Gets whether the VideoStream is playing. Open in Browser @ return playing \u2014 Whether the VideoStream is playing. pause ( method ) love .VideoStream: pause () Pauses the VideoStream. Open in Browser play ( method ) love .VideoStream: play () Plays the VideoStream. Open in Browser release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. rewind ( method ) love .VideoStream: rewind () Rewinds the VideoStream. Synonym to VideoStream:seek(0). Open in Browser seek ( method ) love .VideoStream: seek ( offset : number) Sets the current playback position of the VideoStream. Open in Browser @ param offset \u2014 The time in seconds since the beginning of the VideoStream. tell ( method ) love .VideoStream: tell () -> seconds : number Gets the current playback position of the VideoStream. Open in Browser @ return seconds \u2014 The number of seconds sionce the beginning of the VideoStream. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.WeldJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getDampingRatio ( method ) love .WeldJoint: getDampingRatio () -> ratio : number Returns the damping ratio of the joint. Open in Browser @ return ratio \u2014 The damping ratio. getFrequency ( method ) love .WeldJoint: getFrequency () -> freq : number Returns the frequency. Open in Browser @ return freq \u2014 The frequency in hertz. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getReferenceAngle ( method ) love .WeldJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setDampingRatio ( method ) love .WeldJoint: setDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio. setFrequency ( method ) love .WeldJoint: setFrequency ( freq : number) Sets a new frequency. Open in Browser @ param freq \u2014 The new frequency in hertz. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.WheelJoint destroy ( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser getAnchors ( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2. getAxis ( method ) love .WheelJoint: getAxis () -> x : number 2. y : number Gets the world-space axis vector of the Wheel Joint. Open in Browser @ return x \u2014 The x-axis coordinate of the world-space axis vector. @ return y \u2014 The y-axis coordinate of the world-space axis vector. getBodies ( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body. getCollideConnected ( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise. getJointSpeed ( method ) love .WheelJoint: getJointSpeed () -> speed : number Returns the current joint translation speed. Open in Browser @ return speed \u2014 The translation speed of the joint in meters per second. getJointTranslation ( method ) love .WheelJoint: getJointTranslation () -> position : number Returns the current joint translation. Open in Browser @ return position \u2014 The translation of the joint in meters. getMaxMotorTorque ( method ) love .WheelJoint: getMaxMotorTorque () -> maxTorque : number Returns the maximum motor torque. Open in Browser @ return maxTorque \u2014 The maximum torque of the joint motor in newton meters. getMotorSpeed ( method ) love .WheelJoint: getMotorSpeed () -> speed : number Returns the speed of the motor. Open in Browser @ return speed \u2014 The speed of the joint motor in radians per second. getMotorTorque ( method ) love .WheelJoint: getMotorTorque ( invdt : number) -> torque : number Returns the current torque on the motor. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The torque on the motor in newton meters. getReactionForce ( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force. getReactionTorque ( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body. getSpringDampingRatio ( method ) love .WheelJoint: getSpringDampingRatio () -> ratio : number Returns the damping ratio. Open in Browser @ return ratio \u2014 The damping ratio. getSpringFrequency ( method ) love .WheelJoint: getSpringFrequency () -> freq : number Returns the spring frequency. Open in Browser @ return freq \u2014 The frequency in hertz. getType ( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint. getUserData ( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint. isDestroyed ( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed. isMotorEnabled ( method ) love .WheelJoint: isMotorEnabled () -> on : boolean Checks if the joint motor is running. Open in Browser @ return on \u2014 The status of the joint motor. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setMaxMotorTorque ( method ) love .WheelJoint: setMaxMotorTorque ( maxTorque : number) Sets a new maximum motor torque. Open in Browser @ param maxTorque \u2014 The new maximum torque for the joint motor in newton meters. setMotorEnabled ( method ) love .WheelJoint: setMotorEnabled ( enable : boolean) Starts and stops the joint motor. Open in Browser @ param enable \u2014 True turns the motor on and false turns it off. setMotorSpeed ( method ) love .WheelJoint: setMotorSpeed ( speed : number) Sets a new speed for the motor. Open in Browser @ param speed \u2014 The new speed for the joint motor in radians per second. setSpringDampingRatio ( method ) love .WheelJoint: setSpringDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio. setSpringFrequency ( method ) love .WheelJoint: setSpringFrequency ( freq : number) Sets a new spring frequency. Open in Browser @ param freq \u2014 The new frequency in hertz. setUserData ( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. love.World destroy ( method ) love .World: destroy () Destroys the world, taking all bodies, joints, fixtures and their shapes with it. An error will occur if you attempt to use any of the destroyed objects after calling this function. Open in Browser getBodies ( method ) love .World: getBodies () -> bodies : table Returns a table with all bodies. Open in Browser @ return bodies \u2014 A sequence with all bodies. getBodyCount ( method ) love .World: getBodyCount () -> n : number Returns the number of bodies in the world. Open in Browser @ return n \u2014 The number of bodies in the world. getCallbacks ( method ) love .World: getCallbacks () -> beginContact : function 2. endContact : function 3. preSolve : function 4. postSolve : function Returns functions for the callbacks during the world update. Open in Browser @ return beginContact \u2014 Gets called when two fixtures begin to overlap. @ return endContact \u2014 Gets called when two fixtures cease to overlap. @ return preSolve \u2014 Gets called before a collision gets resolved. @ return postSolve \u2014 Gets called after the collision has been resolved. getContactCount ( method ) love .World: getContactCount () -> n : number Returns the number of contacts in the world. Open in Browser @ return n \u2014 The number of contacts in the world. getContactFilter ( method ) love .World: getContactFilter () -> contactFilter : function Returns the function for collision filtering. Open in Browser @ return contactFilter \u2014 The function that handles the contact filtering. getContacts ( method ) love .World: getContacts () -> contacts : table Returns a table with all Contacts. Open in Browser @ return contacts \u2014 A sequence with all Contacts. getGravity ( method ) love .World: getGravity () -> x : number 2. y : number Get the gravity of the world. Open in Browser @ return x \u2014 The x component of gravity. @ return y \u2014 The y component of gravity. getJointCount ( method ) love .World: getJointCount () -> n : number Returns the number of joints in the world. Open in Browser @ return n \u2014 The number of joints in the world. getJoints ( method ) love .World: getJoints () -> joints : table Returns a table with all joints. Open in Browser @ return joints \u2014 A sequence with all joints. isDestroyed ( method ) love .World: isDestroyed () -> destroyed : boolean Gets whether the World is destroyed. Destroyed worlds cannot be used. Open in Browser @ return destroyed \u2014 Whether the World is destroyed. isLocked ( method ) love .World: isLocked () -> locked : boolean Returns if the world is updating its state. This will return true inside the callbacks from World:setCallbacks. Open in Browser @ return locked \u2014 Will be true if the world is in the process of updating its state. isSleepingAllowed ( method ) love .World: isSleepingAllowed () -> allow : boolean Gets the sleep behaviour of the world. Open in Browser @ return allow \u2014 True if bodies in the world are allowed to sleep, or false if not. queryBoundingBox ( method ) love .World: queryBoundingBox ( topLeftX : number, topLeftY : number, bottomRightX : number, bottomRightY : number, callback : function) Calls a function for each fixture inside the specified area by searching for any overlapping bounding box (Fixture:getBoundingBox). Open in Browser @ param topLeftX \u2014 The x position of the top-left point. @ param topLeftY \u2014 The y position of the top-left point. @ param bottomRightX \u2014 The x position of the bottom-right point. @ param bottomRightY \u2014 The y position of the bottom-right point. @ param callback \u2014 This function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false. rayCast ( method ) love .World: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, callback : function) Casts a ray and calls a function for each fixtures it intersects. Open in Browser @ param x1 \u2014 The x position of the starting point of the ray. @ param y1 \u2014 The x position of the starting point of the ray. @ param x2 \u2014 The x position of the end point of the ray. @ param y2 \u2014 The x value of the surface normal vector of the shape edge. @ param callback \u2014 A function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value. release ( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released. setCallbacks ( method ) love .World: setCallbacks ( beginContact : function, endContact : function, preSolve ? : function , postSolve ? : function ) Sets functions for the collision callbacks during the world update. Four Lua functions can be given as arguments. The value nil removes a function. When called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the Contact between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes. If you are interested to know when exactly each callback is called, consult a Box2d manual Open in Browser @ param beginContact \u2014 Gets called when two fixtures begin to overlap. @ param endContact \u2014 Gets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed. @ param preSolve \u2014 Gets called before a collision gets resolved. @ param postSolve \u2014 Gets called after the collision has been resolved. setContactFilter ( method ) love .World: setContactFilter ( filter : function) Sets a function for collision filtering. If the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other. Open in Browser @ param filter \u2014 The function handling the contact filtering. setGravity ( method ) love .World: setGravity ( x : number, y : number) Set the gravity of the world. Open in Browser @ param x \u2014 The x component of gravity. @ param y \u2014 The y component of gravity. setSleepingAllowed ( method ) love .World: setSleepingAllowed ( allow : boolean) Sets the sleep behaviour of the world. Open in Browser @ param allow \u2014 True if bodies in the world are allowed to sleep, or false if not. translateOrigin ( method ) love .World: translateOrigin ( x : number, y : number) Translates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin. Open in Browser @ param x \u2014 The x component of the new origin with respect to the old origin. @ param y \u2014 The y component of the new origin with respect to the old origin. type ( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string. typeOf ( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise. update ( method ) love .World: update ( dt : number, velocityiterations ? : number , positioniterations ? : number ) Update the state of the world. Open in Browser @ param dt \u2014 The time (in seconds) to advance the physics simulation. @ param velocityiterations \u2014 The maximum number of steps used to determine the new velocities when resolving a collision. @ param positioniterations \u2014 The maximum number of steps used to determine the new positions when resolving a collision. love.WrapMode love.audio love .audio love.audio getActiveEffects function love.audio. getActiveEffects () -> effects : table Gets a list of the names of the currently enabled effects. Open in Browser @ return effects \u2014 The list of the names of the currently enabled effects. getActiveSourceCount function love.audio. getActiveSourceCount () -> count : number Gets the current number of simultaneously playing sources. Open in Browser @ return count \u2014 The current number of simultaneously playing sources. getDistanceModel function love.audio. getDistanceModel () -> model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2) Returns the distance attenuation model. Open in Browser @ return model \u2014 The current distance model. The default is 'inverseclamped'. -- -- The different distance models. -- -- Extended information can be found in the chapter \"3.4. Attenuation By Distance\" of the OpenAL 1.1 specification. -- -- -- [Open in Browser](https://love2d.org/wiki/DistanceModel) -- model : | \" none \" -- Sources do not get attenuated. | \" inverse \" -- Inverse distance attenuation. | \" inverseclamped \" -- Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''. | \" linear \" -- Linear attenuation. | \" linearclamped \" -- Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''. | \" exponent \" -- Exponential attenuation. | \" exponentclamped \" -- Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''. getDopplerScale function love.audio. getDopplerScale () -> scale : number Gets the current global scale factor for velocity-based doppler effects. Open in Browser @ return scale \u2014 The current doppler scale factor. getEffect function love.audio. getEffect ( name : string) -> settings : table Gets the settings associated with an effect. Open in Browser @ param name \u2014 The name of the effect. @ return settings \u2014 The settings associated with the effect. getMaxSceneEffects function love.audio. getMaxSceneEffects () -> maximum : number Gets the maximum number of active effects supported by the system. Open in Browser @ return maximum \u2014 The maximum number of active effects. getMaxSourceEffects function love.audio. getMaxSourceEffects () -> maximum : number Gets the maximum number of active Effects in a single Source object, that the system can support. Open in Browser @ return maximum \u2014 The maximum number of active Effects per Source. getOrientation function love.audio. getOrientation () -> fx : number 2. fy : number 3. fz : number 4. ux : number 5. uy : number 6. uz : number Returns the orientation of the listener. Open in Browser @ return fx \u2014 Forward vector of the listener orientation. @ return fy \u2014 Forward vector of the listener orientation. @ return fz \u2014 Forward vector of the listener orientation. @ return ux \u2014 Up vector of the listener orientation. @ return uy \u2014 Up vector of the listener orientation. @ return uz \u2014 Up vector of the listener orientation. getPosition function love.audio. getPosition () -> x : number 2. y : number 3. z : number Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. Open in Browser @ return x \u2014 The X position of the listener. @ return y \u2014 The Y position of the listener. @ return z \u2014 The Z position of the listener. getRecordingDevices function love.audio. getRecordingDevices () -> devices : table Gets a list of RecordingDevices on the system. The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system. Audio recording is currently not supported on iOS. Open in Browser @ return devices \u2014 The list of connected recording devices. getVelocity function love.audio. getVelocity () -> x : number 2. y : number 3. z : number Returns the velocity of the listener. Open in Browser @ return x \u2014 The X velocity of the listener. @ return y \u2014 The Y velocity of the listener. @ return z \u2014 The Z velocity of the listener. getVolume function love.audio. getVolume () -> volume : number Returns the master volume. Open in Browser @ return volume \u2014 The current master volume isEffectsSupported function love.audio. isEffectsSupported () -> supported : boolean Gets whether audio effects are supported in the system. Open in Browser @ return supported \u2014 True if effects are supported, false otherwise. newQueueableSource function love.audio. newQueueableSource ( samplerate : number, bitdepth : number, channels : number, buffercount ? : number ) -> source : love.Source Creates a new Source usable for real-time generated sound playback with Source:queue. Open in Browser @ param samplerate \u2014 Number of samples per second when playing. @ param bitdepth \u2014 Bits per sample (8 or 16). @ param channels \u2014 1 for mono or 2 for stereo. @ param buffercount \u2014 The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified. @ return source \u2014 The new Source usable with Source:queue. newSource function love.audio. newSource ( filename : string, type : \"queue\" | \"static\" | \"stream\" ) -> source : love.Source Creates a new Source from a filepath, File, Decoder or SoundData. Sources created from SoundData are always static. Open in Browser @ param filename \u2014 The filepath to the audio file. @ param type \u2014 Streaming or static source. @ return source \u2014 A new Source that can play the specified audio. -- -- Types of audio sources. -- -- A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once. -- -- -- [Open in Browser](https://love2d.org/wiki/SourceType) -- type : | \"static\" -- The whole audio is decoded. | \"stream\" -- The audio is decoded in chunks when needed. | \"queue\" -- The audio must be manually queued by the user. pause function love.audio. pause () -> Sources : table Pauses specific or all currently played Sources. Open in Browser @ return Sources \u2014 A table containing a list of Sources that were paused by this call. play function love.audio. play ( source : love.Source) Plays the specified Source. Open in Browser @ param source \u2014 The Source to play. setDistanceModel function love.audio. setDistanceModel ( model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2)) Sets the distance attenuation model. Open in Browser @ param model \u2014 The new distance model. -- -- The different distance models. -- -- Extended information can be found in the chapter \"3.4. Attenuation By Distance\" of the OpenAL 1.1 specification. -- -- -- [Open in Browser](https://love2d.org/wiki/DistanceModel) -- model : | \" none \" -- Sources do not get attenuated. | \" inverse \" -- Inverse distance attenuation. | \" inverseclamped \" -- Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''. | \" linear \" -- Linear attenuation. | \" linearclamped \" -- Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''. | \" exponent \" -- Exponential attenuation. | \" exponentclamped \" -- Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''. setDopplerScale function love.audio. setDopplerScale ( scale : number) Sets a global scale factor for velocity-based doppler effects. The default scale value is 1. Open in Browser @ param scale \u2014 The new doppler scale factor. The scale must be greater than 0. setEffect function love.audio. setEffect ( name : string, settings : { type: \" chorus \"|\" compressor \"|\" distortion \"|\" echo \"|\" equalizer \"...(+3), volume: number }) -> success: boolean Defines an effect that can be applied to a Source. Not all system supports audio effects. Use love.audio.isEffectsSupported to check. Open in Browser @ param name \u2014 The name of the effect. @ param settings \u2014 The settings to use for this effect, with the following fields: @ return success \u2014 Whether the effect was successfully created. setMixWithSystem function love.audio. setMixWithSystem ( mix : boolean) -> success : boolean Sets whether the system should mix the audio with the system's audio. Open in Browser @ param mix \u2014 True to enable mixing, false to disable it. @ return success \u2014 True if the change succeeded, false otherwise. setOrientation function love.audio. setOrientation ( fx : number, fy : number, fz : number, ux : number, uy : number, uz : number) Sets the orientation of the listener. Open in Browser @ param fx \u2014 Forward vector of the listener orientation. @ param fy \u2014 Forward vector of the listener orientation. @ param fz \u2014 Forward vector of the listener orientation. @ param ux \u2014 Up vector of the listener orientation. @ param uy \u2014 Up vector of the listener orientation. @ param uz \u2014 Up vector of the listener orientation. setPosition function love.audio. setPosition ( x : number, y : number, z : number) Sets the position of the listener, which determines how sounds play. Open in Browser @ param x \u2014 The x position of the listener. @ param y \u2014 The y position of the listener. @ param z \u2014 The z position of the listener. setVelocity function love.audio. setVelocity ( x : number, y : number, z : number) Sets the velocity of the listener. Open in Browser @ param x \u2014 The X velocity of the listener. @ param y \u2014 The Y velocity of the listener. @ param z \u2014 The Z velocity of the listener. setVolume function love.audio. setVolume ( volume : number) Sets the master volume. Open in Browser @ param volume \u2014 1.0 is max and 0.0 is off. stop function love.audio. stop () Stops currently played sources. Open in Browser love.audio.getActiveEffects function love.audio. getActiveEffects () -> effects : table love.audio.getActiveSourceCount function love.audio. getActiveSourceCount () -> count : number love.audio.getDistanceModel function love.audio. getDistanceModel () -> model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2) love.audio.getDopplerScale function love.audio. getDopplerScale () -> scale : number love.audio.getEffect function love.audio. getEffect ( name : string) -> settings : table love.audio.getMaxSceneEffects function love.audio. getMaxSceneEffects () -> maximum : number love.audio.getMaxSourceEffects function love.audio. getMaxSourceEffects () -> maximum : number love.audio.getOrientation function love.audio. getOrientation () -> fx : number 2. fy : number 3. fz : number 4. ux : number 5. uy : number 6. uz : number love.audio.getPosition function love.audio. getPosition () -> x : number 2. y : number 3. z : number love.audio.getRecordingDevices function love.audio. getRecordingDevices () -> devices : table love.audio.getVelocity function love.audio. getVelocity () -> x : number 2. y : number 3. z : number love.audio.getVolume function love.audio. getVolume () -> volume : number love.audio.isEffectsSupported function love.audio. isEffectsSupported () -> supported : boolean love.audio.newQueueableSource function love.audio. newQueueableSource ( samplerate : number, bitdepth : number, channels : number, buffercount ? : number ) -> source : love.Source love.audio.newSource function love.audio. newSource ( filename : string, type : \"queue\" | \"static\" | \"stream\" ) -> source : love.Source love.audio.pause function love.audio. pause () -> Sources : table love.audio.play function love.audio. play ( source : love.Source) love.audio.setDistanceModel function love.audio. setDistanceModel ( model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2)) love.audio.setDopplerScale function love.audio. setDopplerScale ( scale : number) love.audio.setEffect function love.audio. setEffect ( name : string, settings : { type: \" chorus \"|\" compressor \"|\" distortion \"|\" echo \"|\" equalizer \"...(+3), volume: number }) -> success: boolean love.audio.setMixWithSystem function love.audio. setMixWithSystem ( mix : boolean) -> success : boolean love.audio.setOrientation function love.audio. setOrientation ( fx : number, fy : number, fz : number, ux : number, uy : number, uz : number) love.audio.setPosition function love.audio. setPosition ( x : number, y : number, z : number) love.audio.setVelocity function love.audio. setVelocity ( x : number, y : number, z : number) love.audio.setVolume function love.audio. setVolume ( volume : number) love.audio.stop function love.audio. stop () love.conf love.conf function love. conf ( t : any) love.data love .data love.data compress function love.data. compress ( container : \" data \"|\" string \", format: \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \", rawstring: string, level?: number) -> compressedData: string|love.CompressedData Compresses a string or data using a specific compression algorithm. Open in Browser @ param container \u2014 What type to return the compressed data as. @ param format \u2014 The format to use when compressing the string. @ param rawstring \u2014 The raw (un-compressed) string to compress. @ param level \u2014 The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used. @ return compressedData \u2014 CompressedData/string which contains the compressed version of rawstring. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Compressed data formats. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedDataFormat) -- format: | \" lz4 \" -- The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here. | \" zlib \" -- The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio. | \" gzip \" -- The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format. | \" deflate \" -- Raw DEFLATE-compressed data (no header). decode function love.data. decode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string) -> decoded: string|love.ByteData Decode Data or a string from any of the EncodeFormats to Data or string. Open in Browser @ param container \u2014 What type to return the decoded data as. @ param format \u2014 The format of the input data. @ param sourceString \u2014 The raw (encoded) data to decode. @ return decoded \u2014 ByteData/string which contains the decoded version of source. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Encoding format used to encode or decode data. -- -- -- [Open in Browser](https://love2d.org/wiki/EncodeFormat) -- format: | \" base64 \" -- Encode/decode data as base64 binary-to-text encoding. | \" hex \" -- Encode/decode data as hexadecimal string. decompress function love.data. decompress ( container : \" data \"|\" string \", compressedData: love.CompressedData) -> decompressedData: string|love.Data Decompresses a CompressedData or previously compressed string or Data object. Open in Browser @ param container \u2014 What type to return the decompressed data as. @ param compressedData \u2014 The compressed data to decompress. @ return decompressedData \u2014 Data/string containing the raw decompressed data. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. encode function love.data. encode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string, linelength?: number) -> encoded: string|love.ByteData Encode Data or a string to a Data or string in one of the EncodeFormats. Open in Browser @ param container \u2014 What type to return the encoded data as. @ param format \u2014 The format of the output data. @ param sourceString \u2014 The raw data to encode. @ param linelength \u2014 The maximum line length of the output. Only supported for base64, ignored if 0. @ return encoded \u2014 ByteData/string which contains the encoded version of source. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Encoding format used to encode or decode data. -- -- -- [Open in Browser](https://love2d.org/wiki/EncodeFormat) -- format: | \" base64 \" -- Encode/decode data as base64 binary-to-text encoding. | \" hex \" -- Encode/decode data as hexadecimal string. getPackedSize function love.data. getPackedSize ( format : string) -> size : number Gets the size in bytes that a given format used with love.data.pack will use. This function behaves the same as Lua 5.3's string.packsize. Open in Browser @ param format \u2014 A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. @ return size \u2014 The size in bytes that the packed data will use. hash function love.data. hash ( hashFunction : \" md5 \"|\" sha1 \"|\" sha224 \"|\" sha256 \"|\" sha384 \"...(+1), string: string) -> rawdigest: string Compute the message digest of a string using a specified hash algorithm. Open in Browser @ param hashFunction \u2014 Hash algorithm to use. @ param string \u2014 String to hash. @ return rawdigest \u2014 Raw message digest string. -- -- Hash algorithm of love.data.hash. -- -- -- [Open in Browser](https://love2d.org/wiki/HashFunction) -- hashFunction : | \" md5 \" -- MD5 hash algorithm (16 bytes). | \" sha1 \" -- SHA1 hash algorithm (20 bytes). | \" sha224 \" -- SHA2 hash algorithm with message digest size of 224 bits (28 bytes). | \" sha256 \" -- SHA2 hash algorithm with message digest size of 256 bits (32 bytes). | \" sha384 \" -- SHA2 hash algorithm with message digest size of 384 bits (48 bytes). | \" sha512 \" -- SHA2 hash algorithm with message digest size of 512 bits (64 bytes). newByteData function love.data. newByteData ( datastring : string) -> bytedata : love.ByteData Creates a new Data object containing arbitrary bytes. Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created. Open in Browser @ param datastring \u2014 The byte string to copy. @ return bytedata \u2014 The new Data object. newDataView function love.data. newDataView ( data : love.Data, offset : number, size : number) -> view : love.Data Creates a new Data referencing a subsection of an existing Data object. Open in Browser @ param data \u2014 The Data object to reference. @ param offset \u2014 The offset of the subsection to reference, in bytes. @ param size \u2014 The size in bytes of the subsection to reference. @ return view \u2014 The new Data view. pack function love.data. pack ( container : \" data \"|\" string \", format: string, v1: boolean|string|number, ...boolean|string|number) -> data: string|love.Data Packs (serializes) simple Lua values. This function behaves the same as Lua 5.3's string.pack. Open in Browser @ param container \u2014 What type to return the encoded data as. @ param format \u2014 A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. @ param v1 \u2014 The first value (number, boolean, or string) to serialize. @ return data \u2014 Data/string which contains the serialized data. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. unpack function love.data. unpack ( format : string, datastring : string, pos ? : number ) -> v1 : boolean| string | number 2. index : number Unpacks (deserializes) a byte-string or Data into simple Lua values. This function behaves the same as Lua 5.3's string.unpack. Open in Browser @ param format \u2014 A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings. @ param datastring \u2014 A string containing the packed (serialized) data. @ param pos \u2014 Where to start reading in the string. Negative values can be used to read relative from the end of the string. @ return v1 \u2014 The first value (number, boolean, or string) that was unpacked. @ return index \u2014 The index of the first unread byte in the data string. love.data.compress function love.data. compress ( container : \" data \"|\" string \", format: \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \", rawstring: string, level?: number) -> compressedData: string|love.CompressedData love.data.decode function love.data. decode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string) -> decoded: string|love.ByteData love.data.decompress function love.data. decompress ( container : \" data \"|\" string \", compressedData: love.CompressedData) -> decompressedData: string|love.Data love.data.encode function love.data. encode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string, linelength?: number) -> encoded: string|love.ByteData love.data.getPackedSize function love.data. getPackedSize ( format : string) -> size : number love.data.hash function love.data. hash ( hashFunction : \" md5 \"|\" sha1 \"|\" sha224 \"|\" sha256 \"|\" sha384 \"...(+1), string: string) -> rawdigest: string love.data.newByteData function love.data. newByteData ( datastring : string) -> bytedata : love.ByteData love.data.newDataView function love.data. newDataView ( data : love.Data, offset : number, size : number) -> view : love.Data love.data.pack function love.data. pack ( container : \" data \"|\" string \", format: string, v1: boolean|string|number, ...boolean|string|number) -> data: string|love.Data love.data.unpack function love.data. unpack ( format : string, datastring : string, pos ? : number ) -> v1 : boolean| string | number 2. index : number love.directorydropped love.displayrotated love.draw love.errorhandler love.event clear function love.event. clear () Clears the event queue. Open in Browser poll function love.event. poll () -> i : function Returns an iterator for messages in the event queue. Open in Browser @ return i \u2014 Iterator function usable in a for loop. pump function love.event. pump () Pump events into the event queue. This is a low-level function, and is usually not called by the user, but by love.run. Note that this does need to be called for any OS to think you're still running, and if you want to handle OS-generated events at all (think callbacks). Open in Browser push function love.event. push ( n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32), a?: any, b?: any, c?: any, d?: any, e?: any, f?: any, ...any) Adds an event to the event queue. From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six. Open in Browser @ param n \u2014 The name of the event. @ param a \u2014 First event argument. @ param b \u2014 Second event argument. @ param c \u2014 Third event argument. @ param d \u2014 Fourth event argument. @ param e \u2014 Fifth event argument. @ param f \u2014 Sixth event argument. -- -- Arguments to love.event.push() and the like. -- -- Since 0.8.0, event names are no longer abbreviated. -- -- -- [Open in Browser](https://love2d.org/wiki/Event) -- n : | \" focus \" -- Window focus gained or lost | \" joystickpressed \" -- Joystick pressed | \" joystickreleased \" -- Joystick released | \" keypressed \" -- Key pressed | \" keyreleased \" -- Key released | \" mousepressed \" -- Mouse pressed | \" mousereleased \" -- Mouse released | \" quit \" -- Quit | \" resize \" -- Window size changed by the user | \" visible \" -- Window is minimized or un-minimized by the user | \" mousefocus \" -- Window mouse focus gained or lost | \" threaderror \" -- A Lua error has occurred in a thread | \" joystickadded \" -- Joystick connected | \" joystickremoved \" -- Joystick disconnected | \" joystickaxis \" -- Joystick axis motion | \" joystickhat \" -- Joystick hat pressed | \" gamepadpressed \" -- Joystick's virtual gamepad button pressed | \" gamepadreleased \" -- Joystick's virtual gamepad button released | \" gamepadaxis \" -- Joystick's virtual gamepad axis moved | \" textinput \" -- User entered text | \" mousemoved \" -- Mouse position changed | \" lowmemory \" -- Running out of memory on mobile devices system | \" textedited \" -- Candidate text for an IME changed | \" wheelmoved \" -- Mouse wheel moved | \" touchpressed \" -- Touch screen touched | \" touchreleased \" -- Touch screen stop touching | \" touchmoved \" -- Touch press moved inside touch screen | \" directorydropped \" -- Directory is dragged and dropped onto the window | \" filedropped \" -- File is dragged and dropped onto the window. | \" jp \" -- Joystick pressed | \" jr \" -- Joystick released | \" kp \" -- Key pressed | \" kr \" -- Key released | \" mp \" -- Mouse pressed | \" mr \" -- Mouse released | \" q \" -- Quit | \" f \" -- Window focus gained or lost quit function love.event. quit ( exitstatus ? : number ) Adds the quit event to the queue. The quit event is a signal for the event handler to close L\u00d6VE. It's possible to abort the exit process with the love.quit callback. Open in Browser @ param exitstatus \u2014 The program exit status to use when closing the application. wait function love.event. wait () -> n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32) 2. a: any 3. b: any 4. c: any 5. d: any 6. e: any 7. f: any Like love.event.poll(), but blocks until there is an event in the queue. Open in Browser @ return n \u2014 The name of event. @ return a \u2014 First event argument. @ return b \u2014 Second event argument. @ return c \u2014 Third event argument. @ return d \u2014 Fourth event argument. @ return e \u2014 Fifth event argument. @ return f \u2014 Sixth event argument. -- -- Arguments to love.event.push() and the like. -- -- Since 0.8.0, event names are no longer abbreviated. -- -- -- [Open in Browser](https://love2d.org/wiki/Event) -- n : | \" focus \" -- Window focus gained or lost | \" joystickpressed \" -- Joystick pressed | \" joystickreleased \" -- Joystick released | \" keypressed \" -- Key pressed | \" keyreleased \" -- Key released | \" mousepressed \" -- Mouse pressed | \" mousereleased \" -- Mouse released | \" quit \" -- Quit | \" resize \" -- Window size changed by the user | \" visible \" -- Window is minimized or un-minimized by the user | \" mousefocus \" -- Window mouse focus gained or lost | \" threaderror \" -- A Lua error has occurred in a thread | \" joystickadded \" -- Joystick connected | \" joystickremoved \" -- Joystick disconnected | \" joystickaxis \" -- Joystick axis motion | \" joystickhat \" -- Joystick hat pressed | \" gamepadpressed \" -- Joystick's virtual gamepad button pressed | \" gamepadreleased \" -- Joystick's virtual gamepad button released | \" gamepadaxis \" -- Joystick's virtual gamepad axis moved | \" textinput \" -- User entered text | \" mousemoved \" -- Mouse position changed | \" lowmemory \" -- Running out of memory on mobile devices system | \" textedited \" -- Candidate text for an IME changed | \" wheelmoved \" -- Mouse wheel moved | \" touchpressed \" -- Touch screen touched | \" touchreleased \" -- Touch screen stop touching | \" touchmoved \" -- Touch press moved inside touch screen | \" directorydropped \" -- Directory is dragged and dropped onto the window | \" filedropped \" -- File is dragged and dropped onto the window. | \" jp \" -- Joystick pressed | \" jr \" -- Joystick released | \" kp \" -- Key pressed | \" kr \" -- Key released | \" mp \" -- Mouse pressed | \" mr \" -- Mouse released | \" q \" -- Quit | \" f \" -- Window focus gained or lost love.event love .event love.event.clear function love.event. clear () love.event.poll function love.event. poll () -> i : function love.event.pump function love.event. pump () love.event.push function love.event. push ( n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32), a?: any, b?: any, c?: any, d?: any, e?: any, f?: any, ...any) love.event.quit function love.event. quit ( exitstatus ? : number ) love.event.wait function love.event. wait () -> n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32) 2. a: any 3. b: any 4. c: any 5. d: any 6. e: any 7. f: any love.filedropped love.filesystem append function love.filesystem. append ( name : string, data : string, size ? : number ) -> success : boolean 2. errormsg : string Append data to an existing file. Open in Browser @ param name \u2014 The name (and path) of the file. @ param data \u2014 The string data to append to the file. @ param size \u2014 How many bytes to write. @ return success \u2014 True if the operation was successful, or nil if there was an error. @ return errormsg \u2014 The error message on failure. areSymlinksEnabled function love.filesystem. areSymlinksEnabled () -> enable : boolean Gets whether love.filesystem follows symbolic links. Open in Browser @ return enable \u2014 Whether love.filesystem follows symbolic links. createDirectory function love.filesystem. createDirectory ( name : string) -> success : boolean Recursively creates a directory. When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already. Open in Browser @ param name \u2014 The directory to create. @ return success \u2014 True if the directory was created, false if not. getAppdataDirectory function love.filesystem. getAppdataDirectory () -> path : string Returns the application data directory (could be the same as getUserDirectory) Open in Browser @ return path \u2014 The path of the application data directory getCRequirePath function love.filesystem. getCRequirePath () -> paths : string Gets the filesystem paths that will be searched for c libraries when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform. The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ return paths \u2014 The paths that the ''require'' function will check for c libraries in love's filesystem. getDirectoryItems function love.filesystem. getDirectoryItems ( dir : string) -> files : table Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined. If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places. Open in Browser @ param dir \u2014 The directory. @ return files \u2014 A sequence with the names of all files and subdirectories as strings. getIdentity function love.filesystem. getIdentity () -> name : string Gets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full path. Open in Browser @ return name \u2014 The identity that is used as write directory. getInfo function love.filesystem. getInfo ( path : string, filtertype ? : \"directory\" | \"file\" | \"other\" | \"symlink\" ) -> info : { type: \" directory \"|\" file \"|\" other \"|\" symlink \", size: number, modtime: number } Gets information about the specified file or directory. Open in Browser @ param path \u2014 The file or directory path to check. @ param filtertype \u2014 If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type. @ return info \u2014 A table containing information about the specified path, or nil if nothing exists at the path. The table contains the following fields: -- -- The type of a file. -- -- -- [Open in Browser](https://love2d.org/wiki/FileType) -- filtertype : | \" file \" -- Regular file. | \" directory \" -- Directory. | \" symlink \" -- Symbolic link. | \" other \" -- Something completely different like a device. getRealDirectory function love.filesystem. getRealDirectory ( filepath : string) -> realdir : string Gets the platform-specific absolute path of the directory containing a filepath. This can be used to determine whether a file is inside the save directory or the game's source .love. Open in Browser @ param filepath \u2014 The filepath to get the directory of. @ return realdir \u2014 The platform-specific full path of the directory containing the filepath. getRequirePath function love.filesystem. getRequirePath () -> paths : string Gets the filesystem paths that will be searched when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ return paths \u2014 The paths that the ''require'' function will check in love's filesystem. getSaveDirectory function love.filesystem. getSaveDirectory () -> dir : string Gets the full path to the designated save directory. This can be useful if you want to use the standard io library (or something else) to read or write in the save directory. Open in Browser @ return dir \u2014 The absolute path to the save directory. getSource function love.filesystem. getSource () -> path : string Returns the full path to the the .love file or directory. If the game is fused to the L\u00d6VE executable, then the executable is returned. Open in Browser @ return path \u2014 The full platform-dependent path of the .love file or directory. getSourceBaseDirectory function love.filesystem. getSourceBaseDirectory () -> path : string Returns the full path to the directory containing the .love file. If the game is fused to the L\u00d6VE executable, then the directory containing the executable is returned. If love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\\Program Files\\coolgame) readable by love.filesystem. Open in Browser @ return path \u2014 The full platform-dependent path of the directory containing the .love file. getUserDirectory function love.filesystem. getUserDirectory () -> path : string Returns the path of the user's directory Open in Browser @ return path \u2014 The path of the user's directory getWorkingDirectory function love.filesystem. getWorkingDirectory () -> cwd : string Gets the current working directory. Open in Browser @ return cwd \u2014 The current working directory. init function love.filesystem. init ( appname : string) Initializes love.filesystem, will be called internally, so should not be used explicitly. Open in Browser @ param appname \u2014 The name of the application binary, typically love. isFused function love.filesystem. isFused () -> fused : boolean Gets whether the game is in fused mode or not. If a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory. A game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game. Open in Browser @ return fused \u2014 True if the game is in fused mode, false otherwise. lines function love.filesystem. lines ( name : string) -> iterator : function Iterate over the lines in a file. Open in Browser @ param name \u2014 The name (and path) of the file @ return iterator \u2014 A function that iterates over all the lines in the file load function love.filesystem. load ( name : string) -> chunk : function 2. errormsg : string Loads a Lua file (but does not run it). Open in Browser @ param name \u2014 The name (and path) of the file. @ return chunk \u2014 The loaded chunk. @ return errormsg \u2014 The error message if file could not be opened. mount function love.filesystem. mount ( archive : string, mountpoint : string, appendToPath ? : boolean ) -> success : boolean Mounts a zip file or folder in the game's save directory for reading. It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode. Open in Browser @ param archive \u2014 The folder or zip file in the game's save directory to mount. @ param mountpoint \u2014 The new path the archive will be mounted to. @ param appendToPath \u2014 Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories. @ return success \u2014 True if the archive was successfully mounted, false otherwise. newFile function love.filesystem. newFile ( filename : string) -> file : love.File Creates a new File object. It needs to be opened before it can be accessed. Open in Browser @ param filename \u2014 The filename of the file. @ return file \u2014 The new File object. newFileData function love.filesystem. newFileData ( contents : string, name : string) -> data : love.FileData Creates a new FileData object from a file on disk, or from a string in memory. Open in Browser @ param contents \u2014 The contents of the file in memory represented as a string. @ param name \u2014 The name of the file. The extension may be parsed and used by L\u00d6VE when passing the FileData object into love.audio.newSource. @ return data \u2014 The new FileData. read function love.filesystem. read ( name : string, size ? : number ) -> contents : string 2. size : number 3. contents : nil 4. error : string Read the contents of a file. Open in Browser @ param name \u2014 The name (and path) of the file. @ param size \u2014 How many bytes to read. @ return contents \u2014 The file contents. @ return size \u2014 How many bytes have been read. @ return contents \u2014 returns nil as content. @ return error \u2014 returns an error message. remove function love.filesystem. remove ( name : string) -> success : boolean Removes a file or empty directory. Open in Browser @ param name \u2014 The file or directory to remove. @ return success \u2014 True if the file/directory was removed, false otherwise. setCRequirePath function love.filesystem. setCRequirePath ( paths : string) Sets the filesystem paths that will be searched for c libraries when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform. The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ param paths \u2014 The paths that the ''require'' function will check in love's filesystem. setIdentity function love.filesystem. setIdentity ( name : string) Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location. Open in Browser @ param name \u2014 The new identity that will be used as write directory. setRequirePath function love.filesystem. setRequirePath ( paths : string) Sets the filesystem paths that will be searched when require is called. The paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ param paths \u2014 The paths that the ''require'' function will check in love's filesystem. setSource function love.filesystem. setSource ( path : string) Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by L\u00d6VE. Open in Browser @ param path \u2014 Absolute path to the game's source folder. setSymlinksEnabled function love.filesystem. setSymlinksEnabled ( enable : boolean) Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2. Open in Browser @ param enable \u2014 Whether love.filesystem should follow symbolic links. unmount function love.filesystem. unmount ( archive : string) -> success : boolean Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount. Open in Browser @ param archive \u2014 The folder or zip file in the game's save directory which is currently mounted. @ return success \u2014 True if the archive was successfully unmounted, false otherwise. write function love.filesystem. write ( name : string, data : string, size ? : number ) -> success : boolean 2. message : string Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents. Open in Browser @ param name \u2014 The name (and path) of the file. @ param data \u2014 The string data to write to the file. @ param size \u2014 How many bytes to write. @ return success \u2014 If the operation was successful. @ return message \u2014 Error message if operation was unsuccessful. love.filesystem love .filesystem love.filesystem.append function love.filesystem. append ( name : string, data : string, size ? : number ) -> success : boolean 2. errormsg : string love.filesystem.areSymlinksEnabled function love.filesystem. areSymlinksEnabled () -> enable : boolean love.filesystem.createDirectory function love.filesystem. createDirectory ( name : string) -> success : boolean love.filesystem.getAppdataDirectory function love.filesystem. getAppdataDirectory () -> path : string love.filesystem.getCRequirePath function love.filesystem. getCRequirePath () -> paths : string love.filesystem.getDirectoryItems function love.filesystem. getDirectoryItems ( dir : string) -> files : table love.filesystem.getIdentity function love.filesystem. getIdentity () -> name : string love.filesystem.getInfo function love.filesystem. getInfo ( path : string, filtertype ? : \"directory\" | \"file\" | \"other\" | \"symlink\" ) -> info : { type: \" directory \"|\" file \"|\" other \"|\" symlink \", size: number, modtime: number } love.filesystem.getRealDirectory function love.filesystem. getRealDirectory ( filepath : string) -> realdir : string love.filesystem.getRequirePath function love.filesystem. getRequirePath () -> paths : string love.filesystem.getSaveDirectory function love.filesystem. getSaveDirectory () -> dir : string love.filesystem.getSource function love.filesystem. getSource () -> path : string love.filesystem.getSourceBaseDirectory function love.filesystem. getSourceBaseDirectory () -> path : string love.filesystem.getUserDirectory function love.filesystem. getUserDirectory () -> path : string love.filesystem.getWorkingDirectory function love.filesystem. getWorkingDirectory () -> cwd : string love.filesystem.init function love.filesystem. init ( appname : string) love.filesystem.isFused function love.filesystem. isFused () -> fused : boolean love.filesystem.lines function love.filesystem. lines ( name : string) -> iterator : function love.filesystem.load function love.filesystem. load ( name : string) -> chunk : function 2. errormsg : string love.filesystem.mount function love.filesystem. mount ( archive : string, mountpoint : string, appendToPath ? : boolean ) -> success : boolean love.filesystem.newFile function love.filesystem. newFile ( filename : string) -> file : love.File love.filesystem.newFileData function love.filesystem. newFileData ( contents : string, name : string) -> data : love.FileData love.filesystem.read function love.filesystem. read ( name : string, size ? : number ) -> contents : string 2. size : number 3. contents : nil 4. error : string love.filesystem.remove function love.filesystem. remove ( name : string) -> success : boolean love.filesystem.setCRequirePath function love.filesystem. setCRequirePath ( paths : string) love.filesystem.setIdentity function love.filesystem. setIdentity ( name : string) love.filesystem.setRequirePath function love.filesystem. setRequirePath ( paths : string) love.filesystem.setSource function love.filesystem. setSource ( path : string) love.filesystem.setSymlinksEnabled function love.filesystem. setSymlinksEnabled ( enable : boolean) love.filesystem.unmount function love.filesystem. unmount ( archive : string) -> success : boolean love.filesystem.write function love.filesystem. write ( name : string, data : string, size ? : number ) -> success : boolean 2. message : string love.focus love.font love .font love.font newBMFontRasterizer function love.font. newBMFontRasterizer ( imageData : love.ImageData, glyphs : string, dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new BMFont Rasterizer. Open in Browser @ param imageData \u2014 The image data containing the drawable pictures of font glyphs. @ param glyphs \u2014 The sequence of glyphs in the ImageData. @ param dpiscale \u2014 DPI scale. @ return rasterizer \u2014 The rasterizer. newGlyphData function love.font. newGlyphData ( rasterizer : love.Rasterizer, glyph : number) Creates a new GlyphData. Open in Browser @ param rasterizer \u2014 The Rasterizer containing the font. @ param glyph \u2014 The character code of the glyph. newImageRasterizer function love.font. newImageRasterizer ( imageData : love.ImageData, glyphs : string, extraSpacing ? : number , dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new Image Rasterizer. Open in Browser @ param imageData \u2014 Font image data. @ param glyphs \u2014 String containing font glyphs. @ param extraSpacing \u2014 Font extra spacing. @ param dpiscale \u2014 Font DPI scale. @ return rasterizer \u2014 The rasterizer. newRasterizer function love.font. newRasterizer ( filename : string) -> rasterizer : love.Rasterizer Creates a new Rasterizer. Open in Browser @ param filename \u2014 The font file. @ return rasterizer \u2014 The rasterizer. newTrueTypeRasterizer function love.font. newTrueTypeRasterizer ( size ? : number , hinting ? : \"light\" | \"mono\" | \"none\" | \"normal\" , dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new TrueType Rasterizer. Open in Browser @ param size \u2014 The font size. @ param hinting \u2014 True Type hinting mode. @ param dpiscale \u2014 The font DPI scale. @ return rasterizer \u2014 The rasterizer. -- -- True Type hinting mode. -- -- -- [Open in Browser](https://love2d.org/wiki/HintingMode) -- hinting : | \" normal \" -- Default hinting. Should be preferred for typical antialiased fonts. | \" light \" -- Results in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting. | \" mono \" -- Results in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font. | \" none \" -- Disables hinting for the font. Results in fuzzier text. love.font.newBMFontRasterizer function love.font. newBMFontRasterizer ( imageData : love.ImageData, glyphs : string, dpiscale ? : number ) -> rasterizer : love.Rasterizer love.font.newGlyphData function love.font. newGlyphData ( rasterizer : love.Rasterizer, glyph : number) love.font.newImageRasterizer function love.font. newImageRasterizer ( imageData : love.ImageData, glyphs : string, extraSpacing ? : number , dpiscale ? : number ) -> rasterizer : love.Rasterizer love.font.newRasterizer function love.font. newRasterizer ( filename : string) -> rasterizer : love.Rasterizer love.font.newTrueTypeRasterizer function love.font. newTrueTypeRasterizer ( size ? : number , hinting ? : \"light\" | \"mono\" | \"none\" | \"normal\" , dpiscale ? : number ) -> rasterizer : love.Rasterizer love.gamepadaxis love.gamepadpressed love.gamepadreleased love.getVersion function love. getVersion () -> major : number 2. minor : number 3. revision : number 4. codename : string love.graphics applyTransform function love.graphics. applyTransform ( transform : love.Transform) Applies the given Transform object to the current coordinate transformation. This effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation. Open in Browser @ param transform \u2014 The Transform object to apply to the current graphics coordinate transform. arc function love.graphics. arc ( drawmode : \" fill \"|\" line \", x: number, y: number, radius: number, angle1: number, angle2: number, segments?: number) Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge. Open in Browser @ param drawmode \u2014 How to draw the arc. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radius \u2014 Radius of the arc. @ param angle1 \u2014 The angle at which the arc begins. @ param angle2 \u2014 The angle at which the arc terminates. @ param segments \u2014 The number of segments used for drawing the arc. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- drawmode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape. captureScreenshot function love.graphics. captureScreenshot ( filename : string) Creates a screenshot once the current frame is done (after love.draw has finished). Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame. Open in Browser @ param filename \u2014 The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats. circle function love.graphics. circle ( mode : \" fill \"|\" line \", x: number, y: number, radius: number) Draws a circle. Open in Browser @ param mode \u2014 How to draw the circle. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radius \u2014 The radius of the circle. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape. clear function love.graphics. clear () Clears the screen or active Canvas to the specified color. This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function. Note that the scissor area bounds the cleared region. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. In versions prior to background color instead. Open in Browser discard function love.graphics. discard ( discardcolor ? : boolean , discardstencil ? : boolean ) Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases. If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices. On some desktop systems this function may do nothing. Open in Browser @ param discardcolor \u2014 Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.) @ param discardstencil \u2014 Whether to discard the contents of the stencil buffer of the screen / active Canvas. draw function love.graphics. draw ( drawable : love.Drawable, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing. Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system. It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation. The right and bottom edges of the object are shifted at an angle defined by the shearing factors. When using the default shader anything drawn with this function will be tinted according to the currently selected color. Set it to pure white to preserve the object's original colors. Open in Browser @ param drawable \u2014 A drawable object. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). drawInstanced function love.graphics. drawInstanced ( mesh : love.Mesh, instancecount : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws many instances of a Mesh with a single draw call, using hardware geometry instancing. Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other. Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check. Open in Browser @ param mesh \u2014 The mesh to render. @ param instancecount \u2014 The number of instances to render. @ param x \u2014 The position to draw the instances (x-axis). @ param y \u2014 The position to draw the instances (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). drawLayer function love.graphics. drawLayer ( texture : love.Texture, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws a layer of an Array Texture. Open in Browser @ param texture \u2014 The Array Texture to draw. @ param layerindex \u2014 The index of the layer to use when drawing. @ param x \u2014 The position to draw the texture (x-axis). @ param y \u2014 The position to draw the texture (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). ellipse function love.graphics. ellipse ( mode : \" fill \"|\" line \", x: number, y: number, radiusx: number, radiusy: number) Draws an ellipse. Open in Browser @ param mode \u2014 How to draw the ellipse. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radiusx \u2014 The radius of the ellipse along the x-axis (half the ellipse's width). @ param radiusy \u2014 The radius of the ellipse along the y-axis (half the ellipse's height). -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape. flushBatch function love.graphics. flushBatch () Immediately renders any pending automatically batched draws. L\u00d6VE will call this function internally as needed when most state is changed, so it is not necessary to manually call it. The current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch. SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn. Open in Browser getBackgroundColor function love.graphics. getBackgroundColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the current background color. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1). getBlendMode function love.graphics. getBlendMode () -> mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7) 2. alphamode: \" alphamultiply \"|\" premultiplied \" Gets the blending mode. Open in Browser @ return mode \u2014 The current blend mode. @ return alphamode \u2014 The current blend alpha mode \u2013 it determines how the alpha of drawn objects affects blending. -- -- Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendMode) -- mode : | \" alpha \" -- Alpha blending (normal). The alpha of what's drawn determines its opacity. | \" replace \" -- The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens. | \" screen \" -- 'Screen' blending. | \" add \" -- The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified. | \" subtract \" -- The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified. | \" multiply \" -- The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \" alphamultiply \" BlendAlphaMode is used. | \" lighten \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" darken \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" additive \" -- Additive blend mode. | \" subtractive \" -- Subtractive blend mode. | \" multiplicative \" -- Multiply blend mode. | \" premultiplied \" -- Premultiplied alpha blend mode. -- -- Different ways alpha affects color blending. See BlendMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendAlphaMode) -- alphamode: | \" alphamultiply \" -- The RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode. | \" premultiplied \" -- The RGB values of what's drawn are '''not''' multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously (\" premultiplied alpha \"). getCanvas function love.graphics. getCanvas () -> canvas : love.Canvas Gets the current target Canvas. Open in Browser @ return canvas \u2014 The Canvas set by setCanvas. Returns nil if drawing to the real screen. getCanvasFormats function love.graphics. getCanvasFormats () -> formats : table Gets the available Canvas formats, and whether each is supported. Open in Browser @ return formats \u2014 A table containing CanvasFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats. getColor function love.graphics. getColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the current color. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1). getColorMask function love.graphics. getColorMask () -> r : boolean 2. g : boolean 3. b : boolean 4. a : boolean Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used. The color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well. Open in Browser @ return r \u2014 Whether the red color component is active when rendering. @ return g \u2014 Whether the green color component is active when rendering. @ return b \u2014 Whether the blue color component is active when rendering. @ return a \u2014 Whether the alpha color component is active when rendering. getDPIScale function love.graphics. getDPIScale () -> scale : number Gets the DPI scale factor of the window. The DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case. The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Open in Browser @ return scale \u2014 The pixel scale factor associated with the window. getDefaultFilter function love.graphics. getDefaultFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Returns the default scaling filters used with Images, Canvases, and Fonts. Open in Browser @ return min \u2014 Filter mode used when scaling the image down. @ return mag \u2014 Filter mode used when scaling the image up. @ return anisotropy \u2014 Maximum amount of Anisotropic Filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. getDepthMode function love.graphics. getDepthMode () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. write: boolean Gets the current depth test mode and whether writing to the depth buffer is enabled. This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images. Open in Browser @ return comparemode \u2014 Depth comparison mode used for depth testing. @ return write \u2014 Whether to write update / write values to the depth buffer when rendering. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. getDimensions function love.graphics. getDimensions () -> width : number 2. height : number Gets the width and height in pixels of the window. Open in Browser @ return width \u2014 The width of the window. @ return height \u2014 The height of the window. getFont function love.graphics. getFont () -> font : love.Font Gets the current Font object. Open in Browser @ return font \u2014 The current Font. Automatically creates and sets the default font, if none is set yet. getFrontFaceWinding function love.graphics. getFrontFaceWinding () -> winding : \" ccw \"|\" cw \" Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing. This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices. Open in Browser @ return winding \u2014 The winding mode being used. The default winding is counterclockwise ('ccw'). -- -- How Mesh geometry vertices are ordered. -- -- -- [Open in Browser](https://love2d.org/wiki/VertexWinding) -- winding : | \" cw \" -- Clockwise. | \" ccw \" -- Counter-clockwise. getHeight function love.graphics. getHeight () -> height : number Gets the height in pixels of the window. Open in Browser @ return height \u2014 The height of the window. getImageFormats function love.graphics. getImageFormats () -> formats : table Gets the raw and compressed pixel formats usable for Images, and whether each is supported. Open in Browser @ return formats \u2014 A table containing PixelFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats. getLineJoin function love.graphics. getLineJoin () -> join : \" bevel \"|\" miter \"|\" none \" Gets the line join style. Open in Browser @ return join \u2014 The LineJoin style. -- -- Line join style. -- -- -- [Open in Browser](https://love2d.org/wiki/LineJoin) -- join : | \" miter \" -- The ends of the line segments beveled in an angle so that they join seamlessly. | \" none \" -- No cap applied to the ends of the line segments. | \" bevel \" -- Flattens the point where line segments join together. getLineStyle function love.graphics. getLineStyle () -> style : \" rough \"|\" smooth \" Gets the line style. Open in Browser @ return style \u2014 The current line style. -- -- The styles in which lines are drawn. -- -- -- [Open in Browser](https://love2d.org/wiki/LineStyle) -- style : | \" rough \" -- Draw rough lines. | \" smooth \" -- Draw smooth lines. getLineWidth function love.graphics. getLineWidth () -> width : number Gets the current line width. Open in Browser @ return width \u2014 The current line width. getMeshCullMode function love.graphics. getMeshCullMode () -> mode : \" back \"|\" front \"|\" none \" Gets whether back-facing triangles in a Mesh are culled. Mesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer. Open in Browser @ return mode \u2014 The Mesh face culling mode in use (whether to render everything, cull back-facing triangles, or cull front-facing triangles). -- -- How Mesh geometry is culled when rendering. -- -- -- [Open in Browser](https://love2d.org/wiki/CullMode) -- mode : | \" back \" -- Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing. | \" front \" -- Front-facing triangles in Meshes are culled. | \" none \" -- Both back- and front-facing triangles in Meshes are rendered. getPixelDimensions function love.graphics. getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the window. love.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelwidth \u2014 The width of the window in pixels. @ return pixelheight \u2014 The height of the window in pixels. getPixelHeight function love.graphics. getPixelHeight () -> pixelheight : number Gets the height in pixels of the window. The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelheight \u2014 The height of the window in pixels. getPixelWidth function love.graphics. getPixelWidth () -> pixelwidth : number Gets the width in pixels of the window. The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelwidth \u2014 The width of the window in pixels. getPointSize function love.graphics. getPointSize () -> size : number Gets the point size. Open in Browser @ return size \u2014 The current point size. getRendererInfo function love.graphics. getRendererInfo () -> name : string 2. version : string 3. vendor : string 4. device : string Gets information about the system's video card and drivers. Open in Browser @ return name \u2014 The name of the renderer, e.g. 'OpenGL' or 'OpenGL ES'. @ return version \u2014 The version of the renderer with some extra driver-dependent version info, e.g. '2.1 INTEL-8.10.44'. @ return vendor \u2014 The name of the graphics card vendor, e.g. 'Intel Inc'. @ return device \u2014 The name of the graphics card, e.g. 'Intel HD Graphics 3000 OpenGL Engine'. getScissor function love.graphics. getScissor () -> x : number 2. y : number 3. width : number 4. height : number Gets the current scissor box. Open in Browser @ return x \u2014 The x-component of the top-left point of the box. @ return y \u2014 The y-component of the top-left point of the box. @ return width \u2014 The width of the box. @ return height \u2014 The height of the box. getShader function love.graphics. getShader () -> shader : love.Shader Gets the current Shader. Returns nil if none is set. Open in Browser @ return shader \u2014 The currently active Shader, or nil if none is set. getStackDepth function love.graphics. getStackDepth () -> depth : number Gets the current depth of the transform / state stack (the number of pushes without corresponding pops). Open in Browser @ return depth \u2014 The current depth of the transform and state love.graphics stack. getStats function love.graphics. getStats () -> stats : { drawcalls: number, canvasswitches : number, texturememory : number, images : number, canvases : number, fonts : number, shaderswitches : number, drawcallsbatched : number } Gets performance-related rendering statistics. Open in Browser @ return stats \u2014 A table with the following fields: getStencilTest function love.graphics. getStencilTest () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. comparevalue: number Gets the current stencil test configuration. When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil. Each Canvas has its own per-pixel stencil values. Open in Browser @ return comparemode \u2014 The type of comparison that is made for each pixel. Will be 'always' if stencil testing is disabled. @ return comparevalue \u2014 The value used when comparing with the stencil value of each pixel. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. getSupported function love.graphics. getSupported () -> features : table Gets the optional graphics features and whether they're supported on the system. Some older or low-end systems don't always support all graphics features. Open in Browser @ return features \u2014 A table containing GraphicsFeature keys, and boolean values indicating whether each feature is supported. getSystemLimits function love.graphics. getSystemLimits () -> limits : table Gets the system-dependent maximum values for love.graphics features. Open in Browser @ return limits \u2014 A table containing GraphicsLimit keys, and number values. getTextureTypes function love.graphics. getTextureTypes () -> texturetypes : table Gets the available texture types, and whether each is supported. Open in Browser @ return texturetypes \u2014 A table containing TextureTypes as keys, and a boolean indicating whether the type is supported as values. Not all systems support all types. getWidth function love.graphics. getWidth () -> width : number Gets the width in pixels of the window. Open in Browser @ return width \u2014 The width of the window. intersectScissor function love.graphics. intersectScissor ( x : number, y : number, width : number, height : number) Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor. If no scissor is active yet, it behaves like love.graphics.setScissor. The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...). Open in Browser @ param x \u2014 The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. @ param y \u2014 The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. @ param width \u2014 The width of the rectangle to intersect with the existing scissor rectangle. @ param height \u2014 The height of the rectangle to intersect with the existing scissor rectangle. inverseTransformPoint function love.graphics. inverseTransformPoint ( screenX : number, screenY : number) -> globalX : number 2. globalY : number Converts the given 2D position from screen-space into global coordinates. This effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects. Open in Browser @ param screenX \u2014 The x component of the screen-space position. @ param screenY \u2014 The y component of the screen-space position. @ return globalX \u2014 The x component of the position in global coordinates. @ return globalY \u2014 The y component of the position in global coordinates. isActive function love.graphics. isActive () -> active : boolean Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash. The graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case. Open in Browser @ return active \u2014 Whether the graphics module is active and able to be used. isGammaCorrect function love.graphics. isGammaCorrect () -> gammacorrect : boolean Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf. Not all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3. Open in Browser @ return gammacorrect \u2014 True if gamma-correct rendering is supported and was enabled in love.conf, false otherwise. isWireframe function love.graphics. isWireframe () -> wireframe : boolean Gets whether wireframe mode is used when drawing. Open in Browser @ return wireframe \u2014 True if wireframe lines are used when drawing, false if it's not. line function love.graphics. line ( x1 : number, y1 : number, x2 : number, y2 : number, ... number ) Draws lines between points. Open in Browser @ param x1 \u2014 The position of first point on the x-axis. @ param y1 \u2014 The position of first point on the y-axis. @ param x2 \u2014 The position of second point on the x-axis. @ param y2 \u2014 The position of second point on the y-axis. newArrayImage function love.graphics. newArrayImage ( slices : table, settings ? : { mipmaps : boolean, linear : boolean, dpiscale : number }) -> image : love.Image Creates a new array Image. An array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do \u2013 although every sub-image must have the same dimensions. A specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader. To use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component. Open in Browser @ param slices \u2014 A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table. @ param settings \u2014 Optional table of settings to configure the array image, containing the following fields: @ return image \u2014 An Array Image object. newCanvas function love.graphics. newCanvas () -> canvas : love.Canvas Creates a new Canvas object for offscreen rendering. Open in Browser @ return canvas \u2014 A new Canvas with dimensions equal to the window's size in pixels. newCubeImage function love.graphics. newCubeImage ( filename : string, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image Creates a new cubemap Image. Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send). To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates. Each face in a cubemap image must have square dimensions. For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image: +y +z +x -z -y -x or: +y -x +z +x -z -y or: +x -x +y -y +z -z or: +x -x +y -y +z -z Open in Browser @ param filename \u2014 The filepath to a cubemap image file (or a File, FileData, or ImageData). @ param settings \u2014 Optional table of settings to configure the cubemap image, containing the following fields: @ return image \u2014 An cubemap Image object. newFont function love.graphics. newFont ( filename : string) -> font : love.Font Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object. All variants which accept a filename can also accept a Data object instead. Open in Browser @ param filename \u2014 The filepath to the BMFont or TrueType font file. @ return font \u2014 A Font object which can be used to draw text on screen. newImage function love.graphics. newImage ( filename : string, settings ? : { dpiscale : number, linear : boolean, mipmaps : boolean }) -> image : love.Image Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image. Open in Browser @ param filename \u2014 The filepath to the image file. @ param settings \u2014 A table containing the following fields: @ return image \u2014 A new Image object which can be drawn on screen. newImageFont function love.graphics. newImageFont ( filename : string, glyphs : string) -> font : love.Font Creates a new specifically formatted image. In versions prior to 0.9.0, L\u00d6VE expects ISO 8859-1 encoding for the glyphs string. Open in Browser @ param filename \u2014 The filepath to the image file. @ param glyphs \u2014 A string of the characters in the image in order from left to right. @ return font \u2014 A Font object which can be used to draw text on screen. newMesh function love.graphics. newMesh ( vertices : { [\"1\"] : number, [ \"2\" ]: number , [ \"3\" ]: number , [ \"4\" ]: number , [ \"5\" ]: number , [ \"6\" ]: number , [ \"7\" ]: number , [ \"8\" ]: number }, mode ? : \"fan\" | \"points\" | \"strip\" | \"triangles\" , usage ? : \"dynamic\" | \"static\" | \"stream\" ) -> mesh : love.Mesh Creates a new Mesh. Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param vertices \u2014 The table filled with vertex information tables for each vertex as follows: @ param mode \u2014 How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons. @ param usage \u2014 The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance. @ return mesh \u2014 The new mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.) -- -- Usage hints for SpriteBatches and Meshes to optimize data storage and access. -- -- -- [Open in Browser](https://love2d.org/wiki/SpriteBatchUsage) -- usage: | \" dynamic \" -- The object's data will change occasionally during its lifetime. | \" static \" -- The object will not be modified after initial sprites or vertices are added. | \" stream \" -- The object data will always change between draws. newParticleSystem function love.graphics. newParticleSystem ( image : love.Image, buffer ? : number ) -> system : love.ParticleSystem Creates a new ParticleSystem. Open in Browser @ param image \u2014 The image to use. @ param buffer \u2014 The max number of particles at the same time. @ return system \u2014 A new ParticleSystem. newQuad function love.graphics. newQuad ( x : number, y : number, width : number, height : number, sw : number, sh : number) -> quad : love.Quad Creates a new Quad. The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation. Open in Browser @ param x \u2014 The top-left position in the Image along the x-axis. @ param y \u2014 The top-left position in the Image along the y-axis. @ param width \u2014 The width of the Quad in the Image. (Must be greater than 0.) @ param height \u2014 The height of the Quad in the Image. (Must be greater than 0.) @ param sw \u2014 The reference width, the width of the Image. (Must be greater than 0.) @ param sh \u2014 The reference height, the height of the Image. (Must be greater than 0.) @ return quad \u2014 The new Quad. newShader function love.graphics. newShader ( code : string) -> shader : love.Shader Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both. Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader. Open in Browser @ param code \u2014 The pixel shader or vertex shader code, or a filename pointing to a file with the code. @ return shader \u2014 A Shader object for use in drawing operations. newSpriteBatch function love.graphics. newSpriteBatch ( image : love.Image, maxsprites ? : number ) -> spriteBatch : love.SpriteBatch Creates a new SpriteBatch object. Open in Browser @ param image \u2014 The Image to use for the sprites. @ param maxsprites \u2014 The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch. @ return spriteBatch \u2014 The new SpriteBatch. newText function love.graphics. newText ( font : love.Font, textstring ? : string ) -> text : love.Text Creates a new drawable Text object. Open in Browser @ param font \u2014 The font to use for the text. @ param textstring \u2014 The initial string of text that the new Text object will contain. May be nil. @ return text \u2014 The new drawable Text object. newVideo function love.graphics. newVideo ( filename : string) -> video : love.Video Creates a new drawable Video. Currently only Ogg Theora video files are supported. Open in Browser @ param filename \u2014 The file path to the Ogg Theora video file. @ return video \u2014 A new Video. newVolumeImage function love.graphics. newVolumeImage ( layers : table, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image Creates a new volume (3D) Image. Volume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send). To use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1). Volume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table. Array images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them. Open in Browser @ param layers \u2014 A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap. @ param settings \u2014 Optional table of settings to configure the volume image, containing the following fields: @ return image \u2014 A volume Image object. origin function love.graphics. origin () Resets the current coordinate transformation. This function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults. Open in Browser points function love.graphics. points ( x : number, y : number, ... number ) Draws one or more points. Open in Browser @ param x \u2014 The position of the first point on the x-axis. @ param y \u2014 The position of the first point on the y-axis. polygon function love.graphics. polygon ( mode : \" fill \"|\" line \", ...number) Draw a polygon. Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices. Open in Browser @ param mode \u2014 How to draw the polygon. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape. pop function love.graphics. pop () Pops the current coordinate transformation from the transformation stack. This function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push. Open in Browser present function love.graphics. present () Displays the results of drawing operations on the screen. This function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function. Open in Browser print function love.graphics. print ( text : string| number , x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws text on screen. If no Font is set, one will be created and set (once) if needed. As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first. If you don't script with this in mind, the text won't be in the right position, or possibly even on screen. love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param text \u2014 The text to draw. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). printf function love.graphics. printf ( text : string| number , x : number, y : number, limit : number, align ? : \"center\" | \"justify\" | \"left\" | \"right\" , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws formatted text, with word wrap and alignment. See additional notes in love.graphics.print. The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change. In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param text \u2014 A text string. @ param x \u2014 The position on the x-axis. @ param y \u2014 The position on the y-axis. @ param limit \u2014 Wrap the line after this many horizontal pixels. @ param align \u2014 The alignment. @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right. push function love.graphics. push () Copies and pushes the current coordinate transformation to the transformation stack. This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push. Open in Browser rectangle function love.graphics. rectangle ( mode : \" fill \"|\" line \", x: number, y: number, width: number, height: number) Draws a rectangle. Open in Browser @ param mode \u2014 How to draw the rectangle. @ param x \u2014 The position of top-left corner along the x-axis. @ param y \u2014 The position of top-left corner along the y-axis. @ param width \u2014 Width of the rectangle. @ param height \u2014 Height of the rectangle. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape. replaceTransform function love.graphics. replaceTransform ( transform : love.Transform) Replaces the current coordinate transformation with the given Transform object. Open in Browser @ param transform \u2014 The Transform object to replace the current graphics coordinate transform with. reset function love.graphics. reset () Resets the current graphics settings. Calling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0. Open in Browser rotate function love.graphics. rotate ( angle : number) Rotates the coordinate system in two dimensions. Calling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits. Open in Browser @ param angle \u2014 The amount to rotate the coordinate system in radians. scale function love.graphics. scale ( sx : number, sy ? : number ) Scales the coordinate system in two dimensions. By default the coordinate system in L\u00d6VE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation. After scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation. Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome. Scaling lasts until love.draw() exits. Open in Browser @ param sx \u2014 The scaling in the direction of the x-axis. @ param sy \u2014 The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx. setBackgroundColor function love.graphics. setBackgroundColor ( red : number, green : number, blue : number, alpha ? : number ) Sets the background color. Open in Browser @ param red \u2014 The red component (0-1). @ param green \u2014 The green component (0-1). @ param blue \u2014 The blue component (0-1). @ param alpha \u2014 The alpha component (0-1). setBlendMode function love.graphics. setBlendMode ( mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7)) Sets the blending mode. Open in Browser @ param mode \u2014 The blend mode to use. -- -- Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendMode) -- mode : | \" alpha \" -- Alpha blending (normal). The alpha of what's drawn determines its opacity. | \" replace \" -- The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens. | \" screen \" -- 'Screen' blending. | \" add \" -- The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified. | \" subtract \" -- The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified. | \" multiply \" -- The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \" alphamultiply \" BlendAlphaMode is used. | \" lighten \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" darken \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" additive \" -- Additive blend mode. | \" subtractive \" -- Subtractive blend mode. | \" multiplicative \" -- Multiply blend mode. | \" premultiplied \" -- Premultiplied alpha blend mode. setCanvas function love.graphics. setCanvas ( canvas : love.Canvas, mipmap ? : number ) Captures drawing operations to a Canvas. Open in Browser @ param canvas \u2014 The new target. @ param mipmap \u2014 The mipmap level to render to, for Canvases with mipmaps. setColor function love.graphics. setColor ( red : number, green : number, blue : number, alpha ? : number ) Sets the color used for drawing. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param red \u2014 The amount of red. @ param green \u2014 The amount of green. @ param blue \u2014 The amount of blue. @ param alpha \u2014 The amount of alpha. The alpha value will be applied to all subsequent draw operations, even the drawing of an image. setColorMask function love.graphics. setColorMask ( red : boolean, green : boolean, blue : boolean, alpha : boolean) Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels. Open in Browser @ param red \u2014 Render red component. @ param green \u2014 Render green component. @ param blue \u2014 Render blue component. @ param alpha \u2014 Render alpha component. setDefaultFilter function love.graphics. setDefaultFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the default scaling filters used with Images, Canvases, and Fonts. Open in Browser @ param min \u2014 Filter mode used when scaling the image down. @ param mag \u2014 Filter mode used when scaling the image up. @ param anisotropy \u2014 Maximum amount of Anisotropic Filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. setDepthMode function love.graphics. setDepthMode ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), write: boolean) Configures depth testing and writing to the depth buffer. This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images. Open in Browser @ param comparemode \u2014 Depth comparison mode used for depth testing. @ param write \u2014 Whether to write update / write values to the depth buffer when rendering. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. setFont function love.graphics. setFont ( font : love.Font) Set an already-loaded Font as the current font or create and load a new one from the file and size. It's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage. Open in Browser @ param font \u2014 The Font object to use. setFrontFaceWinding function love.graphics. setFrontFaceWinding ( winding : \" ccw \"|\" cw \") Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing. This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices. Open in Browser @ param winding \u2014 The winding mode to use. The default winding is counterclockwise ('ccw'). -- -- How Mesh geometry vertices are ordered. -- -- -- [Open in Browser](https://love2d.org/wiki/VertexWinding) -- winding : | \" cw \" -- Clockwise. | \" ccw \" -- Counter-clockwise. setLineJoin function love.graphics. setLineJoin ( join : \" bevel \"|\" miter \"|\" none \") Sets the line join style. See LineJoin for the possible options. Open in Browser @ param join \u2014 The LineJoin to use. -- -- Line join style. -- -- -- [Open in Browser](https://love2d.org/wiki/LineJoin) -- join : | \" miter \" -- The ends of the line segments beveled in an angle so that they join seamlessly. | \" none \" -- No cap applied to the ends of the line segments. | \" bevel \" -- Flattens the point where line segments join together. setLineStyle function love.graphics. setLineStyle ( style : \" rough \"|\" smooth \") Sets the line style. Open in Browser @ param style \u2014 The LineStyle to use. Line styles include smooth and rough. -- -- The styles in which lines are drawn. -- -- -- [Open in Browser](https://love2d.org/wiki/LineStyle) -- style : | \" rough \" -- Draw rough lines. | \" smooth \" -- Draw smooth lines. setLineWidth function love.graphics. setLineWidth ( width : number) Sets the line width. Open in Browser @ param width \u2014 The width of the line. setMeshCullMode function love.graphics. setMeshCullMode ( mode : \" back \"|\" front \"|\" none \") Sets whether back-facing triangles in a Mesh are culled. This is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer. By default, both front- and back-facing triangles in Meshes are rendered. Open in Browser @ param mode \u2014 The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles). -- -- How Mesh geometry is culled when rendering. -- -- -- [Open in Browser](https://love2d.org/wiki/CullMode) -- mode : | \" back \" -- Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing. | \" front \" -- Front-facing triangles in Meshes are culled. | \" none \" -- Both back- and front-facing triangles in Meshes are rendered. setNewFont function love.graphics. setNewFont ( size ? : number ) -> font : love.Font Creates and sets a new Font. Open in Browser @ param size \u2014 The size of the font. @ return font \u2014 The new font. setPointSize function love.graphics. setPointSize ( size : number) Sets the point size. Open in Browser @ param size \u2014 The new point size. setScissor function love.graphics. setScissor ( x : number, y : number, width : number, height : number) Sets or disables scissor. The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...). Open in Browser @ param x \u2014 x coordinate of upper left corner. @ param y \u2014 y coordinate of upper left corner. @ param width \u2014 width of clipping rectangle. @ param height \u2014 height of clipping rectangle. setShader function love.graphics. setShader ( shader : love.Shader) Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified. Open in Browser @ param shader \u2014 The new shader. setStencilTest function love.graphics. setStencilTest ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), comparevalue: number) Configures or disables stencil testing. When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil. Open in Browser @ param comparemode \u2014 The type of comparison to make for each pixel. @ param comparevalue \u2014 The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test. setWireframe function love.graphics. setWireframe ( enable : boolean) Sets whether wireframe lines will be used when drawing. Open in Browser @ param enable \u2014 True to enable wireframe mode when drawing, false to disable it. shear function love.graphics. shear ( kx : number, ky : number) Shears the coordinate system. Open in Browser @ param kx \u2014 The shear factor on the x-axis. @ param ky \u2014 The shear factor on the y-axis. stencil function love.graphics. stencil ( stencilfunction : function, action ? : \"decrement\" | \"decrementwrap\" | \"increment\" | \"incrementwrap\" | \"invert\" ...(+ 1 ), value ? : number , keepvalues ? : boolean ) Draws geometry as a stencil. The geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel. Stencil values are integers within the range of 255. Open in Browser @ param stencilfunction \u2014 Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry. @ param action \u2014 How to modify any stencil values of pixels that are touched by what's drawn in the stencil function. @ param value \u2014 The new stencil value to use for pixels if the 'replace' stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255. @ param keepvalues \u2014 True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values. -- -- How a stencil function modifies the stencil values of pixels it touches. -- -- -- [Open in Browser](https://love2d.org/wiki/StencilAction) -- action : | \" replace \" -- The stencil value of a pixel will be replaced by the value specified in love.graphics.stencil, if any object touches the pixel. | \" increment \" -- The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255. | \" decrement \" -- The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0. | \" incrementwrap \" -- The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0. | \" decrementwrap \" -- The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255. | \" invert \" -- The stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255. transformPoint function love.graphics. transformPoint ( globalX : number, globalY : number) -> screenX : number 2. screenY : number Converts the given 2D position from global coordinates into screen-space. This effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects. Open in Browser @ param globalX \u2014 The x component of the position in global coordinates. @ param globalY \u2014 The y component of the position in global coordinates. @ return screenX \u2014 The x component of the position with graphics transformations applied. @ return screenY \u2014 The y component of the position with graphics transformations applied. translate function love.graphics. translate ( dx : number, dy : number) Translates the coordinate system in two dimensions. When this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy. Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome. This change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push. Translating using whole numbers will prevent tearing/blurring of images and fonts draw after translating. Open in Browser @ param dx \u2014 The translation relative to the x-axis. @ param dy \u2014 The translation relative to the y-axis. validateShader function love.graphics. validateShader ( gles : boolean, code : string) -> status : boolean 2. message : string Validates shader code. Check if specified shader code does not contain any errors. Open in Browser @ param gles \u2014 Validate code as GLSL ES shader. @ param code \u2014 The pixel shader or vertex shader code, or a filename pointing to a file with the code. @ return status \u2014 true if specified shader code doesn't contain any errors. false otherwise. @ return message \u2014 Reason why shader code validation failed (or nil if validation succeded). love.graphics love .graphics love.graphics.applyTransform function love.graphics. applyTransform ( transform : love.Transform) love.graphics.arc function love.graphics. arc ( drawmode : \" fill \"|\" line \", x: number, y: number, radius: number, angle1: number, angle2: number, segments?: number) love.graphics.captureScreenshot function love.graphics. captureScreenshot ( filename : string) love.graphics.circle function love.graphics. circle ( mode : \" fill \"|\" line \", x: number, y: number, radius: number) love.graphics.clear function love.graphics. clear () love.graphics.discard function love.graphics. discard ( discardcolor ? : boolean , discardstencil ? : boolean ) love.graphics.draw function love.graphics. draw ( drawable : love.Drawable, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) love.graphics.drawInstanced function love.graphics. drawInstanced ( mesh : love.Mesh, instancecount : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) love.graphics.drawLayer function love.graphics. drawLayer ( texture : love.Texture, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) love.graphics.ellipse function love.graphics. ellipse ( mode : \" fill \"|\" line \", x: number, y: number, radiusx: number, radiusy: number) love.graphics.flushBatch function love.graphics. flushBatch () love.graphics.getBackgroundColor function love.graphics. getBackgroundColor () -> r : number 2. g : number 3. b : number 4. a : number love.graphics.getBlendMode function love.graphics. getBlendMode () -> mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7) 2. alphamode: \" alphamultiply \"|\" premultiplied \" love.graphics.getCanvas function love.graphics. getCanvas () -> canvas : love.Canvas love.graphics.getCanvasFormats function love.graphics. getCanvasFormats () -> formats : table love.graphics.getColor function love.graphics. getColor () -> r : number 2. g : number 3. b : number 4. a : number love.graphics.getColorMask function love.graphics. getColorMask () -> r : boolean 2. g : boolean 3. b : boolean 4. a : boolean love.graphics.getDPIScale function love.graphics. getDPIScale () -> scale : number love.graphics.getDefaultFilter function love.graphics. getDefaultFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number love.graphics.getDepthMode function love.graphics. getDepthMode () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. write: boolean love.graphics.getDimensions function love.graphics. getDimensions () -> width : number 2. height : number love.graphics.getFont function love.graphics. getFont () -> font : love.Font love.graphics.getFrontFaceWinding function love.graphics. getFrontFaceWinding () -> winding : \" ccw \"|\" cw \" love.graphics.getHeight function love.graphics. getHeight () -> height : number love.graphics.getImageFormats function love.graphics. getImageFormats () -> formats : table love.graphics.getLineJoin function love.graphics. getLineJoin () -> join : \" bevel \"|\" miter \"|\" none \" love.graphics.getLineStyle function love.graphics. getLineStyle () -> style : \" rough \"|\" smooth \" love.graphics.getLineWidth function love.graphics. getLineWidth () -> width : number love.graphics.getMeshCullMode function love.graphics. getMeshCullMode () -> mode : \" back \"|\" front \"|\" none \" love.graphics.getPixelDimensions function love.graphics. getPixelDimensions () -> pixelwidth : number 2. pixelheight : number love.graphics.getPixelHeight function love.graphics. getPixelHeight () -> pixelheight : number love.graphics.getPixelWidth function love.graphics. getPixelWidth () -> pixelwidth : number love.graphics.getPointSize function love.graphics. getPointSize () -> size : number love.graphics.getRendererInfo function love.graphics. getRendererInfo () -> name : string 2. version : string 3. vendor : string 4. device : string love.graphics.getScissor function love.graphics. getScissor () -> x : number 2. y : number 3. width : number 4. height : number love.graphics.getShader function love.graphics. getShader () -> shader : love.Shader love.graphics.getStackDepth function love.graphics. getStackDepth () -> depth : number love.graphics.getStats function love.graphics. getStats () -> stats : { drawcalls: number, canvasswitches : number, texturememory : number, images : number, canvases : number, fonts : number, shaderswitches : number, drawcallsbatched : number } love.graphics.getStencilTest function love.graphics. getStencilTest () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. comparevalue: number love.graphics.getSupported function love.graphics. getSupported () -> features : table love.graphics.getSystemLimits function love.graphics. getSystemLimits () -> limits : table love.graphics.getTextureTypes function love.graphics. getTextureTypes () -> texturetypes : table love.graphics.getWidth function love.graphics. getWidth () -> width : number love.graphics.intersectScissor function love.graphics. intersectScissor ( x : number, y : number, width : number, height : number) love.graphics.inverseTransformPoint function love.graphics. inverseTransformPoint ( screenX : number, screenY : number) -> globalX : number 2. globalY : number love.graphics.isActive function love.graphics. isActive () -> active : boolean love.graphics.isGammaCorrect function love.graphics. isGammaCorrect () -> gammacorrect : boolean love.graphics.isWireframe function love.graphics. isWireframe () -> wireframe : boolean love.graphics.line function love.graphics. line ( x1 : number, y1 : number, x2 : number, y2 : number, ... number ) love.graphics.newArrayImage function love.graphics. newArrayImage ( slices : table, settings ? : { mipmaps : boolean, linear : boolean, dpiscale : number }) -> image : love.Image love.graphics.newCanvas function love.graphics. newCanvas () -> canvas : love.Canvas love.graphics.newCubeImage function love.graphics. newCubeImage ( filename : string, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image love.graphics.newFont function love.graphics. newFont ( filename : string) -> font : love.Font love.graphics.newImage function love.graphics. newImage ( filename : string, settings ? : { dpiscale : number, linear : boolean, mipmaps : boolean }) -> image : love.Image love.graphics.newImageFont function love.graphics. newImageFont ( filename : string, glyphs : string) -> font : love.Font love.graphics.newMesh function love.graphics. newMesh ( vertices : { [\"1\"] : number, [ \"2\" ]: number , [ \"3\" ]: number , [ \"4\" ]: number , [ \"5\" ]: number , [ \"6\" ]: number , [ \"7\" ]: number , [ \"8\" ]: number }, mode ? : \"fan\" | \"points\" | \"strip\" | \"triangles\" , usage ? : \"dynamic\" | \"static\" | \"stream\" ) -> mesh : love.Mesh love.graphics.newParticleSystem function love.graphics. newParticleSystem ( image : love.Image, buffer ? : number ) -> system : love.ParticleSystem love.graphics.newQuad function love.graphics. newQuad ( x : number, y : number, width : number, height : number, sw : number, sh : number) -> quad : love.Quad love.graphics.newShader function love.graphics. newShader ( code : string) -> shader : love.Shader love.graphics.newSpriteBatch function love.graphics. newSpriteBatch ( image : love.Image, maxsprites ? : number ) -> spriteBatch : love.SpriteBatch love.graphics.newText function love.graphics. newText ( font : love.Font, textstring ? : string ) -> text : love.Text love.graphics.newVideo function love.graphics. newVideo ( filename : string) -> video : love.Video love.graphics.newVolumeImage function love.graphics. newVolumeImage ( layers : table, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image love.graphics.origin function love.graphics. origin () love.graphics.points function love.graphics. points ( x : number, y : number, ... number ) love.graphics.polygon function love.graphics. polygon ( mode : \" fill \"|\" line \", ...number) love.graphics.pop function love.graphics. pop () love.graphics.present function love.graphics. present () love.graphics.print function love.graphics. print ( text : string| number , x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) love.graphics.printf function love.graphics. printf ( text : string| number , x : number, y : number, limit : number, align ? : \"center\" | \"justify\" | \"left\" | \"right\" , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) love.graphics.push function love.graphics. push () love.graphics.rectangle function love.graphics. rectangle ( mode : \" fill \"|\" line \", x: number, y: number, width: number, height: number) love.graphics.replaceTransform function love.graphics. replaceTransform ( transform : love.Transform) love.graphics.reset function love.graphics. reset () love.graphics.rotate function love.graphics. rotate ( angle : number) love.graphics.scale function love.graphics. scale ( sx : number, sy ? : number ) love.graphics.setBackgroundColor function love.graphics. setBackgroundColor ( red : number, green : number, blue : number, alpha ? : number ) love.graphics.setBlendMode function love.graphics. setBlendMode ( mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7)) love.graphics.setCanvas function love.graphics. setCanvas ( canvas : love.Canvas, mipmap ? : number ) love.graphics.setColor function love.graphics. setColor ( red : number, green : number, blue : number, alpha ? : number ) love.graphics.setColorMask function love.graphics. setColorMask ( red : boolean, green : boolean, blue : boolean, alpha : boolean) love.graphics.setDefaultFilter function love.graphics. setDefaultFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) love.graphics.setDepthMode function love.graphics. setDepthMode ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), write: boolean) love.graphics.setFont function love.graphics. setFont ( font : love.Font) love.graphics.setFrontFaceWinding function love.graphics. setFrontFaceWinding ( winding : \" ccw \"|\" cw \") love.graphics.setLineJoin function love.graphics. setLineJoin ( join : \" bevel \"|\" miter \"|\" none \") love.graphics.setLineStyle function love.graphics. setLineStyle ( style : \" rough \"|\" smooth \") love.graphics.setLineWidth function love.graphics. setLineWidth ( width : number) love.graphics.setMeshCullMode function love.graphics. setMeshCullMode ( mode : \" back \"|\" front \"|\" none \") love.graphics.setNewFont function love.graphics. setNewFont ( size ? : number ) -> font : love.Font love.graphics.setPointSize function love.graphics. setPointSize ( size : number) love.graphics.setScissor function love.graphics. setScissor ( x : number, y : number, width : number, height : number) love.graphics.setShader function love.graphics. setShader ( shader : love.Shader) love.graphics.setStencilTest function love.graphics. setStencilTest ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), comparevalue: number) love.graphics.setWireframe function love.graphics. setWireframe ( enable : boolean) love.graphics.shear function love.graphics. shear ( kx : number, ky : number) love.graphics.stencil function love.graphics. stencil ( stencilfunction : function, action ? : \"decrement\" | \"decrementwrap\" | \"increment\" | \"incrementwrap\" | \"invert\" ...(+ 1 ), value ? : number , keepvalues ? : boolean ) love.graphics.transformPoint function love.graphics. transformPoint ( globalX : number, globalY : number) -> screenX : number 2. screenY : number love.graphics.translate function love.graphics. translate ( dx : number, dy : number) love.graphics.validateShader function love.graphics. validateShader ( gles : boolean, code : string) -> status : boolean 2. message : string love.hasDeprecationOutput function love. hasDeprecationOutput () -> enabled : boolean love.image isCompressed function love.image. isCompressed ( filename : string) -> compressed : boolean Determines whether a file can be loaded as CompressedImageData. Open in Browser @ param filename \u2014 The filename of the potentially compressed image file. @ return compressed \u2014 Whether the file can be loaded as CompressedImageData or not. newCompressedData function love.image. newCompressedData ( filename : string) -> compressedImageData : love.CompressedImageData Create a new CompressedImageData object from a compressed image file. L\u00d6VE supports several compressed texture formats, enumerated in the CompressedImageFormat page. Open in Browser @ param filename \u2014 The filename of the compressed image file. @ return compressedImageData \u2014 The new CompressedImageData object. newImageData function love.image. newImageData ( width : number, height : number) -> imageData : love.ImageData Creates a new ImageData object. Open in Browser @ param width \u2014 The width of the ImageData. @ param height \u2014 The height of the ImageData. @ return imageData \u2014 The new blank ImageData object. Each pixel's color values, (including the alpha values!) will be set to zero. love.image love .image love.image.isCompressed function love.image. isCompressed ( filename : string) -> compressed : boolean love.image.newCompressedData function love.image. newCompressedData ( filename : string) -> compressedImageData : love.CompressedImageData love.image.newImageData function love.image. newImageData ( width : number, height : number) -> imageData : love.ImageData love.isVersionCompatible function love. isVersionCompatible ( version : string) -> compatible : boolean love.joystick getGamepadMappingString function love.joystick. getGamepadMappingString ( guid : string) -> mappingstring : string Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad. The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings. Open in Browser @ param guid \u2014 The GUID value to get the mapping string for. @ return mappingstring \u2014 A string containing the Joystick's gamepad mappings, or nil if the GUID is not recognized as a gamepad. getJoystickCount function love.joystick. getJoystickCount () -> joystickcount : number Gets the number of connected joysticks. Open in Browser @ return joystickcount \u2014 The number of connected joysticks. getJoysticks function love.joystick. getJoysticks () -> joysticks : table Gets a list of connected Joysticks. Open in Browser @ return joysticks \u2014 The list of currently connected Joysticks. loadGamepadMappings function love.joystick. loadGamepadMappings ( filename : string) Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings. It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded. Open in Browser @ param filename \u2014 The filename to load the mappings string from. saveGamepadMappings function love.joystick. saveGamepadMappings ( filename : string) -> mappings : string Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified. The mappings are stored as a string for use with love.joystick.loadGamepadMappings. Open in Browser @ param filename \u2014 The filename to save the mappings string to. @ return mappings \u2014 The mappings string that was written to the file. setGamepadMapping function love.joystick. setGamepadMapping ( guid : string, button : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10), inputtype: \" axis \"|\" button \"|\" hat \", inputindex: number, hatdir?: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4)) -> success: boolean Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X. L\u00d6VE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default. The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout. Open in Browser @ param guid \u2014 The OS-dependent GUID for the type of Joystick the binding will affect. @ param button \u2014 The virtual gamepad button to bind. @ param inputtype \u2014 The type of input to bind the virtual gamepad button to. @ param inputindex \u2014 The index of the axis, button, or hat to bind the virtual gamepad button to. @ param hatdir \u2014 The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise. @ return success \u2014 Whether the virtual gamepad button was successfully bound. -- -- Virtual gamepad buttons. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadButton) -- button : | \" a \" -- Bottom face button (A). | \" b \" -- Right face button (B). | \" x \" -- Left face button (X). | \" y \" -- Top face button (Y). | \" back \" -- Back button. | \" guide \" -- Guide button. | \" start \" -- Start button. | \" leftstick \" -- Left stick click button. | \" rightstick \" -- Right stick click button. | \" leftshoulder \" -- Left bumper. | \" rightshoulder \" -- Right bumper. | \" dpup \" -- D-pad up. | \" dpdown \" -- D-pad down. | \" dpleft \" -- D-pad left. | \" dpright \" -- D-pad right. -- -- Types of Joystick inputs. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickInputType) -- inputtype: | \" axis \" -- Analog axis. | \" button \" -- Button. | \" hat \" -- 8-direction hat value. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- hatdir: | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up love.joystick love .joystick love.joystick.getGamepadMappingString function love.joystick. getGamepadMappingString ( guid : string) -> mappingstring : string love.joystick.getJoystickCount function love.joystick. getJoystickCount () -> joystickcount : number love.joystick.getJoysticks function love.joystick. getJoysticks () -> joysticks : table love.joystick.loadGamepadMappings function love.joystick. loadGamepadMappings ( filename : string) love.joystick.saveGamepadMappings function love.joystick. saveGamepadMappings ( filename : string) -> mappings : string love.joystick.setGamepadMapping function love.joystick. setGamepadMapping ( guid : string, button : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10), inputtype: \" axis \"|\" button \"|\" hat \", inputindex: number, hatdir?: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4)) -> success: boolean love.joystickadded love.joystickaxis love.joystickhat love.joystickpressed love.joystickreleased love.joystickremoved love.keyboard love .keyboard love.keyboard getKeyFromScancode function love.keyboard. getKeyFromScancode ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 )) -> key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 ) Gets the key corresponding to the given hardware scancode. Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Scancodes are useful for creating default controls that have the same physical locations on on all systems. Open in Browser @ param scancode \u2014 The scancode to get the key from. @ return key \u2014 The key corresponding to the given scancode, or 'unknown' if the scancode doesn't map to a KeyConstant on the current system. -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode : | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key: | \"a\" -- The A key | \"b\" -- The B key | \"c\" -- The C key | \"d\" -- The D key | \"e\" -- The E key | \"f\" -- The F key | \"g\" -- The G key | \"h\" -- The H key | \"i\" -- The I key | \"j\" -- The J key | \"k\" -- The K key | \"l\" -- The L key | \"m\" -- The M key | \"n\" -- The N key | \"o\" -- The O key | \"p\" -- The P key | \"q\" -- The Q key | \"r\" -- The R key | \"s\" -- The S key | \"t\" -- The T key | \"u\" -- The U key | \"v\" -- The V key | \"w\" -- The W key | \"x\" -- The X key | \"y\" -- The Y key | \"z\" -- The Z key | \"0\" -- The zero key | \"1\" -- The one key | \"2\" -- The two key | \"3\" -- The three key | \"4\" -- The four key | \"5\" -- The five key | \"6\" -- The six key | \"7\" -- The seven key | \"8\" -- The eight key | \"9\" -- The nine key | \"space\" -- Space key | \"!\" -- Exclamation mark key | \"\\\"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \" ( \" -- Left parenthesis key | \" ) \" -- Right parenthesis key | \" * \" -- Asterisk key | \" + \" -- Plus key | \" , \" -- Comma key | \" - \" -- Hyphen-minus key | \" . \" -- Full stop key | \" / \" -- Slash key | \" : \" -- Colon key | \" ; \" -- Semicolon key | \" < \" -- Less-than key | \" = \" -- Equal key | \" > \" -- Greater-than key | \" ? \" -- Question mark key | \" @ \" -- At sign key | \" [ \" -- Left square bracket key | \" \\ \" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key getScancodeFromKey function love.keyboard. getScancodeFromKey ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ) Gets the hardware scancode corresponding to the given key. Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Scancodes are useful for creating default controls that have the same physical locations on on all systems. Open in Browser @ param key \u2014 The key to get the scancode from. @ return scancode \u2014 The scancode corresponding to the given key, or 'unknown' if the given key has no known physical representation on the current system. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key : | \" a \" -- The A key | \" b \" -- The B key | \" c \" -- The C key | \" d \" -- The D key | \" e \" -- The E key | \" f \" -- The F key | \" g \" -- The G key | \" h \" -- The H key | \" i \" -- The I key | \" j \" -- The J key | \" k \" -- The K key | \" l \" -- The L key | \" m \" -- The M key | \" n \" -- The N key | \" o \" -- The O key | \" p \" -- The P key | \" q \" -- The Q key | \" r \" -- The R key | \" s \" -- The S key | \" t \" -- The T key | \" u \" -- The U key | \" v \" -- The V key | \" w \" -- The W key | \" x \" -- The X key | \" y \" -- The Y key | \" z \" -- The Z key | \" 0 \" -- The zero key | \" 1 \" -- The one key | \" 2 \" -- The two key | \" 3 \" -- The three key | \" 4 \" -- The four key | \" 5 \" -- The five key | \" 6 \" -- The six key | \" 7 \" -- The seven key | \" 8 \" -- The eight key | \" 9 \" -- The nine key | \" space \" -- Space key | \" ! \" -- Exclamation mark key | \" \\ \"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \"(\" -- Left parenthesis key | \")\" -- Right parenthesis key | \"*\" -- Asterisk key | \"+\" -- Plus key | \",\" -- Comma key | \"-\" -- Hyphen-minus key | \".\" -- Full stop key | \"/\" -- Slash key | \":\" -- Colon key | \";\" -- Semicolon key | \"<\" -- Less-than key | \"=\" -- Equal key | \">\" -- Greater-than key | \"?\" -- Question mark key | \"@\" -- At sign key | \"[\" -- Left square bracket key | \"\\\" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \" w \" will be generated if the key in the same place as the \" w \" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode: | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key. hasKeyRepeat function love.keyboard. hasKeyRepeat () -> enabled : boolean Gets whether key repeat is enabled. Open in Browser @ return enabled \u2014 Whether key repeat is enabled. hasScreenKeyboard function love.keyboard. hasScreenKeyboard () -> supported : boolean Gets whether screen keyboard is supported. Open in Browser @ return supported \u2014 Whether screen keyboard is supported. hasTextInput function love.keyboard. hasTextInput () -> enabled : boolean Gets whether text input events are enabled. Open in Browser @ return enabled \u2014 Whether text input events are enabled. isDown function love.keyboard. isDown ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> down : boolean Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased. Open in Browser @ param key \u2014 The key to check. @ return down \u2014 True if the key is down, false if not. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key : | \" a \" -- The A key | \" b \" -- The B key | \" c \" -- The C key | \" d \" -- The D key | \" e \" -- The E key | \" f \" -- The F key | \" g \" -- The G key | \" h \" -- The H key | \" i \" -- The I key | \" j \" -- The J key | \" k \" -- The K key | \" l \" -- The L key | \" m \" -- The M key | \" n \" -- The N key | \" o \" -- The O key | \" p \" -- The P key | \" q \" -- The Q key | \" r \" -- The R key | \" s \" -- The S key | \" t \" -- The T key | \" u \" -- The U key | \" v \" -- The V key | \" w \" -- The W key | \" x \" -- The X key | \" y \" -- The Y key | \" z \" -- The Z key | \" 0 \" -- The zero key | \" 1 \" -- The one key | \" 2 \" -- The two key | \" 3 \" -- The three key | \" 4 \" -- The four key | \" 5 \" -- The five key | \" 6 \" -- The six key | \" 7 \" -- The seven key | \" 8 \" -- The eight key | \" 9 \" -- The nine key | \" space \" -- Space key | \" ! \" -- Exclamation mark key | \" \\ \"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \"(\" -- Left parenthesis key | \")\" -- Right parenthesis key | \"*\" -- Asterisk key | \"+\" -- Plus key | \",\" -- Comma key | \"-\" -- Hyphen-minus key | \".\" -- Full stop key | \"/\" -- Slash key | \":\" -- Colon key | \";\" -- Semicolon key | \"<\" -- Less-than key | \"=\" -- Equal key | \">\" -- Greater-than key | \"?\" -- Question mark key | \"@\" -- At sign key | \"[\" -- Left square bracket key | \"\\\" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key isScancodeDown function love.keyboard. isScancodeDown ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ), ... \"'\" | \",\" | \"-\" | \".\" | \"/\" ...(+ 189 )) -> down : boolean Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased. Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Open in Browser @ param scancode \u2014 A Scancode to check. @ return down \u2014 True if any supplied Scancode is down, false if not. -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode : | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key. setKeyRepeat function love.keyboard. setKeyRepeat ( enable : boolean) Enables or disables key repeat for love.keypressed. It is disabled by default. Open in Browser @ param enable \u2014 Whether repeat keypress events should be enabled when a key is held down. setTextInput function love.keyboard. setTextInput ( enable : boolean) Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android. On touch devices, this shows the system's native on-screen keyboard when it's enabled. Open in Browser @ param enable \u2014 Whether text input events should be enabled. love.keyboard.getKeyFromScancode function love.keyboard. getKeyFromScancode ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 )) -> key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 ) love.keyboard.getScancodeFromKey function love.keyboard. getScancodeFromKey ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ) love.keyboard.hasKeyRepeat function love.keyboard. hasKeyRepeat () -> enabled : boolean love.keyboard.hasScreenKeyboard function love.keyboard. hasScreenKeyboard () -> supported : boolean love.keyboard.hasTextInput function love.keyboard. hasTextInput () -> enabled : boolean love.keyboard.isDown function love.keyboard. isDown ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> down : boolean love.keyboard.isScancodeDown function love.keyboard. isScancodeDown ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ), ... \"'\" | \",\" | \"-\" | \".\" | \"/\" ...(+ 189 )) -> down : boolean love.keyboard.setKeyRepeat function love.keyboard. setKeyRepeat ( enable : boolean) love.keyboard.setTextInput function love.keyboard. setTextInput ( enable : boolean) love.keypressed love.keyreleased love.load love.lowmemory love.math love .math love.math colorFromBytes function love.math. colorFromBytes ( rb : number, gb : number, bb : number, ab ? : number ) -> r : number 2. g : number 3. b : number 4. a : number Converts a color from 0..255 to 0..1 range. Open in Browser @ param rb \u2014 Red color component in 0..255 range. @ param gb \u2014 Green color component in 0..255 range. @ param bb \u2014 Blue color component in 0..255 range. @ param ab \u2014 Alpha color component in 0..255 range. @ return r \u2014 Red color component in 0..1 range. @ return g \u2014 Green color component in 0..1 range. @ return b \u2014 Blue color component in 0..1 range. @ return a \u2014 Alpha color component in 0..1 range or nil if alpha is not specified. colorToBytes function love.math. colorToBytes ( r : number, g : number, b : number, a ? : number ) -> rb : number 2. gb : number 3. bb : number 4. ab : number Converts a color from 0..1 to 0..255 range. Open in Browser @ param r \u2014 Red color component. @ param g \u2014 Green color component. @ param b \u2014 Blue color component. @ param a \u2014 Alpha color component. @ return rb \u2014 Red color component in 0..255 range. @ return gb \u2014 Green color component in 0..255 range. @ return bb \u2014 Blue color component in 0..255 range. @ return ab \u2014 Alpha color component in 0..255 range or nil if alpha is not specified. gammaToLinear function love.math. gammaToLinear ( r : number, g : number, b : number) -> lr : number 2. lg : number 3. lb : number Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where L\u00d6VE doesn't handle conversions automatically. Read more about gamma-correct rendering here, here, and here. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param r \u2014 The red channel of the sRGB color to convert. @ param g \u2014 The green channel of the sRGB color to convert. @ param b \u2014 The blue channel of the sRGB color to convert. @ return lr \u2014 The red channel of the converted color in linear RGB space. @ return lg \u2014 The green channel of the converted color in linear RGB space. @ return lb \u2014 The blue channel of the converted color in linear RGB space. getRandomSeed function love.math. getRandomSeed () -> low : number 2. high : number Gets the seed of the random number generator. The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53, but the seed can be an integer value up to 2^64. Open in Browser @ return low \u2014 Integer number representing the lower 32 bits of the random number generator's 64 bit seed value. @ return high \u2014 Integer number representing the higher 32 bits of the random number generator's 64 bit seed value. getRandomState function love.math. getRandomState () -> state : string Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState. This is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number. Open in Browser @ return state \u2014 The current state of the random number generator, represented as a string. isConvex function love.math. isConvex ( vertices : table) -> convex : boolean Checks whether a polygon is convex. PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons. Open in Browser @ param vertices \u2014 The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. @ return convex \u2014 Whether the given polygon is convex. linearToGamma function love.math. linearToGamma ( lr : number, lg : number, lb : number) -> cr : number 2. cg : number 3. cb : number Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing. In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space. Read more about gamma-correct rendering here, here, and here. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param lr \u2014 The red channel of the linear RGB color to convert. @ param lg \u2014 The green channel of the linear RGB color to convert. @ param lb \u2014 The blue channel of the linear RGB color to convert. @ return cr \u2014 The red channel of the converted color in gamma sRGB space. @ return cg \u2014 The green channel of the converted color in gamma sRGB space. @ return cb \u2014 The blue channel of the converted color in gamma sRGB space. newBezierCurve function love.math. newBezierCurve ( vertices : table) -> curve : love.BezierCurve Creates a new BezierCurve object. The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) B\u00e9zier curve, four vertices define a cubic (degree 3) B\u00e9zier curve, etc. Open in Browser @ param vertices \u2014 The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. @ return curve \u2014 A B\u00e9zier curve object. newRandomGenerator function love.math. newRandomGenerator () -> rng : love.RandomGenerator Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions. Open in Browser @ return rng \u2014 The new Random Number Generator object. newTransform function love.math. newTransform () -> transform : love.Transform Creates a new Transform object. Open in Browser @ return transform \u2014 The new Transform object. noise function love.math. noise ( x : number) -> value : number Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments. Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation. There are many webpages which discuss Perlin and Simplex noise in detail. Open in Browser @ param x \u2014 The number used to generate the noise value. @ return value \u2014 The noise value in the range of 1. random function love.math. random () -> number : number Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself. Open in Browser @ return number \u2014 The pseudo-random number. randomNormal function love.math. randomNormal ( stddev ? : number , mean ? : number ) -> number : number Get a normally distributed pseudo random number. Open in Browser @ param stddev \u2014 Standard deviation of the distribution. @ param mean \u2014 The mean of the distribution. @ return number \u2014 Normally distributed random number with variance (stddev)\u00b2 and the specified mean. setRandomSeed function love.math. setRandomSeed ( seed : number) Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself. Open in Browser @ param seed \u2014 The integer number with which you want to seed the randomization. Must be within the range of 2^53 - 1. setRandomState function love.math. setRandomState ( state : string) Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState. This is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value. Open in Browser @ param state \u2014 The new state of the random number generator, represented as a string. This should originate from a previous call to love.math.getRandomState. triangulate function love.math. triangulate ( polygon : table) -> triangles : table Decomposes a simple convex or concave polygon into triangles. Open in Browser @ param polygon \u2014 Polygon to triangulate. Must not intersect itself. @ return triangles \u2014 List of triangles the polygon is composed of, in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}. love.math.colorFromBytes function love.math. colorFromBytes ( rb : number, gb : number, bb : number, ab ? : number ) -> r : number 2. g : number 3. b : number 4. a : number love.math.colorToBytes function love.math. colorToBytes ( r : number, g : number, b : number, a ? : number ) -> rb : number 2. gb : number 3. bb : number 4. ab : number love.math.gammaToLinear function love.math. gammaToLinear ( r : number, g : number, b : number) -> lr : number 2. lg : number 3. lb : number love.math.getRandomSeed function love.math. getRandomSeed () -> low : number 2. high : number love.math.getRandomState function love.math. getRandomState () -> state : string love.math.isConvex function love.math. isConvex ( vertices : table) -> convex : boolean love.math.linearToGamma function love.math. linearToGamma ( lr : number, lg : number, lb : number) -> cr : number 2. cg : number 3. cb : number love.math.newBezierCurve function love.math. newBezierCurve ( vertices : table) -> curve : love.BezierCurve love.math.newRandomGenerator function love.math. newRandomGenerator () -> rng : love.RandomGenerator love.math.newTransform function love.math. newTransform () -> transform : love.Transform love.math.noise function love.math. noise ( x : number) -> value : number love.math.random function love.math. random () -> number : number love.math.randomNormal function love.math. randomNormal ( stddev ? : number , mean ? : number ) -> number : number love.math.setRandomSeed function love.math. setRandomSeed ( seed : number) love.math.setRandomState function love.math. setRandomState ( state : string) love.math.triangulate function love.math. triangulate ( polygon : table) -> triangles : table love.mouse getCursor function love.mouse. getCursor () -> cursor : love.Cursor Gets the current Cursor. Open in Browser @ return cursor \u2014 The current cursor, or nil if no cursor is set. getPosition function love.mouse. getPosition () -> x : number 2. y : number Returns the current position of the mouse. Open in Browser @ return x \u2014 The position of the mouse along the x-axis. @ return y \u2014 The position of the mouse along the y-axis. getRelativeMode function love.mouse. getRelativeMode () -> enabled : boolean Gets whether relative mode is enabled for the mouse. If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen. The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated. Open in Browser @ return enabled \u2014 True if relative mode is enabled, false if it's disabled. getSystemCursor function love.mouse. getSystemCursor ( ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8)) -> cursor: love.Cursor Gets a Cursor object representing a system-native hardware cursor. Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates. Open in Browser @ param ctype \u2014 The type of system cursor to get. @ return cursor \u2014 The Cursor object representing the system cursor type. -- -- Types of hardware cursors. -- -- -- [Open in Browser](https://love2d.org/wiki/CursorType) -- ctype : | \" image \" -- The cursor is using a custom image. | \" arrow \" -- An arrow pointer. | \" ibeam \" -- An I-beam, normally used when mousing over editable or selectable text. | \" wait \" -- Wait graphic. | \" waitarrow \" -- Small wait cursor with an arrow pointer. | \" crosshair \" -- Crosshair symbol. | \" sizenwse \" -- Double arrow pointing to the top-left and bottom-right. | \" sizenesw \" -- Double arrow pointing to the top-right and bottom-left. | \" sizewe \" -- Double arrow pointing left and right. | \" sizens \" -- Double arrow pointing up and down. | \" sizeall \" -- Four-pointed arrow pointing up, down, left, and right. | \" no \" -- Slashed circle or crossbones. | \" hand \" -- Hand symbol. getX function love.mouse. getX () -> x : number Returns the current x-position of the mouse. Open in Browser @ return x \u2014 The position of the mouse along the x-axis. getY function love.mouse. getY () -> y : number Returns the current y-position of the mouse. Open in Browser @ return y \u2014 The position of the mouse along the y-axis. isCursorSupported function love.mouse. isCursorSupported () -> supported : boolean Gets whether cursor functionality is supported. If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors. Open in Browser @ return supported \u2014 Whether the system has cursor functionality. isDown function love.mouse. isDown ( button : number, ... number ) -> down : boolean Checks whether a certain mouse button is down. This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. Open in Browser @ param button \u2014 The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant. @ return down \u2014 True if any specified button is down. isGrabbed function love.mouse. isGrabbed () -> grabbed : boolean Checks if the mouse is grabbed. Open in Browser @ return grabbed \u2014 True if the cursor is grabbed, false if it is not. isVisible function love.mouse. isVisible () -> visible : boolean Checks if the cursor is visible. Open in Browser @ return visible \u2014 True if the cursor to visible, false if the cursor is hidden. newCursor function love.mouse. newCursor ( imageData : love.ImageData, hotx ? : number , hoty ? : number ) -> cursor : love.Cursor Creates a new hardware Cursor object from an image file or ImageData. Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates. The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle. Open in Browser @ param imageData \u2014 The ImageData to use for the new Cursor. @ param hotx \u2014 The x-coordinate in the ImageData of the cursor's hot spot. @ param hoty \u2014 The y-coordinate in the ImageData of the cursor's hot spot. @ return cursor \u2014 The new Cursor object. setCursor function love.mouse. setCursor ( cursor : love.Cursor) Sets the current mouse cursor. Open in Browser @ param cursor \u2014 The Cursor object to use as the current mouse cursor. setGrabbed function love.mouse. setGrabbed ( grab : boolean) Grabs the mouse and confines it to the window. Open in Browser @ param grab \u2014 True to confine the mouse, false to let it leave the window. setPosition function love.mouse. setPosition ( x : number, y : number) Sets the current position of the mouse. Non-integer values are floored. Open in Browser @ param x \u2014 The new position of the mouse along the x-axis. @ param y \u2014 The new position of the mouse along the y-axis. setRelativeMode function love.mouse. setRelativeMode ( enable : boolean) Sets whether relative mode is enabled for the mouse. When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen. The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated. Open in Browser @ param enable \u2014 True to enable relative mode, false to disable it. setVisible function love.mouse. setVisible ( visible : boolean) Sets the current visibility of the cursor. Open in Browser @ param visible \u2014 True to set the cursor to visible, false to hide the cursor. setX function love.mouse. setX ( x : number) Sets the current X position of the mouse. Non-integer values are floored. Open in Browser @ param x \u2014 The new position of the mouse along the x-axis. setY function love.mouse. setY ( y : number) Sets the current Y position of the mouse. Non-integer values are floored. Open in Browser @ param y \u2014 The new position of the mouse along the y-axis. love.mouse love .mouse love.mouse.getCursor function love.mouse. getCursor () -> cursor : love.Cursor love.mouse.getPosition function love.mouse. getPosition () -> x : number 2. y : number love.mouse.getRelativeMode function love.mouse. getRelativeMode () -> enabled : boolean love.mouse.getSystemCursor function love.mouse. getSystemCursor ( ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8)) -> cursor: love.Cursor love.mouse.getX function love.mouse. getX () -> x : number love.mouse.getY function love.mouse. getY () -> y : number love.mouse.isCursorSupported function love.mouse. isCursorSupported () -> supported : boolean love.mouse.isDown function love.mouse. isDown ( button : number, ... number ) -> down : boolean love.mouse.isGrabbed function love.mouse. isGrabbed () -> grabbed : boolean love.mouse.isVisible function love.mouse. isVisible () -> visible : boolean love.mouse.newCursor function love.mouse. newCursor ( imageData : love.ImageData, hotx ? : number , hoty ? : number ) -> cursor : love.Cursor love.mouse.setCursor function love.mouse. setCursor ( cursor : love.Cursor) love.mouse.setGrabbed function love.mouse. setGrabbed ( grab : boolean) love.mouse.setPosition function love.mouse. setPosition ( x : number, y : number) love.mouse.setRelativeMode function love.mouse. setRelativeMode ( enable : boolean) love.mouse.setVisible function love.mouse. setVisible ( visible : boolean) love.mouse.setX function love.mouse. setX ( x : number) love.mouse.setY function love.mouse. setY ( y : number) love.mousefocus love.mousemoved love.mousepressed love.mousereleased love.physics love .physics love.physics getDistance function love.physics. getDistance ( fixture1 : love.Fixture, fixture2 : love.Fixture) -> distance : number 2. x1 : number 3. y1 : number 4. x2 : number 5. y2 : number Returns the two closest points between two fixtures and their distance. Open in Browser @ param fixture1 \u2014 The first fixture. @ param fixture2 \u2014 The second fixture. @ return distance \u2014 The distance of the two points. @ return x1 \u2014 The x-coordinate of the first point. @ return y1 \u2014 The y-coordinate of the first point. @ return x2 \u2014 The x-coordinate of the second point. @ return y2 \u2014 The y-coordinate of the second point. getMeter function love.physics. getMeter () -> scale : number Returns the meter scale factor. All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations. It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. Open in Browser @ return scale \u2014 The scale factor as an integer. newBody function love.physics. newBody ( world : love.World, x ? : number , y ? : number , type ? : \"dynamic\" | \"kinematic\" | \"static\" ) -> body : love.Body Creates a new body. There are three types of bodies. Static bodies do not move, have a infinite mass, and can be used for level boundaries. Dynamic bodies are the main actors in the simulation, they collide with everything. Kinematic bodies do not react to forces and only collide with dynamic bodies. The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData. Open in Browser @ param world \u2014 The world to create the body in. @ param x \u2014 The x position of the body. @ param y \u2014 The y position of the body. @ param type \u2014 The type of the body. @ return body \u2014 A new body. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies. newChainShape function love.physics. newChainShape ( loop : boolean, x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> shape : love.ChainShape Creates a new ChainShape. Open in Browser @ param loop \u2014 If the chain should loop back to the first point. @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return shape \u2014 The new shape. newCircleShape function love.physics. newCircleShape ( radius : number) -> shape : love.CircleShape Creates a new CircleShape. Open in Browser @ param radius \u2014 The radius of the circle. @ return shape \u2014 The new shape. newDistanceJoint function love.physics. newDistanceJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, collideConnected ? : boolean ) -> joint : love.DistanceJoint Creates a DistanceJoint between two bodies. This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x1 \u2014 The x position of the first anchor point (world space). @ param y1 \u2014 The y position of the first anchor point (world space). @ param x2 \u2014 The x position of the second anchor point (world space). @ param y2 \u2014 The y position of the second anchor point (world space). @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new distance joint. newEdgeShape function love.physics. newEdgeShape ( x1 : number, y1 : number, x2 : number, y2 : number) -> shape : love.EdgeShape Creates a new EdgeShape. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return shape \u2014 The new shape. newFixture function love.physics. newFixture ( body : love.Body, shape : love.Shape, density ? : number ) -> fixture : love.Fixture Creates and attaches a Fixture to a body. Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape. Open in Browser @ param body \u2014 The body which gets the fixture attached. @ param shape \u2014 The shape to be copied to the fixture. @ param density \u2014 The density of the fixture. @ return fixture \u2014 The new fixture. newFrictionJoint function love.physics. newFrictionJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.FrictionJoint Create a friction joint between two bodies. A FrictionJoint applies friction to a body. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x \u2014 The x position of the anchor point. @ param y \u2014 The y position of the anchor point. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new FrictionJoint. newGearJoint function love.physics. newGearJoint ( joint1 : love.Joint, joint2 : love.Joint, ratio ? : number , collideConnected ? : boolean ) -> joint : love.GearJoint Create a GearJoint connecting two Joints. The gear joint connects two joints that must be either prismatic or revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints. The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created. Open in Browser @ param joint1 \u2014 The first joint to connect with a gear joint. @ param joint2 \u2014 The second joint to connect with a gear joint. @ param ratio \u2014 The gear ratio. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new gear joint. newMotorJoint function love.physics. newMotorJoint ( body1 : love.Body, body2 : love.Body, correctionFactor ? : number ) -> joint : love.MotorJoint Creates a joint between two bodies which controls the relative motion between them. Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param correctionFactor \u2014 The joint's initial position correction factor, in the range of 1. @ return joint \u2014 The new MotorJoint. newMouseJoint function love.physics. newMouseJoint ( body : love.Body, x : number, y : number) -> joint : love.MouseJoint Create a joint between a body and the mouse. This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below). The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. Open in Browser @ param body \u2014 The body to attach to the mouse. @ param x \u2014 The x position of the connecting point. @ param y \u2014 The y position of the connecting point. @ return joint \u2014 The new mouse joint. newPolygonShape function love.physics. newPolygonShape ( x1 : number, y1 : number, x2 : number, y2 : number, x3 : number, y3 : number, ... number ) -> shape : love.PolygonShape Creates a new PolygonShape. This shape can have 8 vertices at most, and must form a convex shape. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ param x3 \u2014 The x position of the third point. @ param y3 \u2014 The y position of the third point. @ return shape \u2014 A new PolygonShape. newPrismaticJoint function love.physics. newPrismaticJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.PrismaticJoint Creates a PrismaticJoint between two bodies. A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a revolute joint, but with translation and force substituted for angle and torque. Open in Browser @ param body1 \u2014 The first body to connect with a prismatic joint. @ param body2 \u2014 The second body to connect with a prismatic joint. @ param x \u2014 The x coordinate of the anchor point. @ param y \u2014 The y coordinate of the anchor point. @ param ax \u2014 The x coordinate of the axis vector. @ param ay \u2014 The y coordinate of the axis vector. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new prismatic joint. newPulleyJoint function love.physics. newPulleyJoint ( body1 : love.Body, body2 : love.Body, gx1 : number, gy1 : number, gx2 : number, gy2 : number, x1 : number, y1 : number, x2 : number, y2 : number, ratio ? : number , collideConnected ? : boolean ) -> joint : love.PulleyJoint Creates a PulleyJoint to join two bodies to each other and the ground. The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created. Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method setMaxLengths be used to constrain the maximum lengths each side can attain. Open in Browser @ param body1 \u2014 The first body to connect with a pulley joint. @ param body2 \u2014 The second body to connect with a pulley joint. @ param gx1 \u2014 The x coordinate of the first body's ground anchor. @ param gy1 \u2014 The y coordinate of the first body's ground anchor. @ param gx2 \u2014 The x coordinate of the second body's ground anchor. @ param gy2 \u2014 The y coordinate of the second body's ground anchor. @ param x1 \u2014 The x coordinate of the pulley joint anchor in the first body. @ param y1 \u2014 The y coordinate of the pulley joint anchor in the first body. @ param x2 \u2014 The x coordinate of the pulley joint anchor in the second body. @ param y2 \u2014 The y coordinate of the pulley joint anchor in the second body. @ param ratio \u2014 The joint ratio. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new pulley joint. newRectangleShape function love.physics. newRectangleShape ( width : number, height : number) -> shape : love.PolygonShape Shorthand for creating rectangular PolygonShapes. By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics. Open in Browser @ param width \u2014 The width of the rectangle. @ param height \u2014 The height of the rectangle. @ return shape \u2014 A new PolygonShape. newRevoluteJoint function love.physics. newRevoluteJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.RevoluteJoint Creates a pivot joint between two bodies. This joint connects two bodies to a point around which they can pivot. Open in Browser @ param body1 \u2014 The first body. @ param body2 \u2014 The second body. @ param x \u2014 The x position of the connecting point. @ param y \u2014 The y position of the connecting point. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new revolute joint. newRopeJoint function love.physics. newRopeJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, maxLength : number, collideConnected ? : boolean ) -> joint : love.RopeJoint Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x1 \u2014 The x position of the first anchor point. @ param y1 \u2014 The y position of the first anchor point. @ param x2 \u2014 The x position of the second anchor point. @ param y2 \u2014 The y position of the second anchor point. @ param maxLength \u2014 The maximum distance for the bodies. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new RopeJoint. newWeldJoint function love.physics. newWeldJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.WeldJoint Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x \u2014 The x position of the anchor point (world space). @ param y \u2014 The y position of the anchor point (world space). @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new WeldJoint. newWheelJoint function love.physics. newWheelJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.WheelJoint Creates a wheel joint. Open in Browser @ param body1 \u2014 The first body. @ param body2 \u2014 The second body. @ param x \u2014 The x position of the anchor point. @ param y \u2014 The y position of the anchor point. @ param ax \u2014 The x position of the axis unit vector. @ param ay \u2014 The y position of the axis unit vector. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new WheelJoint. newWorld function love.physics. newWorld ( xg ? : number , yg ? : number , sleep ? : boolean ) -> world : love.World Creates a new World. Open in Browser @ param xg \u2014 The x component of gravity. @ param yg \u2014 The y component of gravity. @ param sleep \u2014 Whether the bodies in this world are allowed to sleep. @ return world \u2014 A brave new World. setMeter function love.physics. setMeter ( scale : number) Sets the pixels to meter scale factor. All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations. It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30. Open in Browser @ param scale \u2014 The scale factor as an integer. love.physics.getDistance function love.physics. getDistance ( fixture1 : love.Fixture, fixture2 : love.Fixture) -> distance : number 2. x1 : number 3. y1 : number 4. x2 : number 5. y2 : number love.physics.getMeter function love.physics. getMeter () -> scale : number love.physics.newBody function love.physics. newBody ( world : love.World, x ? : number , y ? : number , type ? : \"dynamic\" | \"kinematic\" | \"static\" ) -> body : love.Body love.physics.newChainShape function love.physics. newChainShape ( loop : boolean, x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> shape : love.ChainShape love.physics.newCircleShape function love.physics. newCircleShape ( radius : number) -> shape : love.CircleShape love.physics.newDistanceJoint function love.physics. newDistanceJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, collideConnected ? : boolean ) -> joint : love.DistanceJoint love.physics.newEdgeShape function love.physics. newEdgeShape ( x1 : number, y1 : number, x2 : number, y2 : number) -> shape : love.EdgeShape love.physics.newFixture function love.physics. newFixture ( body : love.Body, shape : love.Shape, density ? : number ) -> fixture : love.Fixture love.physics.newFrictionJoint function love.physics. newFrictionJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.FrictionJoint love.physics.newGearJoint function love.physics. newGearJoint ( joint1 : love.Joint, joint2 : love.Joint, ratio ? : number , collideConnected ? : boolean ) -> joint : love.GearJoint love.physics.newMotorJoint function love.physics. newMotorJoint ( body1 : love.Body, body2 : love.Body, correctionFactor ? : number ) -> joint : love.MotorJoint love.physics.newMouseJoint function love.physics. newMouseJoint ( body : love.Body, x : number, y : number) -> joint : love.MouseJoint love.physics.newPolygonShape function love.physics. newPolygonShape ( x1 : number, y1 : number, x2 : number, y2 : number, x3 : number, y3 : number, ... number ) -> shape : love.PolygonShape love.physics.newPrismaticJoint function love.physics. newPrismaticJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.PrismaticJoint love.physics.newPulleyJoint function love.physics. newPulleyJoint ( body1 : love.Body, body2 : love.Body, gx1 : number, gy1 : number, gx2 : number, gy2 : number, x1 : number, y1 : number, x2 : number, y2 : number, ratio ? : number , collideConnected ? : boolean ) -> joint : love.PulleyJoint love.physics.newRectangleShape function love.physics. newRectangleShape ( width : number, height : number) -> shape : love.PolygonShape love.physics.newRevoluteJoint function love.physics. newRevoluteJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.RevoluteJoint love.physics.newRopeJoint function love.physics. newRopeJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, maxLength : number, collideConnected ? : boolean ) -> joint : love.RopeJoint love.physics.newWeldJoint function love.physics. newWeldJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.WeldJoint love.physics.newWheelJoint function love.physics. newWheelJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.WheelJoint love.physics.newWorld function love.physics. newWorld ( xg ? : number , yg ? : number , sleep ? : boolean ) -> world : love.World love.physics.setMeter function love.physics. setMeter ( scale : number) love.quit love.resize love.run love.setDeprecationOutput function love. setDeprecationOutput ( enable : boolean) love.sound love .sound love.sound newDecoder function love.sound. newDecoder ( file : love.File, buffer ? : number ) -> decoder : love.Decoder Attempts to find a decoder for the encoded sound data in the specified file. Open in Browser @ param file \u2014 The file with encoded sound data. @ param buffer \u2014 The size of each decoded chunk, in bytes. @ return decoder \u2014 A new Decoder object. newSoundData function love.sound. newSoundData ( filename : string) -> soundData : love.SoundData Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth. The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way. Open in Browser @ param filename \u2014 The file name of the file to load. @ return soundData \u2014 A new SoundData object. love.sound.newDecoder function love.sound. newDecoder ( file : love.File, buffer ? : number ) -> decoder : love.Decoder love.sound.newSoundData function love.sound. newSoundData ( filename : string) -> soundData : love.SoundData love.system love .system love.system getClipboardText function love.system. getClipboardText () -> text : string Gets text from the clipboard. Open in Browser @ return text \u2014 The text currently held in the system's clipboard. getOS function love.system. getOS () -> osString : string Gets the current operating system. In general, L\u00d6VE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.) Open in Browser @ return osString \u2014 The current operating system. 'OS X', 'Windows', 'Linux', 'Android' or 'iOS'. getPowerInfo function love.system. getPowerInfo () -> state : \" battery \"|\" charged \"|\" charging \"|\" nobattery \"|\" unknown \" 2. percent: number 3. seconds: number Gets information about the system's power supply. Open in Browser @ return state \u2014 The basic state of the power supply. @ return percent \u2014 Percentage of battery life left, between 0 and 100. nil if the value can't be determined or there's no battery. @ return seconds \u2014 Seconds of battery life left. nil if the value can't be determined or there's no battery. -- -- The basic state of the system's power supply. -- -- -- [Open in Browser](https://love2d.org/wiki/PowerState) -- state : | \" unknown \" -- Cannot determine power status. | \" battery \" -- Not plugged in, running on a battery. | \" nobattery \" -- Plugged in, no battery available. | \" charging \" -- Plugged in, charging battery. | \" charged \" -- Plugged in, battery is fully charged. getProcessorCount function love.system. getProcessorCount () -> processorCount : number Gets the amount of logical processor in the system. Open in Browser @ return processorCount \u2014 Amount of logical processors. hasBackgroundMusic function love.system. hasBackgroundMusic () -> backgroundmusic : boolean Gets whether another application on the system is playing music in the background. Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while L\u00d6VE is open. Open in Browser @ return backgroundmusic \u2014 True if the user is playing music in the background via another app, false otherwise. openURL function love.system. openURL ( url : string) -> success : boolean Opens a URL with the user's web or file browser. Open in Browser @ param url \u2014 The URL to open. Must be formatted as a proper URL. @ return success \u2014 Whether the URL was opened successfully. setClipboardText function love.system. setClipboardText ( text : string) Puts text in the clipboard. Open in Browser @ param text \u2014 The new text to hold in the system's clipboard. vibrate function love.system. vibrate ( seconds ? : number ) Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor. Open in Browser @ param seconds \u2014 The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs. love.system.getClipboardText function love.system. getClipboardText () -> text : string love.system.getOS function love.system. getOS () -> osString : string love.system.getPowerInfo function love.system. getPowerInfo () -> state : \" battery \"|\" charged \"|\" charging \"|\" nobattery \"|\" unknown \" 2. percent: number 3. seconds: number love.system.getProcessorCount function love.system. getProcessorCount () -> processorCount : number love.system.hasBackgroundMusic function love.system. hasBackgroundMusic () -> backgroundmusic : boolean love.system.openURL function love.system. openURL ( url : string) -> success : boolean love.system.setClipboardText function love.system. setClipboardText ( text : string) love.system.vibrate function love.system. vibrate ( seconds ? : number ) love.textedited love.textinput love.thread getChannel function love.thread. getChannel ( name : string) -> channel : love.Channel Creates or retrieves a named thread channel. Open in Browser @ param name \u2014 The name of the channel you want to create or retrieve. @ return channel \u2014 The Channel object associated with the name. newChannel function love.thread. newChannel () -> channel : love.Channel Create a new unnamed thread channel. One use for them is to pass new unnamed channels to other threads via Channel:push on a named channel. Open in Browser @ return channel \u2014 The new Channel object. newThread function love.thread. newThread ( filename : string) -> thread : love.Thread Creates a new Thread from a filename, string or FileData object containing Lua code. Open in Browser @ param filename \u2014 The name of the Lua file to use as the source. @ return thread \u2014 A new Thread that has yet to be started. love.thread love .thread love.thread.getChannel function love.thread. getChannel ( name : string) -> channel : love.Channel love.thread.newChannel function love.thread. newChannel () -> channel : love.Channel love.thread.newThread function love.thread. newThread ( filename : string) -> thread : love.Thread love.threaderror love.timer love .timer love.timer getAverageDelta function love.timer. getAverageDelta () -> delta : number Returns the average delta time (seconds per frame) over the last second. Open in Browser @ return delta \u2014 The average delta time over the last second. getDelta function love.timer. getDelta () -> dt : number Returns the time between the last two frames. Open in Browser @ return dt \u2014 The time passed (in seconds). getFPS function love.timer. getFPS () -> fps : number Returns the current frames per second. Open in Browser @ return fps \u2014 The current FPS. getTime function love.timer. getTime () -> time : number Returns the value of a timer with an unspecified starting time. This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown. Open in Browser @ return time \u2014 The time in seconds. Given as a decimal, accurate to the microsecond. sleep function love.timer. sleep ( s : number) Pauses the current thread for the specified amount of time. Open in Browser @ param s \u2014 Seconds to sleep for. step function love.timer. step () -> dt : number Measures the time between two frames. Calling this changes the return value of love.timer.getDelta. Open in Browser @ return dt \u2014 The time passed (in seconds). love.timer.getAverageDelta function love.timer. getAverageDelta () -> delta : number love.timer.getDelta function love.timer. getDelta () -> dt : number love.timer.getFPS function love.timer. getFPS () -> fps : number love.timer.getTime function love.timer. getTime () -> time : number love.timer.sleep function love.timer. sleep ( s : number) love.timer.step function love.timer. step () -> dt : number love.touch getPosition function love.touch. getPosition ( id : lightuserdata) -> x : number 2. y : number Gets the current position of the specified touch-press, in pixels. Open in Browser @ param id \u2014 The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. @ return x \u2014 The position along the x-axis of the touch-press inside the window, in pixels. @ return y \u2014 The position along the y-axis of the touch-press inside the window, in pixels. getPressure function love.touch. getPressure ( id : lightuserdata) -> pressure : number Gets the current pressure of the specified touch-press. Open in Browser @ param id \u2014 The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. @ return pressure \u2014 The pressure of the touch-press. Most touch screens aren't pressure sensitive, in which case the pressure will be 1. getTouches function love.touch. getTouches () -> touches : table Gets a list of all active touch-presses. Open in Browser @ return touches \u2014 A list of active touch-press id values, which can be used with love.touch.getPosition. love.touch love .touch love.touch.getPosition function love.touch. getPosition ( id : lightuserdata) -> x : number 2. y : number love.touch.getPressure function love.touch. getPressure ( id : lightuserdata) -> pressure : number love.touch.getTouches function love.touch. getTouches () -> touches : table love.touchmoved love.touchpressed love.touchreleased love.update love.video newVideoStream function love.video. newVideoStream ( filename : string) -> videostream : love.VideoStream Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that. Open in Browser @ param filename \u2014 The file path to the Ogg Theora video file. @ return videostream \u2014 A new VideoStream. love.video love .video love.video.newVideoStream function love.video. newVideoStream ( filename : string) -> videostream : love.VideoStream love.visible love.wheelmoved love.window love .window love.window close function love.window. close () Closes the window. It can be reopened with love.window.setMode. Open in Browser fromPixels function love.window. fromPixels ( pixelvalue : number) -> value : number Converts a number from pixels to density-independent units. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case. This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Most L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units. Open in Browser @ param pixelvalue \u2014 A number in pixels to convert to density-independent units. @ return value \u2014 The converted number, in density-independent units. getDPIScale function love.window. getDPIScale () -> scale : number Gets the DPI scale factor associated with the window. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case. The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Open in Browser @ return scale \u2014 The pixel scale factor associated with the window. getDesktopDimensions function love.window. getDesktopDimensions ( displayindex ? : number ) -> width : number 2. height : number Gets the width and height of the desktop. Open in Browser @ param displayindex \u2014 The index of the display, if multiple monitors are available. @ return width \u2014 The width of the desktop. @ return height \u2014 The height of the desktop. getDisplayCount function love.window. getDisplayCount () -> count : number Gets the number of connected monitors. Open in Browser @ return count \u2014 The number of currently connected displays. getDisplayName function love.window. getDisplayName ( displayindex ? : number ) -> name : string Gets the name of a display. Open in Browser @ param displayindex \u2014 The index of the display to get the name of. @ return name \u2014 The name of the specified display. getDisplayOrientation function love.window. getDisplayOrientation ( displayindex ? : number ) -> orientation : \" landscape \"|\" landscapeflipped \"|\" portrait \"|\" portraitflipped \"|\" unknown \" Gets current device display orientation. Open in Browser @ param displayindex \u2014 Display index to get its display orientation, or nil for default display index. @ return orientation \u2014 Current device display orientation. -- -- Types of device display orientation. -- -- -- [Open in Browser](https://love2d.org/wiki/DisplayOrientation) -- orientation : | \" unknown \" -- Orientation cannot be determined. | \" landscape \" -- Landscape orientation. | \" landscapeflipped \" -- Landscape orientation (flipped). | \" portrait \" -- Portrait orientation. | \" portraitflipped \" -- Portrait orientation (flipped). getFullscreen function love.window. getFullscreen () -> fullscreen : boolean 2. fstype : \" desktop \"|\" exclusive \"|\" normal \" Gets whether the window is fullscreen. Open in Browser @ return fullscreen \u2014 True if the window is fullscreen, false otherwise. @ return fstype \u2014 The type of fullscreen mode used. -- -- Types of fullscreen modes. -- -- -- [Open in Browser](https://love2d.org/wiki/FullscreenType) -- fstype : | \" desktop \" -- Sometimes known as borderless fullscreen windowed mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed. | \" exclusive \" -- Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor. | \" normal \" -- Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor. getFullscreenModes function love.window. getFullscreenModes ( displayindex ? : number ) -> modes : table Gets a list of supported fullscreen modes. Open in Browser @ param displayindex \u2014 The index of the display, if multiple monitors are available. @ return modes \u2014 A table of width/height pairs. (Note that this may not be in order.) getIcon function love.window. getIcon () -> imagedata : love.ImageData Gets the window icon. Open in Browser @ return imagedata \u2014 The window icon imagedata, or nil if no icon has been set with love.window.setIcon. getMode function love.window. getMode () -> width : number 2. height : number 3. flags : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, refreshrate: number, x: number, y: number, srgb: boolean } Gets the display mode and properties of the window. Open in Browser @ return width \u2014 Window width. @ return height \u2014 Window height. @ return flags \u2014 Table with the window properties: getPosition function love.window. getPosition () -> x : number 2. y : number 3. displayindex : number Gets the position of the window on the screen. The window position is in the coordinate space of the display it is currently in. Open in Browser @ return x \u2014 The x-coordinate of the window's position. @ return y \u2014 The y-coordinate of the window's position. @ return displayindex \u2014 The index of the display that the window is in. getSafeArea function love.window. getSafeArea () -> x : number 2. y : number 3. w : number 4. h : number Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user. Open in Browser @ return x \u2014 Starting position of safe area (x-axis). @ return y \u2014 Starting position of safe area (y-axis). @ return w \u2014 Width of safe area. @ return h \u2014 Height of safe area. getTitle function love.window. getTitle () -> title : string Gets the window title. Open in Browser @ return title \u2014 The current window title. getVSync function love.window. getVSync () -> vsync : number Gets current vertical synchronization (vsync). Open in Browser @ return vsync \u2014 Current vsync status. 1 if enabled, 0 if disabled, and -1 for adaptive vsync. hasFocus function love.window. hasFocus () -> focus : boolean Checks if the game window has keyboard focus. Open in Browser @ return focus \u2014 True if the window has the focus or false if not. hasMouseFocus function love.window. hasMouseFocus () -> focus : boolean Checks if the game window has mouse focus. Open in Browser @ return focus \u2014 True if the window has mouse focus or false if not. isDisplaySleepEnabled function love.window. isDisplaySleepEnabled () -> enabled : boolean Gets whether the display is allowed to sleep while the program is running. Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed. Open in Browser @ return enabled \u2014 True if system display sleep is enabled / allowed, false otherwise. isMaximized function love.window. isMaximized () -> maximized : boolean Gets whether the Window is currently maximized. The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called. Open in Browser @ return maximized \u2014 True if the window is currently maximized in windowed mode, false otherwise. isMinimized function love.window. isMinimized () -> minimized : boolean Gets whether the Window is currently minimized. Open in Browser @ return minimized \u2014 True if the window is currently minimized, false otherwise. isOpen function love.window. isOpen () -> open : boolean Checks if the window is open. Open in Browser @ return open \u2014 True if the window is open, false otherwise. isVisible function love.window. isVisible () -> visible : boolean Checks if the game window is visible. The window is considered visible if it's not minimized and the program isn't hidden. Open in Browser @ return visible \u2014 True if the window is visible or false if not. maximize function love.window. maximize () Makes the window as large as possible. This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button. Open in Browser minimize function love.window. minimize () Minimizes the window to the system's task bar / dock. Open in Browser requestAttention function love.window. requestAttention ( continuous ? : boolean ) Causes the window to request the attention of the user if it is not in the foreground. In Windows the taskbar icon will flash, and in OS X the dock icon will bounce. Open in Browser @ param continuous \u2014 Whether to continuously request attention until the window becomes active, or to do it only once. restore function love.window. restore () Restores the size and position of the window if it was minimized or maximized. Open in Browser setDisplaySleepEnabled function love.window. setDisplaySleepEnabled ( enable : boolean) Sets whether the display is allowed to sleep while the program is running. Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed. Open in Browser @ param enable \u2014 True to enable system display sleep, false to disable it. setFullscreen function love.window. setFullscreen ( fullscreen : boolean) -> success : boolean Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected. Open in Browser @ param fullscreen \u2014 Whether to enter or exit fullscreen mode. @ return success \u2014 True if an attempt to enter fullscreen was successful, false otherwise. setIcon function love.window. setIcon ( imagedata : love.ImageData) -> success : boolean Sets the window icon until the game is quit. Not all operating systems support very large icon images. Open in Browser @ param imagedata \u2014 The window icon image. @ return success \u2014 Whether the icon has been set successfully. setMode function love.window. setMode ( width : number, height : number, flags ? : { fullscreen : boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, stencil: boolean, depth: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number, usedpiscale: boolean, srgb: boolean }) -> success: boolean Sets the display mode and properties of the window. If width or height is 0, setMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to. Open in Browser @ param width \u2014 Display width. @ param height \u2014 Display height. @ param flags \u2014 The flags table with the options: @ return success \u2014 True if successful, false otherwise. setPosition function love.window. setPosition ( x : number, y : number, displayindex ? : number ) Sets the position of the window on the screen. The window position is in the coordinate space of the specified display. Open in Browser @ param x \u2014 The x-coordinate of the window's position. @ param y \u2014 The y-coordinate of the window's position. @ param displayindex \u2014 The index of the display that the new window position is relative to. setTitle function love.window. setTitle ( title : string) Sets the window title. Open in Browser @ param title \u2014 The new window title. setVSync function love.window. setVSync ( vsync : number) Sets vertical synchronization mode. Open in Browser @ param vsync \u2014 VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync. showMessageBox function love.window. showMessageBox ( title : string, message : string, type ? : \"error\" | \"info\" | \"warning\" , attachtowindow ? : boolean ) -> success : boolean Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons. Open in Browser @ param title \u2014 The title of the message box. @ param message \u2014 The text inside the message box. @ param type \u2014 The type of the message box. @ param attachtowindow \u2014 Whether the message box should be attached to the love window or free-floating. @ return success \u2014 Whether the message box was successfully displayed. -- -- Types of message box dialogs. Different types may have slightly different looks. -- -- -- [Open in Browser](https://love2d.org/wiki/MessageBoxType) -- type : | \"info\" -- Informational dialog. | \"warning\" -- Warning dialog. | \"error\" -- Error dialog. toPixels function love.window. toPixels ( value : number) -> pixelvalue : number Converts a number from density-independent units to pixels. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case. This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Most L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units. Open in Browser @ param value \u2014 A number in density-independent units to convert to pixels. @ return pixelvalue \u2014 The converted number, in pixels. updateMode function love.window. updateMode ( width : number, height : number, settings : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number }) -> success: boolean Sets the display mode and properties of the window, without modifying unspecified properties. If width or height is 0, updateMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to. Open in Browser @ param width \u2014 Window width. @ param height \u2014 Window height. @ param settings \u2014 The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode. @ return success \u2014 True if successful, false otherwise. love.window.close function love.window. close () love.window.fromPixels function love.window. fromPixels ( pixelvalue : number) -> value : number love.window.getDPIScale function love.window. getDPIScale () -> scale : number love.window.getDesktopDimensions function love.window. getDesktopDimensions ( displayindex ? : number ) -> width : number 2. height : number love.window.getDisplayCount function love.window. getDisplayCount () -> count : number love.window.getDisplayName function love.window. getDisplayName ( displayindex ? : number ) -> name : string love.window.getDisplayOrientation function love.window. getDisplayOrientation ( displayindex ? : number ) -> orientation : \" landscape \"|\" landscapeflipped \"|\" portrait \"|\" portraitflipped \"|\" unknown \" love.window.getFullscreen function love.window. getFullscreen () -> fullscreen : boolean 2. fstype : \" desktop \"|\" exclusive \"|\" normal \" love.window.getFullscreenModes function love.window. getFullscreenModes ( displayindex ? : number ) -> modes : table love.window.getIcon function love.window. getIcon () -> imagedata : love.ImageData love.window.getMode function love.window. getMode () -> width : number 2. height : number 3. flags : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, refreshrate: number, x: number, y: number, srgb: boolean } love.window.getPosition function love.window. getPosition () -> x : number 2. y : number 3. displayindex : number love.window.getSafeArea function love.window. getSafeArea () -> x : number 2. y : number 3. w : number 4. h : number love.window.getTitle function love.window. getTitle () -> title : string love.window.getVSync function love.window. getVSync () -> vsync : number love.window.hasFocus function love.window. hasFocus () -> focus : boolean love.window.hasMouseFocus function love.window. hasMouseFocus () -> focus : boolean love.window.isDisplaySleepEnabled function love.window. isDisplaySleepEnabled () -> enabled : boolean love.window.isMaximized function love.window. isMaximized () -> maximized : boolean love.window.isMinimized function love.window. isMinimized () -> minimized : boolean love.window.isOpen function love.window. isOpen () -> open : boolean love.window.isVisible function love.window. isVisible () -> visible : boolean love.window.maximize function love.window. maximize () love.window.minimize function love.window. minimize () love.window.requestAttention function love.window. requestAttention ( continuous ? : boolean ) love.window.restore function love.window. restore () love.window.setDisplaySleepEnabled function love.window. setDisplaySleepEnabled ( enable : boolean) love.window.setFullscreen function love.window. setFullscreen ( fullscreen : boolean) -> success : boolean love.window.setIcon function love.window. setIcon ( imagedata : love.ImageData) -> success : boolean love.window.setMode function love.window. setMode ( width : number, height : number, flags ? : { fullscreen : boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, stencil: boolean, depth: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number, usedpiscale: boolean, srgb: boolean }) -> success: boolean love.window.setPosition function love.window. setPosition ( x : number, y : number, displayindex ? : number ) love.window.setTitle function love.window. setTitle ( title : string) love.window.setVSync function love.window. setVSync ( vsync : number) love.window.showMessageBox function love.window. showMessageBox ( title : string, message : string, type ? : \"error\" | \"info\" | \"warning\" , attachtowindow ? : boolean ) -> success : boolean love.window.toPixels function love.window. toPixels ( value : number) -> pixelvalue : number love.window.updateMode function love.window. updateMode ( width : number, height : number, settings : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number }) -> success: boolean math mathlib math.abs function math. abs ( x : < Number:number>) -> < Number :number> math.acos function math. acos ( x : number) -> number math.asin function math. asin ( x : number) -> number math.atan function math. atan ( y : number) -> number math.atan2 function math. atan2 ( y : number, x : number) -> number math.ceil function math. ceil ( x : number) -> integer math.cos function math. cos ( x : number) -> number math.cosh function math. cosh ( x : number) -> number math.deg function math. deg ( x : number) -> number math.exp function math. exp ( x : number) -> number math.floor function math. floor ( x : number) -> integer math.fmod function math. fmod ( x : number, y : number) -> number math.frexp function math. frexp ( x : number) -> m : number 2. e : number math.ldexp function math. ldexp ( m : number, e : number) -> number math.log function math. log ( x : number, base ? : integer ) -> number math.log10 function math. log10 ( x : number) -> number math.max function math. max ( x : < Number:number>, ...< Number :number>) -> < Number :number> math.min function math. min ( x : < Number:number>, ...< Number :number>) -> < Number :number> math.modf function math. modf ( x : number) -> integer 2. number math.pow function math. pow ( x : number, y : number) -> number math.rad function math. rad ( x : number) -> number math.random function math. random ( m : integer, n : integer) -> integer math.randomseed function math. randomseed ( x : integer) math.sin function math. sin ( x : number) -> number math.sinh function math. sinh ( x : number) -> number math.sqrt function math. sqrt ( x : number) -> number math.tan function math. tan ( x : number) -> number math.tanh function math. tanh ( x : number) -> number math.tointeger function math. tointeger ( x : any) -> integer ? math.type function math. type ( x : any) -> \"float\" | \"integer\" | 'nil' math.ult function math. ult ( m : integer, n : integer) -> boolean mathlib abs function math. abs ( x : < Number:number>) -> < Number :number> Returns the absolute value of x . View documents acos function math. acos ( x : number) -> number Returns the arc cosine of x (in radians). View documents asin function math. asin ( x : number) -> number Returns the arc sine of x (in radians). View documents atan function math. atan ( y : number) -> number Returns the arc tangent of x (in radians). View documents atan2 function math. atan2 ( y : number, x : number) -> number Returns the arc tangent of y/x (in radians). View documents ceil function math. ceil ( x : number) -> integer Returns the smallest integral value larger than or equal to x . View documents cos function math. cos ( x : number) -> number Returns the cosine of x (assumed to be in radians). View documents cosh function math. cosh ( x : number) -> number Returns the hyperbolic cosine of x (assumed to be in radians). View documents deg function math. deg ( x : number) -> number Converts the angle x from radians to degrees. View documents exp function math. exp ( x : number) -> number Returns the value e^x (where e is the base of natural logarithms). View documents floor function math. floor ( x : number) -> integer Returns the largest integral value smaller than or equal to x . View documents fmod function math. fmod ( x : number, y : number) -> number Returns the remainder of the division of x by y that rounds the quotient towards zero. View documents frexp function math. frexp ( x : number) -> m : number 2. e : number Decompose x into tails and exponents. Returns m and e such that x = m * (2 ^ e) , e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero). View documents huge number A value larger than any other numeric value. View documents ldexp function math. ldexp ( m : number, e : number) -> number Returns m * (2 ^ e) . View documents log function math. log ( x : number, base ? : integer ) -> number Returns the logarithm of x in the given base. View documents log10 function math. log10 ( x : number) -> number Returns the base-10 logarithm of x. View documents max function math. max ( x : < Number:number>, ...< Number :number>) -> < Number :number> Returns the argument with the maximum value, according to the Lua operator < . View documents min function math. min ( x : < Number:number>, ...< Number :number>) -> < Number :number> Returns the argument with the minimum value, according to the Lua operator < . View documents modf function math. modf ( x : number) -> integer 2. number Returns the integral part of x and the fractional part of x . View documents pi number The value of \u03c0 . View documents pow function math. pow ( x : number, y : number) -> number Returns x ^ y . View documents rad function math. rad ( x : number) -> number Converts the angle x from degrees to radians. View documents random function math. random ( m : integer, n : integer) -> integer math.random() : Returns a float in the range [0,1). math.random(n) : Returns a integer in the range [1, n]. math.random(m, n) : Returns a integer in the range [m, n]. View documents randomseed function math. randomseed ( x : integer) Sets x as the \"seed\" for the pseudo-random generator. View documents sin function math. sin ( x : number) -> number Returns the sine of x (assumed to be in radians). View documents sinh function math. sinh ( x : number) -> number Returns the hyperbolic sine of x (assumed to be in radians). View documents sqrt function math. sqrt ( x : number) -> number Returns the square root of x . View documents tan function math. tan ( x : number) -> number Returns the tangent of x (assumed to be in radians). View documents tanh function math. tanh ( x : number) -> number Returns the hyperbolic tangent of x (assumed to be in radians). View documents tointeger function math. tointeger ( x : any) -> integer ? Miss locale View documents type function math. type ( x : any) -> \"float\" | \"integer\" | 'nil' Miss locale View documents return # 1 : | \"integer\" | \"float\" | 'nil' ult function math. ult ( m : integer, n : integer) -> boolean Miss locale View documents metatable __add fun ( t1 : any, t2 : any): any | nil __call fun ( t : any, ... any ):... unknown | nil __concat fun ( t1 : any, t2 : any): any | nil __div fun ( t1 : any, t2 : any): any | nil __eq fun ( t1 : any, t2 : any): boolean | nil __gc fun ( t : any)| nil __index table | fun ( t : any, k : any): any | nil __le fun ( t1 : any, t2 : any): boolean | nil __len fun ( t : any): integer | nil __lt fun ( t1 : any, t2 : any): boolean | nil __metatable any __mod fun ( t1 : any, t2 : any): any | nil __mode 'k' | 'kv' | 'v' | nil __mul fun ( t1 : any, t2 : any): any | nil __newindex table | fun ( t : any, k : any, v : any)| nil __pow fun ( t1 : any, t2 : any): any | nil __sub fun ( t1 : any, t2 : any): any | nil __tostring fun ( t : any): string | nil __unm fun ( t : any): any | nil module function module ( name : string, ... any ) newproxy function newproxy ( proxy : boolean| table | userdata ) -> userdata next function next ( table : table<< K >, < V >>, index ? : < K >) -> < K > ? 2. < V > ? nil number openmode os oslib os.clock function os. clock () -> number os.date function os. date ( format ? : string , time ? : integer ) -> string | osdate os.difftime function os. difftime ( t2 : integer, t1 : integer) -> integer os.execute function os. execute ( command ? : string ) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? os.exit function os. exit ( code ? : boolean | integer , close ? : boolean ) os.getenv function os. getenv ( varname : string) -> string ? os.remove function os. remove ( filename : string) -> suc : boolean 2. errmsg : string ? os.rename function os. rename ( oldname : string, newname : string) -> suc : boolean 2. errmsg : string ? os.setlocale function os. setlocale ( locale : string| nil , category ? : \"all\" | \"collate\" | \"ctype\" | \"monetary\" | \"numeric\" ...(+ 1 )) -> localecategory : string os.time function os. time ( date ? : osdateparam ) -> integer os.tmpname function os. tmpname () -> string osdate day string | integer 1-31 View documents hour string | integer 0-23 View documents isdst boolean daylight saving flag, a boolean View documents min string | integer 0-59 View documents month string | integer 1-12 View documents sec string | integer 0-61 View documents wday string | integer weekday, 1\u20137, Sunday is 1 View documents yday string | integer day of the year, 1\u2013366 View documents year string | integer four digits View documents osdateparam day string | integer 1-31 View documents hour ( string | integer ) ? 0-23 View documents isdst boolean ? daylight saving flag, a boolean View documents min ( string | integer ) ? 0-59 View documents month string | integer 1-12 View documents sec ( string | integer ) ? 0-61 View documents wday ( string | integer ) ? weekday, 1\u20137, Sunday is 1 View documents yday ( string | integer ) ? day of the year, 1\u2013366 View documents year string | integer four digits View documents oslib clock function os. clock () -> number Returns an approximation of the amount in seconds of CPU time used by the program. View documents date function os. date ( format ? : string , time ? : integer ) -> string | osdate Returns a string or a table containing date and time, formatted according to the given string format . View documents difftime function os. difftime ( t2 : integer, t1 : integer) -> integer Returns the difference, in seconds, from time t1 to time t2 . View documents execute function os. execute ( command ? : string ) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Passes command to be executed by an operating system shell. View documents exitcode : | \" exit \" | \" signal \" exit function os. exit ( code ? : boolean | integer , close ? : boolean ) Calls the ISO C function exit to terminate the host program. View documents getenv function os. getenv ( varname : string) -> string ? Returns the value of the process environment variable varname . View documents remove function os. remove ( filename : string) -> suc : boolean 2. errmsg : string ? Deletes the file with the given name. View documents rename function os. rename ( oldname : string, newname : string) -> suc : boolean 2. errmsg : string ? Renames the file or directory named oldname to newname . View documents setlocale function os. setlocale ( locale : string| nil , category ? : \"all\" | \"collate\" | \"ctype\" | \"monetary\" | \"numeric\" ...(+ 1 )) -> localecategory : string Sets the current locale of the program. View documents category : -> \" all \" | \" collate \" | \" ctype \" | \" monetary \" | \" numeric \" | \" time \" time function os. time ( date ? : osdateparam ) -> integer Returns the current time when called without arguments, or a time representing the local date and time specified by the given table. View documents tmpname function os. tmpname () -> string Returns a string with a file name that can be used for a temporary file. View documents package packagelib package.config string package.loaders table package.loadlib function package. loadlib ( libname : string, funcname : string) -> any package.searchers table package.searchpath function package. searchpath ( name : string, path : string, sep ? : string , rep ? : string ) -> filename : string ? 2. errmsg : string ? package.seeall function package. seeall ( module : table) packagelib config string A string describing some compile-time configurations for packages. View documents cpath string The path used by require to search for a C loader. View documents loaded table A table used by require to control which modules are already loaded. View documents loaders table A table used by require to control how to load modules. View documents loadlib function package. loadlib ( libname : string, funcname : string) -> any Dynamically links the host program with the C library libname . View documents path string The path used by require to search for a Lua loader. View documents preload table A table to store loaders for specific modules. View documents searchers table A table used by require to control how to load modules. View documents searchpath function package. searchpath ( name : string, path : string, sep ? : string , rep ? : string ) -> filename : string ? 2. errmsg : string ? Searches for the given name in the given path . View documents seeall function package. seeall ( module : table) Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function module . View documents pairs function pairs ( t : < T:table>) -> fun ( table : table<< K >, < V >>, index ? : < K >):< K >, < V > 2. < T :table> pcall function pcall ( f : fun (... any ):... unknown , arg1 ? : any , ... any ) -> success : boolean 2. result : any 3. ... any popenmode print function print (... any ) prism table prism.Action unknown prism.Actor unknown prism.ActorStorage unknown prism.BehaviorTree table prism.BehaviorTree.Node unknown prism.BehaviorTree.Root unknown prism.BehaviorTree.Selector unknown prism.BehaviorTree.Sequence unknown prism.BehaviorTree.Succeeder unknown prism.BitmaskBuffer unknown prism.BooleanBuffer unknown prism.BoundingBox unknown prism.BreadthFirstSearch unknown prism.Bresenham unknown prism.Cell unknown prism.Collision unknown prism.Color4 unknown prism.Component unknown prism.Decision unknown prism.Ellipse unknown prism.Grid unknown prism.Level unknown prism.Map unknown prism.MapBuilder unknown prism.Message unknown prism.Object unknown prism.Path unknown prism.PriorityQueue unknown prism.Queue unknown prism.RNG unknown prism.Scheduler unknown prism.SimpleScheduler unknown prism.SparseArray unknown prism.SparseGrid unknown prism.SparseMap unknown prism.System unknown prism.SystemManager unknown prism.Target unknown prism.Vector2 unknown prism._ISCLASS table prism._OBJECTREGISTRY table prism._defaultDistance string prism._defaultRangeType string prism._initialized boolean prism._itemPatterns table prism._items table prism.actions table prism.actors table prism.advanceCoroutine function prism. advanceCoroutine ( updateCoroutine : any, level : any, decision : any) -> Message | nil prism.astar unknown prism.behaviors table prism.cells table prism.components table prism.components.Collider unknown prism.components.Controller unknown prism.components.Opaque unknown prism.components.PlayerController unknown prism.components.Senses unknown prism.computeFOV unknown prism.decisions table prism.decisions.ActionDecision unknown prism.fov table prism.fov.Fraction unknown prism.fov.Quadrant unknown prism.fov.Row unknown prism.hotload function prism. hotload () prism.json unknown prism.loadModule function prism. loadModule ( directory : any) prism.messages table table prism.messages.ActionMessage unknown prism.messages.DebugMessage unknown prism.modules table prism.neighborhood Vector2 [] Vector2 [] prism.path unknown prism.require function prism. require ( p : any) -> unknown 2. nil prism.setDefaultNeighborhood function prism. setDefaultNeighborhood ( neighborhood : Vector2[]) prism.systems table prism.systems.Senses unknown prism.targets table prism.turn function prism. turn ( level : Level, actor : Actor, controller : ControllerComponent) rawequal function rawequal ( v1 : any, v2 : any) -> boolean rawget function rawget ( table : table, index : any) -> any rawlen function rawlen ( v : string| table ) -> len : integer rawset function rawset ( table : table, index : any, value : any) -> table readmode require function require ( modname : string) -> unknown seekwhence select function select ( index : integer| \"#\" , ... any ) -> any setfenv function setfenv ( f : integer| fun (... any ):... unknown , table : table) -> function setmetatable function setmetatable ( table : table, metatable ? : table | metatable ) -> table spectrum table spectrum.Camera unknown spectrum.Display unknown spectrum.GameState unknown spectrum.Keybinding unknown spectrum.LevelState unknown spectrum.SensesTracker unknown spectrum.SpriteAtlas unknown spectrum.StateManager unknown spectrum.path unknown spectrum.require function spectrum. require ( p : any) -> unknown 2. nil string stringlib string byte function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents char function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents dump function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents find function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured format function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents gmatch function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents gsub function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents len function string. len ( s : string| number ) -> integer Returns its length. View documents lower function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents match function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents pack function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents packsize function string. packsize ( fmt : string) -> integer Miss locale View documents rep function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents reverse function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents sub function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents unpack function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents upper function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents string.buffer commit ( method ) string .buffer: commit ( used : integer) -> string .buffer Appends the used bytes of the previously returned write space to the buffer data. decode ( method ) string .buffer: decode () -> obj : string| number | table | nil De-serializes one object from the buffer. The returned object may be any of the supported Lua types \u2014 even nil . This function may throw an error when fed with malformed or incomplete encoded data. Leaves any left-over data in the buffer. Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet. encode ( method ) string .buffer: encode ( obj : string| number | table ) -> string .buffer Serializes (encodes) the Lua object to the buffer This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables. free ( method ) string .buffer: free () The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused. Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately. get ( method ) string .buffer: get ( len ? : integer , ... integer | nil ) -> ... string Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to len bytes are consumed. A nil argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order. Note: a zero length or no remaining buffer data returns an empty string and not nil . put ( method ) string .buffer: put ( data : string| number | table , ... string | number | table ) -> string .buffer Appends a string str, a number num or any object obj with a __tostring metamethod to the buffer. Multiple arguments are appended in the given order. Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer. putcdata ( method ) string .buffer: putcdata ( cdata : ffi.cdata*, len : integer) -> string .buffer Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer. putf ( method ) string .buffer: putf ( format : string, ... string | number | table ) -> string .buffer Appends the formatted arguments to the buffer. The format string supports the same options as string.format(). ref ( method ) string .buffer: ref () -> ptr : ffi.cdata* 2. len : integer Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len. The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads ( local x = ptr[i] ) or writes ( ptr[i] = 0x40 ) of the buffer data. In conjunction with the buf:skip() method, this allows zero-copy use of C write-style APIs: repeat local ptr , len = buf : ref () if len == 0 then break end local n = C . write ( fd , ptr , len ) if n < 0 then error ( \"write error\" ) end buf : skip ( n ) until n >= len Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong. @ return ptr \u2014 an uint8_t * FFI cdata pointer that points to the buffer data. @ return len \u2014 length of the buffer data in bytes reserve ( method ) string .buffer: reserve ( size : integer) -> ptr : ffi.cdata* 2. len : integer The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space. The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes. This, along with buf:commit() allow zero-copy use of C read-style APIs: local MIN_SIZE = 65536 repeat local ptr , len = buf : reserve ( MIN_SIZE ) local n = C . read ( fd , ptr , len ) if n == 0 then break end -- EOF. if n < 0 then error ( \"read error\" ) end buf : commit ( n ) until false The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error). @ return ptr \u2014 an uint8_t * FFI cdata pointer that points to this space @ return len \u2014 available length (bytes) reset ( method ) string .buffer: reset () -> string .buffer Reset (empty) the buffer. The allocated buffer space is not freed and may be reused. set ( method ) string .buffer: set ( str : string| number | table ) -> string .buffer This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the buf:put*() methods. After calling this method, the buffer behaves as if buf:free():put(str) or buf:free():put(cdata, len) had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed. In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics). The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive. skip ( method ) string .buffer: skip ( len : integer) -> string .buffer Skips (consumes) len bytes from the buffer up to the current length of the buffer data. tostring ( method ) string .buffer: tostring () -> string Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged. Buffer objects also define a __tostring metamethod . This means buffers can be passed to the global tostring() function and many other functions that accept this in place of strings. The important internal uses in functions like io.write() are short-circuited to avoid the creation of an intermediate string object. string.buffer.data string.buffer.serialization.opts dict string [] metatable table [] string.byte function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer string.char function string. char ( byte : integer, ... integer ) -> string string.dump function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string string.find function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any string.format function string. format ( s : string| number , ... any ) -> string string.gmatch function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown string.gsub function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer string.len function string. len ( s : string| number ) -> integer string.lower function string. lower ( s : string| number ) -> string string.match function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any string.pack function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string string.packsize function string. packsize ( fmt : string) -> integer string.rep function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string string.reverse function string. reverse ( s : string| number ) -> string string.sub function string. sub ( s : string| number , i : integer, j ? : integer ) -> string string.unpack function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer string.upper function string. upper ( s : string| number ) -> string stringlib byte function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents char function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents dump function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents find function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured format function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents gmatch function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents gsub function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents len function string. len ( s : string| number ) -> integer Returns its length. View documents lower function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents match function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents pack function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents packsize function string. packsize ( fmt : string) -> integer Miss locale View documents rep function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents reverse function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents sub function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents unpack function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents upper function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents table table tablelib table.concat function table. concat ( list : table, sep ? : string , i ? : integer , j ? : integer ) -> string table.foreach function table. foreach ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil table.foreachi function table. foreachi ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil table.getn function table. getn ( list : < T>[]) -> integer table.insert function table. insert ( list : table, pos : integer, value : any) table.maxn function table. maxn ( table : table) -> integer table.move function table. move ( a1 : table, f : integer, e : integer, t : integer, a2 ? : table ) -> a2 : table table.pack function table. pack (... any ) -> table table.remove function table. remove ( list : table, pos ? : integer ) -> any table.sort function table. sort ( list : < T>[], comp ? : fun ( a : < T>, b : < T>): boolean ) table.unpack function table. unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 > tablelib concat function table. concat ( list : table, sep ? : string , i ? : integer , j ? : integer ) -> string Given a list where all elements are strings or numbers, returns the string list[i]..sep..list[i+1] \u00b7\u00b7\u00b7 sep..list[j] . View documents foreach function table. foreach ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach. View documents foreachi function table. foreachi ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi. View documents getn function table. getn ( list : < T>[]) -> integer Returns the number of elements in the table. This function is equivalent to #list . View documents insert function table. insert ( list : table, pos : integer, value : any) Inserts element value at position pos in list . View documents maxn function table. maxn ( table : table) -> integer Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices. View documents move function table. move ( a1 : table, f : integer, e : integer, t : integer, a2 ? : table ) -> a2 : table Moves elements from table a1 to table a2 . a2 [ t ], \u00b7\u00b7\u00b7 = a1 [ f ], \u00b7\u00b7\u00b7 , a1 [ e ] return a2 View documents pack function table. pack (... any ) -> table Returns a new table with all arguments stored into keys 1 , 2 , etc. and with a field \"n\" with the total number of arguments. View documents remove function table. remove ( list : table, pos ? : integer ) -> any Removes from list the element at position pos , returning the value of the removed element. View documents sort function table. sort ( list : < T>[], comp ? : fun ( a : < T>, b : < T>): boolean ) Sorts list elements in a given order, in-place , from list[1] to list[#list] . View documents unpack function table. unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 > Returns the elements from the given list. This function is equivalent to return list [ i ], list [ i + 1 ], \u00b7\u00b7\u00b7 , list [ j ] By default, i is 1 and j is #list . View documents thread tonumber function tonumber ( e : any) -> number ? tostring function tostring ( v : any) -> string true type function type ( v : any) -> type : \"boolean\" | \"function\" | \"nil\" | \"number\" | \"string\" ...(+ 3 ) type unknown unpack function unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 > function unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 > }) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > userdata vbuf warn function warn ( message : string, ... any ) xpcall function xpcall ( f : fun (... any ):... unknown , msgh : function, arg1 ? : any , ... any ) -> success : boolean 2. result : any 3. ... any","title":"Documentation"},{"location":"doc/#action","text":"","title":"Action"},{"location":"doc/#__call","text":"function","title":"__call"},{"location":"doc/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new","text":"( method ) Action : __new ( owner : Actor, targets ? : [ Object ], source ? : Actor ) Constructor for the Action class. @ param owner \u2014 The actor that is performing the action. @ param targets \u2014 An optional list of target actors. Not all actions require targets. @ param source \u2014 An optional actor indicating the source of that action, for stuff like a wand or scroll.","title":"__new"},{"location":"doc/#_canperform","text":"( method ) Action : _canPerform ( level : Level, ... any ) -> canPerform : boolean This method should be overriden by subclasses. This is called to make sure an action is valid for the actor. This would be useful for","title":"_canPerform"},{"location":"doc/#_perform","text":"( method ) Action : _perform ( level : Level, ... any ) Performs the action. This should be overriden on all subclasses @ param level \u2014 The level the action is being performed in.","title":"_perform"},{"location":"doc/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#canperform","text":"( method ) Action : canPerform ( level : Level) -> canPerform : boolean Call this function to check if the action is valid and can be executed in the given level. This calls the inner overrideable _canPerform, and unpacks the target objects.","title":"canPerform"},{"location":"doc/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getnumtargets","text":"( method ) Action : getNumTargets () -> numTargets : number Returns the number of targets associated with this action. @ return numTargets \u2014 The number of targets associated with this action.","title":"getNumTargets"},{"location":"doc/#gettarget","text":"( method ) Action : getTarget ( n : number) -> target : any Returns the target actor at the specified index. @ param n \u2014 The index of the target actor to retrieve. @ return target \u2014 The target actor at the specified index.","title":"getTarget"},{"location":"doc/#gettargetobject","text":"( method ) Action : getTargetObject ( index : any) -> targetObject : Target| nil Returns the target object at the specified index. @tparam number index The index of the target object to retrieve.","title":"getTargetObject"},{"location":"doc/#hasrequisitecomponents","text":"( method ) Action : hasRequisiteComponents ( actor : Actor) -> hasRequisiteComponents : boolean","title":"hasRequisiteComponents"},{"location":"doc/#hastarget","text":"( method ) Action : hasTarget ( actor : any) -> boolean Determines if the specified actor is a target of this action. @tparam Actor actor The actor to check if they are a target of this action. @treturn boolean true if the specified actor is a target of this action, false otherwise.","title":"hasTarget"},{"location":"doc/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name","text":"string","title":"name"},{"location":"doc/#owner","text":"Actor The actor taking the action.","title":"owner"},{"location":"doc/#perform","text":"( method ) Action : perform ( level : any)","title":"perform"},{"location":"doc/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requiredcomponents","text":"Component []","title":"requiredComponents"},{"location":"doc/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#silent","text":"boolean A silent action doesn't generate messages","title":"silent"},{"location":"doc/#source","text":"Actor ? An object granting the owner of the action this action. A wand's zap action is a good example.","title":"source"},{"location":"doc/#stripname","text":"boolean","title":"stripName"},{"location":"doc/#targetobjects","text":"[ Object ]","title":"targetObjects"},{"location":"doc/#targets","text":"[ Target ]","title":"targets"},{"location":"doc/#time","text":"number The time it takes to perform this action. Lower is better.","title":"time"},{"location":"doc/#validatetarget","text":"( method ) Action : validateTarget ( n : number, owner : Actor, toValidate : Actor, targets : [ any]) -> true : boolean _validates the specified target for this action. @ param n \u2014 The index of the target object to _validate. @ param owner \u2014 The actor that is performing the action. @ param toValidate \u2014 The target actor to _validate. @ param targets \u2014 The previously selected targets. @ return true \u2014 if the specified target actor is valid for this action, false otherwise.","title":"validateTarget"},{"location":"doc/#actiondecision","text":"","title":"ActionDecision"},{"location":"doc/#__call_1","text":"function","title":"__call"},{"location":"doc/#__index_1","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_1","text":"( method ) ActionDecision : __new ( actor : Actor)","title":"__new"},{"location":"doc/#_serializationblacklist_1","text":"table","title":"_serializationBlacklist"},{"location":"doc/#action_1","text":"Action | nil An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more.","title":"action"},{"location":"doc/#actor","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"doc/#adopt_1","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_1","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_1","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_1","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_1","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_1","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_1","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_1","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_1","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_1","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setaction","text":"( method ) ActionDecision : setAction ( action : any)","title":"setAction"},{"location":"doc/#stripname_1","text":"boolean","title":"stripName"},{"location":"doc/#validateresponse","text":"( method ) ActionDecision : validateResponse () -> boolean","title":"validateResponse"},{"location":"doc/#actionmessage","text":"","title":"ActionMessage"},{"location":"doc/#__call_2","text":"function","title":"__call"},{"location":"doc/#__index_2","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_2","text":"( method ) ActionMessage : __new ( action : Action)","title":"__new"},{"location":"doc/#_serializationblacklist_2","text":"table","title":"_serializationBlacklist"},{"location":"doc/#action_2","text":"Action An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more.","title":"action"},{"location":"doc/#actor_1","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"doc/#adopt_2","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_2","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_2","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_2","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_2","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_2","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_2","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_2","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_2","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_2","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_2","text":"boolean","title":"stripName"},{"location":"doc/#actor_2","text":"","title":"Actor"},{"location":"doc/#__addcomponent","text":"( method ) Actor : __addComponent ( component : Component) Adds a component to the actor. This function will check if the component's prerequisites are met and will throw an error if they are not. @ param component \u2014 The component to add to the actor.","title":"__addComponent"},{"location":"doc/#__call_3","text":"function","title":"__call"},{"location":"doc/#__index_3","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_3","text":"( method ) Actor : __new () Constructor for an actor. Initializes and copies the actor's fields from its prototype.","title":"__new"},{"location":"doc/#__removecomponent","text":"( method ) Actor : __removeComponent ( component : Component) -> unknown Removes a component from the actor. This function will throw an error if the component is not present on the actor. @ param component \u2014 The component to remove from the actor.","title":"__removeComponent"},{"location":"doc/#_serializationblacklist_3","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_3","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#char","text":"string The character to draw for this actor.","title":"char"},{"location":"doc/#classname_3","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#componentcache","text":"table This is a cache for component queries, reducing most queries to a hashmap lookup.","title":"componentCache"},{"location":"doc/#components","text":"Component [] A table containing all of the actor's component instances. Generated at runtime.","title":"components"},{"location":"doc/#deserialize_3","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#expectcomponent","text":"( method ) Actor : expectComponent ( prototype : < T>) -> < T > Expects a component, returning it or erroring on nil. @ param prototype \u2014 The type of the component to return.","title":"expectComponent"},{"location":"doc/#extend_3","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getactions","text":"( method ) Actor : getActions () -> totalActions : Action[] Get a list of actions that the actor can perform. @ return totalActions \u2014 Returns a table of all actions.","title":"getActions"},{"location":"doc/#getcomponent","text":"( method ) Actor : getComponent ( prototype : < T>) -> < T > ? Searches for a component that inherits from the supplied prototype @ param prototype \u2014 The type of the component to return.","title":"getComponent"},{"location":"doc/#getposition","text":"( method ) Actor : getPosition () -> position : Vector2 Returns the current position of the actor. @ return position \u2014 Returns a copy of the actor's current position.","title":"getPosition"},{"location":"doc/#getrange","text":"( method ) Actor : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , actor : Actor) -> Returns : number Get the range from this actor to another actor. @ param actor \u2014 The other actor to get the range to. @ return Returns \u2014 the calculated range. type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\"","title":"getRange"},{"location":"doc/#getrangevec","text":"( method ) Actor : getRangeVec ( type : any , vector : any) -> number Get the range from this actor to a given vector. @function Actor:getRangeVec @tparam string type The type of range calculation to use. @tparam Vector2 vector The vector to get the range to. @treturn number Returns the calculated range.","title":"getRangeVec"},{"location":"doc/#hascomponent","text":"( method ) Actor : hasComponent ( prototype : Component) -> hasComponent : boolean Returns a bool indicating whether the actor has a component of the given type. @ param prototype \u2014 The prototype of the component to check for.","title":"hasComponent"},{"location":"doc/#initialize","text":"( method ) Actor : initialize () -> Component [] Creates the components for the actor. Override this.","title":"initialize"},{"location":"doc/#instanceof_3","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_3","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_3","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_1","text":"string The string name of the actor, used for display to the user.","title":"name"},{"location":"doc/#position","text":"Vector2 An actor's position in the game world.","title":"position"},{"location":"doc/#prettyprint_3","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_3","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_3","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_3","text":"boolean","title":"stripName"},{"location":"doc/#actorstorage","text":"","title":"ActorStorage"},{"location":"doc/#__call_4","text":"function","title":"__call"},{"location":"doc/#__index_4","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_4","text":"( method ) ActorStorage : __new ( insertSparseMapCallback : any, removeSparseMapCallback : any) The constructor for the 'ActorStorage' class. Initializes the list, spatial map, and component cache.","title":"__new"},{"location":"doc/#_serializationblacklist_4","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actortoid","text":"table < Actor , integer ? > A hashmap of actors to ids.","title":"actorToID"},{"location":"doc/#actors","text":"Actor [] The list of actors in the storage.","title":"actors"},{"location":"doc/#addactor","text":"( method ) ActorStorage : addActor ( actor : Actor) Adds an actor to the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to add.","title":"addActor"},{"location":"doc/#adopt_4","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_4","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#componentcache_1","text":"table The cache for storing actor components.","title":"componentCache"},{"location":"doc/#deserialize_4","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#eachactor","text":"( method ) ActorStorage : eachActor (... Component ? ) -> iter : function Returns an iterator over the actors in the storage. If a component is specified, only actors with that component will be returned. @ param ... \u2014 The components to filter by. @ return iter \u2014 An iterator over the actors in the storage.","title":"eachActor"},{"location":"doc/#eachactorat","text":"( method ) ActorStorage : eachActorAt ( x : number, y : number) -> iterator : function Returns an iterator over the actors in the storage at the given position. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return iterator \u2014 An iterator over the actors at the given position.","title":"eachActorAt"},{"location":"doc/#extend_4","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getactorbytype","text":"( method ) ActorStorage : getActorByType ( prototype : Actor) -> The : Actor| nil Returns an iterator over the actors in the storage that have the specified prototype. @ param prototype \u2014 The prototype to filter by. @ return The \u2014 first actor that matches the prototype, or nil if no actor matches.","title":"getActorByType"},{"location":"doc/#getactorsat","text":"( method ) ActorStorage : getActorsAt ( x : number, y : number) -> actors : Actor[] Returns a table of actors in the storage at the given position. TODO: Return an ActorStorage object instead of a table. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return actors \u2014 A table of actors at the given position.","title":"getActorsAt"},{"location":"doc/#getid","text":"( method ) ActorStorage : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the ActorStorage but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found.","title":"getID"},{"location":"doc/#hasactor","text":"( method ) ActorStorage : hasActor ( actor : Actor) -> True : boolean Returns whether the storage contains the specified actor. @ param actor \u2014 The actor to check. @ return True \u2014 if the storage contains the actor, false otherwise.","title":"hasActor"},{"location":"doc/#ids","text":"SparseArray A sparse array of references to the Actors in the storage. The ID is derived from this.","title":"ids"},{"location":"doc/#insertsparsemapcallback","text":"function","title":"insertSparseMapCallback"},{"location":"doc/#insertsparsemapentries","text":"( method ) ActorStorage : insertSparseMapEntries ( actor : Actor) Inserts the specified actor into the spatial map. @ param actor \u2014 The actor to insert.","title":"insertSparseMapEntries"},{"location":"doc/#instanceof_4","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_4","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#merge","text":"( method ) ActorStorage : merge ( other : ActorStorage) Merges another ActorStorage instance with this one. @ param other \u2014 The other ActorStorage instance to merge with this one.","title":"merge"},{"location":"doc/#mixin_4","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#ondeserialize","text":"( method ) ActorStorage : onDeserialize ()","title":"onDeserialize"},{"location":"doc/#prettyprint_4","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor","text":"( method ) ActorStorage : removeActor ( actor : Actor) Removes an actor from the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"doc/#removecomponentcache","text":"( method ) ActorStorage : removeComponentCache ( actor : Actor) Removes the specified actor from the component cache. @ param actor \u2014 The actor to remove from the component cache.","title":"removeComponentCache"},{"location":"doc/#removesparsemapcallback","text":"function","title":"removeSparseMapCallback"},{"location":"doc/#removesparsemapentries","text":"( method ) ActorStorage : removeSparseMapEntries ( actor : Actor) Removes the specified actor from the spatial map. @ param actor \u2014 The actor to remove.","title":"removeSparseMapEntries"},{"location":"doc/#serializationblacklist_4","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_4","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setcallbacks","text":"( method ) ActorStorage : setCallbacks ( insertCallback : any, removeCallback : any)","title":"setCallbacks"},{"location":"doc/#sparsemap","text":"SparseMap The spatial map for storing actor positions.","title":"sparseMap"},{"location":"doc/#stripname_4","text":"boolean","title":"stripName"},{"location":"doc/#updatecomponentcache","text":"( method ) ActorStorage : updateComponentCache ( actor : Actor) Updates the component cache for the specified actor. @ param actor \u2014 The actor to update the component cache for.","title":"updateComponentCache"},{"location":"doc/#btconditional","text":"","title":"BTConditional"},{"location":"doc/#__call_5","text":"function","title":"__call"},{"location":"doc/#__index_5","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_5","text":"( method ) BTConditional : __new ( conditionFunc : fun ( self : any, level : Level, actor : Actor): boolean ) Creates a new BTConditional.","title":"__new"},{"location":"doc/#_serializationblacklist_5","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_5","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#classname_5","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#conditionfunc","text":"fun ( self : any, level : Level, actor : Actor): boolean","title":"conditionFunc"},{"location":"doc/#deserialize_5","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_5","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_5","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_5","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_5","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_5","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run","text":"( method ) BTConditional : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the conditional node.","title":"run"},{"location":"doc/#serializationblacklist_5","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_5","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_5","text":"boolean","title":"stripName"},{"location":"doc/#btnode","text":"","title":"BTNode"},{"location":"doc/#__call_6","text":"function","title":"__call"},{"location":"doc/#__index_6","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_6","text":"( method ) BTNode : __new ( run : fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action ) You can also construct an anonymous node like: prism.BTNode(function(level, actor) return true end) For this reason simple nodes like succeeders, inverters, failers etc. should just be created using these anonymous nodes.","title":"__new"},{"location":"doc/#_serializationblacklist_6","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_6","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_1","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#classname_6","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_6","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_6","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_6","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_6","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_6","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_6","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_1","text":"fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action","title":"run"},{"location":"doc/#serializationblacklist_6","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_6","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_6","text":"boolean","title":"stripName"},{"location":"doc/#btroot","text":"","title":"BTRoot"},{"location":"doc/#__call_7","text":"function","title":"__call"},{"location":"doc/#__index_7","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_7","text":"( method ) BTRoot : __new ( children : BTNode[]) Creates a new BTRoot.","title":"__new"},{"location":"doc/#_serializationblacklist_7","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_7","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_2","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#children","text":"BTNode []","title":"children"},{"location":"doc/#classname_7","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_7","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_7","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_7","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_7","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_7","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_7","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_2","text":"( method ) BTRoot : run ( level : Level, actor : Actor, controller : ControllerComponent) -> Action Runs the behavior tree starting from this root node.","title":"run"},{"location":"doc/#serializationblacklist_7","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_7","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_7","text":"boolean","title":"stripName"},{"location":"doc/#btselector","text":"","title":"BTSelector"},{"location":"doc/#__call_8","text":"function","title":"__call"},{"location":"doc/#__index_8","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_8","text":"( method ) BTSelector : __new ( children : BTNode[]) Creates a new BTSelector.","title":"__new"},{"location":"doc/#_serializationblacklist_8","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_8","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_3","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#children_1","text":"BTNode []","title":"children"},{"location":"doc/#classname_8","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_8","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_8","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_8","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_8","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_8","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_8","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_3","text":"( method ) BTSelector : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the selector node.","title":"run"},{"location":"doc/#serializationblacklist_8","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_8","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_8","text":"boolean","title":"stripName"},{"location":"doc/#btsequence","text":"","title":"BTSequence"},{"location":"doc/#__call_9","text":"function","title":"__call"},{"location":"doc/#__index_9","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_9","text":"( method ) BTSequence : __new ( children : BTNode[]) Creates a new BTSequence.","title":"__new"},{"location":"doc/#_serializationblacklist_9","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_9","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_4","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#children_2","text":"BTNode []","title":"children"},{"location":"doc/#classname_9","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_9","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_9","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_9","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_9","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_9","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_9","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_4","text":"( method ) BTSequence : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the sequence node.","title":"run"},{"location":"doc/#serializationblacklist_9","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_9","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_9","text":"boolean","title":"stripName"},{"location":"doc/#btsucceeder","text":"","title":"BTSucceeder"},{"location":"doc/#__call_10","text":"function","title":"__call"},{"location":"doc/#__index_10","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_10","text":"( method ) BTSucceeder : __new ( node : BTNode) Creates a new BTSucceeder.","title":"__new"},{"location":"doc/#_serializationblacklist_10","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_10","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_5","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#classname_10","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_10","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_10","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_10","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_10","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_10","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#node","text":"BTNode The base class for all nodes in the behavior tree.","title":"node"},{"location":"doc/#prettyprint_10","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_5","text":"( method ) BTSucceeder : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the succeeder node.","title":"run"},{"location":"doc/#serializationblacklist_10","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_10","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_10","text":"boolean","title":"stripName"},{"location":"doc/#bitmask","text":"","title":"Bitmask"},{"location":"doc/#bitmaskbuffer","text":"","title":"BitmaskBuffer"},{"location":"doc/#__call_11","text":"function","title":"__call"},{"location":"doc/#__index_11","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_11","text":"( method ) BitmaskBuffer : __new ( w : integer, h : integer) Constructor for the BitmaskBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer.","title":"__new"},{"location":"doc/#_serializationblacklist_11","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_11","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#buffer","text":"ffi .cdata* Initialize the buffer with zeroed 16-bit values","title":"buffer"},{"location":"doc/#classname_11","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear","text":"( method ) BitmaskBuffer : clear () Clear the buffer, setting all values to zero.","title":"clear"},{"location":"doc/#deserialize_11","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_11","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getbit","text":"( method ) BitmaskBuffer : getBit ( x : integer, y : integer, bitIndex : integer) -> value : boolean Get the value of a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to retrieve. @ return value \u2014 The value of the bit (true if set, false if not).","title":"getBit"},{"location":"doc/#getindex","text":"( method ) BitmaskBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array.","title":"getIndex"},{"location":"doc/#getmask","text":"( method ) BitmaskBuffer : getMask ( x : integer, y : integer) -> value : integer Get the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The 16-bit mask value.","title":"getMask"},{"location":"doc/#h","text":"integer","title":"h"},{"location":"doc/#instanceof_11","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_11","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_11","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_11","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_11","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_11","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setbit","text":"( method ) BitmaskBuffer : setBit ( x : integer, y : integer, bitIndex : integer, v : boolean) Set a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to set. @ param v \u2014 The value to set (true to set, false to clear).","title":"setBit"},{"location":"doc/#setmask","text":"( method ) BitmaskBuffer : setMask ( x : integer, y : integer, value : integer) Set the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param value \u2014 The 16-bit value to set.","title":"setMask"},{"location":"doc/#stripname_11","text":"boolean","title":"stripName"},{"location":"doc/#w","text":"integer","title":"w"},{"location":"doc/#booleanbuffer","text":"","title":"BooleanBuffer"},{"location":"doc/#__call_12","text":"function","title":"__call"},{"location":"doc/#__index_12","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_12","text":"( method ) BooleanBuffer : __new ( w : integer, h : integer) Constructor for the BooleanBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer.","title":"__new"},{"location":"doc/#_serializationblacklist_12","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_12","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#buffer_1","text":"ffi .cdata* Initialize the buffer with false values","title":"buffer"},{"location":"doc/#classname_12","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_1","text":"( method ) BooleanBuffer : clear () Clear the buffer, setting all values to false.","title":"clear"},{"location":"doc/#deserialize_12","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_12","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#get","text":"( method ) BooleanBuffer : get ( x : integer, y : integer) -> value : boolean Get the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The value at the given coordinates.","title":"get"},{"location":"doc/#getindex_1","text":"( method ) BooleanBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array.","title":"getIndex"},{"location":"doc/#h_1","text":"integer The height of the buffer.","title":"h"},{"location":"doc/#instanceof_12","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_12","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_12","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_12","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_12","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_12","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set","text":"( method ) BooleanBuffer : set ( x : integer, y : integer, v : boolean) Set the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param v \u2014 The value to set.","title":"set"},{"location":"doc/#stripname_12","text":"boolean","title":"stripName"},{"location":"doc/#w_1","text":"integer The width of the buffer.","title":"w"},{"location":"doc/#boundingbox","text":"","title":"BoundingBox"},{"location":"doc/#__call_13","text":"function","title":"__call"},{"location":"doc/#__index_13","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_13","text":"( method ) BoundingBox : __new ( x : any, y : any, i : any, j : any)","title":"__new"},{"location":"doc/#__tostring","text":"( method ) BoundingBox : __tostring () -> string","title":"__tostring"},{"location":"doc/#_serializationblacklist_13","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_13","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_13","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#contains","text":"( method ) BoundingBox : contains ( x : any, y : any) -> boolean","title":"contains"},{"location":"doc/#deserialize_13","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_13","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getheight","text":"( method ) BoundingBox : getHeight () -> unknown","title":"getHeight"},{"location":"doc/#getwidth","text":"( method ) BoundingBox : getWidth () -> unknown","title":"getWidth"},{"location":"doc/#i","text":"any","title":"i"},{"location":"doc/#instanceof_13","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#intersects","text":"( method ) BoundingBox : intersects ( other : any) -> boolean","title":"intersects"},{"location":"doc/#is_13","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#j","text":"any","title":"j"},{"location":"doc/#mixin_13","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_13","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_13","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_13","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_13","text":"boolean","title":"stripName"},{"location":"doc/#union","text":"( method ) BoundingBox : union ( other : any) -> BoundingBox","title":"union"},{"location":"doc/#x","text":"any","title":"x"},{"location":"doc/#y","text":"any","title":"y"},{"location":"doc/#button","text":"","title":"Button"},{"location":"doc/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props","text":"ButtonProps","title":"props"},{"location":"doc/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#buttoninit","text":"","title":"ButtonInit"},{"location":"doc/#buttonprops","text":"","title":"ButtonProps"},{"location":"doc/#_internal_1","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#disabled","text":"boolean","title":"disabled"},{"location":"doc/#disabledquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"disabledQuad"},{"location":"doc/#hovered","text":"boolean","title":"hovered"},{"location":"doc/#hoveredquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"hoveredQuad"},{"location":"doc/#onpress","text":"fun ( pointer : Inky.Pointer) ? a function called after pressing the button","title":"onPress"},{"location":"doc/#onrelease","text":"fun ( pointer : Inky.Pointer) ? a function called after releasing the button","title":"onRelease"},{"location":"doc/#pressed","text":"boolean whether the button is pressed","title":"pressed"},{"location":"doc/#pressedquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"pressedQuad"},{"location":"doc/#tileset","text":"love .Image Drawable image type. Open in Browser","title":"tileset"},{"location":"doc/#toggle","text":"boolean whether the button stays pressed after clicking","title":"toggle"},{"location":"doc/#unpressedquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"unpressedQuad"},{"location":"doc/#untoggle","text":"boolean if the button is toggleable, whether you can untoggle","title":"untoggle"},{"location":"doc/#camera","text":"","title":"Camera"},{"location":"doc/#__call_14","text":"function","title":"__call"},{"location":"doc/#__index_14","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_14","text":"( method ) Camera : __new ( x : any, y : any)","title":"__new"},{"location":"doc/#_serializationblacklist_14","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_14","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_14","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_14","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_14","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getposition_1","text":"( method ) Camera : getPosition () -> x : number 2. y : number @ return x \u2014 The x position. @ return y \u2014 The y position.","title":"getPosition"},{"location":"doc/#instanceof_14","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_14","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_14","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#move","text":"( method ) Camera : move ( dx : number, dy : number)","title":"move"},{"location":"doc/#pop","text":"( method ) Camera : pop () Pops the camera's transform. Call this after drawing.","title":"pop"},{"location":"doc/#position_1","text":"Vector2","title":"position"},{"location":"doc/#prettyprint_14","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#push","text":"( method ) Camera : push () Pushes the camera's transform. Call this before drawing.","title":"push"},{"location":"doc/#rotation","text":"number","title":"rotation"},{"location":"doc/#scale","text":"Vector2","title":"scale"},{"location":"doc/#scalearoundpoint","text":"( method ) Camera : scaleAroundPoint ( factorX : number, factorY : number, pointX : number, pointY : number)","title":"scaleAroundPoint"},{"location":"doc/#serializationblacklist_14","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_14","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setposition","text":"( method ) Camera : setPosition ( x : number, y : number)","title":"setPosition"},{"location":"doc/#setrotation","text":"( method ) Camera : setRotation ( rotation : number)","title":"setRotation"},{"location":"doc/#setscale","text":"( method ) Camera : setScale ( scaleX : number, scaleY : number)","title":"setScale"},{"location":"doc/#stripname_14","text":"boolean","title":"stripName"},{"location":"doc/#toworldspace","text":"( method ) Camera : toWorldSpace ( x : number, y : number) -> number 2. number","title":"toWorldSpace"},{"location":"doc/#cell","text":"","title":"Cell"},{"location":"doc/#__call_15","text":"function","title":"__call"},{"location":"doc/#__index_15","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_15","text":"( method ) Cell : __new () Constructor for the Cell class.","title":"__new"},{"location":"doc/#_serializationblacklist_15","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_15","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#afteraction","text":"( method ) Cell : afterAction ( level : Level, actor : Actor, action : Action) Called right after an action is taken on the cell. @ param level \u2014 The level where the action took place. @ param actor \u2014 The actor that took the action. @ param action \u2014 The action that was taken.","title":"afterAction"},{"location":"doc/#allowedmovetypes","text":"string [] ?","title":"allowedMovetypes"},{"location":"doc/#beforeaction","text":"( method ) Cell : beforeAction ( level : Level, actor : Actor, action : Action) Called right before an action takes place on this cell.","title":"beforeAction"},{"location":"doc/#classname_15","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#collisionmask","text":"integer Defines whether a cell can moved through.","title":"collisionMask"},{"location":"doc/#deserialize_15","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#drawable","text":"DrawableComponent","title":"drawable"},{"location":"doc/#extend_15","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getcomponent_1","text":"( method ) Cell : getComponent ( component : any) -> DrawableComponent","title":"getComponent"},{"location":"doc/#instanceof_15","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_15","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_15","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_2","text":"string Displayed in the user interface.","title":"name"},{"location":"doc/#onenter","text":"( method ) Cell : onEnter ( level : Level, actor : Actor) Called when an actor enters the cell. @ param level \u2014 The level where the actor entered the cell. @ param actor \u2014 The actor that entered the cell.","title":"onEnter"},{"location":"doc/#onleave","text":"( method ) Cell : onLeave ( level : Level, actor : Actor) Called when an actor leaves the cell. @ param level \u2014 The level where the actor left the cell. @ param actor \u2014 The actor that left the cell.","title":"onLeave"},{"location":"doc/#opaque","text":"boolean Defines whether a cell can be seen through.","title":"opaque"},{"location":"doc/#prettyprint_15","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_15","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_15","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_15","text":"boolean","title":"stripName"},{"location":"doc/#collidercomponent","text":"","title":"ColliderComponent"},{"location":"doc/#__call_16","text":"function","title":"__call"},{"location":"doc/#__index_16","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_16","text":"( method ) ColliderComponent : __new ( options : ColliderOptions)","title":"__new"},{"location":"doc/#_serializationblacklist_16","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_16","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_16","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_16","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_16","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_1","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_16","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_16","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mask","text":"integer","title":"mask"},{"location":"doc/#mixin_16","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_3","text":"string","title":"name"},{"location":"doc/#owner_1","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_16","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_16","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_16","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_16","text":"boolean","title":"stripName"},{"location":"doc/#collideroptions","text":"","title":"ColliderOptions"},{"location":"doc/#allowedmovetypes_1","text":"string []","title":"allowedMovetypes"},{"location":"doc/#collisionmask_1","text":"","title":"CollisionMask"},{"location":"doc/#color4","text":"","title":"Color4"},{"location":"doc/#black","text":"Color4 Predefined colors","title":"BLACK"},{"location":"doc/#blue","text":"Color4","title":"BLUE"},{"location":"doc/#green","text":"Color4","title":"GREEN"},{"location":"doc/#red","text":"Color4","title":"RED"},{"location":"doc/#transparent","text":"Color4","title":"TRANSPARENT"},{"location":"doc/#white","text":"Color4","title":"WHITE"},{"location":"doc/#__add","text":"function Color4. __add ( a : Color4, b : Color4) -> The : Color4 Adds two colors together. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 sum of the two colors.","title":"__add"},{"location":"doc/#__call_17","text":"function","title":"__call"},{"location":"doc/#__eq","text":"function Color4. __eq ( a : Color4, b : Color4) -> True : boolean Checks equality between two colors. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return True \u2014 if the colors are equal, false otherwise.","title":"__eq"},{"location":"doc/#__index_17","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__mul","text":"function Color4. __mul ( self : Color4, scalar : number) -> The : Color4 Multiplies the color's components by a scalar. @ param scalar \u2014 The scalar value. @ return The \u2014 scaled color.","title":"__mul"},{"location":"doc/#__new_17","text":"( method ) Color4 : __new ( r : number, g : number, b : number, a : number) Constructor for Color4 accepts red, green, blue, and alpha values. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1).","title":"__new"},{"location":"doc/#__sub","text":"function Color4. __sub ( a : Color4, b : Color4) -> The : Color4 Subtracts one color from another. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 difference of the two colors.","title":"__sub"},{"location":"doc/#__tostring_1","text":"( method ) Color4 : __tostring () -> The : string Creates a string representation of the color. @ return The \u2014 string representation.","title":"__tostring"},{"location":"doc/#__unm","text":"function Color4. __unm ( self : Color4) -> The : Color4 Negates the color's components. @ return The \u2014 negated color.","title":"__unm"},{"location":"doc/#_serializationblacklist_17","text":"table","title":"_serializationBlacklist"},{"location":"doc/#a","text":"number The alpha component (0-1).","title":"a"},{"location":"doc/#adopt_17","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#b","text":"number The blue component (0-1).","title":"b"},{"location":"doc/#clamp","text":"( method ) Color4 : clamp () -> The : Color4 Clamps the components of the color between 0 and 1. @ return The \u2014 clamped color.","title":"clamp"},{"location":"doc/#classname_17","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#copy","text":"( method ) Color4 : copy () -> A : Color4 Returns a copy of the color. @ return A \u2014 copy of the color.","title":"copy"},{"location":"doc/#decompose","text":"( method ) Color4 : decompose () -> r : number 2. g : number 3. b : number 4. a : number Returns the components of the color as numbers. @ return r,g,b,a \u2014 The components of the color.","title":"decompose"},{"location":"doc/#deserialize_17","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_17","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fromhex","text":"function Color4. fromHex ( hex : number) Constructor for Color4 that accepts a hexadecimal number. @ param hex \u2014 A hex number representing a color, e.g. 0xFFFFFF. Alpha is optional and defaults to 1.","title":"fromHex"},{"location":"doc/#g","text":"number The green component (0-1).","title":"g"},{"location":"doc/#instanceof_17","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_17","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#lerp","text":"( method ) Color4 : lerp ( target : Color4, t : number) -> The : Color4 Linearly interpolates between two colors. @ param target \u2014 The target color. @ param t \u2014 A value between 0 and 1, where 0 is this color and 1 is the target color. @ return The \u2014 interpolated color.","title":"lerp"},{"location":"doc/#mixin_17","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_17","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#r","text":"number The red component (0-1).","title":"r"},{"location":"doc/#serializationblacklist_17","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_17","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_17","text":"boolean","title":"stripName"},{"location":"doc/#component","text":"","title":"Component"},{"location":"doc/#__call_18","text":"function","title":"__call"},{"location":"doc/#__index_18","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_18","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_18","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_18","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#checkrequirements_1","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_18","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_18","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_18","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_2","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_18","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_18","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_18","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_4","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"doc/#owner_2","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_18","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_1","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_18","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_18","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_18","text":"boolean","title":"stripName"},{"location":"doc/#controllercomponent","text":"","title":"ControllerComponent"},{"location":"doc/#__call_19","text":"function","title":"__call"},{"location":"doc/#__index_19","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_19","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_19","text":"table","title":"_serializationBlacklist"},{"location":"doc/#act","text":"( method ) ControllerComponent : act ( level : any, actor : any) -> Action","title":"act"},{"location":"doc/#adopt_19","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#blackboard","text":"table | nil","title":"blackboard"},{"location":"doc/#checkrequirements_2","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_19","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_19","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_19","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_3","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_19","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_19","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_19","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_5","text":"string","title":"name"},{"location":"doc/#owner_3","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_19","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_2","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_19","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_19","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_19","text":"boolean","title":"stripName"},{"location":"doc/#debugmessage","text":"","title":"DebugMessage"},{"location":"doc/#__call_20","text":"function","title":"__call"},{"location":"doc/#__index_20","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_20","text":"( method ) DebugMessage : __new ( message : string)","title":"__new"},{"location":"doc/#_serializationblacklist_20","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_20","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_20","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_20","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_20","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_20","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_20","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#message","text":"string A human readable message for why we stopped her.","title":"message"},{"location":"doc/#mixin_20","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_20","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_20","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_20","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_20","text":"boolean","title":"stripName"},{"location":"doc/#decision","text":"","title":"Decision"},{"location":"doc/#__call_21","text":"function","title":"__call"},{"location":"doc/#__index_21","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_21","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_21","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actor_3","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"doc/#adopt_21","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_21","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_21","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_21","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_21","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_21","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_21","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_21","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_21","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_21","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_21","text":"boolean","title":"stripName"},{"location":"doc/#validateresponse_1","text":"( method ) Decision : validateResponse ()","title":"validateResponse"},{"location":"doc/#display","text":"","title":"Display"},{"location":"doc/#__call_22","text":"function","title":"__call"},{"location":"doc/#__index_22","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_22","text":"( method ) Display : __new ( spriteAtlas : SpriteAtlas, cellSize : Vector2, attachable : SpectrumAttachable) Initializes a new Display instance. @ param spriteAtlas \u2014 The sprite atlas for rendering. @ param cellSize \u2014 Size of each cell in pixels. @ param attachable \u2014 Object containing cells and actors to render.","title":"__new"},{"location":"doc/#_serializationblacklist_22","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_22","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#afterdrawactors","text":"( method ) Display : afterDrawActors () Hook for custom behavior after drawing actors.","title":"afterDrawActors"},{"location":"doc/#attachable","text":"SpectrumAttachable The current level being displayed.","title":"attachable"},{"location":"doc/#beforedrawactors","text":"( method ) Display : beforeDrawActors () Hook for custom behavior before drawing actors.","title":"beforeDrawActors"},{"location":"doc/#beforedrawcells","text":"( method ) Display : beforeDrawCells () Hook for custom behavior before drawing cells.","title":"beforeDrawCells"},{"location":"doc/#buildsenseinfo","text":"function Display. buildSenseInfo ( primary : SensesComponent[], secondary : SensesComponent[]) -> SparseGrid 2. SparseGrid 3. table 4. table 5. SparseGrid @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses.","title":"buildSenseInfo"},{"location":"doc/#camera_1","text":"Camera The camera used to render the display.","title":"camera"},{"location":"doc/#cellsize","text":"Vector2","title":"cellSize"},{"location":"doc/#classname_22","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_22","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw","text":"( method ) Display : draw () Renders the display.","title":"draw"},{"location":"doc/#drawactor","text":"( method ) Display : drawActor ( actor : Actor, alpha ? : number , color ? : Color4 , drawnSet ? : table , x : any, y : any) Draws an actor. @ param actor \u2014 The actor to draw. @ param alpha \u2014 Optional alpha transparency. @ param color \u2014 Optional color tint. @ param drawnSet \u2014 Optional set to track drawn actors.","title":"drawActor"},{"location":"doc/#drawdrawable","text":"function Display. drawDrawable ( drawable : DrawableComponent, spriteAtlas : SpriteAtlas, cellSize : Vector2, x : integer, y : integer, color ? : Color4 , alpha ? : number ) Draws a drawable object. @ param drawable \u2014 Drawable to render. @ param spriteAtlas \u2014 Sprite atlas to use. @ param cellSize \u2014 Size of each cell. @ param x \u2014 X-coordinate. @ param y \u2014 Y-coordinate. @ param color \u2014 Optional color tint. @ param alpha \u2014 Optional alpha transparency.","title":"drawDrawable"},{"location":"doc/#drawperspective","text":"( method ) Display : drawPerspective ( primary : SensesComponent[], secondary : SensesComponent[]) Draws the perspective of primary and secondary senses. @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses.","title":"drawPerspective"},{"location":"doc/#dt","text":"number Delta time for updates.","title":"dt"},{"location":"doc/#extend_22","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getcellundermouse","text":"( method ) Display : getCellUnderMouse () -> integer 2. The : integer Gets the cell under the mouse cursor. @ return The \u2014 X and Y coordinates of the cell.","title":"getCellUnderMouse"},{"location":"doc/#getquad","text":"function Display. getQuad ( spriteAtlas : SpriteAtlas, drawable : DrawableComponent) -> The : love.Quad| nil Retrieves the quad for a drawable. @ param spriteAtlas \u2014 The sprite atlas. @ param drawable \u2014 The drawable component. @ return The \u2014 quad used for rendering.","title":"getQuad"},{"location":"doc/#instanceof_22","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_22","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#message_1","text":"nil","title":"message"},{"location":"doc/#mixin_22","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#override","text":"fun ( dt : integer, drawnSet : table< Actor , boolean >)| nil","title":"override"},{"location":"doc/#prettyprint_22","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_22","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_22","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setoverride","text":"( method ) Display : setOverride ( functionFactory : fun ( display : Display, message : any): fun ( dt : number): boolean , message : any) Sets an override rendering function. @ param functionFactory \u2014 A factory for override functions. @ param message \u2014 Optional message to pass to the function.","title":"setOverride"},{"location":"doc/#spriteatlas","text":"SpriteAtlas The sprite atlas used for rendering graphics.","title":"spriteAtlas"},{"location":"doc/#stripname_22","text":"boolean","title":"stripName"},{"location":"doc/#update","text":"( method ) Display : update ( dt : number) Updates the display state. @ param dt \u2014 Delta time for updates.","title":"update"},{"location":"doc/#distancetype","text":"","title":"DistanceType"},{"location":"doc/#drawablecomponent","text":"","title":"DrawableComponent"},{"location":"doc/#__call_23","text":"function","title":"__call"},{"location":"doc/#__index_23","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_23","text":"( method ) DrawableComponent : __new ( index : string| integer , color : Color4) Index needs to be a string associated with a sprite in the SpriteAtlas, or an integer index associated with a sprite.","title":"__new"},{"location":"doc/#_serializationblacklist_23","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_23","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#checkrequirements_3","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_23","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#color","text":"Color4","title":"color"},{"location":"doc/#deserialize_23","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_23","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#index","text":"string | integer","title":"index"},{"location":"doc/#initialize_4","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_23","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_23","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_23","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_6","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"doc/#owner_4","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_23","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_3","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_23","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_23","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_23","text":"boolean","title":"stripName"},{"location":"doc/#editor","text":"","title":"Editor"},{"location":"doc/#__call_24","text":"function","title":"__call"},{"location":"doc/#__index_24","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_24","text":"( method ) Editor : __new ( attachable : any, display : any, fileEnabled : any)","title":"__new"},{"location":"doc/#_serializationblacklist_24","text":"table","title":"_serializationBlacklist"},{"location":"doc/#active","text":"boolean","title":"active"},{"location":"doc/#adopt_24","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#attachable_1","text":"SpectrumAttachable","title":"attachable"},{"location":"doc/#camera_2","text":"Camera","title":"camera"},{"location":"doc/#classname_24","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_24","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#display_1","text":"Display","title":"display"},{"location":"doc/#draw_1","text":"( method ) Editor : draw ()","title":"draw"},{"location":"doc/#editorroot","text":"EditorRoot","title":"editorRoot"},{"location":"doc/#execute","text":"( method ) Editor : execute ( modification : Modification)","title":"execute"},{"location":"doc/#extend_24","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fileenabled","text":"boolean","title":"fileEnabled"},{"location":"doc/#filepath","text":"string | nil","title":"filepath"},{"location":"doc/#fillmode","text":"boolean","title":"fillMode"},{"location":"doc/#instanceof_24","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_24","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#isactive","text":"( method ) Editor : isActive () -> boolean","title":"isActive"},{"location":"doc/#keybindsenabled","text":"boolean","title":"keybindsEnabled"},{"location":"doc/#keypressed","text":"( method ) Editor : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"doc/#mixin_24","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousemoved","text":"( method ) Editor : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"doc/#mousepressed","text":"( method ) Editor : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"doc/#mousereleased","text":"( method ) Editor : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"doc/#placeable","text":"Actor | Cell | nil An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#prettyprint_24","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#redo","text":"( method ) Editor : redo ()","title":"redo"},{"location":"doc/#redostack","text":"Modification []","title":"redoStack"},{"location":"doc/#selectormode","text":"string","title":"selectorMode"},{"location":"doc/#selectormodes","text":"table < string , string >","title":"selectorModes"},{"location":"doc/#serializationblacklist_24","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_24","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setattachable","text":"( method ) Editor : setAttachable ( attachable : SpectrumAttachable)","title":"setAttachable"},{"location":"doc/#startediting","text":"( method ) Editor : startEditing ()","title":"startEditing"},{"location":"doc/#stripname_24","text":"boolean","title":"stripName"},{"location":"doc/#textinput","text":"( method ) Editor : textinput ( text : any)","title":"textinput"},{"location":"doc/#tool","text":"Tool","title":"tool"},{"location":"doc/#undo","text":"( method ) Editor : undo ()","title":"undo"},{"location":"doc/#undostack","text":"Modification []","title":"undoStack"},{"location":"doc/#update_1","text":"( method ) Editor : update ( dt : any)","title":"update"},{"location":"doc/#wheelmoved","text":"( method ) Editor : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"doc/#editorgrid","text":"","title":"EditorGrid"},{"location":"doc/#__getinternal_1","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_2","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_1","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_1","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_1","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_1","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_1","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_1","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_1","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_1","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_1","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_1","text":"EditorGridProps","title":"props"},{"location":"doc/#render_1","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_1","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_1","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#editorgridinit","text":"","title":"EditorGridInit"},{"location":"doc/#editorgridprops","text":"","title":"EditorGridProps"},{"location":"doc/#_internal_3","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#attachable_2","text":"SpectrumAttachable","title":"attachable"},{"location":"doc/#display_2","text":"Display","title":"display"},{"location":"doc/#editor_1","text":"Editor","title":"editor"},{"location":"doc/#offset","text":"Vector2","title":"offset"},{"location":"doc/#scale_1","text":"Vector2","title":"scale"},{"location":"doc/#editorroot_1","text":"","title":"EditorRoot"},{"location":"doc/#__getinternal_2","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_4","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_2","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_2","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_2","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_2","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_2","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_2","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_2","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_2","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_2","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_2","text":"EditorRootProps","title":"props"},{"location":"doc/#render_2","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_2","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_2","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#editorrootprops","text":"","title":"EditorRootProps"},{"location":"doc/#_internal_5","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#attachable_3","text":"SpectrumAttachable","title":"attachable"},{"location":"doc/#display_3","text":"Display","title":"display"},{"location":"doc/#editor_2","text":"Editor","title":"editor"},{"location":"doc/#gridposition","text":"Vector2","title":"gridPosition"},{"location":"doc/#quit","text":"boolean","title":"quit"},{"location":"doc/#scale_2","text":"Vector2","title":"scale"},{"location":"doc/#editorstate","text":"","title":"EditorState"},{"location":"doc/#__call_25","text":"function","title":"__call"},{"location":"doc/#__index_25","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_25","text":"( method ) EditorState : __new ( attachable : SpectrumAttachable, display : any, fileEnabled : any) Create a new Editor managing gamestate, attached to a SpectrumAttachable, this is a Level|MapBuilder interface.","title":"__new"},{"location":"doc/#_serializationblacklist_25","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_25","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_25","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_25","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_2","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"doc/#editor_3","text":"Editor","title":"editor"},{"location":"doc/#extend_25","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"doc/#instanceof_25","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_25","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_1","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"doc/#load","text":"( method ) EditorState : load ()","title":"load"},{"location":"doc/#manager","text":"GameStateManager","title":"manager"},{"location":"doc/#mixin_25","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousemoved_1","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"doc/#mousepressed_1","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"doc/#mousereleased_1","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"doc/#prettyprint_25","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_25","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_25","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_25","text":"boolean","title":"stripName"},{"location":"doc/#textinput_1","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"doc/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"doc/#update_2","text":"( method ) EditorState : update ( dt : any)","title":"update"},{"location":"doc/#wheelmoved_1","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"doc/#ellipsemodification","text":"","title":"EllipseModification"},{"location":"doc/#__call_26","text":"function","title":"__call"},{"location":"doc/#__index_26","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_26","text":"( method ) EllipseModification : __new ( placeable : Actor| Cell , center : any, rx : any, ry : any)","title":"__new"},{"location":"doc/#_serializationblacklist_26","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_26","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bottomright","text":"Vector2","title":"bottomright"},{"location":"doc/#center","text":"any","title":"center"},{"location":"doc/#classname_26","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_26","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_1","text":"( method ) EllipseModification : execute ( attachable : SpectrumAttachable, editor : Editor)","title":"execute"},{"location":"doc/#extend_26","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_26","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_26","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_26","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_1","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"doc/#prettyprint_26","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_1","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed","text":"table","title":"removed"},{"location":"doc/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#rx","text":"any","title":"rx"},{"location":"doc/#ry","text":"any","title":"ry"},{"location":"doc/#serializationblacklist_26","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_26","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_26","text":"boolean","title":"stripName"},{"location":"doc/#topleft","text":"Vector2","title":"topleft"},{"location":"doc/#undo_1","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#ellipsetool","text":"","title":"EllipseTool"},{"location":"doc/#__call_27","text":"function","title":"__call"},{"location":"doc/#__index_27","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_27","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_27","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_27","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#center_1","text":"Vector2","title":"center"},{"location":"doc/#classname_27","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_27","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_3","text":"( method ) EllipseTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#editor_4","text":"Editor","title":"editor"},{"location":"doc/#extend_27","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_27","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_27","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_27","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked","text":"( method ) EllipseTool : mouseclicked ( editor : Editor, attachable : any, x : number, y : number)","title":"mouseclicked"},{"location":"doc/#mousereleased_2","text":"( method ) EllipseTool : mousereleased ( editor : Editor, level : any, x : number, y : number)","title":"mousereleased"},{"location":"doc/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_27","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_27","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_27","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_27","text":"boolean","title":"stripName"},{"location":"doc/#update_3","text":"( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"update"},{"location":"doc/#erasemodification","text":"","title":"EraseModification"},{"location":"doc/#__call_28","text":"function","title":"__call"},{"location":"doc/#__index_28","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_28","text":"( method ) EraseModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2)","title":"__new"},{"location":"doc/#_serializationblacklist_28","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_28","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bottomright_1","text":"Vector2","title":"bottomright"},{"location":"doc/#classname_28","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_28","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_2","text":"( method ) EraseModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"doc/#extend_28","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_28","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_28","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_28","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_1","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_1","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_2","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed_1","text":"Actor | Cell []| nil","title":"placed"},{"location":"doc/#prettyprint_28","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_2","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_1","text":"table","title":"removed"},{"location":"doc/#replaced_1","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_28","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_28","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_28","text":"boolean","title":"stripName"},{"location":"doc/#topleft_1","text":"Vector2","title":"topleft"},{"location":"doc/#undo_2","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#erasetool","text":"","title":"EraseTool"},{"location":"doc/#__call_29","text":"function","title":"__call"},{"location":"doc/#__index_29","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_29","text":"( method ) EraseTool : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_29","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_29","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_29","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_29","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_4","text":"( method ) EraseTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell_1","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_29","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getcurrentrect","text":"( method ) EraseTool : getCurrentRect () -> topleftx : number ? 2. toplefy : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"doc/#getdrawable_1","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_29","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_29","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_29","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_1","text":"( method ) EraseTool : mouseclicked ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_3","text":"( method ) EraseTool : mousereleased ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) -> nil @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"doc/#origin","text":"Vector2","title":"origin"},{"location":"doc/#overridecelldraw_1","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_29","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#second","text":"Vector2","title":"second"},{"location":"doc/#serializationblacklist_29","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_29","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_29","text":"boolean","title":"stripName"},{"location":"doc/#update_4","text":"( method ) EraseTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"doc/#filepanel","text":"","title":"FilePanel"},{"location":"doc/#__getinternal_3","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_6","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_3","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_3","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_3","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_3","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_3","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_3","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_3","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_3","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_3","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_3","text":"FilePanelProps","title":"props"},{"location":"doc/#render_3","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_3","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_3","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#filepanelinit","text":"","title":"FilePanelInit"},{"location":"doc/#filepanelprops","text":"","title":"FilePanelProps"},{"location":"doc/#_internal_7","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#editor_5","text":"Editor","title":"editor"},{"location":"doc/#name_7","text":"string","title":"name"},{"location":"doc/#open","text":"boolean","title":"open"},{"location":"doc/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"doc/#scale_3","text":"Vector2","title":"scale"},{"location":"doc/#fill","text":"","title":"Fill"},{"location":"doc/#__call_30","text":"function","title":"__call"},{"location":"doc/#__index_30","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_30","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_30","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_30","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bucket","text":"( method ) Fill : bucket ( attachable : SpectrumAttachable, x : any, y : any)","title":"bucket"},{"location":"doc/#classname_30","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_30","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_5","text":"( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals.","title":"draw"},{"location":"doc/#drawcell_2","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_30","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getdrawable_2","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_30","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_30","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#locations","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"doc/#mixin_30","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_2","text":"( method ) Fill : mouseclicked ( editor : Editor, level : Level, cellx : number, celly : number) Begins a paint drag. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_4","text":"( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release.","title":"mousereleased"},{"location":"doc/#overridecelldraw_2","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_30","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_30","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_30","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_30","text":"boolean","title":"stripName"},{"location":"doc/#update_5","text":"( method ) Fill : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update.","title":"update"},{"location":"doc/#fraction","text":"","title":"Fraction"},{"location":"doc/#__add_1","text":"function Fraction. __add ( lhs : any, rhs : any)","title":"__add"},{"location":"doc/#__call_31","text":"function","title":"__call"},{"location":"doc/#__eq_1","text":"function Fraction. __eq ( lhs : any, rhs : any) -> boolean","title":"__eq"},{"location":"doc/#__index_31","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__le","text":"function Fraction. __le ( lhs : any, rhs : any) -> boolean","title":"__le"},{"location":"doc/#__lt","text":"function Fraction. __lt ( lhs : any, rhs : any) -> boolean","title":"__lt"},{"location":"doc/#__mul_1","text":"( method ) Fraction : __mul ( other : any)","title":"__mul"},{"location":"doc/#__new_31","text":"( method ) Fraction : __new ( numerator : any, denominator : any)","title":"__new"},{"location":"doc/#__sub_1","text":"function Fraction. __sub ( lhs : any, rhs : any)","title":"__sub"},{"location":"doc/#__tostring_2","text":"( method ) Fraction : __tostring () -> unknown","title":"__tostring"},{"location":"doc/#__unm_1","text":"( method ) Fraction : __unm ()","title":"__unm"},{"location":"doc/#_serializationblacklist_31","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_31","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_31","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#denominator","text":"any","title":"denominator"},{"location":"doc/#deserialize_31","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_31","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_31","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_31","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_31","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#numerator","text":"any","title":"numerator"},{"location":"doc/#prettyprint_31","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_31","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_31","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_31","text":"boolean","title":"stripName"},{"location":"doc/#tonumber","text":"( method ) Fraction : tonumber () -> unknown","title":"tonumber"},{"location":"doc/#gamestate","text":"","title":"GameState"},{"location":"doc/#__call_32","text":"function","title":"__call"},{"location":"doc/#__index_32","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_32","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_32","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_32","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_32","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_32","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_6","text":"( method ) GameState : draw () Called on each draw.","title":"draw"},{"location":"doc/#extend_32","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getmanager_1","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"doc/#instanceof_32","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_32","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_2","text":"( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress.","title":"keypressed"},{"location":"doc/#load_1","text":"( method ) GameState : load () Called when the gamestate is started.","title":"load"},{"location":"doc/#manager_1","text":"GameStateManager","title":"manager"},{"location":"doc/#mixin_32","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousepressed_2","text":"( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"doc/#prettyprint_32","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_32","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_32","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_32","text":"boolean","title":"stripName"},{"location":"doc/#unload_1","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"doc/#update_6","text":"( method ) GameState : update ( dt : any) Called on each update.","title":"update"},{"location":"doc/#wheelmoved_2","text":"( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"wheelmoved"},{"location":"doc/#gamestatemanager","text":"","title":"GameStateManager"},{"location":"doc/#__call_33","text":"function","title":"__call"},{"location":"doc/#__index_33","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_33","text":"( method ) GameStateManager : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_33","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_33","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_33","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_33","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_7","text":"( method ) GameStateManager : draw () Called each draw, calls draw on top state in stack.","title":"draw"},{"location":"doc/#extend_33","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_33","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_33","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_3","text":"( method ) GameStateManager : keypressed ( key : any, scancode : any) Called on keypress, calls keypressed on top state in stack","title":"keypressed"},{"location":"doc/#mixin_33","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousemoved_2","text":"( method ) GameStateManager : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"doc/#mousepressed_3","text":"( method ) GameStateManager : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"doc/#mousereleased_5","text":"( method ) GameStateManager : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"doc/#pop_1","text":"( method ) GameStateManager : pop () -> unknown Pops the state from the top of the stack.","title":"pop"},{"location":"doc/#prettyprint_33","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#push_1","text":"( method ) GameStateManager : push ( state : GameState) @ param state \u2014 State to push to the top of the stack.","title":"push"},{"location":"doc/#replace","text":"( method ) GameStateManager : replace ( state : GameState) @ param state \u2014 Swap the top of the stack with this state.","title":"replace"},{"location":"doc/#serializationblacklist_33","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_33","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#statestack","text":"table","title":"stateStack"},{"location":"doc/#stripname_33","text":"boolean","title":"stripName"},{"location":"doc/#textinput_2","text":"( method ) GameStateManager : textinput ( text : any)","title":"textinput"},{"location":"doc/#update_7","text":"( method ) GameStateManager : update ( dt : any) Called each update, calls update on top state in stack.","title":"update"},{"location":"doc/#wheelmoved_3","text":"( method ) GameStateManager : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"doc/#grid","text":"","title":"Grid"},{"location":"doc/#__call_34","text":"function","title":"__call"},{"location":"doc/#__index_34","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_34","text":"( method ) Grid : __new ( w : integer, h : integer, initialValue : < T>) -> The : Grid<< T >> The constructor for the 'Grid' class. Initializes the grid with the specified dimensions and initial value. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param initialValue \u2014 The initial value to fill the grid with. @ return The \u2014 initialized grid.","title":"__new"},{"location":"doc/#_serializationblacklist_34","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_34","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_34","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#data","text":"any [] The data stored in the grid.","title":"data"},{"location":"doc/#deserialize_34","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#each","text":"( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell.","title":"each"},{"location":"doc/#extend_34","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fill_1","text":"( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with.","title":"fill"},{"location":"doc/#fromdata","text":"( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid.","title":"fromData"},{"location":"doc/#get_1","text":"( method ) Grid : get ( x : integer, y : integer) -> value : < T> ? Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if out of bounds.","title":"get"},{"location":"doc/#getindex_2","text":"( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds.","title":"getIndex"},{"location":"doc/#h_2","text":"integer The height of the grid.","title":"h"},{"location":"doc/#instanceof_34","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_34","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_34","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_34","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_34","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_34","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set_1","text":"( method ) Grid : set ( x : integer, y : integer, value : < T>) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"doc/#stripname_34","text":"boolean","title":"stripName"},{"location":"doc/#w_2","text":"integer The width of the grid.","title":"w"},{"location":"doc/#ibehavior","text":"","title":"IBehavior"},{"location":"doc/#__call_35","text":"function","title":"__call"},{"location":"doc/#__index_35","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_35","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_35","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_35","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#behaviorowner_6","text":"IBehavior ?","title":"behaviorOwner"},{"location":"doc/#classname_35","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_35","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_35","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_35","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_35","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_35","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_35","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#run_6","text":"fun ( self : any, level : Level, actor : Actor, controller : ControllerComponent): Action","title":"run"},{"location":"doc/#serializationblacklist_35","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_35","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_35","text":"boolean","title":"stripName"},{"location":"doc/#inkyelement","text":"","title":"Inky.Element"},{"location":"doc/#__getinternal_4","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_8","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_4","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_4","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_4","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_4","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_4","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_4","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_4","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_4","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_4","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_4","text":"Inky .Props|{ [ string ]: any }","title":"props"},{"location":"doc/#render_4","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_4","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_4","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#inkyelementdraw","text":"","title":"Inky.Element.Draw"},{"location":"doc/#inkyelementeffect","text":"","title":"Inky.Element.Effect"},{"location":"doc/#inkyelementinitializer","text":"","title":"Inky.Element.Initializer"},{"location":"doc/#inkyelementinternal","text":"","title":"Inky.Element.Internal"},{"location":"doc/#_depth","text":"number","title":"_depth"},{"location":"doc/#_draw","text":"fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )","title":"_draw"},{"location":"doc/#_effects","text":"{ [ string ]: fun ( element : Inky.Element): nil [] }","title":"_effects"},{"location":"doc/#_element","text":"Inky .Element","title":"_element"},{"location":"doc/#_h","text":"number","title":"_h"},{"location":"doc/#_initializer","text":"fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )","title":"_initializer"},{"location":"doc/#_isinitialized","text":"boolean","title":"_isInitialized"},{"location":"doc/#_oncallbacks","text":"{ [ string ]: fun ( element : Inky.Element, ... any ): nil [] }","title":"_onCallbacks"},{"location":"doc/#_ondisablecallbacks","text":"fun ( element : Inky.Element): nil []","title":"_onDisableCallbacks"},{"location":"doc/#_onenablecallbacks","text":"fun ( element : Inky.Element): nil []","title":"_onEnableCallbacks"},{"location":"doc/#_onpointercallbacks","text":"{ [ string ]: fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil [] }","title":"_onPointerCallbacks"},{"location":"doc/#_onpointerentercallbacks","text":"fun ( element : Inky.Element, pointer : Inky.Pointer): nil []","title":"_onPointerEnterCallbacks"},{"location":"doc/#_onpointerexitcallbacks","text":"fun ( element : Inky.Element, pointer : Inky.Pointer): nil []","title":"_onPointerExitCallbacks"},{"location":"doc/#_onpointerinhierarchycallbacks","text":"{ [ string ]: fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil [] }","title":"_onPointerInHierarchyCallbacks"},{"location":"doc/#_overlapcheck","text":"fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean","title":"_overlapCheck"},{"location":"doc/#_props","text":"Inky .Props|{ [ string ]: any }","title":"_props"},{"location":"doc/#_scene","text":"Inky .Scene","title":"_scene"},{"location":"doc/#_w","text":"number","title":"_w"},{"location":"doc/#_x","text":"number","title":"_x"},{"location":"doc/#_y","text":"number","title":"_y"},{"location":"doc/#constructor_5","text":"( method ) Inky .Element.Internal: constructor ( element : Inky.Element, scene : Inky.Scene, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#doespointpassboundingboxcheck","text":"( method ) Inky .Element.Internal: doesPointPassBoundingboxCheck ( px : number, py : number) -> boolean","title":"doesPointPassBoundingboxCheck"},{"location":"doc/#doespointpassoverlapcheck","text":"( method ) Inky .Element.Internal: doesPointPassOverlapCheck ( px : number, py : number) -> boolean","title":"doesPointPassOverlapCheck"},{"location":"doc/#doesviewdiffer","text":"( method ) Inky .Element.Internal: doesViewDiffer ( x : number, y : number, w : number, h : number) -> boolean","title":"doesViewDiffer"},{"location":"doc/#getdepth","text":"( method ) Inky .Element.Internal: getDepth () -> number","title":"getDepth"},{"location":"doc/#getprops","text":"( method ) Inky .Element.Internal: getProps () -> Inky .Props|{ [ string ]: any }","title":"getProps"},{"location":"doc/#getview_5","text":"( method ) Inky .Element.Internal: getView () -> x : number 2. y : number 3. w : number 4. h : number","title":"getView"},{"location":"doc/#initialize_5","text":"( method ) Inky .Element.Internal: initialize ()","title":"initialize"},{"location":"doc/#isinitialized","text":"( method ) Inky .Element.Internal: isInitialized () -> boolean","title":"isInitialized"},{"location":"doc/#on_5","text":"( method ) Inky .Element.Internal: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element.Internal","title":"on"},{"location":"doc/#ondisable_5","text":"( method ) Inky .Element.Internal: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element.Internal","title":"onDisable"},{"location":"doc/#onenable_5","text":"( method ) Inky .Element.Internal: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element.Internal","title":"onEnable"},{"location":"doc/#onpointer_5","text":"( method ) Inky .Element.Internal: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element.Internal","title":"onPointer"},{"location":"doc/#onpointerenter_5","text":"( method ) Inky .Element.Internal: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element.Internal","title":"onPointerEnter"},{"location":"doc/#onpointerexit_5","text":"( method ) Inky .Element.Internal: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element.Internal","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_5","text":"( method ) Inky .Element.Internal: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element.Internal","title":"onPointerInHierarchy"},{"location":"doc/#raisedisable","text":"( method ) Inky .Element.Internal: raiseDisable () -> accepted : boolean","title":"raiseDisable"},{"location":"doc/#raiseenable","text":"( method ) Inky .Element.Internal: raiseEnable () -> accepted : boolean","title":"raiseEnable"},{"location":"doc/#raiseon","text":"( method ) Inky .Element.Internal: raiseOn ( eventName : string, ... any ) -> accepted : boolean","title":"raiseOn"},{"location":"doc/#raiseonpointer","text":"( method ) Inky .Element.Internal: raiseOnPointer ( eventName : string, pointer : Inky.Pointer, ... any ) -> accepted : boolean 2. consumed : boolean","title":"raiseOnPointer"},{"location":"doc/#raiseonpointerinhierarchy","text":"( method ) Inky .Element.Internal: raiseOnPointerInHierarchy ( eventName : string, pointer : Inky.Pointer, ... any ) -> accepted : boolean","title":"raiseOnPointerInHierarchy"},{"location":"doc/#raisepointerenter","text":"( method ) Inky .Element.Internal: raisePointerEnter ( pointer : Inky.Pointer) -> accepted : boolean","title":"raisePointerEnter"},{"location":"doc/#raisepointerexit","text":"( method ) Inky .Element.Internal: raisePointerExit ( pointer : Inky.Pointer) -> accepted : boolean","title":"raisePointerExit"},{"location":"doc/#render_5","text":"( method ) Inky .Element.Internal: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element.Internal","title":"render"},{"location":"doc/#renderintoscene","text":"( method ) Inky .Element.Internal: renderIntoScene ( scene : Inky.Scene, x : number, y : number, w : number, h : number, depth : number)","title":"renderIntoScene"},{"location":"doc/#setview","text":"( method ) Inky .Element.Internal: setView ( x : number, y : number, w : number, h : number) -> Inky .Element.Internal","title":"setView"},{"location":"doc/#useeffect_5","text":"( method ) Inky .Element.Internal: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element.Internal","title":"useEffect"},{"location":"doc/#useoverlapcheck_5","text":"( method ) Inky .Element.Internal: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element.Internal","title":"useOverlapCheck"},{"location":"doc/#inkyelementoncallback","text":"","title":"Inky.Element.OnCallback"},{"location":"doc/#inkyelementondisablecallback","text":"","title":"Inky.Element.OnDisableCallback"},{"location":"doc/#inkyelementonenablecallback","text":"","title":"Inky.Element.OnEnableCallback"},{"location":"doc/#inkyelementonpointercallback","text":"","title":"Inky.Element.OnPointerCallback"},{"location":"doc/#inkyelementonpointerentercallback","text":"","title":"Inky.Element.OnPointerEnterCallback"},{"location":"doc/#inkyelementonpointerexitcallback","text":"","title":"Inky.Element.OnPointerExitCallback"},{"location":"doc/#inkyelementonpointerinhierarchycallback","text":"","title":"Inky.Element.OnPointerInHierarchyCallback"},{"location":"doc/#inkyelementoverlappredicate","text":"","title":"Inky.Element.OverlapPredicate"},{"location":"doc/#inkypointer","text":"","title":"Inky.Pointer"},{"location":"doc/#__getinternal_5","text":"( method ) Inky .Pointer: __getInternal () -> Inky .Pointer.Internal Get the internal representation of the Pointer For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_9","text":"Inky .Pointer.Internal","title":"_internal"},{"location":"doc/#captureelement","text":"( method ) Inky .Pointer: captureElement ( element : Inky.Element, shouldCapture ? : boolean ) -> Inky .Pointer Capture a Element, meaning all raised events will be able to be sent to it, even if it's not being hovered \\ See: * Inky.Element.onPointer * Inky.Element.onPointerInHierarchy","title":"captureElement"},{"location":"doc/#constructor_6","text":"( method ) Inky .Pointer: constructor ( scene : Inky.Scene)","title":"constructor"},{"location":"doc/#doescaptureelement","text":"( method ) Inky .Pointer: doesCaptureElement ( element : Inky.Element) -> boolean Get if the Pointer captures the Element","title":"doesCaptureElement"},{"location":"doc/#doesoverlapanyelement","text":"( method ) Inky .Pointer: doesOverlapAnyElement () -> boolean Get if the Pointer overlaps any Elements","title":"doesOverlapAnyElement"},{"location":"doc/#doesoverlapelement","text":"( method ) Inky .Pointer: doesOverlapElement ( element : Inky.Element) -> boolean Gets if the Pointer overlaps the Element","title":"doesOverlapElement"},{"location":"doc/#getmode","text":"( method ) Inky .Pointer: getMode () -> Inky .PointerMode Gets the mode of the Pointer","title":"getMode"},{"location":"doc/#getposition_2","text":"( method ) Inky .Pointer: getPosition () -> x : number ? 2. y : number ? Gets the position of the Pointer","title":"getPosition"},{"location":"doc/#gettarget_1","text":"( method ) Inky .Pointer: getTarget () -> ( Inky .Element) ? Gets the target of the Pointer","title":"getTarget"},{"location":"doc/#isactive_1","text":"( method ) Inky .Pointer: isActive () -> boolean Gets if the Pointer is active","title":"isActive"},{"location":"doc/#raise","text":"( method ) Inky .Pointer: raise ( eventName : string, ... any ) -> boolean Raise a Pointer event, to be caught by Elements \\ See: * Inky.Element.onPointer * Inky.Element.onPointerInHierarchy","title":"raise"},{"location":"doc/#setactive","text":"( method ) Inky .Pointer: setActive ( active : boolean) -> Inky .Pointer Sets if the Pointer is active, to potentially enter or exit Elements \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback","title":"setActive"},{"location":"doc/#setposition_1","text":"( method ) Inky .Pointer: setPosition ( x : number, y : number) -> Inky .Pointer Sets the position of the Pointer, to potentially enter or exit Elements \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback","title":"setPosition"},{"location":"doc/#settarget","text":"( method ) Inky .Pointer: setTarget ( target : Inky.Element) -> Inky .Pointer Sets the target of the Pointer, to potentially enter or exit Elements A 'target' Pointer is useful for keyboard navigation, or invoking events on Elements programmatically \\ See: * Inky.Element.OnPointerEnterCallback * Inky.Element.OnPointerExitCallback","title":"setTarget"},{"location":"doc/#inkypointerinternal","text":"","title":"Inky.Pointer.Internal"},{"location":"doc/#_active","text":"boolean","title":"_active"},{"location":"doc/#_capturedelements","text":"Inky .HashSet","title":"_capturedElements"},{"location":"doc/#_mode","text":"Inky .PointerMode","title":"_mode"},{"location":"doc/#_overlappingelements","text":"Inky .HashSet","title":"_overlappingElements"},{"location":"doc/#_pointer","text":"( Inky .Pointer) ?","title":"_pointer"},{"location":"doc/#_scene_1","text":"( Inky .Scene) ?","title":"_scene"},{"location":"doc/#_target","text":"( Inky .Element) ?","title":"_target"},{"location":"doc/#_x_1","text":"number ?","title":"_x"},{"location":"doc/#_y_1","text":"number ?","title":"_y"},{"location":"doc/#captureelement_1","text":"( method ) Inky .Pointer.Internal: captureElement ( element : Inky.Element, shouldCapture ? : boolean ) -> Inky .Pointer.Internal","title":"captureElement"},{"location":"doc/#constructor_7","text":"( method ) Inky .Pointer.Internal: constructor ( pointer : Inky.Pointer, scene : Inky.Scene)","title":"constructor"},{"location":"doc/#doescaptureelement_1","text":"( method ) Inky .Pointer.Internal: doesCaptureElement ( element : Inky.Element) -> boolean","title":"doesCaptureElement"},{"location":"doc/#doesoverlapanyelement_1","text":"( method ) Inky .Pointer.Internal: doesOverlapAnyElement () -> boolean","title":"doesOverlapAnyElement"},{"location":"doc/#doesoverlapelement_1","text":"( method ) Inky .Pointer.Internal: doesOverlapElement ( element : Inky.Element) -> boolean","title":"doesOverlapElement"},{"location":"doc/#getmode_1","text":"( method ) Inky .Pointer.Internal: getMode () -> Inky .PointerMode","title":"getMode"},{"location":"doc/#getposition_3","text":"( method ) Inky .Pointer.Internal: getPosition () -> x : number ? 2. y : number ?","title":"getPosition"},{"location":"doc/#gettarget_2","text":"( method ) Inky .Pointer.Internal: getTarget () -> ( Inky .Element) ?","title":"getTarget"},{"location":"doc/#isactive_2","text":"( method ) Inky .Pointer.Internal: isActive () -> boolean","title":"isActive"},{"location":"doc/#raise_1","text":"( method ) Inky .Pointer.Internal: raise ( eventName : string, ... any ) -> boolean","title":"raise"},{"location":"doc/#setactive_1","text":"( method ) Inky .Pointer.Internal: setActive ( active : boolean) -> Inky .Pointer.Internal","title":"setActive"},{"location":"doc/#setoverlappingelements","text":"( method ) Inky .Pointer.Internal: setOverlappingElements ( overlappingElements ? : Inky .HashSet)","title":"setOverlappingElements"},{"location":"doc/#setposition_2","text":"( method ) Inky .Pointer.Internal: setPosition ( x : number, y : number) -> Inky .Pointer.Internal","title":"setPosition"},{"location":"doc/#settarget_1","text":"( method ) Inky .Pointer.Internal: setTarget ( target : Inky.Element) -> Inky .Pointer.Internal","title":"setTarget"},{"location":"doc/#inkyprops","text":"","title":"Inky.Props"},{"location":"doc/#_internal_10","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#inkypropsinternal","text":"","title":"Inky.Props.Internal"},{"location":"doc/#changedvalues","text":"Inky .HashSet","title":"changedValues"},{"location":"doc/#constructor_8","text":"( method ) Inky .Props.Internal: constructor ()","title":"constructor"},{"location":"doc/#values","text":"{ [ string ]: any }","title":"values"},{"location":"doc/#inkyscene","text":"","title":"Inky.Scene"},{"location":"doc/#__getinternal_6","text":"( method ) Inky .Scene: __getInternal () -> Inky .Scene.Internal Get the internal representation of the Scene For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_11","text":"Inky .Scene.Internal","title":"_internal"},{"location":"doc/#beginframe","text":"( method ) Inky .Scene: beginFrame () -> Inky .Scene Begin a frame to render Elements in Note: A frame must have been begun before Elements can be drawn \\ See: Inky.Element.render","title":"beginFrame"},{"location":"doc/#constructor_9","text":"( method ) Inky .Scene: constructor ( spatialHashSize ? : integer )","title":"constructor"},{"location":"doc/#didbeginframe","text":"( method ) Inky .Scene: didBeginFrame () -> boolean Get if frame did begin","title":"didBeginFrame"},{"location":"doc/#finishframe","text":"( method ) Inky .Scene: finishFrame () -> Inky .Scene End a frame to render Elements in A frame must have been finished before Elements can be acted on","title":"finishFrame"},{"location":"doc/#raise_2","text":"( method ) Inky .Scene: raise ( eventName : string, ... unknown ) -> Inky .Scene Raise a Scene event, to be caught by Elements \\ See: Inky.Element.OnCallback","title":"raise"},{"location":"doc/#inkysceneinternal","text":"","title":"Inky.Scene.Internal"},{"location":"doc/#_beganframe","text":"boolean","title":"_beganFrame"},{"location":"doc/#_beginelement","text":"( method ) Inky .Scene.Internal: _beginElement ( element : Inky.Element, x : any, y : any, w : any, h : any) -> Inky .Scene.Internal","title":"_beginElement"},{"location":"doc/#_elements","text":"Inky .HashSet","title":"_elements"},{"location":"doc/#_elementschanged","text":"boolean","title":"_elementsChanged"},{"location":"doc/#_finishelement","text":"( method ) Inky .Scene.Internal: _finishElement ( element : Inky.Element) -> Inky .Scene.Internal","title":"_finishElement"},{"location":"doc/#_parentstack","text":"Inky .Element[]","title":"_parentStack"},{"location":"doc/#_parents","text":"{ [ Inky .Element]: Inky .Element }","title":"_parents"},{"location":"doc/#_pointers","text":"Inky .HashSet","title":"_pointers"},{"location":"doc/#_resolvepointeroverlappingelements","text":"( method ) Inky .Scene.Internal: _resolvePointerOverlappingElements ( pointer : Inky.Pointer) -> Inky .Scene.Internal| nil","title":"_resolvePointerOverlappingElements"},{"location":"doc/#_scene_2","text":"Inky .Scene","title":"_scene"},{"location":"doc/#_spatialhash","text":"Inky .SpatialHash","title":"_spatialHash"},{"location":"doc/#_suppliedelements","text":"Inky .HashSet","title":"_suppliedElements"},{"location":"doc/#addpointer","text":"( method ) Inky .Scene.Internal: addPointer ( pointer : Inky.Pointer) -> Inky .Scene.Internal","title":"addPointer"},{"location":"doc/#beginframe_1","text":"( method ) Inky .Scene.Internal: beginFrame () -> Inky .Scene.Internal","title":"beginFrame"},{"location":"doc/#constructor_10","text":"( method ) Inky .Scene.Internal: constructor ( scene : Inky.Scene, spatialHashSize ? : integer )","title":"constructor"},{"location":"doc/#didbeginframe_1","text":"( method ) Inky .Scene.Internal: didBeginFrame () -> boolean Get if frame did begin","title":"didBeginFrame"},{"location":"doc/#finishframe_1","text":"( method ) Inky .Scene.Internal: finishFrame () -> Inky .Scene.Internal","title":"finishFrame"},{"location":"doc/#getelementparent","text":"( method ) Inky .Scene.Internal: getElementParent ( element : Inky.Element) -> ( Inky .Element) ?","title":"getElementParent"},{"location":"doc/#onpointeractivechanged","text":"( method ) Inky .Scene.Internal: onPointerActiveChanged ( pointer : Inky.Pointer)","title":"onPointerActiveChanged"},{"location":"doc/#onpointerpositionchanged","text":"( method ) Inky .Scene.Internal: onPointerPositionChanged ( pointer : Inky.Pointer)","title":"onPointerPositionChanged"},{"location":"doc/#onpointertargetchanged","text":"( method ) Inky .Scene.Internal: onPointerTargetChanged ( pointer : Inky.Pointer)","title":"onPointerTargetChanged"},{"location":"doc/#raise_3","text":"( method ) Inky .Scene.Internal: raise ( eventName : string, ... unknown ) Raise an event","title":"raise"},{"location":"doc/#render_6","text":"( method ) Inky .Scene.Internal: render ( element : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )","title":"render"},{"location":"doc/#inkyspatialhash","text":"","title":"Inky.SpatialHash"},{"location":"doc/#_cells","text":"Inky .HashSet[]","title":"_cells"},{"location":"doc/#_elements_1","text":"{ [ Inky .Scene]: Inky .HashSet[] }","title":"_elements"},{"location":"doc/#_hash","text":"( method ) Inky .SpatialHash: _hash ( x : integer, y : integer) -> hash : number","title":"_hash"},{"location":"doc/#_inversehash","text":"( method ) Inky .SpatialHash: _inverseHash ( hash : integer) -> x : integer 2. y : integer","title":"_inverseHash"},{"location":"doc/#_size","text":"integer","title":"_size"},{"location":"doc/#_tocell","text":"( method ) Inky .SpatialHash: _toCell ( v : integer) -> cellV : integer","title":"_toCell"},{"location":"doc/#_tocellbounds","text":"( method ) Inky .SpatialHash: _toCellBounds ( x : number, y : number, w : number, h : number) -> topLeftCellX : integer 2. topLeftCellY : integer 3. bottomRightCellX : integer 4. bottomRightCellY : integer","title":"_toCellBounds"},{"location":"doc/#add","text":"( method ) Inky .SpatialHash: add ( element : Inky.Element) -> Inky .SpatialHash","title":"add"},{"location":"doc/#constructor_11","text":"( method ) Inky .SpatialHash: constructor ( size : any)","title":"constructor"},{"location":"doc/#getelementsatpoint","text":"( method ) Inky .SpatialHash: getElementsAtPoint ( x : integer, y : integer) -> Inky .HashSet","title":"getElementsAtPoint"},{"location":"doc/#move_1","text":"( method ) Inky .SpatialHash: move ( element : Inky.Element) -> Inky .SpatialHash","title":"move"},{"location":"doc/#remove","text":"( method ) Inky .SpatialHash: remove ( element : Inky.Element) -> Inky .SpatialHash","title":"remove"},{"location":"doc/#inkyspatialhashcell","text":"","title":"Inky.SpatialHash.Cell"},{"location":"doc/#keybinding","text":"","title":"Keybinding"},{"location":"doc/#__call_36","text":"function","title":"__call"},{"location":"doc/#__index_36","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_36","text":"( method ) Keybinding : __new ( schema : table) Constructor for the Keybinding class. Initializes the keymap and modes with a predefined schema and defaults. @ param schema \u2014 A list of predefined keybindings with their schema and defaults.","title":"__new"},{"location":"doc/#_serializationblacklist_36","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_36","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_36","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_2","text":"( method ) Keybinding : clear ( mode : string| nil ) Resets keybindings for a specific mode or all modes to their defaults. @ param mode \u2014 The mode to reset. If nil, resets all modes.","title":"clear"},{"location":"doc/#deserialize_36","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_36","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_36","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_36","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keymap","text":"table Stores modifications","title":"keymap"},{"location":"doc/#keypressed_4","text":"( method ) Keybinding : keypressed ( key : string, mode : string| nil ) -> The : string| nil Handles key press events and retrieves the associated action if a binding exists. Falls back to the schema if no modification is found. @ param key \u2014 The key that was pressed. @ param mode \u2014 The mode to use for the keybinding. @ return The \u2014 action associated with the key, or nil if no binding exists.","title":"keypressed"},{"location":"doc/#mixin_36","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_36","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#schema","text":"table Holds the schema for all modes, including \"default\"","title":"schema"},{"location":"doc/#serializationblacklist_36","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_36","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set_2","text":"( method ) Keybinding : set ( key : string, action : string, mode : string| nil ) Sets or updates a keybinding, validating it exists in the schema. @ param key \u2014 The key to bind. @ param action \u2014 The new action to associate with the key. @ param mode \u2014 An optional mode for the binding (defaults to \"default\").","title":"set"},{"location":"doc/#stripname_36","text":"boolean","title":"stripName"},{"location":"doc/#level","text":"","title":"Level"},{"location":"doc/#rng","text":"RNG The level's local random number generator, use this for randomness within the level like attack rolls.","title":"RNG"},{"location":"doc/#__call_37","text":"function","title":"__call"},{"location":"doc/#__index_37","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_37","text":"( method ) Level : __new ( map : Map, actors : [ Actor], systems : [ System], scheduler : any, seed : any) Constructor for the Level class. @ param map \u2014 The map to use for the level. @ param actors \u2014 A list of actors to","title":"__new"},{"location":"doc/#_serializationblacklist_37","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actorstorage_1","text":"ActorStorage The main actor storage containing all of the level's actors.","title":"actorStorage"},{"location":"doc/#addactor_1","text":"( method ) Level : addActor ( actor : Actor) Adds an actor to the level. Handles updating the component cache and inserting the actor into the sparse map. It will also add the actor to the scheduler if it has a controller. @ param actor \u2014 The actor to add.","title":"addActor"},{"location":"doc/#addcomponent","text":"( method ) Level : addComponent ( actor : Actor, component : Component) Adds a component to an actor. It handles updating the component cache and the opacity cache. You can do this manually, but it's easier to use this function. @ param actor \u2014 The actor to add the component to. @ param component \u2014 The component to add.","title":"addComponent"},{"location":"doc/#addsystem","text":"( method ) Level : addSystem ( system : System) Attaches a system to the level. This function will error if the system doesn't have a name or if a system with the same name already exists, or if the system has a requirement that hasn't been attached yet. @ param system \u2014 The system to add.","title":"addSystem"},{"location":"doc/#adopt_37","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_37","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#computefov","text":"( method ) Level : computeFOV ( origin : any, maxDepth : any, callback : any)","title":"computeFOV"},{"location":"doc/#debug","text":"boolean","title":"debug"},{"location":"doc/#debugyield","text":"( method ) Level : debugYield ( stringMessage : any)","title":"debugYield"},{"location":"doc/#decision_1","text":"ActionDecision Used during deserialization to resume.","title":"decision"},{"location":"doc/#deserialize_37","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#eachactor_1","text":"( method ) Level : eachActor (... Component ) -> An : function This method returns an iterator that will return all actors in the level that have the given components. If no components are given it iterate over all actors. A thin wrapper over the inner ActorStorage. @ param ... \u2014 The components to filter by. @ return An \u2014 iterator that returns the next actor that matches the given components.","title":"eachActor"},{"location":"doc/#eachactorat_1","text":"( method ) Level : eachActorAt ( x : number, y : number) -> iter : function Returns an iterator that will return all actors at the given position. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return iter \u2014 An iterator that returns the next actor at the given position.","title":"eachActorAt"},{"location":"doc/#eachcell","text":"( method ) Level : eachCell () -> fun (): number , number , < T >","title":"eachCell"},{"location":"doc/#extend_37","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#findpath","text":"( method ) Level : findPath ( startPos : Vector2, goalPos : Vector2, minDistance : any, mask : any) -> Path | nil Finds a path from startpos to endpos","title":"findPath"},{"location":"doc/#getaoe","text":"( method ) Level : getAOE ( type : \"box\" | \"fov\" , position : Vector2, range : number) -> actors : table ? 2. fov : table ? Returns a list of all actors that are within the given range of the given position. The type parameter determines the type of range to use. Currently only \"fov\" and \"box\" are supported. The fov type uses a field of view algorithm to determine what actors are visible from the given position. The box type uses a simple box around the given position. @ param type \u2014 The type of range to use. @ param position \u2014 The position to check from. @ param range \u2014 The range to check. @ return actors @ return fov \u2014 A list of actors within the given range. type : | \"box\" | \"fov\"","title":"getAOE"},{"location":"doc/#getactorbytype_1","text":"( method ) Level : getActorByType ( prototype : Actor) -> The : Actor| nil Returns the first actor that extends the given prototype, or nil if no actor is found. Useful for one offs like stairs in some games. @ param prototype \u2014 The prototype to check for. @ return The \u2014 first actor that extends the given prototype, or nil if no actor is found.","title":"getActorByType"},{"location":"doc/#getactorcontroller","text":"( method ) Level : getActorController ( actor : Actor) -> controller : ControllerComponent Gets the actor's controller. This is a utility function that checks the actor's conditions for an override controller and returns it if it exists. Otherwise it returns the actor's normal controller. @ param actor \u2014 The actor to get the controller for. @ return controller \u2014 The actor's controller.","title":"getActorController"},{"location":"doc/#getactorsat_1","text":"( method ) Level : getActorsAt ( x : number, y : number) -> A : table Returns a list of all actors at the given position. A thin wrapper over the inner ActorStorage. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return A \u2014 list of all actors at the given position.","title":"getActorsAt"},{"location":"doc/#getcell","text":"( method ) Level : getCell ( x : number, y : number) -> The : Cell Gets the cell at the given position. @ param x \u2014 The x component of the position to get. @ param y \u2014 The y component of the position to get. @ return The \u2014 cell at the given position.","title":"getCell"},{"location":"doc/#getcellopaque","text":"( method ) Level : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the given position is opaque, false otherwise. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is opaque, false otherwise.","title":"getCellOpaque"},{"location":"doc/#getcellpassable","text":"( method ) Level : getCellPassable ( x : number, y : number, mask : integer) -> True : boolean Returns true if the cell at the given position is passable, false otherwise. Considers actors in the sparse map as well as the cell's passable property. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is passable, false otherwise.","title":"getCellPassable"},{"location":"doc/#getid_1","text":"( method ) Level : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the Level but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found.","title":"getID"},{"location":"doc/#getopacitycache","text":"( method ) Level : getOpacityCache () -> map : BooleanBuffer Returns the opacity cache for the level. This generally shouldn't be used outside of systems that need to know about opacity. @ return map \u2014 The opacity cache for the level.","title":"getOpacityCache"},{"location":"doc/#getsystem","text":"( method ) Level : getSystem ( className : string) -> system : System ? Gets a system by name. @ param className \u2014 The name of the system to get. @ return system \u2014 The system with the given name.","title":"getSystem"},{"location":"doc/#hasactor_1","text":"( method ) Level : hasActor ( actor : Actor) -> hasActor : boolean Returns true if the level contains the given actor, false otherwise. A thin wrapper over the inner ActorStorage. @ param actor \u2014 The actor to check for. @ return hasActor \u2014 True if the level contains the given actor, false otherwise.","title":"hasActor"},{"location":"doc/#inbounds","text":"( method ) Level : inBounds ( x : integer, y : integer) -> boolean Is there a cell at this x, y? Part of the interface with MapBuilder @ param x \u2014 The x component to check if in bounds.","title":"inBounds"},{"location":"doc/#initialize_6","text":"( method ) Level : initialize ( actors : [ Actor], systems : [ System])","title":"initialize"},{"location":"doc/#initializeopacitycache","text":"( method ) Level : initializeOpacityCache () Initialize the opacity cache. This should be called after the level is created and before the game loop starts. It will initialize the opacity cache with the cell opacity cache. This is handled automatically by the Level class.","title":"initializeOpacityCache"},{"location":"doc/#initializepassabilitycache","text":"( method ) Level : initializePassabilityCache () Initialize the passable cache. This should be called after the level is created and before the game loop starts. It will initialize the passable cache with the cell passable cache. This is handled automatically by the Level class.","title":"initializePassabilityCache"},{"location":"doc/#instanceof_37","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_37","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#map","text":"Map The level's map.","title":"map"},{"location":"doc/#mixin_37","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#moveactor","text":"( method ) Level : moveActor ( actor : Actor, pos : Vector2, skipSparseMap : boolean) Moves an actor to the given position. This function doesn't do any checking for overlaps or collisions. It's used by the moveActorChecked function, you should generally not invoke this yourself using moveActorChecked instead. @ param actor \u2014 The actor to move. @ param pos \u2014 The position to move the actor to. @ param skipSparseMap \u2014 If true the sparse map won't be updated.","title":"moveActor"},{"location":"doc/#ondeserialize_1","text":"( method ) Level : onDeserialize ()","title":"onDeserialize"},{"location":"doc/#opacitycache","text":"BooleanBuffer A cache of cell opacity || actor opacity for each cell. Used to speed up fov/lighting calculations.","title":"opacityCache"},{"location":"doc/#passablecache","text":"BitmaskBuffer A cache of cell passability || actor passability for each cell. Used to speed up pathfinding.","title":"passableCache"},{"location":"doc/#performaction","text":"( method ) Level : performAction ( action : Action, silent ? : boolean ) Executes an Action, updating the level's state and triggering any events through the systems attached to the Actor or Level respectively. It also updates the 'Scheduler' if the action isn't a reaction or free action. Lastly, it calls the 'onAction' method on the 'Cell' that the 'Actor' is standing on. @ param action \u2014 The action to perform. @ param silent \u2014 If true this action emits no events.","title":"performAction"},{"location":"doc/#prettyprint_37","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_3","text":"( method ) Level : removeActor ( actor : Actor) Removes an actor from the level. Handles updating the component cache and removing the actor from the sparse map. It will also remove the actor from the scheduler if it has a controller. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"doc/#removecomponent","text":"( method ) Level : removeComponent ( actor : Actor, component : Component) Removes a component from an actor. It handles updating the component cache and the opacity cache. @ param actor \u2014 The actor to remove the component from. @ param component \u2014 The component to remove.","title":"removeComponent"},{"location":"doc/#run_7","text":"( method ) Level : run () Initializes the level, Update is the main game loop for a level. It's a coroutine that yields back to the main thread when it needs to wait for input from the player. This function is the heart of the game loop.","title":"run"},{"location":"doc/#scheduler","text":"Scheduler The main scheduler driving the loop of the game.","title":"scheduler"},{"location":"doc/#serializationblacklist_37","text":"table","title":"serializationBlacklist"},{"location":"doc/#serialize_37","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setcell","text":"( method ) Level : setCell ( x : number, y : number, cell : Cell) Sets the cell at the given position to the given cell. @ param x \u2014 The x component of the position to set. @ param y \u2014 The y component of the position to set. @ param cell \u2014 The cell to set.","title":"setCell"},{"location":"doc/#sparsemapcallback","text":"( method ) Level : sparseMapCallback () -> function","title":"sparseMapCallback"},{"location":"doc/#step","text":"( method ) Level : step ()","title":"step"},{"location":"doc/#stripname_37","text":"boolean","title":"stripName"},{"location":"doc/#systemmanager","text":"SystemManager A table containing all of the systems active in the level, set in the constructor.","title":"systemManager"},{"location":"doc/#trigger","text":"( method ) Level : trigger ( eventName : any, ... any )","title":"trigger"},{"location":"doc/#updatecaches","text":"( method ) Level : updateCaches ( x : any, y : any)","title":"updateCaches"},{"location":"doc/#updateopacitycache","text":"( method ) Level : updateOpacityCache ( x : number, y : number) Updates the opacity cache at the given position. This should be called whenever an actor moves or a cell's opacity changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update.","title":"updateOpacityCache"},{"location":"doc/#updatepassabilitycache","text":"( method ) Level : updatePassabilityCache ( x : number, y : number) Updates the passability cache at the given position. This should be called whenever an actor moves or a cell's passability changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update.","title":"updatePassabilityCache"},{"location":"doc/#yield","text":"( method ) Level : yield ( message : Message) -> Decision | nil Yields to the main 'thread', a coroutine in this case. This is called in run, and a few systems. Any time you want the interface to update you should call this. Avoid calling coroutine.yield directly, as this function will call the onYield method on all systems.","title":"yield"},{"location":"doc/#levelstate","text":"","title":"LevelState"},{"location":"doc/#__call_38","text":"function","title":"__call"},{"location":"doc/#__index_38","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_38","text":"( method ) LevelState : __new ( level : Level, display : Display, actionHandlers : table< fun (): fun ()>) Constructs a new LevelState. Sets up the game loop, initializes decision handlers, and binds custom callbacks for drawing. @ param level \u2014 The level object to be managed by this state. @ param display \u2014 The display object for rendering the level. @ param actionHandlers \u2014 A table of callback generators for handling actions.","title":"__new"},{"location":"doc/#_serializationblacklist_38","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actionhandlers","text":"table < fun (): fun ()>","title":"actionHandlers"},{"location":"doc/#adopt_38","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_38","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#decision_2","text":"Decision The current decision being processed, if any.","title":"decision"},{"location":"doc/#deserialize_38","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#display_4","text":"Display The display object used for rendering.","title":"display"},{"location":"doc/#draw_8","text":"( method ) LevelState : draw () Draws the current state of the level, including the perspective of relevant actors.","title":"draw"},{"location":"doc/#drawbeforecells","text":"( method ) LevelState : drawBeforeCells ( display : Display) Draws content before rendering cells. Override in subclasses for custom behavior. @ param display \u2014 The display object used for drawing.","title":"drawBeforeCells"},{"location":"doc/#extend_38","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#geometer","text":"EditorState An editor state for debugging or managing geometry.","title":"geometer"},{"location":"doc/#getmanager_2","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"doc/#handleactionmessage","text":"( method ) LevelState : handleActionMessage ( message : ActionMessage) Handles an action message by determining visibility and setting display overrides. @ param message \u2014 The action message to handle.","title":"handleActionMessage"},{"location":"doc/#handlemessage","text":"( method ) LevelState : handleMessage ( message : any) Handles incoming messages from the coroutine. Processes decisions, action messages, and debug messages as appropriate. @ param message \u2014 The message to handle.","title":"handleMessage"},{"location":"doc/#instanceof_38","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_38","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_5","text":"( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress.","title":"keypressed"},{"location":"doc/#level_1","text":"Level The level object representing the game environment.","title":"level"},{"location":"doc/#load_2","text":"( method ) GameState : load () Called when the gamestate is started.","title":"load"},{"location":"doc/#manager_2","text":"GameStateManager","title":"manager"},{"location":"doc/#message_2","text":"ActionMessage The most recent action message.","title":"message"},{"location":"doc/#mixin_38","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousepressed_4","text":"( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"doc/#prettyprint_38","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_38","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_38","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#shouldadvance","text":"( method ) LevelState : shouldAdvance () -> shouldAdvance : boolean| nil Determines if the coroutine should proceed to the next step. @ return shouldAdvance \u2014 True if the coroutine should advance; false otherwise.","title":"shouldAdvance"},{"location":"doc/#stripname_38","text":"boolean","title":"stripName"},{"location":"doc/#time_1","text":"integer","title":"time"},{"location":"doc/#unload_2","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"doc/#update_8","text":"( method ) LevelState : update ( dt : number) Updates the state of the level. Advances the coroutine and processes decisions or messages if necessary. @ param dt \u2014 The time delta since the last update.","title":"update"},{"location":"doc/#updatecoroutine","text":"thread","title":"updateCoroutine"},{"location":"doc/#updatedecision","text":"( method ) LevelState : updateDecision ( dt : number, actor : Actor, decision : ActionDecision) This method is invoked each update when a decision exists and its response is not yet valid.. Override this method in subclasses to implement custom decision-handling logic. @ param dt \u2014 The time delta since the last update. @ param actor \u2014 The actor responsible for making the decision. @ param decision \u2014 The decision being updated.","title":"updateDecision"},{"location":"doc/#wheelmoved_4","text":"( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"wheelmoved"},{"location":"doc/#linemodification","text":"","title":"LineModification"},{"location":"doc/#__call_39","text":"function","title":"__call"},{"location":"doc/#__index_39","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_39","text":"( method ) LineModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2)","title":"__new"},{"location":"doc/#_serializationblacklist_39","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_39","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bottomright_2","text":"Vector2","title":"bottomright"},{"location":"doc/#classname_39","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_39","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_3","text":"( method ) LineModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"doc/#extend_39","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_39","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_39","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_39","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_2","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_2","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_3","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed_2","text":"Actor | Cell []| nil","title":"placed"},{"location":"doc/#prettyprint_39","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_4","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_2","text":"table","title":"removed"},{"location":"doc/#replaced_2","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_39","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_39","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_39","text":"boolean","title":"stripName"},{"location":"doc/#topleft_2","text":"Vector2","title":"topleft"},{"location":"doc/#undo_3","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#linetool","text":"","title":"LineTool"},{"location":"doc/#__call_40","text":"function","title":"__call"},{"location":"doc/#__index_40","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_40","text":"( method ) LineTool : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_40","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_40","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_40","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_40","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_9","text":"( method ) LineTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell_3","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_40","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getdrawable_3","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_40","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_40","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_40","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_3","text":"( method ) LineTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_6","text":"( method ) LineTool : mousereleased ( editor : Editor)","title":"mousereleased"},{"location":"doc/#origin_1","text":"Vector2","title":"origin"},{"location":"doc/#overridecelldraw_3","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_40","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_40","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_40","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_40","text":"boolean","title":"stripName"},{"location":"doc/#to","text":"Vector2","title":"to"},{"location":"doc/#update_9","text":"( method ) LineTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"doc/#luals","text":"","title":"LuaLS"},{"location":"doc/#map_1","text":"","title":"Map"},{"location":"doc/#__call_41","text":"function","title":"__call"},{"location":"doc/#__index_41","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_41","text":"( method ) Map : __new ( w : number, h : number, initialValue : Cell) The constructor for the 'Map' class. Initializes the map with the specified dimensions and initial value, and sets up the opacity caches. @ param w \u2014 The width of the map. @ param h \u2014 The height of the map. @ param initialValue \u2014 The initial value to fill the map with.","title":"__new"},{"location":"doc/#_serializationblacklist_41","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_41","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_41","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#data_1","text":"any [] The data stored in the grid.","title":"data"},{"location":"doc/#deserialize_41","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#each_1","text":"( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell.","title":"each"},{"location":"doc/#extend_41","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fill_2","text":"( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with.","title":"fill"},{"location":"doc/#fromdata_1","text":"( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid.","title":"fromData"},{"location":"doc/#get_2","text":"( method ) Map : get ( x : number, y : number) -> cell : Cell Gets the cell at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return cell \u2014 The cell at the specified coordinates.","title":"get"},{"location":"doc/#getcellopaque_1","text":"( method ) Map : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the specified coordinates is opaque, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is opaque, false otherwise.","title":"getCellOpaque"},{"location":"doc/#getcellpassable_1","text":"( method ) Map : getCellPassable ( x : number, y : number, mask : any) -> True : boolean Returns true if the cell at the specified coordinates is passable, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is passable, false otherwise.","title":"getCellPassable"},{"location":"doc/#getindex_3","text":"( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds.","title":"getIndex"},{"location":"doc/#h_3","text":"integer The height of the grid.","title":"h"},{"location":"doc/#instanceof_41","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_41","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_41","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#ondeserialize_2","text":"( method ) Map : onDeserialize ()","title":"onDeserialize"},{"location":"doc/#opacitycache_1","text":"BooleanBuffer Caches the opaciy of the cell + actors in each tile for faster fov calculation.","title":"opacityCache"},{"location":"doc/#passablecache_1","text":"BitmaskBuffer A class representing a 2D bitmask buffer using 16-bit integers.","title":"passableCache"},{"location":"doc/#prettyprint_41","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_41","text":"table","title":"serializationBlacklist"},{"location":"doc/#serialize_41","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set_3","text":"( method ) Map : set ( x : number, y : number, cell : Cell) Sets the cell at the specified coordinates to the given value. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param cell \u2014 The cell to set.","title":"set"},{"location":"doc/#stripname_41","text":"boolean","title":"stripName"},{"location":"doc/#updatecaches_1","text":"( method ) Map : updateCaches ( x : number, y : number) Updates the opacity cache at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate.","title":"updateCaches"},{"location":"doc/#w_3","text":"integer The width of the grid.","title":"w"},{"location":"doc/#mapbuilder","text":"","title":"MapBuilder"},{"location":"doc/#__call_42","text":"function","title":"__call"},{"location":"doc/#__index_42","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_42","text":"( method ) MapBuilder : __new ( initialValue : Cell) The constructor for the 'MapBuilder' class. Initializes the map with an empty data table and actors list. @ param initialValue \u2014 The initial value to fill the map with.","title":"__new"},{"location":"doc/#_serializationblacklist_42","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actors_1","text":"ActorStorage A list of actors present in the map.","title":"actors"},{"location":"doc/#addactor_2","text":"( method ) MapBuilder : addActor ( actor : table, x ? : number , y ? : number ) Adds an actor to the map at the specified coordinates. @ param actor \u2014 The actor to add. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate.","title":"addActor"},{"location":"doc/#addpadding","text":"( method ) MapBuilder : addPadding ( width : number, cell : Cell) Adds padding around the map with a specified width and cell value. @ param width \u2014 The width of the padding to add. @ param cell \u2014 The cell value to use for padding.","title":"addPadding"},{"location":"doc/#adopt_42","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#blit","text":"( method ) MapBuilder : blit ( source : MapBuilder, destX : number, destY : number, maskFn : fun ( x : integer, y : integer, source : Cell, dest : Cell)| nil ) Blits the source MapBuilder onto this MapBuilder at the specified coordinates. @ param source \u2014 The source MapBuilder to copy from. @ param destX \u2014 The x-coordinate of the top-left corner in the destination MapBuilder. @ param destY \u2014 The y-coordinate of the top-left corner in the destination MapBuilder. @ param maskFn \u2014 A callback function for masking. Should return true if the cell should be copied, false otherwise.","title":"blit"},{"location":"doc/#build","text":"( method ) MapBuilder : build () -> Map 2. actors : table Builds the map and returns the map and list of actors. Converts the sparse grid to a contiguous grid. @ return actors \u2014 map and the list of actors.","title":"build"},{"location":"doc/#classname_42","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_3","text":"( method ) SparseGrid : clear () Clears all values in the sparse grid.","title":"clear"},{"location":"doc/#data_2","text":"table","title":"data"},{"location":"doc/#debug_1","text":"boolean","title":"debug"},{"location":"doc/#deserialize_42","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#drawellipse","text":"( method ) MapBuilder : drawEllipse ( cx : number, cy : number, rx : number, ry : number, cell : Cell) Draws an ellipse on the map. @ param cx \u2014 The x-coordinate of the center. @ param cy \u2014 The y-coordinate of the center. @ param rx \u2014 The radius along the x-axis. @ param ry \u2014 The radius along the y-axis. @ param cell \u2014 The cell to fill the ellipse with.","title":"drawEllipse"},{"location":"doc/#drawline","text":"( method ) MapBuilder : drawLine ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a line on the map using Bresenham's line algorithm. @ param x1 \u2014 The x-coordinate of the starting point. @ param y1 \u2014 The y-coordinate of the starting point. @ param x2 \u2014 The x-coordinate of the ending point. @ param y2 \u2014 The y-coordinate of the ending point. @ param cell \u2014 The cell to draw the line with.","title":"drawLine"},{"location":"doc/#drawrectangle","text":"( method ) MapBuilder : drawRectangle ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a rectangle on the map. @ param x1 \u2014 The x-coordinate of the top-left corner. @ param y1 \u2014 The y-coordinate of the top-left corner. @ param x2 \u2014 The x-coordinate of the bottom-right corner. @ param y2 \u2014 The y-coordinate of the bottom-right corner. @ param cell \u2014 The cell to fill the rectangle with.","title":"drawRectangle"},{"location":"doc/#each_2","text":"( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry.","title":"each"},{"location":"doc/#eachactor_2","text":"( method ) MapBuilder : eachActor (... any ) -> function","title":"eachActor"},{"location":"doc/#eachactorat_2","text":"( method ) MapBuilder : eachActorAt ( x : any, y : any) -> function","title":"eachActorAt"},{"location":"doc/#eachcell_1","text":"( method ) MapBuilder : eachCell () -> fun ( x : integer, y : integer, V : any)","title":"eachCell"},{"location":"doc/#extend_42","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#get_3","text":"( method ) MapBuilder : get ( x : number, y : number) -> value : any Gets the value at the specified coordinates, or the initialValue if not set. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or the initialValue if not set.","title":"get"},{"location":"doc/#getactorsat_2","text":"fun ( self : any, x : integer, y : integer)","title":"getActorsAt"},{"location":"doc/#getcell_1","text":"( method ) MapBuilder : getCell ( x : any, y : any) -> unknown","title":"getCell"},{"location":"doc/#inbounds_1","text":"( method ) MapBuilder : inBounds ( x : any, y : any) -> boolean","title":"inBounds"},{"location":"doc/#initialvalue","text":"Cell The initial value to fill the map with.","title":"initialValue"},{"location":"doc/#instanceof_42","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_42","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_42","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_42","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_5","text":"( method ) MapBuilder : removeActor ( actor : table) Removes an actor from the map. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"doc/#serializationblacklist_42","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_42","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set_4","text":"( method ) MapBuilder : set ( x : number, y : number, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"doc/#setcell_1","text":"( method ) MapBuilder : setCell ( x : any, y : any, value : any) Mirror set.","title":"setCell"},{"location":"doc/#stripname_42","text":"boolean","title":"stripName"},{"location":"doc/#mapgeneratorstate","text":"","title":"MapGeneratorState"},{"location":"doc/#__call_43","text":"function","title":"__call"},{"location":"doc/#__index_43","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_43","text":"( method ) MapGeneratorState : __new ( generator : fun ( mapbuilder : MapBuilder): fun ())","title":"__new"},{"location":"doc/#_serializationblacklist_43","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_43","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_43","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_43","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_10","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"doc/#editor_6","text":"Editor","title":"editor"},{"location":"doc/#extend_43","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#generator","text":"thread","title":"generator"},{"location":"doc/#getmanager_3","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"doc/#instanceof_43","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_43","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_6","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"doc/#load_3","text":"( method ) EditorState : load ()","title":"load"},{"location":"doc/#manager_3","text":"GameStateManager","title":"manager"},{"location":"doc/#mixin_43","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousemoved_3","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"doc/#mousepressed_5","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"doc/#mousereleased_7","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"doc/#prettyprint_43","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_43","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_43","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_43","text":"boolean","title":"stripName"},{"location":"doc/#textinput_3","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"doc/#unload_3","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"doc/#update_10","text":"( method ) MapGeneratorState : update ( dt : any)","title":"update"},{"location":"doc/#wheelmoved_5","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"doc/#message_3","text":"","title":"Message"},{"location":"doc/#__call_44","text":"function","title":"__call"},{"location":"doc/#__index_44","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_44","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_44","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_44","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_44","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_44","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_44","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_44","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_44","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_44","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_44","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_44","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_44","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_44","text":"boolean","title":"stripName"},{"location":"doc/#modification","text":"","title":"Modification"},{"location":"doc/#__call_45","text":"function","title":"__call"},{"location":"doc/#__index_45","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_45","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_45","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_45","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_45","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_45","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_4","text":"( method ) Modification : execute ( attachable : SpectrumAttachable, editor : Editor) Executes the modification. Override this method in subclasses to define the behavior of the modification.","title":"execute"},{"location":"doc/#extend_45","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_45","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_45","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_45","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_3","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_3","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placed_3","text":"table","title":"placed"},{"location":"doc/#prettyprint_45","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_6","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_3","text":"table","title":"removed"},{"location":"doc/#replaced_3","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_45","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_45","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_45","text":"boolean","title":"stripName"},{"location":"doc/#undo_4","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#neighborhood","text":"","title":"Neighborhood"},{"location":"doc/#object","text":"","title":"Object"},{"location":"doc/#__call_46","text":"function","title":"__call"},{"location":"doc/#__index_46","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_46","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_46","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_46","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_46","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_46","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_46","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_46","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_46","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_46","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_46","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_46","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_46","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_46","text":"boolean","title":"stripName"},{"location":"doc/#opaquecomponent","text":"","title":"OpaqueComponent"},{"location":"doc/#__call_47","text":"function","title":"__call"},{"location":"doc/#__index_47","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_47","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_47","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_47","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#checkrequirements_4","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_47","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_47","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_47","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_7","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_47","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_47","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_47","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_8","text":"string","title":"name"},{"location":"doc/#owner_5","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_47","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_4","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_47","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_47","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_47","text":"boolean","title":"stripName"},{"location":"doc/#pastemodification","text":"","title":"PasteModification"},{"location":"doc/#__call_48","text":"function","title":"__call"},{"location":"doc/#__index_48","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_48","text":"( method ) PasteModification : __new ( cells : SparseGrid, actors : SparseMap, topLeft : Vector2)","title":"__new"},{"location":"doc/#_serializationblacklist_48","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actors_2","text":"SparseMap A sparse grid of buckets that objects can be placed into. Used for tracking actors by x,y position in Level.","title":"actors"},{"location":"doc/#adopt_48","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#cells","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"cells"},{"location":"doc/#classname_48","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_48","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_5","text":"( method ) PasteModification : execute ( attachable : SpectrumAttachable, editor : Editor)","title":"execute"},{"location":"doc/#extend_48","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_48","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_48","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_48","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_4","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_4","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placed_4","text":"table","title":"placed"},{"location":"doc/#prettyprint_48","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_7","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_4","text":"table","title":"removed"},{"location":"doc/#replaced_4","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_48","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_48","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_48","text":"boolean","title":"stripName"},{"location":"doc/#topleft_3","text":"Vector2","title":"topLeft"},{"location":"doc/#undo_5","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#path","text":"","title":"Path"},{"location":"doc/#__call_49","text":"function","title":"__call"},{"location":"doc/#__index_49","text":"Path A class to represent the A* path and its cost","title":"__index"},{"location":"doc/#__new_49","text":"( method ) Path : __new ( path : Vector2[], costIndex : integer[]) -> Path Constructor for the Path class","title":"__new"},{"location":"doc/#_serializationblacklist_49","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_49","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_49","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#cost","text":"number The total cost to traverse the path","title":"cost"},{"location":"doc/#costindex","text":"integer []","title":"costIndex"},{"location":"doc/#deserialize_49","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_49","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getpath","text":"( method ) Path : getPath () -> Vector2 [] Get the path as a table of nodes","title":"getPath"},{"location":"doc/#gettotalcost","text":"( method ) Path : getTotalCost () -> number Get the total cost of the path","title":"getTotalCost"},{"location":"doc/#instanceof_49","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_49","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#length","text":"( method ) Path : length () -> integer Get the length of the path (number of nodes)","title":"length"},{"location":"doc/#mixin_49","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#path_1","text":"Vector2 [] The path as an ordered list of Vector2 nodes","title":"path"},{"location":"doc/#pop_2","text":"( method ) Path : pop () -> Vector2 | nil Pop the first node from the path @ return \u2014 The removed node, or nil if the path is empty","title":"pop"},{"location":"doc/#popback","text":"( method ) Path : popBack () -> unknown | nil","title":"popBack"},{"location":"doc/#prettyprint_49","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_49","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_49","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_49","text":"boolean","title":"stripName"},{"location":"doc/#totalcostat","text":"( method ) Path : totalCostAt ( index : integer) -> number Get the total cost at a specific index in the path @ param index \u2014 The index in the path @ return \u2014 The total cost up to the specified index","title":"totalCostAt"},{"location":"doc/#trim","text":"( method ) Path : trim ( maxCost : number) -> Path Trim the path to a given total cost @ param maxCost \u2014 The maximum allowable cost for the trimmed path @ return \u2014 A new Path object with the trimmed path","title":"trim"},{"location":"doc/#penmodification","text":"","title":"PenModification"},{"location":"doc/#__call_50","text":"function","title":"__call"},{"location":"doc/#__index_50","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_50","text":"( method ) PenModification : __new ( placeable : Actor| Cell , locations : SparseGrid)","title":"__new"},{"location":"doc/#_serializationblacklist_50","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_50","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_50","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_50","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_6","text":"( method ) PenModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"doc/#extend_50","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_50","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_50","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#locations_1","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"doc/#mixin_50","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_5","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_5","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_4","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed_5","text":"Actor | Cell []| nil","title":"placed"},{"location":"doc/#prettyprint_50","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_8","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_5","text":"table","title":"removed"},{"location":"doc/#replaced_5","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_50","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_50","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_50","text":"boolean","title":"stripName"},{"location":"doc/#undo_6","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#pentool","text":"","title":"PenTool"},{"location":"doc/#__call_51","text":"function","title":"__call"},{"location":"doc/#__index_51","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_51","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_51","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_51","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_51","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_51","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#dragging","text":"boolean","title":"dragging"},{"location":"doc/#draw_11","text":"( method ) PenTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell_4","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_51","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getdrawable_4","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_51","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_51","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#locations_2","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"doc/#mixin_51","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_4","text":"( method ) PenTool : mouseclicked ( editor : Editor, level : any, x : number, y : number)","title":"mouseclicked"},{"location":"doc/#mousereleased_8","text":"( method ) PenTool : mousereleased ( editor : Editor, level : any, x : number, y : number)","title":"mousereleased"},{"location":"doc/#overridecelldraw_4","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_51","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_51","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_51","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_51","text":"boolean","title":"stripName"},{"location":"doc/#update_11","text":"( method ) PenTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"doc/#placeable_5","text":"","title":"Placeable"},{"location":"doc/#playercontrollercomponent","text":"","title":"PlayerControllerComponent"},{"location":"doc/#__call_52","text":"function","title":"__call"},{"location":"doc/#__index_52","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_52","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_52","text":"table","title":"_serializationBlacklist"},{"location":"doc/#act_1","text":"( method ) PlayerControllerComponent : act ( level : Level, actor : Actor) -> Action | nil","title":"act"},{"location":"doc/#adopt_52","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#blackboard_1","text":"table | nil","title":"blackboard"},{"location":"doc/#checkrequirements_5","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_52","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_52","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_52","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_8","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"doc/#instanceof_52","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_52","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_52","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_9","text":"string","title":"name"},{"location":"doc/#owner_6","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_52","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_5","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_52","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_52","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_52","text":"boolean","title":"stripName"},{"location":"doc/#prefabeditorstate","text":"","title":"PrefabEditorState"},{"location":"doc/#__call_53","text":"function","title":"__call"},{"location":"doc/#__index_53","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_53","text":"( method ) PrefabEditorState : __new ( mb : SpectrumAttachable)","title":"__new"},{"location":"doc/#_serializationblacklist_53","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_53","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_53","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_53","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_12","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"doc/#editor_7","text":"Editor","title":"editor"},{"location":"doc/#extend_53","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getmanager_4","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"doc/#instanceof_53","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_53","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#keypressed_7","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"doc/#load_4","text":"( method ) EditorState : load ()","title":"load"},{"location":"doc/#manager_4","text":"GameStateManager","title":"manager"},{"location":"doc/#mixin_53","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mousemoved_4","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"doc/#mousepressed_6","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"doc/#mousereleased_9","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"doc/#prettyprint_53","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_53","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_53","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_53","text":"boolean","title":"stripName"},{"location":"doc/#textinput_4","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"doc/#unload_4","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"doc/#update_12","text":"( method ) PrefabEditorState : update ( dt : any)","title":"update"},{"location":"doc/#wheelmoved_6","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"doc/#priorityqueue","text":"","title":"PriorityQueue"},{"location":"doc/#__call_54","text":"function","title":"__call"},{"location":"doc/#__index_54","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_54","text":"( method ) PriorityQueue : __new ()","title":"__new"},{"location":"doc/#_bubbledown","text":"( method ) PriorityQueue : _bubbleDown ( i : integer) Bubble down the element at index i to its proper place in the heap","title":"_bubbleDown"},{"location":"doc/#_bubbleup","text":"( method ) PriorityQueue : _bubbleUp ( i : integer) Bubble up the element at index i to its proper place in the heap","title":"_bubbleUp"},{"location":"doc/#_heap","text":"table","title":"_heap"},{"location":"doc/#_serializationblacklist_54","text":"table","title":"_serializationBlacklist"},{"location":"doc/#_swap","text":"( method ) PriorityQueue : _swap ( i : integer, j : integer) Swap elements at indices i and j in the heap","title":"_swap"},{"location":"doc/#adopt_54","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_54","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_54","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_54","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_54","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_54","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#isempty","text":"( method ) PriorityQueue : isEmpty () -> boolean","title":"isEmpty"},{"location":"doc/#mixin_54","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#pop_3","text":"( method ) PriorityQueue : pop () -> < T >| nil","title":"pop"},{"location":"doc/#prettyprint_54","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#push_2","text":"( method ) PriorityQueue : push ( data : any, priority : integer) Push a new element to the PriorityQueue.","title":"push"},{"location":"doc/#serializationblacklist_54","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_54","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#size","text":"( method ) PriorityQueue : size () -> integer","title":"size"},{"location":"doc/#stripname_54","text":"boolean","title":"stripName"},{"location":"doc/#proto","text":"","title":"Proto"},{"location":"doc/#quadrant","text":"","title":"Quadrant"},{"location":"doc/#__call_55","text":"function","title":"__call"},{"location":"doc/#__index_55","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_55","text":"( method ) Quadrant : __new ( cardinal : any, origin : any)","title":"__new"},{"location":"doc/#_serializationblacklist_55","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_55","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#cardinal","text":"any","title":"cardinal"},{"location":"doc/#classname_55","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_55","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_55","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_55","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_55","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_55","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#ox","text":"unknown","title":"ox"},{"location":"doc/#oy","text":"unknown","title":"oy"},{"location":"doc/#prettyprint_55","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_55","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_55","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_55","text":"boolean","title":"stripName"},{"location":"doc/#transform","text":"( method ) Quadrant : transform ( row : any, col : any) -> unknown 2. unknown","title":"transform"},{"location":"doc/#queue","text":"","title":"Queue"},{"location":"doc/#__call_56","text":"function","title":"__call"},{"location":"doc/#__index_56","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_56","text":"( method ) Queue : __new () Initializes a new Queue instance.","title":"__new"},{"location":"doc/#_serializationblacklist_56","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_56","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_56","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_4","text":"( method ) Queue : clear () Removes all elements from the queue.","title":"clear"},{"location":"doc/#contains_1","text":"( method ) Queue : contains ( value : any) -> True : boolean Checks if the queue contains a specific value. @ param value \u2014 The value to check for. @ return True \u2014 if the value is in the queue, false otherwise.","title":"contains"},{"location":"doc/#deserialize_56","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#empty","text":"( method ) Queue : empty () -> True : boolean Checks if the queue is empty. @ return True \u2014 if the queue is empty, false otherwise.","title":"empty"},{"location":"doc/#extend_56","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#first","text":"integer","title":"first"},{"location":"doc/#instanceof_56","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_56","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#last","text":"integer","title":"last"},{"location":"doc/#mixin_56","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#peek","text":"( method ) Queue : peek () -> The : any Returns the element at the start of the queue without removing it. @ return The \u2014 value at the start of the queue.","title":"peek"},{"location":"doc/#pop_4","text":"( method ) Queue : pop () -> The : any Removes and returns the element from the start of the queue. @ return The \u2014 value at the start of the queue.","title":"pop"},{"location":"doc/#prettyprint_56","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#push_3","text":"( method ) Queue : push ( value : any) Adds an element to the end of the queue. @ param value \u2014 The value to be added to the queue.","title":"push"},{"location":"doc/#queue_1","text":"table","title":"queue"},{"location":"doc/#remove_1","text":"( method ) Queue : remove ( value : any) -> True : boolean Removes the first occurrence of the specified value from the queue. @ param value \u2014 The value to be removed from the queue. @ return True \u2014 if the value was removed, false otherwise.","title":"remove"},{"location":"doc/#serializationblacklist_56","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_56","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#size_1","text":"( method ) Queue : size () -> The : number Returns the number of elements in the queue. @ return The \u2014 size of the queue.","title":"size"},{"location":"doc/#stripname_56","text":"boolean","title":"stripName"},{"location":"doc/#rng_1","text":"","title":"RNG"},{"location":"doc/#__call_57","text":"function","title":"__call"},{"location":"doc/#__index_57","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_57","text":"( method ) RNG : __new ( seed : any) Initializes a new RNG instance. @ param seed \u2014 The seed for the RNG (optional).","title":"__new"},{"location":"doc/#_serializationblacklist_57","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_57","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#carrier","text":"integer","title":"carrier"},{"location":"doc/#classname_57","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clone","text":"( method ) RNG : clone () -> The : RNG Clones the RNG. @ return The \u2014 cloned RNG.","title":"clone"},{"location":"doc/#deserialize_57","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_57","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getnormal","text":"( method ) RNG : getNormal ( mean : number, stddev : number) -> normal : number Gets a normally distributed random number with the given mean and standard deviation. @ param mean \u2014 The mean (optional, default is 0). @ param stddev \u2014 The standard deviation (optional, default is 1). @ return normal \u2014 A normally distributed random number.","title":"getNormal"},{"location":"doc/#getpercentage","text":"( method ) RNG : getPercentage () -> percentage : number Gets a random percentage between 1 and 100. @ return percentage \u2014 A random percentage.","title":"getPercentage"},{"location":"doc/#getseed","text":"( method ) RNG : getSeed () -> seed : any Gets the current seed. @ return seed \u2014 The current seed.","title":"getSeed"},{"location":"doc/#getstate","text":"( method ) RNG : getState () -> The : table Gets the current state of the RNG. @ return The \u2014 current state.","title":"getState"},{"location":"doc/#getuniform","text":"( method ) RNG : getUniform () -> uniform : number Gets a uniform random number between 0 and 1. @ return uniform \u2014 A uniform random number.","title":"getUniform"},{"location":"doc/#getuniformint","text":"( method ) RNG : getUniformInt ( lowerBound : number, upperBound : number) -> uniformInteger : number Gets a uniform random integer between lowerBound and upperBound. @ param lowerBound \u2014 The lower bound. @ param upperBound \u2014 The upper bound. @ return uniformInteger \u2014 A uniform random integer.","title":"getUniformInt"},{"location":"doc/#getweightedvalue","text":"( method ) RNG : getWeightedValue ( tbl : table<< K >, < V >>) -> value : < V> Gets a random value from a weighted table. @ param tbl \u2014 The weighted table. @ return value \u2014 The selected value.","title":"getWeightedValue"},{"location":"doc/#instanceof_57","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_57","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_57","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_57","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#random","text":"( method ) RNG : random ( a : number, b : number) -> A : number Gets a random number. @ param a \u2014 The lower threshold (optional). @ param b \u2014 The upper threshold (optional). @ return A \u2014 random number.","title":"random"},{"location":"doc/#randomseed","text":"function","title":"randomseed"},{"location":"doc/#seed","text":"string","title":"seed"},{"location":"doc/#serializationblacklist_57","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_57","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setseed","text":"( method ) RNG : setSeed ( seed : string) Sets the seed for the RNG. @ param seed \u2014 The seed to set (optional).","title":"setSeed"},{"location":"doc/#setstate","text":"( method ) RNG : setState ( stateTable : table) Sets the state of the RNG. @ param stateTable \u2014 The state to set.","title":"setState"},{"location":"doc/#state0","text":"integer","title":"state0"},{"location":"doc/#state1","text":"integer","title":"state1"},{"location":"doc/#state2","text":"integer","title":"state2"},{"location":"doc/#stripname_57","text":"boolean","title":"stripName"},{"location":"doc/#rectmodification","text":"","title":"RectModification"},{"location":"doc/#__call_58","text":"function","title":"__call"},{"location":"doc/#__index_58","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_58","text":"( method ) RectModification : __new ( placeable : Actor| Cell , topLeft : Vector2, bottomRight : Vector2, fillMode : any)","title":"__new"},{"location":"doc/#_serializationblacklist_58","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_58","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bottomright_3","text":"Vector2","title":"bottomRight"},{"location":"doc/#classname_58","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_58","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_7","text":"( method ) RectModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"doc/#extend_58","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fillmode_1","text":"any","title":"fillMode"},{"location":"doc/#instanceof_58","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_58","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_58","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_6","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placeboundarycell","text":"( method ) RectModification : placeBoundaryCell ( attachable : SpectrumAttachable, x : number, y : number) Helper function to place a cell on the boundary","title":"placeBoundaryCell"},{"location":"doc/#placecell_6","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_6","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed_6","text":"Actor | Cell []| nil","title":"placed"},{"location":"doc/#prettyprint_58","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_9","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_6","text":"table","title":"removed"},{"location":"doc/#replaced_6","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_58","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_58","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_58","text":"boolean","title":"stripName"},{"location":"doc/#topleft_4","text":"Vector2","title":"topLeft"},{"location":"doc/#undo_7","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#recttool","text":"","title":"RectTool"},{"location":"doc/#__call_59","text":"function","title":"__call"},{"location":"doc/#__index_59","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_59","text":"( method ) RectTool : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_59","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_59","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_59","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_59","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_13","text":"( method ) RectTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell_5","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_59","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getcurrentrect_1","text":"( method ) RectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"doc/#getdrawable_5","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_59","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_59","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_59","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_5","text":"( method ) RectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_10","text":"( method ) RectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"doc/#origin_2","text":"Vector2","title":"origin"},{"location":"doc/#overridecelldraw_5","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_59","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#second_1","text":"Vector2","title":"second"},{"location":"doc/#serializationblacklist_59","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_59","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_59","text":"boolean","title":"stripName"},{"location":"doc/#update_13","text":"( method ) RectTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"doc/#row","text":"","title":"Row"},{"location":"doc/#__call_60","text":"function","title":"__call"},{"location":"doc/#__index_60","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_60","text":"( method ) Row : __new ( depth : any, startSlope : any, endSlope : any)","title":"__new"},{"location":"doc/#_serializationblacklist_60","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_60","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_60","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#depth","text":"integer","title":"depth"},{"location":"doc/#deserialize_60","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#eachtile","text":"( method ) Row : eachTile () -> function","title":"eachTile"},{"location":"doc/#endslope","text":"Fraction","title":"endSlope"},{"location":"doc/#extend_60","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_60","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_60","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_60","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#next","text":"( method ) Row : next () -> Row","title":"next"},{"location":"doc/#prettyprint_60","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#roundtiesdown","text":"function Row. roundTiesDown ( n : any) -> integer","title":"roundTiesDown"},{"location":"doc/#roundtiesup","text":"function Row. roundTiesUp ( n : any) -> integer","title":"roundTiesUp"},{"location":"doc/#serializationblacklist_60","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_60","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#startslope","text":"Fraction","title":"startSlope"},{"location":"doc/#stripname_60","text":"boolean","title":"stripName"},{"location":"doc/#scheduler_1","text":"","title":"Scheduler"},{"location":"doc/#__call_61","text":"function","title":"__call"},{"location":"doc/#__index_61","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_61","text":"( method ) Scheduler : __new () Constructor for the Scheduler class. Initializes an empty queue and sets the actCount to 0.","title":"__new"},{"location":"doc/#_serializationblacklist_61","text":"table","title":"_serializationBlacklist"},{"location":"doc/#add_1","text":"( method ) Scheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add.","title":"add"},{"location":"doc/#adopt_61","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_61","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_61","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#empty_1","text":"( method ) Scheduler : empty ()","title":"empty"},{"location":"doc/#extend_61","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#has","text":"( method ) Scheduler : has ( actor : Actor) -> hasActor : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return hasActor \u2014 True if the actor is in the scheduler, false otherwise.","title":"has"},{"location":"doc/#instanceof_61","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_61","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_61","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#next_1","text":"( method ) Scheduler : next () -> next : Actor Returns the next actor to act. @ return next \u2014 The actor who is next to act.","title":"next"},{"location":"doc/#prettyprint_61","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#remove_2","text":"( method ) Scheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove.","title":"remove"},{"location":"doc/#serializationblacklist_61","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_61","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_61","text":"boolean","title":"stripName"},{"location":"doc/#timestamp","text":"( method ) Scheduler : timestamp ()","title":"timestamp"},{"location":"doc/#selecttool","text":"","title":"SelectTool"},{"location":"doc/#__call_62","text":"function","title":"__call"},{"location":"doc/#__index_62","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_62","text":"( method ) SelectTool : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_62","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actors_3","text":"SparseMap the copied actors from the attachable","title":"actors"},{"location":"doc/#adopt_62","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#cells_1","text":"Grid the copied cells from the attachable","title":"cells"},{"location":"doc/#classname_62","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#copy_1","text":"( method ) SelectTool : copy ( attachable : SpectrumAttachable)","title":"copy"},{"location":"doc/#deserialize_62","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#dragorigin","text":"Vector2 where we started dragging from when moving a pasted selection","title":"dragOrigin"},{"location":"doc/#dragging_1","text":"boolean whether we're dragging, either actively creating a selection or pasting one","title":"dragging"},{"location":"doc/#draw_14","text":"( method ) SelectTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"doc/#drawcell_6","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_62","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getcurrentrect_2","text":"( method ) SelectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"doc/#getdrawable_6","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_62","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_62","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_62","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_6","text":"( method ) SelectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_11","text":"( method ) SelectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"doc/#origin_3","text":"Vector2 location of the first point in a selection (creating or pasted)","title":"origin"},{"location":"doc/#overridecelldraw_6","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#paste","text":"( method ) SelectTool : paste ()","title":"paste"},{"location":"doc/#pasted","text":"boolean whether a selection is currently pasted/active","title":"pasted"},{"location":"doc/#prettyprint_62","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#second_2","text":"Vector2 location of the other point in a selection (creating or pasted)","title":"second"},{"location":"doc/#serializationblacklist_62","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_62","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_62","text":"boolean","title":"stripName"},{"location":"doc/#update_14","text":"( method ) SelectTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"doc/#selectiongrid","text":"","title":"SelectionGrid"},{"location":"doc/#__getinternal_7","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_12","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_12","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_6","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_6","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_6","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_6","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_6","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_6","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_6","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_6","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_5","text":"SelectionGridProps","title":"props"},{"location":"doc/#render_7","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_6","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_6","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#selectiongridinit","text":"","title":"SelectionGridInit"},{"location":"doc/#selectiongridprops","text":"","title":"SelectionGridProps"},{"location":"doc/#_internal_13","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#display_5","text":"Display","title":"display"},{"location":"doc/#elements","text":"TileElement []","title":"elements"},{"location":"doc/#endrange","text":"number","title":"endRange"},{"location":"doc/#filtered","text":"number []","title":"filtered"},{"location":"doc/#onselect","text":"function","title":"onSelect"},{"location":"doc/#overlay_1","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"doc/#placeables","text":"Actor | Cell []","title":"placeables"},{"location":"doc/#selected","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"selected"},{"location":"doc/#size_2","text":"Vector2 the final size of a tile in editor","title":"size"},{"location":"doc/#startrange","text":"number","title":"startRange"},{"location":"doc/#selectionpanel","text":"","title":"SelectionPanel"},{"location":"doc/#__getinternal_8","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_14","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_13","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_7","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_7","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_7","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_7","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_7","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_7","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_7","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_7","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_6","text":"SelectionPanelProps","title":"props"},{"location":"doc/#render_8","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_7","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_7","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#selectionpanelinit","text":"","title":"SelectionPanelInit"},{"location":"doc/#selectionpanelprops","text":"","title":"SelectionPanelProps"},{"location":"doc/#_internal_15","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#display_6","text":"Display","title":"display"},{"location":"doc/#editor_8","text":"Editor","title":"editor"},{"location":"doc/#filtered_1","text":"number []","title":"filtered"},{"location":"doc/#overlay_2","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"doc/#placeables_1","text":"Actor | Cell []","title":"placeables"},{"location":"doc/#selected_1","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"selected"},{"location":"doc/#selectedtext","text":"love .Text Drawable text. Open in Browser","title":"selectedText"},{"location":"doc/#size_3","text":"Vector2","title":"size"},{"location":"doc/#sensescomponent","text":"","title":"SensesComponent"},{"location":"doc/#__call_63","text":"function","title":"__call"},{"location":"doc/#__index_63","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_63","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_63","text":"table","title":"_serializationBlacklist"},{"location":"doc/#actors_4","text":"ActorStorage An actor storage with the actors the player is aware of.","title":"actors"},{"location":"doc/#adopt_63","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#cells_2","text":"SparseGrid A sparse grid of cells representing the portion of the map the actor's senses reveal.","title":"cells"},{"location":"doc/#checkrequirements_6","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"doc/#classname_63","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_63","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#explored","text":"SparseGrid A sparse grid of cells the actor's senses have previously revealed.","title":"explored"},{"location":"doc/#extend_63","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#initialize_9","text":"( method ) SensesComponent : initialize ( actor : Actor)","title":"initialize"},{"location":"doc/#instanceof_63","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_63","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_63","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_10","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"doc/#owner_7","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"doc/#prettyprint_63","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_6","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"doc/#serializationblacklist_63","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_63","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_63","text":"boolean","title":"stripName"},{"location":"doc/#unknown","text":"SparseMap < Vector2 > Unkown actors are things the player is aware of the location of, but not the components.","title":"unknown"},{"location":"doc/#sensessystem","text":"","title":"SensesSystem"},{"location":"doc/#__call_64","text":"function","title":"__call"},{"location":"doc/#__index_64","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_64","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_64","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_64","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#afteraction_1","text":"( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed.","title":"afterAction"},{"location":"doc/#afteractions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"afterActions"},{"location":"doc/#afteropacitychanged","text":"( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"doc/#beforeaction_1","text":"( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute.","title":"beforeAction"},{"location":"doc/#beforeactions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"beforeActions"},{"location":"doc/#beforemove","text":"( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to.","title":"beforeMove"},{"location":"doc/#classname_64","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_64","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_64","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#global","text":"boolean A system defined global can only be attached to the Game object. It will see all events from all levels.","title":"global"},{"location":"doc/#initialize_10","text":"( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to.","title":"initialize"},{"location":"doc/#instanceof_64","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_64","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_64","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_11","text":"string","title":"name"},{"location":"doc/#onactoradded","text":"( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added.","title":"onActorAdded"},{"location":"doc/#onactorremoved","text":"( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed.","title":"onActorRemoved"},{"location":"doc/#ondescend","text":"( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to.","title":"onDescend"},{"location":"doc/#onmove","text":"( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to.","title":"onMove"},{"location":"doc/#ontick","text":"( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to.","title":"onTick"},{"location":"doc/#onturn","text":"( method ) SensesSystem : onTurn ( level : Level, actor : Actor)","title":"onTurn"},{"location":"doc/#onturnend","text":"( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurnEnd"},{"location":"doc/#onyield","text":"( method ) SensesSystem : onYield ( level : Level, event : Message)","title":"onYield"},{"location":"doc/#owner_8","text":"Level ? The level that holds this system.","title":"owner"},{"location":"doc/#postinitialize","text":"( method ) SensesSystem : postInitialize ( level : Level)","title":"postInitialize"},{"location":"doc/#prettyprint_64","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_7","text":"table The message system requires the Senses system. While we don't directly reference it here we do grab data off the Senses component","title":"requirements"},{"location":"doc/#serializationblacklist_64","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_64","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#softrequirements","text":"string [] A table of optional requirements that ensure proper order if both Systems are attached.","title":"softRequirements"},{"location":"doc/#stripname_64","text":"boolean","title":"stripName"},{"location":"doc/#triggerrebuild","text":"( method ) SensesSystem : triggerRebuild ( level : any, actor : any)","title":"triggerRebuild"},{"location":"doc/#sensestracker","text":"","title":"SensesTracker"},{"location":"doc/#__call_65","text":"function","title":"__call"},{"location":"doc/#__index_65","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_65","text":"( method ) SensesTracker : __new ()","title":"__new"},{"location":"doc/#_serializationblacklist_65","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_65","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_65","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#createsensedmaps","text":"( method ) SensesTracker : createSensedMaps ( level : Level, curActor : Actor| nil )","title":"createSensedMaps"},{"location":"doc/#deserialize_65","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#exploredcells","text":"SparseGrid A grid tracking cells that have been explored by any actor with a PlayerController.","title":"exploredCells"},{"location":"doc/#extend_65","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_65","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_65","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_65","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#othersensedactors","text":"SparseMap A map tracking actors sensed by other actors (excluding the current actor).","title":"otherSensedActors"},{"location":"doc/#othersensedcells","text":"SparseGrid A grid tracking cells sensed by other actors (excluding the current actor).","title":"otherSensedCells"},{"location":"doc/#passablecallback","text":"( method ) SensesTracker : passableCallback () -> function","title":"passableCallback"},{"location":"doc/#prettyprint_65","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_65","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_65","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_65","text":"boolean","title":"stripName"},{"location":"doc/#totalsensedactors","text":"SparseMap A map tracking all actors sensed by the current actor or others.","title":"totalSensedActors"},{"location":"doc/#simplescheduler","text":"","title":"SimpleScheduler"},{"location":"doc/#__call_66","text":"function","title":"__call"},{"location":"doc/#__index_66","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_66","text":"( method ) SimpleScheduler : __new () Constructor for the SimpleScheduler class. Initializes an empty queue and sets the round count to 0.","title":"__new"},{"location":"doc/#_serializationblacklist_66","text":"table","title":"_serializationBlacklist"},{"location":"doc/#add_2","text":"( method ) SimpleScheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add.","title":"add"},{"location":"doc/#adopt_66","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_66","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#currentqueue","text":"Queue A basic FIFO (First In, First Out) queue implementation.","title":"currentQueue"},{"location":"doc/#deserialize_66","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#empty_2","text":"( method ) SimpleScheduler : empty () -> boolean","title":"empty"},{"location":"doc/#extend_66","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#has_1","text":"( method ) SimpleScheduler : has ( actor : Actor) -> True : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return True \u2014 if the actor is in the scheduler, false otherwise.","title":"has"},{"location":"doc/#instanceof_66","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_66","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_66","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#next_2","text":"( method ) SimpleScheduler : next () -> The : Actor Returns the next actor to act. Moves the actor to the next queue and returns the actor. If the current queue is empty, it swaps the current and next queues and increments the round count. @ return The \u2014 actor who is next to act.","title":"next"},{"location":"doc/#nextqueue","text":"Queue A basic FIFO (First In, First Out) queue implementation.","title":"nextQueue"},{"location":"doc/#prettyprint_66","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#remove_3","text":"( method ) SimpleScheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove.","title":"remove"},{"location":"doc/#roundcount","text":"integer","title":"roundCount"},{"location":"doc/#serializationblacklist_66","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_66","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_66","text":"boolean","title":"stripName"},{"location":"doc/#swapqueues","text":"( method ) SimpleScheduler : swapQueues () Swaps the current and next queues.","title":"swapQueues"},{"location":"doc/#timestamp_1","text":"( method ) SimpleScheduler : timestamp () -> The : number Returns the current round count as a timestamp. @ return The \u2014 current round count.","title":"timestamp"},{"location":"doc/#sparsearray","text":"","title":"SparseArray"},{"location":"doc/#__call_67","text":"function","title":"__call"},{"location":"doc/#__index_67","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_67","text":"( method ) SparseArray : __new () Constructor for SparseArray.","title":"__new"},{"location":"doc/#_serializationblacklist_67","text":"table","title":"_serializationBlacklist"},{"location":"doc/#add_3","text":"( method ) SparseArray : add ( item : any) -> index : number Adds an item to the sparse array. @ param item \u2014 The item to add. @ return index \u2014 The index where the item was added.","title":"add"},{"location":"doc/#adopt_67","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#bake","text":"( method ) SparseArray : bake () -> The : table Bakes the sparse array into a dense array. This removes all nil values and reassigns indices. @ return The \u2014 new dense array.","title":"bake"},{"location":"doc/#classname_67","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_5","text":"( method ) SparseArray : clear () Clears the sparse array.","title":"clear"},{"location":"doc/#data_3","text":"table Holds the actual values","title":"data"},{"location":"doc/#debugprint","text":"( method ) SparseArray : debugPrint () Prints the sparse array for debugging purposes.","title":"debugPrint"},{"location":"doc/#deserialize_67","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_67","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#freeindices","text":"table Tracks free indices","title":"freeIndices"},{"location":"doc/#get_4","text":"( method ) SparseArray : get ( index : number) -> The : any Gets an item from the sparse array. @ param index \u2014 The index of the item. @ return The \u2014 item at the specified index, or nil if none exists.","title":"get"},{"location":"doc/#instanceof_67","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_67","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_67","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_67","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#remove_4","text":"( method ) SparseArray : remove ( index : number) Removes an item from the sparse array. @ param index \u2014 The index to remove the item from.","title":"remove"},{"location":"doc/#serializationblacklist_67","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_67","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_67","text":"boolean","title":"stripName"},{"location":"doc/#sparsegrid","text":"","title":"SparseGrid"},{"location":"doc/#__call_68","text":"function","title":"__call"},{"location":"doc/#__index_68","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_68","text":"( method ) SparseGrid : __new () -> SparseGrid The constructor for the 'SparseGrid' class. Initializes the sparse grid with an empty data table.","title":"__new"},{"location":"doc/#_serializationblacklist_68","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_68","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_68","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#clear_6","text":"( method ) SparseGrid : clear () Clears all values in the sparse grid.","title":"clear"},{"location":"doc/#data_4","text":"table","title":"data"},{"location":"doc/#deserialize_68","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#each_3","text":"( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry.","title":"each"},{"location":"doc/#extend_68","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#get_5","text":"( method ) SparseGrid : get ( x : integer, y : integer) -> value : any Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if not set.","title":"get"},{"location":"doc/#instanceof_68","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_68","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_68","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_68","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_68","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_68","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#set_5","text":"( method ) SparseGrid : set ( x : integer, y : integer, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"doc/#stripname_68","text":"boolean","title":"stripName"},{"location":"doc/#sparsemap_1","text":"","title":"SparseMap"},{"location":"doc/#__call_69","text":"function","title":"__call"},{"location":"doc/#__count","text":"integer","title":"__count"},{"location":"doc/#__index_69","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_69","text":"( method ) SparseMap : __new () The constructor for the 'SparseMap' class. Initializes the map and counters.","title":"__new"},{"location":"doc/#_serializationblacklist_69","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_69","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_69","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#contains_2","text":"( method ) SparseMap : contains ( value : any) -> containsValue : boolean Checks where the specified value exists within the map.","title":"contains"},{"location":"doc/#count","text":"( method ) SparseMap : count () -> The : number Returns the total number of entries in the sparse map. @ return The \u2014 total number of entries.","title":"count"},{"location":"doc/#countcell","text":"( method ) SparseMap : countCell ( x : integer, y : integer) -> The : number Returns the number of values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 number of values stored at the specified coordinates.","title":"countCell"},{"location":"doc/#deserialize_69","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#each_4","text":"( method ) SparseMap : each () -> An : function Returns an iterator over all entries in the sparse map. @ return An \u2014 iterator that returns the value, coordinates, and hash for each entry.","title":"each"},{"location":"doc/#extend_69","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#get_6","text":"( method ) SparseMap : get ( x : integer, y : integer) -> elements : table Gets the values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return elements \u2014 A set[actor]=bool of values stored at the specified coordinates, or an empty table if none.","title":"get"},{"location":"doc/#getbyhash","text":"( method ) SparseMap : getByHash ( hash : number) -> A : table Gets the values stored at the specified hash. @ param hash \u2014 The hash value of the coordinates. @ return A \u2014 table of values stored at the specified hash, or an empty table if none.","title":"getByHash"},{"location":"doc/#has_2","text":"( method ) SparseMap : has ( x : integer, y : integer, value : any) -> True : boolean Checks whether the specified value is stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to check. @ return True \u2014 if the value is stored at the specified coordinates, false otherwise.","title":"has"},{"location":"doc/#insert","text":"( method ) SparseMap : insert ( x : integer, y : integer, val : any) Inserts a value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to insert.","title":"insert"},{"location":"doc/#instanceof_69","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_69","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#list","text":"table","title":"list"},{"location":"doc/#map_2","text":"table","title":"map"},{"location":"doc/#mixin_69","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_69","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#remove_5","text":"( method ) SparseMap : remove ( x : integer, y : integer, val : any) -> True : boolean Removes a value from the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to remove. @ return True \u2014 if the value was successfully removed, false otherwise.","title":"remove"},{"location":"doc/#serializationblacklist_69","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_69","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_69","text":"boolean","title":"stripName"},{"location":"doc/#spectrumattachable","text":"","title":"SpectrumAttachable"},{"location":"doc/#__call_70","text":"function","title":"__call"},{"location":"doc/#__index_70","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_70","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_70","text":"table","title":"_serializationBlacklist"},{"location":"doc/#addactor_3","text":"fun ( self : any, actor : Actor)","title":"addActor"},{"location":"doc/#adopt_70","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_70","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#debug_2","text":"boolean","title":"debug"},{"location":"doc/#deserialize_70","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#eachactor_3","text":"fun ( self : any): fun ()","title":"eachActor"},{"location":"doc/#eachactorat_3","text":"fun ( self : any, x : integer, y : integer): fun ()","title":"eachActorAt"},{"location":"doc/#eachcell_2","text":"fun ( self : any): fun ()","title":"eachCell"},{"location":"doc/#extend_70","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getactorsat_3","text":"fun ( self : any, x : integer, y : integer)","title":"getActorsAt"},{"location":"doc/#getcell_2","text":"fun ( self : any, x : integer, y : integer): Cell","title":"getCell"},{"location":"doc/#inbounds_2","text":"fun ( self : any, x : integer, y : integer)","title":"inBounds"},{"location":"doc/#instanceof_70","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_70","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_70","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_70","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_10","text":"fun ( self : any, actor : Actor)","title":"removeActor"},{"location":"doc/#serializationblacklist_70","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_70","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#setcell_2","text":"fun ( self : any, x : integer, y : integer, cell : Cell| nil )","title":"setCell"},{"location":"doc/#stripname_70","text":"boolean","title":"stripName"},{"location":"doc/#spriteatlas_1","text":"","title":"SpriteAtlas"},{"location":"doc/#__call_71","text":"function","title":"__call"},{"location":"doc/#__index_71","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_71","text":"( method ) SpriteAtlas : __new ( imagePath : string, spriteData : table, names : string[]) The constructor for the SpriteAtlas class @ param imagePath \u2014 The path to the texture atlas image @ param spriteData \u2014 A table containing sprite names and their respective quads","title":"__new"},{"location":"doc/#_serializationblacklist_71","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_71","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_71","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_71","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#drawbyindex","text":"( method ) SpriteAtlas : drawByIndex ( index : number, x : number, y : number) Draws a sprite by index at the given position @ param index \u2014 The index of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite","title":"drawByIndex"},{"location":"doc/#drawbyname","text":"( method ) SpriteAtlas : drawByName ( name : string, x : number, y : number) Draws a sprite by name at the given position @ param name \u2014 The name of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite","title":"drawByName"},{"location":"doc/#extend_71","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#fromatlased","text":"function SpriteAtlas. fromAtlased ( imagePath : string, jsonPath : string) -> The : SpriteAtlas Creates a SpriteAtlas from an Atlased JSON and PNG file @ param imagePath \u2014 The path to the texture atlas image @ param jsonPath \u2014 The path to the Atlased JSON file @ return The \u2014 created SpriteAtlas instance","title":"fromAtlased"},{"location":"doc/#fromgrid","text":"function SpriteAtlas. fromGrid ( imagePath : string, cellWidth : number, cellHeight : number, names ? : table ) -> The : SpriteAtlas Creates a SpriteAtlas from a grid of cells @ param imagePath \u2014 The path to the texture atlas image @ param cellWidth \u2014 The width of each cell in the grid @ param cellHeight \u2014 The height of each cell in the grid @ param names \u2014 The names of the sprites, mapping left to right, top to bottom. If not supplied the quads will be sorted by index not name. @ return The \u2014 created SpriteAtlas instance","title":"fromGrid"},{"location":"doc/#getquadbyindex","text":"( method ) SpriteAtlas : getQuadByIndex ( index : number) -> quad : any Gets a quad by index @ param index \u2014 The index of the sprite @ return quad \u2014 The love quad associated with the sprite index","title":"getQuadByIndex"},{"location":"doc/#getquadbyname","text":"( method ) SpriteAtlas : getQuadByName ( name : string) -> quad : any Gets a quad by name @ param name \u2014 The name of the sprite @ return quad \u2014 The love quad associated with the sprite name","title":"getQuadByName"},{"location":"doc/#image","text":"any The texture atlas love image","title":"image"},{"location":"doc/#instanceof_71","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_71","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_71","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_71","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#quadsbyindex","text":"table < number , any > A table of quads indexed by sprite indices","title":"quadsByIndex"},{"location":"doc/#quadsbyname","text":"table < string , any > A table of quads indexed by sprite names","title":"quadsByName"},{"location":"doc/#serializationblacklist_71","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_71","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_71","text":"boolean","title":"stripName"},{"location":"doc/#system","text":"","title":"System"},{"location":"doc/#__call_72","text":"function","title":"__call"},{"location":"doc/#__index_72","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_72","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_72","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_72","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#afteraction_2","text":"( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed.","title":"afterAction"},{"location":"doc/#afteractions_1","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"afterActions"},{"location":"doc/#afteropacitychanged_1","text":"( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"doc/#beforeaction_2","text":"( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute.","title":"beforeAction"},{"location":"doc/#beforeactions_1","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"beforeActions"},{"location":"doc/#beforemove_1","text":"( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to.","title":"beforeMove"},{"location":"doc/#classname_72","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_72","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_72","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#global_1","text":"boolean A system defined global can only be attached to the Game object. It will see all events from all levels.","title":"global"},{"location":"doc/#initialize_11","text":"( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to.","title":"initialize"},{"location":"doc/#instanceof_72","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_72","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_72","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#name_12","text":"string A system must define a name that is unique to the System.","title":"name"},{"location":"doc/#onactoradded_1","text":"( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added.","title":"onActorAdded"},{"location":"doc/#onactorremoved_1","text":"( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed.","title":"onActorRemoved"},{"location":"doc/#ondescend_1","text":"( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to.","title":"onDescend"},{"location":"doc/#onmove_1","text":"( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to.","title":"onMove"},{"location":"doc/#ontick_1","text":"( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to.","title":"onTick"},{"location":"doc/#onturn_1","text":"( method ) System : onTurn ( level : Level, actor : Actor) This method is called when a new turn begins. The actor is the actor that is about to take their turn. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurn"},{"location":"doc/#onturnend_1","text":"( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurnEnd"},{"location":"doc/#onyield_1","text":"( method ) System : onYield ( level : Level, event : Message) This method is called whenever the level yields back to the interface. The most common usage for this right now is updating the sight component of any input controlled actors in the Sight system. @ param level \u2014 The Level object this System is attached to. @ param event \u2014 The event data that caused the yield.","title":"onYield"},{"location":"doc/#owner_9","text":"Level ? The level that holds this system.","title":"owner"},{"location":"doc/#postinitialize_1","text":"( method ) System : postInitialize ( level : Level) This method is called after the Level is initialized. It is called after all of the Systems have been initialized. @ param level \u2014 The Level object this System is attached to.","title":"postInitialize"},{"location":"doc/#prettyprint_72","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#requirements_8","text":"string [] A table of requirements that must be met for the System to be attached to a Level.","title":"requirements"},{"location":"doc/#serializationblacklist_72","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_72","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#softrequirements_1","text":"string [] A table of optional requirements that ensure proper order if both Systems are attached.","title":"softRequirements"},{"location":"doc/#stripname_72","text":"boolean","title":"stripName"},{"location":"doc/#systemmanager_1","text":"","title":"SystemManager"},{"location":"doc/#__call_73","text":"function","title":"__call"},{"location":"doc/#__index_73","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_73","text":"( method ) SystemManager : __new ( owner : Level)","title":"__new"},{"location":"doc/#_serializationblacklist_73","text":"table","title":"_serializationBlacklist"},{"location":"doc/#addsystem_1","text":"( method ) SystemManager : addSystem ( system : System) Adds a system to the manager. @ param system \u2014 The system to add.","title":"addSystem"},{"location":"doc/#adopt_73","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#afteraction_3","text":"( method ) SystemManager : afterAction ( level : Level, actor : Actor, action : Action) Calls the afterAction method for all systems. @ param level \u2014 The level to call afterAction for. @ param actor \u2014 The actor that has taken an action. @ param action \u2014 The action the actor has executed.","title":"afterAction"},{"location":"doc/#afteropacitychanged_2","text":"( method ) SystemManager : afterOpacityChanged ( level : Level, x : number, y : number) Calls the afterOpacityChanged method for all systems. @ param level \u2014 The level to call afterOpacityChanged for. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"doc/#beforeaction_3","text":"( method ) SystemManager : beforeAction ( level : Level, actor : Actor, action : Action) Calls the beforeAction method for all systems. @ param level \u2014 The level to call beforeAction for. @ param actor \u2014 The actor that has selected an action. @ param action \u2014 The action the actor has selected.","title":"beforeAction"},{"location":"doc/#beforemove_2","text":"( method ) SystemManager : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the beforeMove method for all systems. @ param level \u2014 The level to call beforeMove for. @ param actor \u2014 The actor that is moving. @ param from \u2014 The position the actor is moving from. @ param to \u2014 The position the actor is moving to.","title":"beforeMove"},{"location":"doc/#classname_73","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_73","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#extend_73","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getsystem_1","text":"( method ) SystemManager : getSystem ( systemName : string) -> The : System ? Gets a system by name. @ param systemName \u2014 The name of the system to get. @ return The \u2014 system with the given name, or nil if not found.","title":"getSystem"},{"location":"doc/#initialize_12","text":"( method ) SystemManager : initialize ( level : Level) Initializes all systems attached to the manager. @ param level \u2014 The level to initialize the systems for.","title":"initialize"},{"location":"doc/#instanceof_73","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_73","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_73","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#onactoradded_2","text":"( method ) SystemManager : onActorAdded ( level : Level, actor : Actor) Calls the onActorAdded method for all systems. @ param level \u2014 The level to call onActorAdded for. @ param actor \u2014 The actor that has been added.","title":"onActorAdded"},{"location":"doc/#onactorremoved_2","text":"( method ) SystemManager : onActorRemoved ( level : Level, actor : Actor) Calls the onActorRemoved method for all systems. @ param level \u2014 The level to call onActorRemoved for. @ param actor \u2014 The actor that has been removed.","title":"onActorRemoved"},{"location":"doc/#onmove_2","text":"( method ) SystemManager : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the onMove method for all systems. @ param level \u2014 The level to call onMove for. @ param actor \u2014 The actor that has moved. @ param from \u2014 The position the actor moved from. @ param to \u2014 The position the actor moved to.","title":"onMove"},{"location":"doc/#ontick_2","text":"( method ) SystemManager : onTick ( level : Level) Calls the onTick method for all systems. @ param level \u2014 The level to call onTick for.","title":"onTick"},{"location":"doc/#onturn_2","text":"( method ) SystemManager : onTurn ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn.","title":"onTurn"},{"location":"doc/#onturnend_2","text":"( method ) SystemManager : onTurnEnd ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn.","title":"onTurnEnd"},{"location":"doc/#onyield_2","text":"( method ) SystemManager : onYield ( level : Level, event : Message) Calls the on yield method for each system right before the level hands a Decision back to the interface. Used by the Sight system to ensure that the player's fov is always updated when we yield even if it's not their turn. @ param level \u2014 The level to call onYield for. @ param event \u2014 The event data that caused the yield.","title":"onYield"},{"location":"doc/#owner_10","text":"Level The 'Level' holds all of the actors and systems, and runs the game loop. Through the ActorStorage and SystemManager","title":"owner"},{"location":"doc/#postinitialize_2","text":"( method ) SystemManager : postInitialize ( level : Level) Post-initializes all systems after the level has been populated. @ param level \u2014 The level to post-initialize the systems for.","title":"postInitialize"},{"location":"doc/#prettyprint_73","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_73","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_73","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_73","text":"boolean","title":"stripName"},{"location":"doc/#systems","text":"System []","title":"systems"},{"location":"doc/#trigger_1","text":"( method ) SystemManager : trigger ( eventString : string, ... any ) This is useful for calling custom events you define in your Actions, Systems, etc. An example usage of this can be found in the Sight system. @ param eventString \u2014 The key of the event handler method into the system. @ param ... \u2014 The arguments to be passed to the event handler method.","title":"trigger"},{"location":"doc/#target","text":"","title":"Target"},{"location":"doc/#__call_74","text":"function","title":"__call"},{"location":"doc/#__index_74","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_74","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_74","text":"table","title":"_serializationBlacklist"},{"location":"doc/#_validate","text":"( method ) Target : _validate ( owner : Actor, targetObject : any, targets : [ Object]) -> boolean @ param owner \u2014 The owner of the action. @ param targetObject \u2014 The target object of the action. @ param targets \u2014 A list of the previous targets.","title":"_validate"},{"location":"doc/#adopt_74","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_74","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_74","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#distancetype_1","text":"\"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\"","title":"distanceType"},{"location":"doc/#extend_74","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#instanceof_74","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_74","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_74","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#prettyprint_74","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#range","text":"number The distance in tiles this actor can be away from the Action's owner. If nil this check is skipped.","title":"range"},{"location":"doc/#rangelasttarget","text":"nil","title":"rangeLastTarget"},{"location":"doc/#rangetype","text":"\"chebyshev\" | \"manhattan\"","title":"rangeType"},{"location":"doc/#serializationblacklist_74","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_74","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_74","text":"boolean","title":"stripName"},{"location":"doc/#typesallowed","text":"table < \"Actor\" | \"Any\" | \"Cell\" | \"Point\" , true >","title":"typesAllowed"},{"location":"doc/#unique","text":"boolean If true this will make sure this target is unique, and not one of the targets already selected.","title":"unique"},{"location":"doc/#validate","text":"( method ) Target : validate ( owner : Actor, targetObject : Actor| Cell | Vector2 , targets : any) -> boolean The inner validate for the target. This is what you override with your own custom logic. @ param owner \u2014 The actor performing the action. @ param targetObject \u2014 The target to validate.","title":"validate"},{"location":"doc/#targettype","text":"","title":"TargetType"},{"location":"doc/#textinput_5","text":"","title":"TextInput"},{"location":"doc/#__getinternal_9","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_16","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_14","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_8","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_8","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_8","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_8","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_8","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_8","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_8","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_8","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_7","text":"TextInputProps","title":"props"},{"location":"doc/#render_9","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_8","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_8","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#textinputinit","text":"","title":"TextInputInit"},{"location":"doc/#textinputprops","text":"","title":"TextInputProps"},{"location":"doc/#_internal_17","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#content","text":"string","title":"content"},{"location":"doc/#focused","text":"boolean","title":"focused"},{"location":"doc/#font","text":"love .Font Defines the shape of characters that can be drawn onto the screen. Open in Browser","title":"font"},{"location":"doc/#limit","text":"number the number of characters before we start panning","title":"limit"},{"location":"doc/#onedit","text":"function ?","title":"onEdit"},{"location":"doc/#overlay_3","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"doc/#placeholder","text":"string","title":"placeholder"},{"location":"doc/#size_4","text":"Vector2","title":"size"},{"location":"doc/#tileelement","text":"","title":"TileElement"},{"location":"doc/#__getinternal_10","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_18","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_15","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_9","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_9","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_9","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_9","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_9","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_9","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_9","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_9","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_8","text":"TileElementProps","title":"props"},{"location":"doc/#render_10","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_9","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_9","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#tileelementprops","text":"","title":"TileElementProps"},{"location":"doc/#_internal_19","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#display_7","text":"Display","title":"display"},{"location":"doc/#onselect_1","text":"function","title":"onSelect"},{"location":"doc/#overlay_4","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"doc/#placeable_7","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#size_5","text":"Vector2 the final size of a tile in editor","title":"size"},{"location":"doc/#tool_1","text":"","title":"Tool"},{"location":"doc/#__call_75","text":"function","title":"__call"},{"location":"doc/#__index_75","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_75","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"doc/#_serializationblacklist_75","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_75","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_75","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_75","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#draw_15","text":"( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals.","title":"draw"},{"location":"doc/#drawcell_7","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"doc/#extend_75","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getdrawable_7","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"doc/#instanceof_75","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_75","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_75","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#mouseclicked_7","text":"( method ) Tool : mouseclicked ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse click events. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked.","title":"mouseclicked"},{"location":"doc/#mousereleased_12","text":"( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release.","title":"mousereleased"},{"location":"doc/#overridecelldraw_7","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"doc/#prettyprint_75","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#serializationblacklist_75","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_75","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_75","text":"boolean","title":"stripName"},{"location":"doc/#update_15","text":"( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"update"},{"location":"doc/#tools","text":"","title":"Tools"},{"location":"doc/#__getinternal_11","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"doc/#_internal_20","text":"Inky .Element.Internal","title":"_internal"},{"location":"doc/#constructor_16","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"doc/#getview_10","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"doc/#on_10","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"doc/#ondisable_10","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"doc/#onenable_10","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"doc/#onpointer_10","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"doc/#onpointerenter_10","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"doc/#onpointerexit_10","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"doc/#onpointerinhierarchy_10","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"doc/#props_9","text":"ToolsProps","title":"props"},{"location":"doc/#render_11","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"doc/#useeffect_10","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"doc/#useoverlapcheck_10","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"doc/#toolsinit","text":"","title":"ToolsInit"},{"location":"doc/#toolsprops","text":"","title":"ToolsProps"},{"location":"doc/#_internal_21","text":"Inky .Props.Internal","title":"_internal"},{"location":"doc/#editor_9","text":"Editor","title":"editor"},{"location":"doc/#selected_2","text":"Button","title":"selected"},{"location":"doc/#trace","text":"","title":"Trace"},{"location":"doc/#unfloatselectionmodification","text":"","title":"UnfloatSelectionModification"},{"location":"doc/#__call_76","text":"function","title":"__call"},{"location":"doc/#__index_76","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__new_76","text":"( method ) UnfloatSelectionModification : __new ( placeable : any, position : any, floatingSelection : any)","title":"__new"},{"location":"doc/#_serializationblacklist_76","text":"table","title":"_serializationBlacklist"},{"location":"doc/#adopt_76","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_76","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#deserialize_76","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#execute_8","text":"( method ) UnfloatSelectionModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"doc/#extend_76","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#floatingselection","text":"MapBuilder A map builder class that extends the SparseGrid class to handle map-specific functionalities.","title":"floatingSelection"},{"location":"doc/#instanceof_76","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_76","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#mixin_76","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#placeactor_7","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"doc/#placecell_7","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"doc/#placeable_8","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"doc/#placed_7","text":"table","title":"placed"},{"location":"doc/#position_2","text":"Vector2","title":"position"},{"location":"doc/#prettyprint_76","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#removeactor_11","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"doc/#removed_7","text":"table","title":"removed"},{"location":"doc/#replaced_7","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"doc/#serializationblacklist_76","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_76","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_76","text":"boolean","title":"stripName"},{"location":"doc/#undo_8","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"doc/#vector2","text":"","title":"Vector2"},{"location":"doc/#down","text":"Vector2 The static DOWN vector.","title":"DOWN"},{"location":"doc/#down_left","text":"Vector2 The static DOWN_LEFT vector.","title":"DOWN_LEFT"},{"location":"doc/#down_right","text":"Vector2 The static DOWN_RIGHT vector.","title":"DOWN_RIGHT"},{"location":"doc/#left","text":"Vector2 The static LEFT vector.","title":"LEFT"},{"location":"doc/#right","text":"Vector2 The static RIGHT vector.","title":"RIGHT"},{"location":"doc/#up","text":"Vector2 The static UP vector.","title":"UP"},{"location":"doc/#up_left","text":"Vector2 The static UP_LEFT vector.","title":"UP_LEFT"},{"location":"doc/#up_right","text":"Vector2 The static UP_RIGHT vector.","title":"UP_RIGHT"},{"location":"doc/#__add_2","text":"function Vector2. __add ( a : Vector2, b : Vector2) -> Vector2 Adds two vectors together. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The sum of the two vectors.","title":"__add"},{"location":"doc/#__call_77","text":"function","title":"__call"},{"location":"doc/#__eq_2","text":"function Vector2. __eq ( a : Vector2, b : Vector2) -> boolean Checks the equality of two vectors. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 True if the vectors are equal, false otherwise.","title":"__eq"},{"location":"doc/#__index_77","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"doc/#__mul_2","text":"function Vector2. __mul ( a : Vector2, b : number) -> Vector2 Multiplies a vector by a scalar. @ param a \u2014 The vector. @ param b \u2014 The scalar. @ return \u2014 The product of the vector and the scalar.","title":"__mul"},{"location":"doc/#__new_77","text":"( method ) Vector2 : __new ( x : number, y : number) Constructor for Vector2 accepts two numbers, x and y. @ param x \u2014 The x component of the vector. @ param y \u2014 The y component of the vector.","title":"__new"},{"location":"doc/#__sub_2","text":"function Vector2. __sub ( a : Vector2, b : Vector2) -> Vector2 Subtracts vector b from vector a. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The difference of the two vectors.","title":"__sub"},{"location":"doc/#__tostring_3","text":"( method ) Vector2 : __tostring () -> string Creates a string representation of the vector. @ return \u2014 The string representation of the vector.","title":"__tostring"},{"location":"doc/#__unm_2","text":"function Vector2. __unm ( a : Vector2) -> Vector2 Negates the vector. @ param a \u2014 The vector to negate. @ return \u2014 The negated vector.","title":"__unm"},{"location":"doc/#_hash_1","text":"function Vector2. _hash ( x : integer, y : integer) -> integer","title":"_hash"},{"location":"doc/#_serializationblacklist_77","text":"table","title":"_serializationBlacklist"},{"location":"doc/#_unhash","text":"function Vector2. _unhash ( hash : number) -> number 2. integer","title":"_unhash"},{"location":"doc/#adopt_77","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"doc/#classname_77","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"doc/#copy_2","text":"( method ) Vector2 : copy () -> Vector2 Returns a copy of the vector. @ return \u2014 A copy of the vector.","title":"copy"},{"location":"doc/#decompose_1","text":"( method ) Vector2 : decompose () -> x : number 2. y : number @ return x \u2014 The x component of the vector. @ return y \u2014 The y component of the vector.","title":"decompose"},{"location":"doc/#deserialize_77","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"doc/#distance","text":"( method ) Vector2 : distance ( vec : Vector2) -> distance : number Euclidian distance from another point.","title":"distance"},{"location":"doc/#distancechebyshev","text":"( method ) Vector2 : distanceChebyshev ( vec : Vector2) -> distance : number Chebyshev distance from another point.","title":"distanceChebyshev"},{"location":"doc/#distancemanhattan","text":"( method ) Vector2 : distanceManhattan ( vec : Vector2) -> distance : number Manhattan distance from another point.","title":"distanceManhattan"},{"location":"doc/#extend_77","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"doc/#getrange_1","text":"( method ) Vector2 : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , vec : Vector2) -> number Gets the range, a ciel'd integer representing the number of tiles away the other vector is type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\"","title":"getRange"},{"location":"doc/#hash","text":"( method ) Vector2 : hash () -> hash : number","title":"hash"},{"location":"doc/#instanceof_77","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"doc/#is_77","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"doc/#length_1","text":"( method ) Vector2 : length () -> number Returns the length of the vector. @ return \u2014 The length of the vector.","title":"length"},{"location":"doc/#lerp_1","text":"( method ) Vector2 : lerp ( vec : Vector2, t : number) -> Vector2 Linearly interpolates between two vectors. @ param self \u2014 The starting vector (A). @ param vec \u2014 The ending vector (B). @ param t \u2014 The interpolation factor (0 <= t <= 1). @ return \u2014 The interpolated vector.","title":"lerp"},{"location":"doc/#mixin_77","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"doc/#neighborhood4","text":"Vector2 []","title":"neighborhood4"},{"location":"doc/#neighborhood8","text":"Vector2 []","title":"neighborhood8"},{"location":"doc/#prettyprint_77","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"doc/#rotateclockwise","text":"( method ) Vector2 : rotateClockwise () -> The : Vector2 Rotates the vector clockwise. @ return The \u2014 rotated vector.","title":"rotateClockwise"},{"location":"doc/#serializationblacklist_77","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"doc/#serialize_77","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"doc/#stripname_77","text":"boolean","title":"stripName"},{"location":"doc/#unhash","text":"function Vector2. unhash ( hash : any) -> Vector2","title":"unhash"},{"location":"doc/#x_1","text":"number The x component of the vector.","title":"x"},{"location":"doc/#y_1","text":"number The y component of the vector.","title":"y"},{"location":"doc/#_g","text":"_G","title":"_G"},{"location":"doc/#_g_1","text":"","title":"_G"},{"location":"doc/#_version","text":"string","title":"_VERSION"},{"location":"doc/#any","text":"","title":"any"},{"location":"doc/#arg","text":"string []","title":"arg"},{"location":"doc/#assert","text":"function assert ( v ? : < T >, message ? : any , ... any ) -> < T > 2. ... any","title":"assert"},{"location":"doc/#bit","text":"bitlib","title":"bit"},{"location":"doc/#bitarshift","text":"function bit. arshift ( x : integer, n : integer) -> y : integer","title":"bit.arshift"},{"location":"doc/#bitband","text":"function bit. band ( x : integer, ... integer ) -> y : integer","title":"bit.band"},{"location":"doc/#bitbnot","text":"function bit. bnot ( x : integer) -> y : integer","title":"bit.bnot"},{"location":"doc/#bitbor","text":"function bit. bor ( x : integer, ... integer ) -> y : integer","title":"bit.bor"},{"location":"doc/#bitbswap","text":"function bit. bswap ( x : integer) -> y : integer","title":"bit.bswap"},{"location":"doc/#bitbxor","text":"function bit. bxor ( x : integer, ... integer ) -> y : integer","title":"bit.bxor"},{"location":"doc/#bitlshift","text":"function bit. lshift ( x : integer, n : integer) -> y : integer","title":"bit.lshift"},{"location":"doc/#bitrol","text":"function bit. rol ( x : integer, n : integer) -> y : integer","title":"bit.rol"},{"location":"doc/#bitror","text":"function bit. ror ( x : integer, n : integer) -> y : integer","title":"bit.ror"},{"location":"doc/#bitrshift","text":"function bit. rshift ( x : integer, n : integer) -> y : integer","title":"bit.rshift"},{"location":"doc/#bittobit","text":"function bit. tobit ( x : integer) -> y : integer","title":"bit.tobit"},{"location":"doc/#bittohex","text":"function bit. tohex ( x : integer, n ? : integer ) -> y : string","title":"bit.tohex"},{"location":"doc/#bitlib","text":"","title":"bitlib"},{"location":"doc/#arshift","text":"function bit. arshift ( x : integer, n : integer) -> y : integer","title":"arshift"},{"location":"doc/#band","text":"function bit. band ( x : integer, ... integer ) -> y : integer","title":"band"},{"location":"doc/#bnot","text":"function bit. bnot ( x : integer) -> y : integer","title":"bnot"},{"location":"doc/#bor","text":"function bit. bor ( x : integer, ... integer ) -> y : integer","title":"bor"},{"location":"doc/#bswap","text":"function bit. bswap ( x : integer) -> y : integer","title":"bswap"},{"location":"doc/#bxor","text":"function bit. bxor ( x : integer, ... integer ) -> y : integer","title":"bxor"},{"location":"doc/#lshift","text":"function bit. lshift ( x : integer, n : integer) -> y : integer","title":"lshift"},{"location":"doc/#rol","text":"function bit. rol ( x : integer, n : integer) -> y : integer","title":"rol"},{"location":"doc/#ror","text":"function bit. ror ( x : integer, n : integer) -> y : integer","title":"ror"},{"location":"doc/#rshift","text":"function bit. rshift ( x : integer, n : integer) -> y : integer","title":"rshift"},{"location":"doc/#tobit","text":"function bit. tobit ( x : integer) -> y : integer","title":"tobit"},{"location":"doc/#tohex","text":"function bit. tohex ( x : integer, n ? : integer ) -> y : string","title":"tohex"},{"location":"doc/#boolean","text":"","title":"boolean"},{"location":"doc/#collectgarbage","text":"function collectgarbage ( opt ? : \"collect\" | \"count\" | \"isrunning\" | \"restart\" | \"setpause\" ...(+ 3 ), arg ? : integer ) -> any","title":"collectgarbage"},{"location":"doc/#coroutine","text":"coroutinelib","title":"coroutine"},{"location":"doc/#coroutineclose","text":"function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any","title":"coroutine.close"},{"location":"doc/#coroutinecreate","text":"function coroutine. create ( f : fun (... any ):... unknown ) -> thread","title":"coroutine.create"},{"location":"doc/#coroutineisyieldable","text":"function coroutine. isyieldable () -> boolean","title":"coroutine.isyieldable"},{"location":"doc/#coroutineresume","text":"function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any","title":"coroutine.resume"},{"location":"doc/#coroutinerunning","text":"function coroutine. running () -> running : thread 2. ismain : boolean","title":"coroutine.running"},{"location":"doc/#coroutinestatus","text":"function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\"","title":"coroutine.status"},{"location":"doc/#coroutinewrap","text":"function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown","title":"coroutine.wrap"},{"location":"doc/#coroutineyield","text":"( async ) function coroutine. yield (... any ) -> ... any","title":"coroutine.yield"},{"location":"doc/#coroutinelib","text":"","title":"coroutinelib"},{"location":"doc/#close","text":"function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any Closes coroutine co , closing all its pending to-be-closed variables and putting the coroutine in a dead state. View documents","title":"close"},{"location":"doc/#create","text":"function coroutine. create ( f : fun (... any ):... unknown ) -> thread Creates a new coroutine, with body f . f must be a function. Returns this new coroutine, an object with type \"thread\" . View documents","title":"create"},{"location":"doc/#isyieldable","text":"function coroutine. isyieldable () -> boolean Returns true when the running coroutine can yield. View documents","title":"isyieldable"},{"location":"doc/#resume","text":"function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any Starts or continues the execution of coroutine co . View documents","title":"resume"},{"location":"doc/#running","text":"function coroutine. running () -> running : thread 2. ismain : boolean Returns the running coroutine plus a boolean, true when the running coroutine is the main one. View documents","title":"running"},{"location":"doc/#status","text":"function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" Returns the status of coroutine co . View documents return # 1 : | \"running\" -- Is running. | \"suspended\" -- Is suspended or not started. | \"normal\" -- Is active but not running. | \"dead\" -- Has finished or stopped with an error.","title":"status"},{"location":"doc/#wrap","text":"function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown Creates a new coroutine, with body f ; f must be a function. Returns a function that resumes the coroutine each time it is called. View documents","title":"wrap"},{"location":"doc/#yield_1","text":"( async ) function coroutine. yield (... any ) -> ... any Suspends the execution of the calling coroutine. View documents","title":"yield"},{"location":"doc/#debug_3","text":"debuglib","title":"debug"},{"location":"doc/#debugdebug","text":"function debug. debug ()","title":"debug.debug"},{"location":"doc/#debuggetfenv","text":"function debug. getfenv ( o : any) -> table","title":"debug.getfenv"},{"location":"doc/#debuggethook","text":"function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer","title":"debug.gethook"},{"location":"doc/#debuggetinfo","text":"function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo","title":"debug.getinfo"},{"location":"doc/#debuggetlocal","text":"function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any","title":"debug.getlocal"},{"location":"doc/#debuggetmetatable","text":"function debug. getmetatable ( object : any) -> metatable : table","title":"debug.getmetatable"},{"location":"doc/#debuggetregistry","text":"function debug. getregistry () -> table","title":"debug.getregistry"},{"location":"doc/#debuggetupvalue","text":"function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any","title":"debug.getupvalue"},{"location":"doc/#debuggetuservalue","text":"function debug. getuservalue ( u : userdata) -> any","title":"debug.getuservalue"},{"location":"doc/#debugsetcstacklimit","text":"function debug. setcstacklimit ( limit : integer) -> boolean | integer","title":"debug.setcstacklimit"},{"location":"doc/#debugsetfenv","text":"function debug. setfenv ( object : < T>, env : table) -> object : < T>","title":"debug.setfenv"},{"location":"doc/#debugsethook","text":"function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer )","title":"debug.sethook"},{"location":"doc/#debugsetlocal","text":"function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string","title":"debug.setlocal"},{"location":"doc/#debugsetmetatable","text":"function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T>","title":"debug.setmetatable"},{"location":"doc/#debugsetupvalue","text":"function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string","title":"debug.setupvalue"},{"location":"doc/#debugsetuservalue","text":"function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata","title":"debug.setuservalue"},{"location":"doc/#debugtraceback","text":"function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string","title":"debug.traceback"},{"location":"doc/#debugupvalueid","text":"function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata","title":"debug.upvalueid"},{"location":"doc/#debugupvaluejoin","text":"function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer)","title":"debug.upvaluejoin"},{"location":"doc/#debuginfo","text":"","title":"debuginfo"},{"location":"doc/#activelines","text":"table","title":"activelines"},{"location":"doc/#currentline","text":"integer","title":"currentline"},{"location":"doc/#func","text":"function","title":"func"},{"location":"doc/#istailcall","text":"boolean","title":"istailcall"},{"location":"doc/#isvararg","text":"boolean","title":"isvararg"},{"location":"doc/#lastlinedefined","text":"integer","title":"lastlinedefined"},{"location":"doc/#linedefined","text":"integer","title":"linedefined"},{"location":"doc/#name_13","text":"string","title":"name"},{"location":"doc/#namewhat","text":"string","title":"namewhat"},{"location":"doc/#nparams","text":"integer","title":"nparams"},{"location":"doc/#nups","text":"integer","title":"nups"},{"location":"doc/#short_src","text":"string","title":"short_src"},{"location":"doc/#source_1","text":"string","title":"source"},{"location":"doc/#what","text":"string","title":"what"},{"location":"doc/#debuglib","text":"","title":"debuglib"},{"location":"doc/#debug_4","text":"function debug. debug () Enters an interactive mode with the user, running each string that the user enters. View documents","title":"debug"},{"location":"doc/#getfenv","text":"function debug. getfenv ( o : any) -> table Returns the environment of object o . View documents","title":"getfenv"},{"location":"doc/#gethook","text":"function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer Returns the current hook settings of the thread. View documents","title":"gethook"},{"location":"doc/#getinfo","text":"function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo Returns a table with information about a function. View documents what : +> \" n \" -- `name` and `namewhat` +> \" S \" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what` +> \" l \" -- `currentline` +> \" t \" -- `istailcall` +> \" u \" -- `nups`, `nparams`, and `isvararg` +> \" f \" -- `func` +> \" L \" -- `activelines`","title":"getinfo"},{"location":"doc/#getlocal","text":"function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any Returns the name and the value of the local variable with index local of the function at level f of the stack. View documents","title":"getlocal"},{"location":"doc/#getmetatable","text":"function debug. getmetatable ( object : any) -> metatable : table Returns the metatable of the given value. View documents","title":"getmetatable"},{"location":"doc/#getregistry","text":"function debug. getregistry () -> table Returns the registry table. View documents","title":"getregistry"},{"location":"doc/#getupvalue","text":"function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any Returns the name and the value of the upvalue with index up of the function. View documents","title":"getupvalue"},{"location":"doc/#getuservalue","text":"function debug. getuservalue ( u : userdata) -> any Returns the Lua value associated to u. View documents","title":"getuservalue"},{"location":"doc/#setcstacklimit","text":"function debug. setcstacklimit ( limit : integer) -> boolean | integer","title":"setcstacklimit"},{"location":"doc/#deprecated-in-lua-542","text":"Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. In case of success, this function returns the old limit. In case of error, it returns false . View documents","title":"Deprecated in Lua 5.4.2"},{"location":"doc/#setfenv","text":"function debug. setfenv ( object : < T>, env : table) -> object : < T> Sets the environment of the given object to the given table . View documents","title":"setfenv"},{"location":"doc/#sethook","text":"function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) Sets the given function as a hook. View documents mask : +> \" c \" -- Calls hook when Lua calls a function. +> \" r \" -- Calls hook when Lua returns from a function. +> \" l \" -- Calls hook when Lua enters a new line of code.","title":"sethook"},{"location":"doc/#setlocal","text":"function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string Assigns the value to the local variable with index local of the function at level of the stack. View documents","title":"setlocal"},{"location":"doc/#setmetatable","text":"function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> Sets the metatable for the given value to the given table (which can be nil ). View documents","title":"setmetatable"},{"location":"doc/#setupvalue","text":"function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string Assigns the value to the upvalue with index up of the function. View documents","title":"setupvalue"},{"location":"doc/#setuservalue","text":"function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata Sets the given value as the Lua value associated to the given udata. View documents","title":"setuservalue"},{"location":"doc/#traceback","text":"function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback. View documents","title":"traceback"},{"location":"doc/#upvalueid","text":"function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata Returns a unique identifier (as a light userdata) for the upvalue numbered n from the given function. View documents","title":"upvalueid"},{"location":"doc/#upvaluejoin","text":"function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer) Make the n1 -th upvalue of the Lua closure f1 refer to the n2 -th upvalue of the Lua closure f2 . View documents","title":"upvaluejoin"},{"location":"doc/#dofile","text":"function dofile ( filename ? : string ) -> ... any","title":"dofile"},{"location":"doc/#error","text":"function error ( message : any, level ? : integer )","title":"error"},{"location":"doc/#exitcode","text":"","title":"exitcode"},{"location":"doc/#false","text":"","title":"false"},{"location":"doc/#ffivla","text":"","title":"ffi.VLA*"},{"location":"doc/#ffivls","text":"","title":"ffi.VLS*"},{"location":"doc/#fficb","text":"","title":"ffi.cb*"},{"location":"doc/#free","text":"( method ) ffi .cb*: free ()","title":"free"},{"location":"doc/#set_6","text":"( method ) ffi .cb*: set ( func : function)","title":"set"},{"location":"doc/#fficdata","text":"","title":"ffi.cdata*"},{"location":"doc/#fficdecl","text":"","title":"ffi.cdecl*"},{"location":"doc/#byte","text":"function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents","title":"byte"},{"location":"doc/#char_1","text":"function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents","title":"char"},{"location":"doc/#dump","text":"function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents","title":"dump"},{"location":"doc/#find","text":"function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured","title":"find"},{"location":"doc/#format","text":"function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents","title":"format"},{"location":"doc/#gmatch","text":"function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents","title":"gmatch"},{"location":"doc/#gsub","text":"function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents","title":"gsub"},{"location":"doc/#len","text":"function string. len ( s : string| number ) -> integer Returns its length. View documents","title":"len"},{"location":"doc/#lower","text":"function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents","title":"lower"},{"location":"doc/#match","text":"function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents","title":"match"},{"location":"doc/#pack","text":"function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents","title":"pack"},{"location":"doc/#packsize","text":"function string. packsize ( fmt : string) -> integer Miss locale View documents","title":"packsize"},{"location":"doc/#rep","text":"function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents","title":"rep"},{"location":"doc/#reverse","text":"function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents","title":"reverse"},{"location":"doc/#sub","text":"function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents","title":"sub"},{"location":"doc/#unpack","text":"function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents","title":"unpack"},{"location":"doc/#upper","text":"function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents","title":"upper"},{"location":"doc/#ffict","text":"","title":"ffi.ct*"},{"location":"doc/#ffictype","text":"","title":"ffi.ctype*"},{"location":"doc/#ffinamespace","text":"","title":"ffi.namespace*"},{"location":"doc/#string","text":"function","title":"[string]"},{"location":"doc/#ffilib","text":"","title":"ffilib"},{"location":"doc/#c","text":"ffi .namespace*","title":"C"},{"location":"doc/#abi","text":"function ffilib. abi ( param : string) -> status : boolean","title":"abi"},{"location":"doc/#alignof","text":"function ffilib. alignof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*) -> align : integer","title":"alignof"},{"location":"doc/#arch","text":"string","title":"arch"},{"location":"doc/#cast","text":"function ffilib. cast ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, init : any) -> cdata : ffi.cdata*","title":"cast"},{"location":"doc/#cdef","text":"function ffilib. cdef ( def : string, params ? : any , ... any )","title":"cdef"},{"location":"doc/#copy_3","text":"function ffilib. copy ( dst : any, src : any, len : integer)","title":"copy"},{"location":"doc/#errno","text":"function ffilib. errno ( newerr ? : integer ) -> err : integer","title":"errno"},{"location":"doc/#fill_3","text":"function ffilib. fill ( dst : any, len : integer, c ? : any )","title":"fill"},{"location":"doc/#gc","text":"function ffilib. gc ( cdata : ffi.cdata*, finalizer ? : function ) -> cdata: ffi. cdata *","title":"gc"},{"location":"doc/#istype","text":"function ffilib. istype ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, obj : any) -> status : boolean","title":"istype"},{"location":"doc/#load_5","text":"function ffilib. load ( name : string, global ? : boolean ) -> clib : ffi.namespace*","title":"load"},{"location":"doc/#metatype","text":"function ffilib. metatype ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, metatable : table) -> ctype : ffi.ctype*","title":"metatype"},{"location":"doc/#new","text":"function ffilib. new ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, nelem ? : integer , init ? : any , ... any ) -> cdata : ffi.cdata*","title":"new"},{"location":"doc/#offsetof","text":"function ffilib. offsetof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, field : string) -> ofs : integer 2. bpos : integer ? 3. bsize : integer ?","title":"offsetof"},{"location":"doc/#os","text":"string","title":"os"},{"location":"doc/#sizeof","text":"function ffilib. sizeof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, nelem ? : integer ) -> size : integer| nil","title":"sizeof"},{"location":"doc/#string_1","text":"function ffilib. string ( ptr : any, len ? : integer ) -> str : string","title":"string"},{"location":"doc/#typeof","text":"function ffilib. typeof ( ct : ffi.cdata*| ffi .cdecl*| ffi .ctype*, params ? : any , ... any ) -> ctype : ffi.ctype*","title":"typeof"},{"location":"doc/#file","text":"","title":"file*"},{"location":"doc/#close_1","text":"( method ) file *: close () -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Close file . View documents exitcode : | \" exit \" | \" signal \"","title":"close"},{"location":"doc/#flush","text":"( method ) file *: flush () Saves any written data to file . View documents","title":"flush"},{"location":"doc/#lines","text":"( method ) file *: lines (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown for c in file : lines (...) do body end View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line.","title":"lines"},{"location":"doc/#read","text":"( method ) file *: read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any Reads the file , according to the given formats, which specify what to read. View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line.","title":"read"},{"location":"doc/#seek","text":"( method ) file *: seek ( whence ? : \"cur\" | \"end\" | \"set\" , offset ? : integer ) -> offset : integer 2. errmsg : string ? Sets and gets the file position, measured from the beginning of the file. View documents whence : | \" set \" -- Base is beginning of the file. -> \" cur \" -- Base is current position. | \" end \" -- Base is end of file.","title":"seek"},{"location":"doc/#setvbuf","text":"( method ) file *: setvbuf ( mode : \" full \"|\" line \"|\" no \", size?: integer) Sets the buffering mode for an output file. View documents mode : | \" no \" -- Output operation appears immediately. | \" full \" -- Performed only when the buffer is full. | \" line \" -- Buffered until a newline is output.","title":"setvbuf"},{"location":"doc/#write","text":"( method ) file *: write (... string | number ) -> file * ? 2. errmsg : string ? Writes the value of each of its arguments to file . View documents","title":"write"},{"location":"doc/#filetype","text":"","title":"filetype"},{"location":"doc/#function","text":"","title":"function"},{"location":"doc/#gcoptions","text":"","title":"gcoptions"},{"location":"doc/#geometer_1","text":"table","title":"geometer"},{"location":"doc/#geometereditor","text":"unknown","title":"geometer.Editor"},{"location":"doc/#geometereditorstate","text":"unknown","title":"geometer.EditorState"},{"location":"doc/#geometermapgeneratorstate","text":"unknown","title":"geometer.MapGeneratorState"},{"location":"doc/#geometermodification","text":"unknown","title":"geometer.Modification"},{"location":"doc/#geometerprefabeditorstate","text":"unknown","title":"geometer.PrefabEditorState"},{"location":"doc/#geometertool","text":"unknown","title":"geometer.Tool"},{"location":"doc/#geometerassetpath","text":"string","title":"geometer.assetPath"},{"location":"doc/#geometerpath","text":"unknown","title":"geometer.path"},{"location":"doc/#geometerrequire","text":"function geometer. require ( p : any) -> unknown 2. nil","title":"geometer.require"},{"location":"doc/#getfenv_1","text":"function getfenv ( f ? : integer | fun (... any ):... unknown ) -> table","title":"getfenv"},{"location":"doc/#getmetatable_1","text":"function getmetatable ( object : any) -> metatable : table","title":"getmetatable"},{"location":"doc/#hookmask","text":"","title":"hookmask"},{"location":"doc/#infowhat","text":"","title":"infowhat"},{"location":"doc/#integer","text":"","title":"integer"},{"location":"doc/#io","text":"iolib","title":"io"},{"location":"doc/#ioclose","text":"function io. close ( file ? : file *) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer?","title":"io.close"},{"location":"doc/#ioflush","text":"function io. flush ()","title":"io.flush"},{"location":"doc/#ioinput","text":"function io. input ( file : string| file *)","title":"io.input"},{"location":"doc/#iolines","text":"function io. lines ( filename ? : string , ... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown","title":"io.lines"},{"location":"doc/#ioopen","text":"function io. open ( filename : string, mode ? : \"a\" | \"a+\" | \"a+b\" | \"ab\" | \"r\" ...(+ 7 )) -> file * ? 2. errmsg : string ?","title":"io.open"},{"location":"doc/#iooutput","text":"function io. output ( file : string| file *)","title":"io.output"},{"location":"doc/#iopopen","text":"function io. popen ( prog : string, mode ? : \"r\" | \"w\" ) -> file * ? 2. errmsg : string ?","title":"io.popen"},{"location":"doc/#ioread","text":"function io. read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any","title":"io.read"},{"location":"doc/#iotmpfile","text":"function io. tmpfile () -> file *","title":"io.tmpfile"},{"location":"doc/#iotype","text":"function io. type ( file : file*) -> \"closed file\" | \"file\" | ` nil `","title":"io.type"},{"location":"doc/#iowrite","text":"function io. write (... any ) -> file * 2. errmsg : string ?","title":"io.write"},{"location":"doc/#iolib","text":"","title":"iolib"},{"location":"doc/#close_2","text":"function io. close ( file ? : file *) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Close file or default output file. View documents exitcode : | \" exit \" | \" signal \"","title":"close"},{"location":"doc/#flush_1","text":"function io. flush () Saves any written data to default output file. View documents","title":"flush"},{"location":"doc/#input","text":"function io. input ( file : string| file *) Sets file as the default input file. View documents","title":"input"},{"location":"doc/#lines_1","text":"function io. lines ( filename ? : string , ... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> fun (): any , ... unknown for c in io.lines ( filename , ...) do body end View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line.","title":"lines"},{"location":"doc/#open_1","text":"function io. open ( filename : string, mode ? : \"a\" | \"a+\" | \"a+b\" | \"ab\" | \"r\" ...(+ 7 )) -> file * ? 2. errmsg : string ? Opens a file, in the mode specified in the string mode . View documents mode : -> \" r \" -- Read mode. | \" w \" -- Write mode. | \" a \" -- Append mode. | \" r + \" -- Update mode, all previous data is preserved. | \" w + \" -- Update mode, all previous data is erased. | \" a + \" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. | \" rb \" -- Read mode. (in binary mode.) | \" wb \" -- Write mode. (in binary mode.) | \" ab \" -- Append mode. (in binary mode.) | \" r + b \" -- Update mode, all previous data is preserved. (in binary mode.) | \" w + b \" -- Update mode, all previous data is erased. (in binary mode.) | \" a + b \" -- Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)","title":"open"},{"location":"doc/#output","text":"function io. output ( file : string| file *) Sets file as the default output file. View documents","title":"output"},{"location":"doc/#popen","text":"function io. popen ( prog : string, mode ? : \"r\" | \"w\" ) -> file * ? 2. errmsg : string ? Starts program prog in a separated process. View documents mode : | \" r \" -- Read data from this program by `file`. | \" w \" -- Write data to this program by `file`.","title":"popen"},{"location":"doc/#read_1","text":"function io. read (... string | integer | \"*L\" | \"*a\" | \"*l\" ...(+ 1 )) -> any 2. ... any Reads the file , according to the given formats, which specify what to read. View documents ...( param ): | \"*n\" -- Reads a numeral and returns it as number. | \"*a\" -- Reads the whole file. -> \"*l\" -- Reads the next line skipping the end of line. | \"*L\" -- Reads the next line keeping the end of line.","title":"read"},{"location":"doc/#stderr","text":"file * standard error. View documents","title":"stderr"},{"location":"doc/#stdin","text":"file * standard input. View documents","title":"stdin"},{"location":"doc/#stdout","text":"file * standard output. View documents","title":"stdout"},{"location":"doc/#tmpfile","text":"function io. tmpfile () -> file * In case of success, returns a handle for a temporary file. View documents","title":"tmpfile"},{"location":"doc/#type","text":"function io. type ( file : file*) -> \"closed file\" | \"file\" | ` nil ` Checks whether obj is a valid file handle. View documents return # 1 : | \"file\" -- Is an open file handle. | \"closed file\" -- Is a closed file handle. | ` nil ` -- Is not a file handle.","title":"type"},{"location":"doc/#write_1","text":"function io. write (... any ) -> file * 2. errmsg : string ? Writes the value of each of its arguments to default output file. View documents","title":"write"},{"location":"doc/#ipairs","text":"function ipairs ( t : < T:table>) -> fun ( table : < V>[], i ? : integer ): integer , < V > 2. < T :table> 3. i : integer","title":"ipairs"},{"location":"doc/#jit","text":"jitlib","title":"jit"},{"location":"doc/#jitflush","text":"function jit. flush ( func : boolean| function , recursive ? : boolean )","title":"jit.flush"},{"location":"doc/#jitfuncinfoc","text":"","title":"jit.funcinfo.c"},{"location":"doc/#ffid","text":"integer | nil","title":"ffid"},{"location":"doc/#jitfuncinfolua","text":"","title":"jit.funcinfo.lua"},{"location":"doc/#jitoff","text":"function jit. off ( func : boolean| function , recursive ? : boolean )","title":"jit.off"},{"location":"doc/#jiton","text":"function jit. on ( func : boolean| function , recursive ? : boolean )","title":"jit.on"},{"location":"doc/#jitopt","text":"table","title":"jit.opt"},{"location":"doc/#jitoptstart","text":"function jit.opt. start (... any )","title":"jit.opt.start"},{"location":"doc/#jitsnap","text":"","title":"jit.snap"},{"location":"doc/#jitstatus","text":"function jit. status () -> status : boolean 2. ... string","title":"jit.status"},{"location":"doc/#jittraceinfo","text":"","title":"jit.traceinfo"},{"location":"doc/#jitlib","text":"","title":"jitlib"},{"location":"doc/#arch_1","text":"string | 'arm' | 'arm64' | 'arm64be' | 'mips' ...(+ 8 )","title":"arch"},{"location":"doc/#flush_2","text":"function jit. flush ( func : boolean| function , recursive ? : boolean )","title":"flush"},{"location":"doc/#off","text":"function jit. off ( func : boolean| function , recursive ? : boolean )","title":"off"},{"location":"doc/#on_11","text":"function jit. on ( func : boolean| function , recursive ? : boolean )","title":"on"},{"location":"doc/#opt","text":"table","title":"opt"},{"location":"doc/#os_1","text":"'BSD' | 'Linux' | 'OSX' | 'Other' | 'POSIX' ...(+ 1 )","title":"os"},{"location":"doc/#status_1","text":"function jit. status () -> status : boolean 2. ... string","title":"status"},{"location":"doc/#version","text":"string","title":"version"},{"location":"doc/#version_num","text":"number","title":"version_num"},{"location":"doc/#lightuserdata","text":"","title":"lightuserdata"},{"location":"doc/#load_6","text":"function load ( chunk : string| function , chunkname ? : string , mode ? : \"b\" | \"bt\" | \"t\" , env ? : table ) -> function ? 2 . error_message: string ?","title":"load"},{"location":"doc/#loadfile","text":"function loadfile ( filename ? : string , mode ? : \"b\" | \"bt\" | \"t\" , env ? : table ) -> function ? 2 . error_message: string ?","title":"loadfile"},{"location":"doc/#loadmode","text":"","title":"loadmode"},{"location":"doc/#loadstring","text":"function loadstring ( text : string, chunkname ? : string ) -> function ? 2 . error_message: string ?","title":"loadstring"},{"location":"doc/#localecategory","text":"","title":"localecategory"},{"location":"doc/#love","text":"","title":"love"},{"location":"doc/#audio","text":"love .audio Provides an interface to create noise with the user's speakers. Open in Browser","title":"audio"},{"location":"doc/#conf","text":"function love. conf ( t : any)","title":"conf"},{"location":"doc/#data_5","text":"love .data Provides functionality for creating and transforming data. Open in Browser","title":"data"},{"location":"doc/#event","text":"love .event Manages events, like keypresses. Open in Browser","title":"event"},{"location":"doc/#filesystem","text":"love .filesystem Provides an interface to the user's filesystem. Open in Browser","title":"filesystem"},{"location":"doc/#font_1","text":"love .font Allows you to work with fonts. Open in Browser","title":"font"},{"location":"doc/#getversion","text":"function love. getVersion () -> major : number 2. minor : number 3. revision : number 4. codename : string Gets the current running version of L\u00d6VE. Open in Browser @ return major \u2014 The major version of L\u00d6VE, i.e. 0 for version 0.9.1. @ return minor \u2014 The minor version of L\u00d6VE, i.e. 9 for version 0.9.1. @ return revision \u2014 The revision version of L\u00d6VE, i.e. 1 for version 0.9.1. @ return codename \u2014 The codename of the current version, i.e. 'Baby Inspector' for version 0.9.1.","title":"getVersion"},{"location":"doc/#graphics","text":"love .graphics The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Canvases) and managing screen geometry. L\u00d6VE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom. In many cases, you draw images or shapes in terms of their upper-left corner. Many of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way. Open in Browser","title":"graphics"},{"location":"doc/#hasdeprecationoutput","text":"function love. hasDeprecationOutput () -> enabled : boolean Gets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise. When deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console. Open in Browser @ return enabled \u2014 Whether deprecation output is enabled.","title":"hasDeprecationOutput"},{"location":"doc/#image_1","text":"love .image Provides an interface to decode encoded image data. Open in Browser","title":"image"},{"location":"doc/#isversioncompatible","text":"function love. isVersionCompatible ( version : string) -> compatible : boolean Gets whether the given version is compatible with the current running version of L\u00d6VE. Open in Browser @ param version \u2014 The version to check (for example '11.3' or '0.10.2'). @ return compatible \u2014 Whether the given version is compatible with the current running version of L\u00d6VE.","title":"isVersionCompatible"},{"location":"doc/#joystick","text":"love .joystick Provides an interface to the user's joystick. Open in Browser","title":"joystick"},{"location":"doc/#keyboard","text":"love .keyboard Provides an interface to the user's keyboard. Open in Browser","title":"keyboard"},{"location":"doc/#math","text":"love .math Provides system-independent mathematical functions. Open in Browser","title":"math"},{"location":"doc/#mouse","text":"love .mouse Provides an interface to the user's mouse. Open in Browser","title":"mouse"},{"location":"doc/#physics","text":"love .physics Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible. Open in Browser","title":"physics"},{"location":"doc/#setdeprecationoutput","text":"function love. setDeprecationOutput ( enable : boolean) Sets whether L\u00d6VE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise. When deprecation output is enabled, the first use of a formally deprecated L\u00d6VE API will show a message at the bottom of the screen for a short time, and print the message to the console. Open in Browser @ param enable \u2014 Whether to enable or disable deprecation output.","title":"setDeprecationOutput"},{"location":"doc/#sound","text":"love .sound This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that. Open in Browser","title":"sound"},{"location":"doc/#system_1","text":"love .system Provides access to information about the user's system. Open in Browser","title":"system"},{"location":"doc/#thread","text":"love .thread Allows you to work with threads. Threads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited. All LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time. When a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require. Open in Browser","title":"thread"},{"location":"doc/#timer","text":"love .timer Provides an interface to the user's clock. Open in Browser","title":"timer"},{"location":"doc/#touch","text":"love .touch Provides an interface to touch-screen presses. Open in Browser","title":"touch"},{"location":"doc/#video","text":"love .video This module is responsible for decoding, controlling, and streaming video files. It can't draw the videos, see love.graphics.newVideo and Video objects for that. Open in Browser","title":"video"},{"location":"doc/#window","text":"love .window Provides an interface for modifying and retrieving information about the program's window. Open in Browser","title":"window"},{"location":"doc/#love_1","text":"love","title":"love"},{"location":"doc/#lovealignmode","text":"","title":"love.AlignMode"},{"location":"doc/#lovearctype","text":"","title":"love.ArcType"},{"location":"doc/#loveareaspreaddistribution","text":"","title":"love.AreaSpreadDistribution"},{"location":"doc/#lovebeziercurve","text":"","title":"love.BezierCurve"},{"location":"doc/#evaluate","text":"( method ) love .BezierCurve: evaluate ( t : number) -> x : number 2. y : number Evaluate B\u00e9zier curve at parameter t. The parameter must be between 0 and 1 (inclusive). This function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see BezierCurve:render for that purpose. Open in Browser @ param t \u2014 Where to evaluate the curve. @ return x \u2014 x coordinate of the curve at parameter t. @ return y \u2014 y coordinate of the curve at parameter t.","title":"evaluate"},{"location":"doc/#getcontrolpoint","text":"( method ) love .BezierCurve: getControlPoint ( i : number) -> x : number 2. y : number Get coordinates of the i-th control point. Indices start with 1. Open in Browser @ param i \u2014 Index of the control point. @ return x \u2014 Position of the control point along the x axis. @ return y \u2014 Position of the control point along the y axis.","title":"getControlPoint"},{"location":"doc/#getcontrolpointcount","text":"( method ) love .BezierCurve: getControlPointCount () -> count : number Get the number of control points in the B\u00e9zier curve. Open in Browser @ return count \u2014 The number of control points.","title":"getControlPointCount"},{"location":"doc/#getdegree","text":"( method ) love .BezierCurve: getDegree () -> degree : number Get degree of the B\u00e9zier curve. The degree is equal to number-of-control-points - 1. Open in Browser @ return degree \u2014 Degree of the B\u00e9zier curve.","title":"getDegree"},{"location":"doc/#getderivative","text":"( method ) love .BezierCurve: getDerivative () -> derivative : love.BezierCurve Get the derivative of the B\u00e9zier curve. This function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t. Open in Browser @ return derivative \u2014 The derivative curve.","title":"getDerivative"},{"location":"doc/#getsegment","text":"( method ) love .BezierCurve: getSegment ( startpoint : number, endpoint : number) -> curve : love.BezierCurve Gets a BezierCurve that corresponds to the specified segment of this BezierCurve. Open in Browser @ param startpoint \u2014 The starting point along the curve. Must be between 0 and 1. @ param endpoint \u2014 The end of the segment. Must be between 0 and 1. @ return curve \u2014 A BezierCurve that corresponds to the specified segment.","title":"getSegment"},{"location":"doc/#insertcontrolpoint","text":"( method ) love .BezierCurve: insertControlPoint ( x : number, y : number, i ? : number ) Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc. Open in Browser @ param x \u2014 Position of the control point along the x axis. @ param y \u2014 Position of the control point along the y axis. @ param i \u2014 Index of the control point.","title":"insertControlPoint"},{"location":"doc/#release","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#removecontrolpoint","text":"( method ) love .BezierCurve: removeControlPoint ( index : number) Removes the specified control point. Open in Browser @ param index \u2014 The index of the control point to remove.","title":"removeControlPoint"},{"location":"doc/#render_12","text":"( method ) love .BezierCurve: render ( depth ? : number ) -> coordinates : table Get a list of coordinates to be used with love.graphics.line. This function samples the B\u00e9zier curve using recursive subdivision. You can control the recursion depth using the depth parameter. If you are just interested to know the position on the curve given a parameter, use BezierCurve:evaluate. Open in Browser @ param depth \u2014 Number of recursive subdivision steps. @ return coordinates \u2014 List of x,y-coordinate pairs of points on the curve.","title":"render"},{"location":"doc/#rendersegment","text":"( method ) love .BezierCurve: renderSegment ( startpoint : number, endpoint : number, depth ? : number ) -> coordinates : table Get a list of coordinates on a specific part of the curve, to be used with love.graphics.line. This function samples the B\u00e9zier curve using recursive subdivision. You can control the recursion depth using the depth parameter. If you are just need to know the position on the curve given a parameter, use BezierCurve:evaluate. Open in Browser @ param startpoint \u2014 The starting point along the curve. Must be between 0 and 1. @ param endpoint \u2014 The end of the segment to render. Must be between 0 and 1. @ param depth \u2014 Number of recursive subdivision steps. @ return coordinates \u2014 List of x,y-coordinate pairs of points on the specified part of the curve.","title":"renderSegment"},{"location":"doc/#rotate","text":"( method ) love .BezierCurve: rotate ( angle : number, ox ? : number , oy ? : number ) Rotate the B\u00e9zier curve by an angle. Open in Browser @ param angle \u2014 Rotation angle in radians. @ param ox \u2014 X coordinate of the rotation center. @ param oy \u2014 Y coordinate of the rotation center.","title":"rotate"},{"location":"doc/#scale_4","text":"( method ) love .BezierCurve: scale ( s : number, ox ? : number , oy ? : number ) Scale the B\u00e9zier curve by a factor. Open in Browser @ param s \u2014 Scale factor. @ param ox \u2014 X coordinate of the scaling center. @ param oy \u2014 Y coordinate of the scaling center.","title":"scale"},{"location":"doc/#setcontrolpoint","text":"( method ) love .BezierCurve: setControlPoint ( i : number, x : number, y : number) Set coordinates of the i-th control point. Indices start with 1. Open in Browser @ param i \u2014 Index of the control point. @ param x \u2014 Position of the control point along the x axis. @ param y \u2014 Position of the control point along the y axis.","title":"setControlPoint"},{"location":"doc/#translate","text":"( method ) love .BezierCurve: translate ( dx : number, dy : number) Move the B\u00e9zier curve by an offset. Open in Browser @ param dx \u2014 Offset along the x axis. @ param dy \u2014 Offset along the y axis.","title":"translate"},{"location":"doc/#type_1","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_1","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveblendalphamode","text":"","title":"love.BlendAlphaMode"},{"location":"doc/#loveblendmode","text":"","title":"love.BlendMode"},{"location":"doc/#lovebody","text":"","title":"love.Body"},{"location":"doc/#applyangularimpulse","text":"( method ) love .Body: applyAngularImpulse ( impulse : number) Applies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce. Open in Browser @ param impulse \u2014 The impulse in kilogram-square meter per second.","title":"applyAngularImpulse"},{"location":"doc/#applyforce","text":"( method ) love .Body: applyForce ( fx : number, fy : number) Apply force to a Body. A force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse. If the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the force components and position must be given in world coordinates. Open in Browser @ param fx \u2014 The x component of force to apply to the center of mass. @ param fy \u2014 The y component of force to apply to the center of mass.","title":"applyForce"},{"location":"doc/#applylinearimpulse","text":"( method ) love .Body: applyLinearImpulse ( ix : number, iy : number) Applies an impulse to a body. This makes a single, instantaneous addition to the body momentum. An impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce. If the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). Note that the impulse components and position must be given in world coordinates. Open in Browser @ param ix \u2014 The x component of the impulse applied to the center of mass. @ param iy \u2014 The y component of the impulse applied to the center of mass.","title":"applyLinearImpulse"},{"location":"doc/#applytorque","text":"( method ) love .Body: applyTorque ( torque : number) Apply torque to a body. Torque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has. Open in Browser @ param torque \u2014 The torque to apply.","title":"applyTorque"},{"location":"doc/#destroy","text":"( method ) love .Body: destroy () Explicitly destroys the Body and all fixtures and joints attached to it. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getangle","text":"( method ) love .Body: getAngle () -> angle : number Get the angle of the body. The angle is measured in radians. If you need to transform it to degrees, use math.deg. A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view. Open in Browser @ return angle \u2014 The angle in radians.","title":"getAngle"},{"location":"doc/#getangulardamping","text":"( method ) love .Body: getAngularDamping () -> damping : number Gets the Angular damping of the Body The angular damping is the ''rate of decrease of the angular velocity over time'': A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning. Damping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE). Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1. Open in Browser @ return damping \u2014 The value of the angular damping.","title":"getAngularDamping"},{"location":"doc/#getangularvelocity","text":"( method ) love .Body: getAngularVelocity () -> w : number Get the angular velocity of the Body. The angular velocity is the ''rate of change of angle over time''. It is changed in World:update by applying torques, off centre forces/impulses, and angular damping. It can be set directly with Body:setAngularVelocity. If you need the ''rate of change of position over time'', use Body:getLinearVelocity. Open in Browser @ return w \u2014 The angular velocity in radians/second.","title":"getAngularVelocity"},{"location":"doc/#getcontacts","text":"( method ) love .Body: getContacts () -> contacts : table Gets a list of all Contacts attached to the Body. Open in Browser @ return contacts \u2014 A list with all contacts associated with the Body.","title":"getContacts"},{"location":"doc/#getfixtures","text":"( method ) love .Body: getFixtures () -> fixtures : table Returns a table with all fixtures. Open in Browser @ return fixtures \u2014 A sequence with all fixtures.","title":"getFixtures"},{"location":"doc/#getgravityscale","text":"( method ) love .Body: getGravityScale () -> scale : number Returns the gravity scale factor. Open in Browser @ return scale \u2014 The gravity scale factor.","title":"getGravityScale"},{"location":"doc/#getinertia","text":"( method ) love .Body: getInertia () -> inertia : number Gets the rotational inertia of the body. The rotational inertia is how hard is it to make the body spin. Open in Browser @ return inertia \u2014 The rotational inertial of the body.","title":"getInertia"},{"location":"doc/#getjoints","text":"( method ) love .Body: getJoints () -> joints : table Returns a table containing the Joints attached to this Body. Open in Browser @ return joints \u2014 A sequence with the Joints attached to the Body.","title":"getJoints"},{"location":"doc/#getlineardamping","text":"( method ) love .Body: getLinearDamping () -> damping : number Gets the linear damping of the Body. The linear damping is the ''rate of decrease of the linear velocity over time''. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving. Damping is not the same as friction - they can be modelled together. Open in Browser @ return damping \u2014 The value of the linear damping.","title":"getLinearDamping"},{"location":"doc/#getlinearvelocity","text":"( method ) love .Body: getLinearVelocity () -> x : number 2. y : number Gets the linear velocity of the Body from its center of mass. The linear velocity is the ''rate of change of position over time''. If you need the ''rate of change of angle over time'', use Body:getAngularVelocity. If you need to get the linear velocity of a point different from the center of mass: Body:getLinearVelocityFromLocalPoint allows you to specify the point in local coordinates. Body:getLinearVelocityFromWorldPoint allows you to specify the point in world coordinates. See page 136 of 'Essential Mathematics for Games and Interactive Applications' for definitions of local and world coordinates. Open in Browser @ return x \u2014 The x-component of the velocity vector @ return y \u2014 The y-component of the velocity vector","title":"getLinearVelocity"},{"location":"doc/#getlinearvelocityfromlocalpoint","text":"( method ) love .Body: getLinearVelocityFromLocalPoint ( x : number, y : number) -> vx : number 2. vy : number Get the linear velocity of a point on the body. The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning. The point on the body must given in local coordinates. Use Body:getLinearVelocityFromWorldPoint to specify this with world coordinates. Open in Browser @ param x \u2014 The x position to measure velocity. @ param y \u2014 The y position to measure velocity. @ return vx \u2014 The x component of velocity at point (x,y). @ return vy \u2014 The y component of velocity at point (x,y).","title":"getLinearVelocityFromLocalPoint"},{"location":"doc/#getlinearvelocityfromworldpoint","text":"( method ) love .Body: getLinearVelocityFromWorldPoint ( x : number, y : number) -> vx : number 2. vy : number Get the linear velocity of a point on the body. The linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning. The point on the body must given in world coordinates. Use Body:getLinearVelocityFromLocalPoint to specify this with local coordinates. Open in Browser @ param x \u2014 The x position to measure velocity. @ param y \u2014 The y position to measure velocity. @ return vx \u2014 The x component of velocity at point (x,y). @ return vy \u2014 The y component of velocity at point (x,y).","title":"getLinearVelocityFromWorldPoint"},{"location":"doc/#getlocalcenter","text":"( method ) love .Body: getLocalCenter () -> x : number 2. y : number Get the center of mass position in local coordinates. Use Body:getWorldCenter to get the center of mass in world coordinates. Open in Browser @ return x \u2014 The x coordinate of the center of mass. @ return y \u2014 The y coordinate of the center of mass.","title":"getLocalCenter"},{"location":"doc/#getlocalpoint","text":"( method ) love .Body: getLocalPoint ( worldX : number, worldY : number) -> localX : number 2. localY : number Transform a point from world coordinates to local coordinates. Open in Browser @ param worldX \u2014 The x position in world coordinates. @ param worldY \u2014 The y position in world coordinates. @ return localX \u2014 The x position in local coordinates. @ return localY \u2014 The y position in local coordinates.","title":"getLocalPoint"},{"location":"doc/#getlocalpoints","text":"( method ) love .Body: getLocalPoints ( x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Transforms multiple points from world coordinates to local coordinates. Open in Browser @ param x1 \u2014 (Argument) The x position of the first point. @ param y1 \u2014 (Argument) The y position of the first point. @ param x2 \u2014 (Argument) The x position of the second point. @ param y2 \u2014 (Argument) The y position of the second point. @ return x1 \u2014 (Result) The transformed x position of the first point. @ return y1 \u2014 (Result) The transformed y position of the first point. @ return x2 \u2014 (Result) The transformed x position of the second point. @ return y2 \u2014 (Result) The transformed y position of the second point.","title":"getLocalPoints"},{"location":"doc/#getlocalvector","text":"( method ) love .Body: getLocalVector ( worldX : number, worldY : number) -> localX : number 2. localY : number Transform a vector from world coordinates to local coordinates. Open in Browser @ param worldX \u2014 The vector x component in world coordinates. @ param worldY \u2014 The vector y component in world coordinates. @ return localX \u2014 The vector x component in local coordinates. @ return localY \u2014 The vector y component in local coordinates.","title":"getLocalVector"},{"location":"doc/#getmass","text":"( method ) love .Body: getMass () -> mass : number Get the mass of the body. Static bodies always have a mass of 0. Open in Browser @ return mass \u2014 The mass of the body (in kilograms).","title":"getMass"},{"location":"doc/#getmassdata","text":"( method ) love .Body: getMassData () -> x : number 2. y : number 3. mass : number 4. inertia : number Returns the mass, its center, and the rotational inertia. Open in Browser @ return x \u2014 The x position of the center of mass. @ return y \u2014 The y position of the center of mass. @ return mass \u2014 The mass of the body. @ return inertia \u2014 The rotational inertia.","title":"getMassData"},{"location":"doc/#getposition_4","text":"( method ) love .Body: getPosition () -> x : number 2. y : number Get the position of the body. Note that this may not be the center of mass of the body. Open in Browser @ return x \u2014 The x position. @ return y \u2014 The y position.","title":"getPosition"},{"location":"doc/#gettransform","text":"( method ) love .Body: getTransform () -> x : number 2. y : number 3. angle : number Get the position and angle of the body. Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view. Open in Browser @ return x \u2014 The x component of the position. @ return y \u2014 The y component of the position. @ return angle \u2014 The angle in radians.","title":"getTransform"},{"location":"doc/#gettype","text":"( method ) love .Body: getType () -> type : \"dynamic\" | \"kinematic\" | \"static\" Returns the type of the body. Open in Browser @ return type \u2014 The body type. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies.","title":"getType"},{"location":"doc/#getuserdata","text":"( method ) love .Body: getUserData () -> value : any Returns the Lua value associated with this Body. Open in Browser @ return value \u2014 The Lua value associated with the Body.","title":"getUserData"},{"location":"doc/#getworld","text":"( method ) love .Body: getWorld () -> world : love.World Gets the World the body lives in. Open in Browser @ return world \u2014 The world the body lives in.","title":"getWorld"},{"location":"doc/#getworldcenter","text":"( method ) love .Body: getWorldCenter () -> x : number 2. y : number Get the center of mass position in world coordinates. Use Body:getLocalCenter to get the center of mass in local coordinates. Open in Browser @ return x \u2014 The x coordinate of the center of mass. @ return y \u2014 The y coordinate of the center of mass.","title":"getWorldCenter"},{"location":"doc/#getworldpoint","text":"( method ) love .Body: getWorldPoint ( localX : number, localY : number) -> worldX : number 2. worldY : number Transform a point from local coordinates to world coordinates. Open in Browser @ param localX \u2014 The x position in local coordinates. @ param localY \u2014 The y position in local coordinates. @ return worldX \u2014 The x position in world coordinates. @ return worldY \u2014 The y position in world coordinates.","title":"getWorldPoint"},{"location":"doc/#getworldpoints","text":"( method ) love .Body: getWorldPoints ( x1 : number, y1 : number, x2 : number, y2 : number) -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Transforms multiple points from local coordinates to world coordinates. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return x1 \u2014 The transformed x position of the first point. @ return y1 \u2014 The transformed y position of the first point. @ return x2 \u2014 The transformed x position of the second point. @ return y2 \u2014 The transformed y position of the second point.","title":"getWorldPoints"},{"location":"doc/#getworldvector","text":"( method ) love .Body: getWorldVector ( localX : number, localY : number) -> worldX : number 2. worldY : number Transform a vector from local coordinates to world coordinates. Open in Browser @ param localX \u2014 The vector x component in local coordinates. @ param localY \u2014 The vector y component in local coordinates. @ return worldX \u2014 The vector x component in world coordinates. @ return worldY \u2014 The vector y component in world coordinates.","title":"getWorldVector"},{"location":"doc/#getx","text":"( method ) love .Body: getX () -> x : number Get the x position of the body in world coordinates. Open in Browser @ return x \u2014 The x position in world coordinates.","title":"getX"},{"location":"doc/#gety","text":"( method ) love .Body: getY () -> y : number Get the y position of the body in world coordinates. Open in Browser @ return y \u2014 The y position in world coordinates.","title":"getY"},{"location":"doc/#isactive_3","text":"( method ) love .Body: isActive () -> status : boolean Returns whether the body is actively used in the simulation. Open in Browser @ return status \u2014 True if the body is active or false if not.","title":"isActive"},{"location":"doc/#isawake","text":"( method ) love .Body: isAwake () -> status : boolean Returns the sleep status of the body. Open in Browser @ return status \u2014 True if the body is awake or false if not.","title":"isAwake"},{"location":"doc/#isbullet","text":"( method ) love .Body: isBullet () -> status : boolean Get the bullet status of a body. There are two methods to check for body collisions: at their location when the world is updated (default) using continuous collision detection (CCD) The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly. Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet. Open in Browser @ return status \u2014 The bullet status of the body.","title":"isBullet"},{"location":"doc/#isdestroyed","text":"( method ) love .Body: isDestroyed () -> destroyed : boolean Gets whether the Body is destroyed. Destroyed bodies cannot be used. Open in Browser @ return destroyed \u2014 Whether the Body is destroyed.","title":"isDestroyed"},{"location":"doc/#isfixedrotation","text":"( method ) love .Body: isFixedRotation () -> fixed : boolean Returns whether the body rotation is locked. Open in Browser @ return fixed \u2014 True if the body's rotation is locked or false if not.","title":"isFixedRotation"},{"location":"doc/#issleepingallowed","text":"( method ) love .Body: isSleepingAllowed () -> allowed : boolean Returns the sleeping behaviour of the body. Open in Browser @ return allowed \u2014 True if the body is allowed to sleep or false if not.","title":"isSleepingAllowed"},{"location":"doc/#istouching","text":"( method ) love .Body: isTouching ( otherbody : love.Body) -> touching : boolean Gets whether the Body is touching the given other Body. Open in Browser @ param otherbody \u2014 The other body to check. @ return touching \u2014 True if this body is touching the other body, false otherwise.","title":"isTouching"},{"location":"doc/#release_1","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#resetmassdata","text":"( method ) love .Body: resetMassData () Resets the mass of the body by recalculating it from the mass properties of the fixtures. Open in Browser","title":"resetMassData"},{"location":"doc/#setactive_2","text":"( method ) love .Body: setActive ( active : boolean) Sets whether the body is active in the world. An inactive body does not take part in the simulation. It will not move or cause any collisions. Open in Browser @ param active \u2014 If the body is active or not.","title":"setActive"},{"location":"doc/#setangle","text":"( method ) love .Body: setAngle ( angle : number) Set the angle of the body. The angle is measured in radians. If you need to transform it from degrees, use math.rad. A value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view. It is possible to cause a collision with another body by changing its angle. Open in Browser @ param angle \u2014 The angle in radians.","title":"setAngle"},{"location":"doc/#setangulardamping","text":"( method ) love .Body: setAngularDamping ( damping : number) Sets the angular damping of a Body See Body:getAngularDamping for a definition of angular damping. Angular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic. Open in Browser @ param damping \u2014 The new angular damping.","title":"setAngularDamping"},{"location":"doc/#setangularvelocity","text":"( method ) love .Body: setAngularVelocity ( w : number) Sets the angular velocity of a Body. The angular velocity is the ''rate of change of angle over time''. This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. Open in Browser @ param w \u2014 The new angular velocity, in radians per second","title":"setAngularVelocity"},{"location":"doc/#setawake","text":"( method ) love .Body: setAwake ( awake : boolean) Wakes the body up or puts it to sleep. Open in Browser @ param awake \u2014 The body sleep status.","title":"setAwake"},{"location":"doc/#setbullet","text":"( method ) love .Body: setBullet ( status : boolean) Set the bullet status of a body. There are two methods to check for body collisions: at their location when the world is updated (default) using continuous collision detection (CCD) The default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly. Note that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet. Open in Browser @ param status \u2014 The bullet status of the body.","title":"setBullet"},{"location":"doc/#setfixedrotation","text":"( method ) love .Body: setFixedRotation ( isFixed : boolean) Set whether a body has fixed rotation. Bodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset. Open in Browser @ param isFixed \u2014 Whether the body should have fixed rotation.","title":"setFixedRotation"},{"location":"doc/#setgravityscale","text":"( method ) love .Body: setGravityScale ( scale : number) Sets a new gravity scale factor for the body. Open in Browser @ param scale \u2014 The new gravity scale factor.","title":"setGravityScale"},{"location":"doc/#setinertia","text":"( method ) love .Body: setInertia ( inertia : number) Set the inertia of a body. Open in Browser @ param inertia \u2014 The new moment of inertia, in kilograms * pixel squared.","title":"setInertia"},{"location":"doc/#setlineardamping","text":"( method ) love .Body: setLinearDamping ( ld : number) Sets the linear damping of a Body See Body:getLinearDamping for a definition of linear damping. Linear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look 'floaty'(if gravity is enabled). Open in Browser @ param ld \u2014 The new linear damping","title":"setLinearDamping"},{"location":"doc/#setlinearvelocity","text":"( method ) love .Body: setLinearVelocity ( x : number, y : number) Sets a new linear velocity for the Body. This function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. Open in Browser @ param x \u2014 The x-component of the velocity vector. @ param y \u2014 The y-component of the velocity vector.","title":"setLinearVelocity"},{"location":"doc/#setmass","text":"( method ) love .Body: setMass ( mass : number) Sets a new body mass. Open in Browser @ param mass \u2014 The mass, in kilograms.","title":"setMass"},{"location":"doc/#setmassdata","text":"( method ) love .Body: setMassData ( x : number, y : number, mass : number, inertia : number) Overrides the calculated mass data. Open in Browser @ param x \u2014 The x position of the center of mass. @ param y \u2014 The y position of the center of mass. @ param mass \u2014 The mass of the body. @ param inertia \u2014 The rotational inertia.","title":"setMassData"},{"location":"doc/#setposition_3","text":"( method ) love .Body: setPosition ( x : number, y : number) Set the position of the body. Note that this may not be the center of mass of the body. This function cannot wake up the body. Open in Browser @ param x \u2014 The x position. @ param y \u2014 The y position.","title":"setPosition"},{"location":"doc/#setsleepingallowed","text":"( method ) love .Body: setSleepingAllowed ( allowed : boolean) Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed. Open in Browser @ param allowed \u2014 True if the body is allowed to sleep or false if not.","title":"setSleepingAllowed"},{"location":"doc/#settransform","text":"( method ) love .Body: setTransform ( x : number, y : number, angle : number) Set the position and angle of the body. Note that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view. This function cannot wake up the body. Open in Browser @ param x \u2014 The x component of the position. @ param y \u2014 The y component of the position. @ param angle \u2014 The angle in radians.","title":"setTransform"},{"location":"doc/#settype","text":"( method ) love .Body: setType ( type : \"dynamic\" | \"kinematic\" | \"static\" ) Sets a new body type. Open in Browser @ param type \u2014 The new type. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies.","title":"setType"},{"location":"doc/#setuserdata","text":"( method ) love .Body: setUserData ( value : any) Associates a Lua value with the Body. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Body.","title":"setUserData"},{"location":"doc/#setx","text":"( method ) love .Body: setX ( x : number) Set the x position of the body. This function cannot wake up the body. Open in Browser @ param x \u2014 The x position.","title":"setX"},{"location":"doc/#sety","text":"( method ) love .Body: setY ( y : number) Set the y position of the body. This function cannot wake up the body. Open in Browser @ param y \u2014 The y position.","title":"setY"},{"location":"doc/#type_2","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_2","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovebodytype","text":"","title":"love.BodyType"},{"location":"doc/#lovebuffermode","text":"","title":"love.BufferMode"},{"location":"doc/#lovebytedata","text":"","title":"love.ByteData"},{"location":"doc/#clone_1","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getffipointer","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getpointer","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#release_2","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_3","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_3","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecanvas","text":"","title":"love.Canvas"},{"location":"doc/#generatemipmaps","text":"( method ) love .Canvas: generateMipmaps () Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level. The Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target. If the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen. Open in Browser","title":"generateMipmaps"},{"location":"doc/#getdpiscale","text":"( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture.","title":"getDPIScale"},{"location":"doc/#getdepth_1","text":"( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture.","title":"getDepth"},{"location":"doc/#getdepthsamplemode","text":"( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"getDepthSampleMode"},{"location":"doc/#getdimensions","text":"( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture.","title":"getDimensions"},{"location":"doc/#getfilter","text":"( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getFilter"},{"location":"doc/#getformat","text":"( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getheight_1","text":"( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture.","title":"getHeight"},{"location":"doc/#getlayercount","text":"( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture.","title":"getLayerCount"},{"location":"doc/#getmsaa","text":"( method ) love .Canvas: getMSAA () -> samples : number Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas. This may be different than the number used as an argument to love.graphics.newCanvas if the system running L\u00d6VE doesn't support that number. Open in Browser @ return samples \u2014 The number of multisample antialiasing samples used by the canvas when drawing to it.","title":"getMSAA"},{"location":"doc/#getmipmapcount","text":"( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture.","title":"getMipmapCount"},{"location":"doc/#getmipmapfilter","text":"( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getMipmapFilter"},{"location":"doc/#getmipmapmode","text":"( method ) love .Canvas: getMipmapMode () -> mode : \" auto \"|\" manual \"|\" none \" Gets the MipmapMode this Canvas was created with. Open in Browser @ return mode \u2014 The mipmap mode this Canvas was created with. -- -- Controls whether a Canvas has mipmaps, and its behaviour when it does. -- -- -- [Open in Browser](https://love2d.org/wiki/MipmapMode) -- mode : | \" none \" -- The Canvas has no mipmaps. | \" auto \" -- The Canvas has mipmaps. love.graphics.setCanvas can be used to render to a specific mipmap level, or Canvas:generateMipmaps can (re-)compute all mipmap levels based on the base level. | \" manual \" -- The Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with love.graphics.setCanvas.","title":"getMipmapMode"},{"location":"doc/#getpixeldimensions","text":"( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelDimensions"},{"location":"doc/#getpixelheight","text":"( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelHeight"},{"location":"doc/#getpixelwidth","text":"( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels.","title":"getPixelWidth"},{"location":"doc/#gettexturetype","text":"( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.","title":"getTextureType"},{"location":"doc/#getwidth_1","text":"( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture.","title":"getWidth"},{"location":"doc/#getwrap","text":"( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"getWrap"},{"location":"doc/#isreadable","text":"( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable.","title":"isReadable"},{"location":"doc/#newimagedata","text":"( method ) love .Canvas: newImageData () -> data : love.ImageData Generates ImageData from the contents of the Canvas. Open in Browser @ return data \u2014 The new ImageData made from the Canvas' contents.","title":"newImageData"},{"location":"doc/#release_3","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#renderto","text":"( method ) love .Canvas: renderTo ( func : function) Render to the Canvas using a function. This is a shortcut to love.graphics.setCanvas: canvas:renderTo( func ) is the same as love.graphics.setCanvas( canvas ) func() love.graphics.setCanvas() Open in Browser @ param func \u2014 A function performing drawing operations.","title":"renderTo"},{"location":"doc/#setdepthsamplemode","text":"( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"setDepthSampleMode"},{"location":"doc/#setfilter","text":"( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setFilter"},{"location":"doc/#setmipmapfilter","text":"( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setMipmapFilter"},{"location":"doc/#setwrap","text":"( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"setWrap"},{"location":"doc/#type_4","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_4","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovechainshape","text":"","title":"love.ChainShape"},{"location":"doc/#computeaabb","text":"( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"computeAABB"},{"location":"doc/#computemass","text":"( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia.","title":"computeMass"},{"location":"doc/#getchildcount","text":"( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children.","title":"getChildCount"},{"location":"doc/#getchildedge","text":"( method ) love .ChainShape: getChildEdge ( index : number) -> shape : love.EdgeShape Returns a child of the shape as an EdgeShape. Open in Browser @ param index \u2014 The index of the child. @ return shape \u2014 The child as an EdgeShape.","title":"getChildEdge"},{"location":"doc/#getnextvertex","text":"( method ) love .ChainShape: getNextVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the next shape. Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called.","title":"getNextVertex"},{"location":"doc/#getpoint","text":"( method ) love .ChainShape: getPoint ( index : number) -> x : number 2. y : number Returns a point of the shape. Open in Browser @ param index \u2014 The index of the point to return. @ return x \u2014 The x-coordinate of the point. @ return y \u2014 The y-coordinate of the point.","title":"getPoint"},{"location":"doc/#getpoints","text":"( method ) love .ChainShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns all points of the shape. Open in Browser @ return x1 \u2014 The x-coordinate of the first point. @ return y1 \u2014 The y-coordinate of the first point. @ return x2 \u2014 The x-coordinate of the second point. @ return y2 \u2014 The y-coordinate of the second point.","title":"getPoints"},{"location":"doc/#getpreviousvertex","text":"( method ) love .ChainShape: getPreviousVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the previous shape. Setting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called.","title":"getPreviousVertex"},{"location":"doc/#getradius","text":"( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape.","title":"getRadius"},{"location":"doc/#gettype_1","text":"( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape.","title":"getType"},{"location":"doc/#getvertexcount","text":"( method ) love .ChainShape: getVertexCount () -> count : number Returns the number of vertices the shape has. Open in Browser @ return count \u2014 The number of vertices.","title":"getVertexCount"},{"location":"doc/#raycast","text":"( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_4","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setnextvertex","text":"( method ) love .ChainShape: setNextVertex ( x : number, y : number) Sets a vertex that establishes a connection to the next shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex.","title":"setNextVertex"},{"location":"doc/#setpreviousvertex","text":"( method ) love .ChainShape: setPreviousVertex ( x : number, y : number) Sets a vertex that establishes a connection to the previous shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex.","title":"setPreviousVertex"},{"location":"doc/#testpoint","text":"( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside","title":"testPoint"},{"location":"doc/#type_5","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_5","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovechannel","text":"","title":"love.Channel"},{"location":"doc/#clear_7","text":"( method ) love .Channel: clear () Clears all the messages in the Channel queue. Open in Browser","title":"clear"},{"location":"doc/#demand","text":"( method ) love .Channel: demand () -> value : any Retrieves the value of a Channel message and removes it from the message queue. It waits until a message is in the queue then returns the message value. Open in Browser @ return value \u2014 The contents of the message.","title":"demand"},{"location":"doc/#getcount","text":"( method ) love .Channel: getCount () -> count : number Retrieves the number of messages in the thread Channel queue. Open in Browser @ return count \u2014 The number of messages in the queue.","title":"getCount"},{"location":"doc/#hasread","text":"( method ) love .Channel: hasRead ( id : number) -> hasread : boolean Gets whether a pushed value has been popped or otherwise removed from the Channel. Open in Browser @ param id \u2014 An id value previously returned by Channel:push. @ return hasread \u2014 Whether the value represented by the id has been removed from the Channel via Channel:pop, Channel:demand, or Channel:clear.","title":"hasRead"},{"location":"doc/#peek_1","text":"( method ) love .Channel: peek () -> value : any Retrieves the value of a Channel message, but leaves it in the queue. It returns nil if there's no message in the queue. Open in Browser @ return value \u2014 The contents of the message.","title":"peek"},{"location":"doc/#performatomic","text":"( method ) love .Channel: performAtomic ( func : function, arg1 : any, ... any ) -> ret1 : any Executes the specified function atomically with respect to this Channel. Calling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.) This method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned. Open in Browser @ param func \u2014 The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called. @ param arg1 \u2014 Additional arguments that the given function will receive when it is called. @ return ret1 \u2014 The first return value of the given function (if any.)","title":"performAtomic"},{"location":"doc/#pop_5","text":"( method ) love .Channel: pop () -> value : any Retrieves the value of a Channel message and removes it from the message queue. It returns nil if there are no messages in the queue. Open in Browser @ return value \u2014 The contents of the message.","title":"pop"},{"location":"doc/#push_4","text":"( method ) love .Channel: push ( value : any) -> id : number Send a message to the thread Channel. See Variant for the list of supported types. Open in Browser @ param value \u2014 The contents of the message. @ return id \u2014 Identifier which can be supplied to Channel:hasRead","title":"push"},{"location":"doc/#release_5","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#supply","text":"( method ) love .Channel: supply ( value : any) -> success : boolean Send a message to the thread Channel and wait for a thread to accept it. See Variant for the list of supported types. Open in Browser @ param value \u2014 The contents of the message. @ return success \u2014 Whether the message was successfully supplied (always true).","title":"supply"},{"location":"doc/#type_6","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_6","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecircleshape","text":"","title":"love.CircleShape"},{"location":"doc/#computeaabb_1","text":"( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"computeAABB"},{"location":"doc/#computemass_1","text":"( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia.","title":"computeMass"},{"location":"doc/#getchildcount_1","text":"( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children.","title":"getChildCount"},{"location":"doc/#getpoint_1","text":"( method ) love .CircleShape: getPoint () -> x : number 2. y : number Gets the center point of the circle shape. Open in Browser @ return x \u2014 The x-component of the center point of the circle. @ return y \u2014 The y-component of the center point of the circle.","title":"getPoint"},{"location":"doc/#getradius_1","text":"( method ) love .CircleShape: getRadius () -> radius : number Gets the radius of the circle shape. Open in Browser @ return radius \u2014 The radius of the circle","title":"getRadius"},{"location":"doc/#gettype_2","text":"( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape.","title":"getType"},{"location":"doc/#raycast_1","text":"( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_6","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setpoint","text":"( method ) love .CircleShape: setPoint ( x : number, y : number) Sets the location of the center of the circle shape. Open in Browser @ param x \u2014 The x-component of the new center point of the circle. @ param y \u2014 The y-component of the new center point of the circle.","title":"setPoint"},{"location":"doc/#setradius","text":"( method ) love .CircleShape: setRadius ( radius : number) Sets the radius of the circle. Open in Browser @ param radius \u2014 The radius of the circle","title":"setRadius"},{"location":"doc/#testpoint_1","text":"( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside","title":"testPoint"},{"location":"doc/#type_7","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_7","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecomparemode","text":"","title":"love.CompareMode"},{"location":"doc/#lovecompresseddata","text":"","title":"love.CompressedData"},{"location":"doc/#clone_2","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getffipointer_1","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getformat_1","text":"( method ) love .CompressedData: getFormat () -> format : \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \" Gets the compression format of the CompressedData. Open in Browser @ return format \u2014 The format of the CompressedData. -- -- Compressed data formats. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedDataFormat) -- format : | \" lz4 \" -- The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here. | \" zlib \" -- The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio. | \" gzip \" -- The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format. | \" deflate \" -- Raw DEFLATE-compressed data (no header).","title":"getFormat"},{"location":"doc/#getpointer_1","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_1","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_1","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#release_7","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_8","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_8","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecompresseddataformat","text":"","title":"love.CompressedDataFormat"},{"location":"doc/#lovecompressedimagedata","text":"","title":"love.CompressedImageData"},{"location":"doc/#clone_3","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getdimensions_1","text":"( method ) love .CompressedImageData: getDimensions () -> width : number 2. height : number Gets the width and height of the CompressedImageData. Open in Browser @ return width \u2014 The width of the CompressedImageData. @ return height \u2014 The height of the CompressedImageData.","title":"getDimensions"},{"location":"doc/#getffipointer_2","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getformat_2","text":"( method ) love .CompressedImageData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+31) Gets the format of the CompressedImageData. Open in Browser @ return format \u2014 The format of the CompressedImageData. -- -- Compressed image data formats. Here and here are a couple overviews of many of the formats. -- -- Unlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedImageFormat) -- format : | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getheight_2","text":"( method ) love .CompressedImageData: getHeight () -> height : number Gets the height of the CompressedImageData. Open in Browser @ return height \u2014 The height of the CompressedImageData.","title":"getHeight"},{"location":"doc/#getmipmapcount_1","text":"( method ) love .CompressedImageData: getMipmapCount () -> mipmaps : number Gets the number of mipmap levels in the CompressedImageData. The base mipmap level (original image) is included in the count. Open in Browser @ return mipmaps \u2014 The number of mipmap levels stored in the CompressedImageData.","title":"getMipmapCount"},{"location":"doc/#getpointer_2","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_2","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_2","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#getwidth_2","text":"( method ) love .CompressedImageData: getWidth () -> width : number Gets the width of the CompressedImageData. Open in Browser @ return width \u2014 The width of the CompressedImageData.","title":"getWidth"},{"location":"doc/#release_8","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_9","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_9","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecompressedimageformat","text":"","title":"love.CompressedImageFormat"},{"location":"doc/#lovecontact","text":"","title":"love.Contact"},{"location":"doc/#getchildren","text":"( method ) love .Contact: getChildren () -> indexA : number 2. indexB : number Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain. Used together with Fixture:rayCast or ChainShape:getChildEdge. Open in Browser @ return indexA \u2014 The child index of the first fixture's shape. @ return indexB \u2014 The child index of the second fixture's shape.","title":"getChildren"},{"location":"doc/#getfixtures_1","text":"( method ) love .Contact: getFixtures () -> fixtureA : love.Fixture 2. fixtureB : love.Fixture Gets the two Fixtures that hold the shapes that are in contact. Open in Browser @ return fixtureA \u2014 The first Fixture. @ return fixtureB \u2014 The second Fixture.","title":"getFixtures"},{"location":"doc/#getfriction","text":"( method ) love .Contact: getFriction () -> friction : number Get the friction between two shapes that are in contact. Open in Browser @ return friction \u2014 The friction of the contact.","title":"getFriction"},{"location":"doc/#getnormal_1","text":"( method ) love .Contact: getNormal () -> nx : number 2. ny : number Get the normal vector between two shapes that are in contact. This function returns the coordinates of a unit vector that points from the first shape to the second. Open in Browser @ return nx \u2014 The x component of the normal vector. @ return ny \u2014 The y component of the normal vector.","title":"getNormal"},{"location":"doc/#getpositions","text":"( method ) love .Contact: getPositions () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns the contact points of the two colliding fixtures. There can be one or two points. Open in Browser @ return x1 \u2014 The x coordinate of the first contact point. @ return y1 \u2014 The y coordinate of the first contact point. @ return x2 \u2014 The x coordinate of the second contact point. @ return y2 \u2014 The y coordinate of the second contact point.","title":"getPositions"},{"location":"doc/#getrestitution","text":"( method ) love .Contact: getRestitution () -> restitution : number Get the restitution between two shapes that are in contact. Open in Browser @ return restitution \u2014 The restitution between the two shapes.","title":"getRestitution"},{"location":"doc/#isenabled","text":"( method ) love .Contact: isEnabled () -> enabled : boolean Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback. Open in Browser @ return enabled \u2014 True if enabled, false otherwise.","title":"isEnabled"},{"location":"doc/#istouching_1","text":"( method ) love .Contact: isTouching () -> touching : boolean Returns whether the two colliding fixtures are touching each other. Open in Browser @ return touching \u2014 True if they touch or false if not.","title":"isTouching"},{"location":"doc/#release_9","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#resetfriction","text":"( method ) love .Contact: resetFriction () Resets the contact friction to the mixture value of both fixtures. Open in Browser","title":"resetFriction"},{"location":"doc/#resetrestitution","text":"( method ) love .Contact: resetRestitution () Resets the contact restitution to the mixture value of both fixtures. Open in Browser","title":"resetRestitution"},{"location":"doc/#setenabled","text":"( method ) love .Contact: setEnabled ( enabled : boolean) Enables or disables the contact. Open in Browser @ param enabled \u2014 True to enable or false to disable.","title":"setEnabled"},{"location":"doc/#setfriction","text":"( method ) love .Contact: setFriction ( friction : number) Sets the contact friction. Open in Browser @ param friction \u2014 The contact friction.","title":"setFriction"},{"location":"doc/#setrestitution","text":"( method ) love .Contact: setRestitution ( restitution : number) Sets the contact restitution. Open in Browser @ param restitution \u2014 The contact restitution.","title":"setRestitution"},{"location":"doc/#type_10","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_10","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecontainertype","text":"","title":"love.ContainerType"},{"location":"doc/#lovecullmode","text":"","title":"love.CullMode"},{"location":"doc/#lovecursor","text":"","title":"love.Cursor"},{"location":"doc/#gettype_3","text":"( method ) love .Cursor: getType () -> ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8) Gets the type of the Cursor. Open in Browser @ return ctype \u2014 The type of the Cursor. -- -- Types of hardware cursors. -- -- -- [Open in Browser](https://love2d.org/wiki/CursorType) -- ctype : | \" image \" -- The cursor is using a custom image. | \" arrow \" -- An arrow pointer. | \" ibeam \" -- An I-beam, normally used when mousing over editable or selectable text. | \" wait \" -- Wait graphic. | \" waitarrow \" -- Small wait cursor with an arrow pointer. | \" crosshair \" -- Crosshair symbol. | \" sizenwse \" -- Double arrow pointing to the top-left and bottom-right. | \" sizenesw \" -- Double arrow pointing to the top-right and bottom-left. | \" sizewe \" -- Double arrow pointing left and right. | \" sizens \" -- Double arrow pointing up and down. | \" sizeall \" -- Four-pointed arrow pointing up, down, left, and right. | \" no \" -- Slashed circle or crossbones. | \" hand \" -- Hand symbol.","title":"getType"},{"location":"doc/#release_10","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_11","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_11","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovecursortype","text":"","title":"love.CursorType"},{"location":"doc/#lovedata","text":"","title":"love.Data"},{"location":"doc/#clone_4","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getffipointer_3","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getpointer_3","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_3","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_3","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#release_11","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_12","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_12","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovedecoder","text":"","title":"love.Decoder"},{"location":"doc/#clone_5","text":"( method ) love .Decoder: clone () -> decoder : love.Decoder Creates a new copy of current decoder. The new decoder will start decoding from the beginning of the audio stream. Open in Browser @ return decoder \u2014 New copy of the decoder.","title":"clone"},{"location":"doc/#decode","text":"( method ) love .Decoder: decode () -> soundData : love.SoundData Decodes the audio and returns a SoundData object containing the decoded audio data. Open in Browser @ return soundData \u2014 Decoded audio data.","title":"decode"},{"location":"doc/#getbitdepth","text":"( method ) love .Decoder: getBitDepth () -> bitDepth : number Returns the number of bits per sample. Open in Browser @ return bitDepth \u2014 Either 8, or 16.","title":"getBitDepth"},{"location":"doc/#getchannelcount","text":"( method ) love .Decoder: getChannelCount () -> channels : number Returns the number of channels in the stream. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo.","title":"getChannelCount"},{"location":"doc/#getduration","text":"( method ) love .Decoder: getDuration () -> duration : number Gets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all. Open in Browser @ return duration \u2014 The duration of the sound file in seconds, or -1 if it cannot be determined.","title":"getDuration"},{"location":"doc/#getsamplerate","text":"( method ) love .Decoder: getSampleRate () -> rate : number Returns the sample rate of the Decoder. Open in Browser @ return rate \u2014 Number of samples per second.","title":"getSampleRate"},{"location":"doc/#release_12","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#seek_1","text":"( method ) love .Decoder: seek ( offset : number) Sets the currently playing position of the Decoder. Open in Browser @ param offset \u2014 The position to seek to, in seconds.","title":"seek"},{"location":"doc/#type_13","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_13","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovedisplayorientation","text":"","title":"love.DisplayOrientation"},{"location":"doc/#lovedistancejoint","text":"","title":"love.DistanceJoint"},{"location":"doc/#destroy_1","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getdampingratio","text":"( method ) love .DistanceJoint: getDampingRatio () -> ratio : number Gets the damping ratio. Open in Browser @ return ratio \u2014 The damping ratio.","title":"getDampingRatio"},{"location":"doc/#getfrequency","text":"( method ) love .DistanceJoint: getFrequency () -> Hz : number Gets the response speed. Open in Browser @ return Hz \u2014 The response speed.","title":"getFrequency"},{"location":"doc/#getlength","text":"( method ) love .DistanceJoint: getLength () -> l : number Gets the equilibrium distance between the two Bodies. Open in Browser @ return l \u2014 The length between the two Bodies.","title":"getLength"},{"location":"doc/#getreactionforce","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_4","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_1","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_1","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_13","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setdampingratio","text":"( method ) love .DistanceJoint: setDampingRatio ( ratio : number) Sets the damping ratio. Open in Browser @ param ratio \u2014 The damping ratio.","title":"setDampingRatio"},{"location":"doc/#setfrequency","text":"( method ) love .DistanceJoint: setFrequency ( Hz : number) Sets the response speed. Open in Browser @ param Hz \u2014 The response speed.","title":"setFrequency"},{"location":"doc/#setlength","text":"( method ) love .DistanceJoint: setLength ( l : number) Sets the equilibrium distance between the two Bodies. Open in Browser @ param l \u2014 The length between the two Bodies.","title":"setLength"},{"location":"doc/#setuserdata_1","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_14","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_14","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovedistancemodel","text":"","title":"love.DistanceModel"},{"location":"doc/#lovedrawmode","text":"","title":"love.DrawMode"},{"location":"doc/#lovedrawable","text":"","title":"love.Drawable"},{"location":"doc/#release_14","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_15","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_15","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovedroppedfile","text":"","title":"love.DroppedFile"},{"location":"doc/#close_3","text":"( method ) love .File: close () -> success : boolean Closes a File. Open in Browser @ return success \u2014 Whether closing was successful.","title":"close"},{"location":"doc/#flush_3","text":"( method ) love .File: flush () -> success : boolean 2. err : string Flushes any buffered written data in the file to the disk. Open in Browser @ return success \u2014 Whether the file successfully flushed any buffered data to the disk. @ return err \u2014 The error string, if an error occurred and the file could not be flushed.","title":"flush"},{"location":"doc/#getbuffer","text":"( method ) love .File: getBuffer () -> mode : \" full \"|\" line \"|\" none \" 2. size: number Gets the buffer mode of a file. Open in Browser @ return mode \u2014 The current buffer mode of the file. @ return size \u2014 The maximum size in bytes of the file's buffer. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached.","title":"getBuffer"},{"location":"doc/#getfilename","text":"( method ) love .File: getFilename () -> filename : string Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path. Open in Browser @ return filename \u2014 The filename of the File.","title":"getFilename"},{"location":"doc/#getmode_2","text":"( method ) love .File: getMode () -> mode : \" a \"|\" c \"|\" r \"|\" w \" Gets the FileMode the file has been opened with. Open in Browser @ return mode \u2014 The mode this file has been opened with. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.)","title":"getMode"},{"location":"doc/#getsize_4","text":"( method ) love .File: getSize () -> size : number Returns the file size. Open in Browser @ return size \u2014 The file size in bytes.","title":"getSize"},{"location":"doc/#iseof","text":"( method ) love .File: isEOF () -> eof : boolean Gets whether end-of-file has been reached. Open in Browser @ return eof \u2014 Whether EOF has been reached.","title":"isEOF"},{"location":"doc/#isopen","text":"( method ) love .File: isOpen () -> open : boolean Gets whether the file is open. Open in Browser @ return open \u2014 True if the file is currently open, false otherwise.","title":"isOpen"},{"location":"doc/#lines_2","text":"( method ) love .File: lines () -> iterator : function Iterate over all the lines in a file. Open in Browser @ return iterator \u2014 The iterator (can be used in for loops).","title":"lines"},{"location":"doc/#open_2","text":"( method ) love .File: open ( mode : \" a \"|\" c \"|\" r \"|\" w \") -> ok: boolean 2. err: string Open the file for write, read or append. Open in Browser @ param mode \u2014 The mode to open the file in. @ return ok \u2014 True on success, false otherwise. @ return err \u2014 The error string if an error occurred. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.)","title":"open"},{"location":"doc/#read_2","text":"( method ) love .File: read ( bytes ? : number ) -> contents : string 2. size : number Read a number of bytes from a file. Open in Browser @ param bytes \u2014 The number of bytes to read. @ return contents \u2014 The contents of the read bytes. @ return size \u2014 How many bytes have been read.","title":"read"},{"location":"doc/#release_15","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#seek_2","text":"( method ) love .File: seek ( pos : number) -> success : boolean Seek to a position in a file Open in Browser @ param pos \u2014 The position to seek to @ return success \u2014 Whether the operation was successful","title":"seek"},{"location":"doc/#setbuffer","text":"( method ) love .File: setBuffer ( mode : \" full \"|\" line \"|\" none \", size?: number) -> success: boolean 2. errorstr: string Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode. File:flush will force any buffered data to be written to the disk. Open in Browser @ param mode \u2014 The buffer mode to use. @ param size \u2014 The maximum size in bytes of the file's buffer. @ return success \u2014 Whether the buffer mode was successfully set. @ return errorstr \u2014 The error string, if the buffer mode could not be set and an error occurred. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached.","title":"setBuffer"},{"location":"doc/#tell","text":"( method ) love .File: tell () -> pos : number Returns the position in the file. Open in Browser @ return pos \u2014 The current position.","title":"tell"},{"location":"doc/#type_16","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_16","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#write_2","text":"( method ) love .File: write ( data : string, size ? : number ) -> success : boolean 2. err : string Write data to a file. Open in Browser @ param data \u2014 The string data to write. @ param size \u2014 How many bytes to write. @ return success \u2014 Whether the operation was successful. @ return err \u2014 The error string if an error occurred.","title":"write"},{"location":"doc/#loveedgeshape","text":"","title":"love.EdgeShape"},{"location":"doc/#computeaabb_2","text":"( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"computeAABB"},{"location":"doc/#computemass_2","text":"( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia.","title":"computeMass"},{"location":"doc/#getchildcount_2","text":"( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children.","title":"getChildCount"},{"location":"doc/#getnextvertex_1","text":"( method ) love .EdgeShape: getNextVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the next shape. Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called.","title":"getNextVertex"},{"location":"doc/#getpoints_1","text":"( method ) love .EdgeShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Returns the local coordinates of the edge points. Open in Browser @ return x1 \u2014 The x-component of the first vertex. @ return y1 \u2014 The y-component of the first vertex. @ return x2 \u2014 The x-component of the second vertex. @ return y2 \u2014 The y-component of the second vertex.","title":"getPoints"},{"location":"doc/#getpreviousvertex_1","text":"( method ) love .EdgeShape: getPreviousVertex () -> x : number 2. y : number Gets the vertex that establishes a connection to the previous shape. Setting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ return x \u2014 The x-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called. @ return y \u2014 The y-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called.","title":"getPreviousVertex"},{"location":"doc/#getradius_2","text":"( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape.","title":"getRadius"},{"location":"doc/#gettype_5","text":"( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape.","title":"getType"},{"location":"doc/#raycast_2","text":"( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_16","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setnextvertex_1","text":"( method ) love .EdgeShape: setNextVertex ( x : number, y : number) Sets a vertex that establishes a connection to the next shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex.","title":"setNextVertex"},{"location":"doc/#setpreviousvertex_1","text":"( method ) love .EdgeShape: setPreviousVertex ( x : number, y : number) Sets a vertex that establishes a connection to the previous shape. This can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape. Open in Browser @ param x \u2014 The x-component of the vertex. @ param y \u2014 The y-component of the vertex.","title":"setPreviousVertex"},{"location":"doc/#testpoint_2","text":"( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside","title":"testPoint"},{"location":"doc/#type_17","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_17","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveeffecttype","text":"","title":"love.EffectType"},{"location":"doc/#loveeffectwaveform","text":"","title":"love.EffectWaveform"},{"location":"doc/#loveencodeformat","text":"","title":"love.EncodeFormat"},{"location":"doc/#loveevent","text":"","title":"love.Event"},{"location":"doc/#lovefile","text":"","title":"love.File"},{"location":"doc/#close_4","text":"( method ) love .File: close () -> success : boolean Closes a File. Open in Browser @ return success \u2014 Whether closing was successful.","title":"close"},{"location":"doc/#flush_4","text":"( method ) love .File: flush () -> success : boolean 2. err : string Flushes any buffered written data in the file to the disk. Open in Browser @ return success \u2014 Whether the file successfully flushed any buffered data to the disk. @ return err \u2014 The error string, if an error occurred and the file could not be flushed.","title":"flush"},{"location":"doc/#getbuffer_1","text":"( method ) love .File: getBuffer () -> mode : \" full \"|\" line \"|\" none \" 2. size: number Gets the buffer mode of a file. Open in Browser @ return mode \u2014 The current buffer mode of the file. @ return size \u2014 The maximum size in bytes of the file's buffer. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached.","title":"getBuffer"},{"location":"doc/#getfilename_1","text":"( method ) love .File: getFilename () -> filename : string Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path. Open in Browser @ return filename \u2014 The filename of the File.","title":"getFilename"},{"location":"doc/#getmode_3","text":"( method ) love .File: getMode () -> mode : \" a \"|\" c \"|\" r \"|\" w \" Gets the FileMode the file has been opened with. Open in Browser @ return mode \u2014 The mode this file has been opened with. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.)","title":"getMode"},{"location":"doc/#getsize_5","text":"( method ) love .File: getSize () -> size : number Returns the file size. Open in Browser @ return size \u2014 The file size in bytes.","title":"getSize"},{"location":"doc/#iseof_1","text":"( method ) love .File: isEOF () -> eof : boolean Gets whether end-of-file has been reached. Open in Browser @ return eof \u2014 Whether EOF has been reached.","title":"isEOF"},{"location":"doc/#isopen_1","text":"( method ) love .File: isOpen () -> open : boolean Gets whether the file is open. Open in Browser @ return open \u2014 True if the file is currently open, false otherwise.","title":"isOpen"},{"location":"doc/#lines_3","text":"( method ) love .File: lines () -> iterator : function Iterate over all the lines in a file. Open in Browser @ return iterator \u2014 The iterator (can be used in for loops).","title":"lines"},{"location":"doc/#open_3","text":"( method ) love .File: open ( mode : \" a \"|\" c \"|\" r \"|\" w \") -> ok: boolean 2. err: string Open the file for write, read or append. Open in Browser @ param mode \u2014 The mode to open the file in. @ return ok \u2014 True on success, false otherwise. @ return err \u2014 The error string if an error occurred. -- -- The different modes you can open a File in. -- -- -- [Open in Browser](https://love2d.org/wiki/FileMode) -- mode : | \" r \" -- Open a file for read. | \" w \" -- Open a file for write. | \" a \" -- Open a file for append. | \" c \" -- Do not open a file (represents a closed file.)","title":"open"},{"location":"doc/#read_3","text":"( method ) love .File: read ( bytes ? : number ) -> contents : string 2. size : number Read a number of bytes from a file. Open in Browser @ param bytes \u2014 The number of bytes to read. @ return contents \u2014 The contents of the read bytes. @ return size \u2014 How many bytes have been read.","title":"read"},{"location":"doc/#release_17","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#seek_3","text":"( method ) love .File: seek ( pos : number) -> success : boolean Seek to a position in a file Open in Browser @ param pos \u2014 The position to seek to @ return success \u2014 Whether the operation was successful","title":"seek"},{"location":"doc/#setbuffer_1","text":"( method ) love .File: setBuffer ( mode : \" full \"|\" line \"|\" none \", size?: number) -> success: boolean 2. errorstr: string Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode. File:flush will force any buffered data to be written to the disk. Open in Browser @ param mode \u2014 The buffer mode to use. @ param size \u2014 The maximum size in bytes of the file's buffer. @ return success \u2014 Whether the buffer mode was successfully set. @ return errorstr \u2014 The error string, if the buffer mode could not be set and an error occurred. -- -- Buffer modes for File objects. -- -- -- [Open in Browser](https://love2d.org/wiki/BufferMode) -- mode : | \" none \" -- No buffering. The result of write and append operations appears immediately. | \" line \" -- Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached. | \" full \" -- Full buffering. Write and append operations are always buffered until the buffer size limit is reached.","title":"setBuffer"},{"location":"doc/#tell_1","text":"( method ) love .File: tell () -> pos : number Returns the position in the file. Open in Browser @ return pos \u2014 The current position.","title":"tell"},{"location":"doc/#type_18","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_18","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#write_3","text":"( method ) love .File: write ( data : string, size ? : number ) -> success : boolean 2. err : string Write data to a file. Open in Browser @ param data \u2014 The string data to write. @ param size \u2014 How many bytes to write. @ return success \u2014 Whether the operation was successful. @ return err \u2014 The error string if an error occurred.","title":"write"},{"location":"doc/#lovefiledata","text":"","title":"love.FileData"},{"location":"doc/#clone_6","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getextension","text":"( method ) love .FileData: getExtension () -> ext : string Gets the extension of the FileData. Open in Browser @ return ext \u2014 The extension of the file the FileData represents.","title":"getExtension"},{"location":"doc/#getffipointer_4","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getfilename_2","text":"( method ) love .FileData: getFilename () -> name : string Gets the filename of the FileData. Open in Browser @ return name \u2014 The name of the file the FileData represents.","title":"getFilename"},{"location":"doc/#getpointer_4","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_6","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_4","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#release_18","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_19","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_19","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovefiledecoder","text":"","title":"love.FileDecoder"},{"location":"doc/#lovefilemode","text":"","title":"love.FileMode"},{"location":"doc/#lovefiletype","text":"","title":"love.FileType"},{"location":"doc/#lovefiltermode","text":"","title":"love.FilterMode"},{"location":"doc/#lovefiltertype","text":"","title":"love.FilterType"},{"location":"doc/#lovefixture","text":"","title":"love.Fixture"},{"location":"doc/#destroy_2","text":"( method ) love .Fixture: destroy () Destroys the fixture. Open in Browser","title":"destroy"},{"location":"doc/#getbody","text":"( method ) love .Fixture: getBody () -> body : love.Body Returns the body to which the fixture is attached. Open in Browser @ return body \u2014 The parent body.","title":"getBody"},{"location":"doc/#getboundingbox","text":"( method ) love .Fixture: getBoundingBox ( index ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape. Open in Browser @ param index \u2014 A bounding box of the fixture. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"getBoundingBox"},{"location":"doc/#getcategory","text":"( method ) love .Fixture: getCategory () Returns the categories the fixture belongs to. Open in Browser","title":"getCategory"},{"location":"doc/#getdensity","text":"( method ) love .Fixture: getDensity () -> density : number Returns the density of the fixture. Open in Browser @ return density \u2014 The fixture density in kilograms per square meter.","title":"getDensity"},{"location":"doc/#getfilterdata","text":"( method ) love .Fixture: getFilterData () -> categories : number 2. mask : number 3. group : number Returns the filter data of the fixture. Categories and masks are encoded as the bits of a 16-bit integer. Open in Browser @ return categories \u2014 The categories as an integer from 0 to 65535. @ return mask \u2014 The mask as an integer from 0 to 65535. @ return group \u2014 The group as an integer from -32768 to 32767.","title":"getFilterData"},{"location":"doc/#getfriction_1","text":"( method ) love .Fixture: getFriction () -> friction : number Returns the friction of the fixture. Open in Browser @ return friction \u2014 The fixture friction.","title":"getFriction"},{"location":"doc/#getgroupindex","text":"( method ) love .Fixture: getGroupIndex () -> group : number Returns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group. The groups range from -32768 to 32767. Open in Browser @ return group \u2014 The group of the fixture.","title":"getGroupIndex"},{"location":"doc/#getmask_1","text":"( method ) love .Fixture: getMask () Returns which categories this fixture should '''NOT''' collide with. Open in Browser","title":"getMask"},{"location":"doc/#getmassdata_1","text":"( method ) love .Fixture: getMassData () -> x : number 2. y : number 3. mass : number 4. inertia : number Returns the mass, its center and the rotational inertia. Open in Browser @ return x \u2014 The x position of the center of mass. @ return y \u2014 The y position of the center of mass. @ return mass \u2014 The mass of the fixture. @ return inertia \u2014 The rotational inertia.","title":"getMassData"},{"location":"doc/#getrestitution_1","text":"( method ) love .Fixture: getRestitution () -> restitution : number Returns the restitution of the fixture. Open in Browser @ return restitution \u2014 The fixture restitution.","title":"getRestitution"},{"location":"doc/#getshape","text":"( method ) love .Fixture: getShape () -> shape : love.Shape Returns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps. Open in Browser @ return shape \u2014 The fixture's shape.","title":"getShape"},{"location":"doc/#getuserdata_2","text":"( method ) love .Fixture: getUserData () -> value : any Returns the Lua value associated with this fixture. Open in Browser @ return value \u2014 The Lua value associated with the fixture.","title":"getUserData"},{"location":"doc/#isdestroyed_2","text":"( method ) love .Fixture: isDestroyed () -> destroyed : boolean Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used. Open in Browser @ return destroyed \u2014 Whether the Fixture is destroyed.","title":"isDestroyed"},{"location":"doc/#issensor","text":"( method ) love .Fixture: isSensor () -> sensor : boolean Returns whether the fixture is a sensor. Open in Browser @ return sensor \u2014 If the fixture is a sensor.","title":"isSensor"},{"location":"doc/#raycast_3","text":"( method ) love .Fixture: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_19","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setcategory","text":"( method ) love .Fixture: setCategory (... number ) Sets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16. All fixture's default category is 1. Open in Browser","title":"setCategory"},{"location":"doc/#setdensity","text":"( method ) love .Fixture: setDensity ( density : number) Sets the density of the fixture. Call Body:resetMassData if this needs to take effect immediately. Open in Browser @ param density \u2014 The fixture density in kilograms per square meter.","title":"setDensity"},{"location":"doc/#setfilterdata","text":"( method ) love .Fixture: setFilterData ( categories : number, mask : number, group : number) Sets the filter data of the fixture. Groups, categories, and mask can be used to define the collision behaviour of the fixture. If two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set. There can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer. When created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0. This function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use Fixture:setCategory, Fixture:setMask or Fixture:setGroupIndex respectively. Open in Browser @ param categories \u2014 The categories as an integer from 0 to 65535. @ param mask \u2014 The mask as an integer from 0 to 65535. @ param group \u2014 The group as an integer from -32768 to 32767.","title":"setFilterData"},{"location":"doc/#setfriction_1","text":"( method ) love .Fixture: setFriction ( friction : number) Sets the friction of the fixture. Friction determines how shapes react when they 'slide' along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0. Open in Browser @ param friction \u2014 The fixture friction.","title":"setFriction"},{"location":"doc/#setgroupindex","text":"( method ) love .Fixture: setGroupIndex ( group : number) Sets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group. The groups range from -32768 to 32767. Open in Browser @ param group \u2014 The group as an integer from -32768 to 32767.","title":"setGroupIndex"},{"location":"doc/#setmask_1","text":"( method ) love .Fixture: setMask (... number ) Sets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16. This fixture will '''NOT''' collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected. Open in Browser","title":"setMask"},{"location":"doc/#setrestitution_1","text":"( method ) love .Fixture: setRestitution ( restitution : number) Sets the restitution of the fixture. Open in Browser @ param restitution \u2014 The fixture restitution.","title":"setRestitution"},{"location":"doc/#setsensor","text":"( method ) love .Fixture: setSensor ( sensor : boolean) Sets whether the fixture should act as a sensor. Sensors do not cause collision responses, but the begin-contact and end-contact World callbacks will still be called for this fixture. Open in Browser @ param sensor \u2014 The sensor status.","title":"setSensor"},{"location":"doc/#setuserdata_2","text":"( method ) love .Fixture: setUserData ( value : any) Associates a Lua value with the fixture. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the fixture.","title":"setUserData"},{"location":"doc/#testpoint_3","text":"( method ) love .Fixture: testPoint ( x : number, y : number) -> isInside : boolean Checks if a point is inside the shape of the fixture. Open in Browser @ param x \u2014 The x position of the point. @ param y \u2014 The y position of the point. @ return isInside \u2014 True if the point is inside or false if it is outside.","title":"testPoint"},{"location":"doc/#type_20","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_20","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovefont","text":"","title":"love.Font"},{"location":"doc/#getascent","text":"( method ) love .Font: getAscent () -> ascent : number Gets the ascent of the Font. The ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline. Open in Browser @ return ascent \u2014 The ascent of the Font in pixels.","title":"getAscent"},{"location":"doc/#getbaseline","text":"( method ) love .Font: getBaseline () -> baseline : number Gets the baseline of the Font. Most scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline. Open in Browser @ return baseline \u2014 The baseline of the Font in pixels.","title":"getBaseline"},{"location":"doc/#getdpiscale_1","text":"( method ) love .Font: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Font. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1. The font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, L\u00d6VE uses the screen's DPI scale factor when creating TrueType fonts. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Font.","title":"getDPIScale"},{"location":"doc/#getdescent","text":"( method ) love .Font: getDescent () -> descent : number Gets the descent of the Font. The descent spans the distance between the baseline and the lowest descending glyph in a typeface. Open in Browser @ return descent \u2014 The descent of the Font in pixels.","title":"getDescent"},{"location":"doc/#getfilter_1","text":"( method ) love .Font: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode for a font. Open in Browser @ return min \u2014 Filter mode used when minifying the font. @ return mag \u2014 Filter mode used when magnifying the font. @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getFilter"},{"location":"doc/#getheight_3","text":"( method ) love .Font: getHeight () -> height : number Gets the height of the Font. The height of the font is the size including any spacing; the height which it will need. Open in Browser @ return height \u2014 The height of the Font in pixels.","title":"getHeight"},{"location":"doc/#getkerning","text":"( method ) love .Font: getKerning ( leftchar : string, rightchar : string) -> kerning : number Gets the kerning between two characters in the Font. Kerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually. Open in Browser @ param leftchar \u2014 The left character. @ param rightchar \u2014 The right character. @ return kerning \u2014 The kerning amount to add to the spacing between the two characters. May be negative.","title":"getKerning"},{"location":"doc/#getlineheight","text":"( method ) love .Font: getLineHeight () -> height : number Gets the line height. This will be the value previously set by Font:setLineHeight, or 1.0 by default. Open in Browser @ return height \u2014 The current line height.","title":"getLineHeight"},{"location":"doc/#getwidth_3","text":"( method ) love .Font: getWidth ( text : string| number ) -> width : number Determines the maximum width (accounting for newlines) taken by the given string. Open in Browser @ param text \u2014 A string or number. @ return width \u2014 The width of the text.","title":"getWidth"},{"location":"doc/#getwrap_1","text":"( method ) love .Font: getWrap ( text : string, wraplimit : number) -> width : number 2. wrappedtext : table Gets formatting information for text, given a wrap limit. This function accounts for newlines correctly (i.e. '\\n'). Open in Browser @ param text \u2014 The text that will be wrapped. @ param wraplimit \u2014 The maximum width in pixels of each line that ''text'' is allowed before wrapping. @ return width \u2014 The maximum width of the wrapped text. @ return wrappedtext \u2014 A sequence containing each line of text that was wrapped.","title":"getWrap"},{"location":"doc/#hasglyphs","text":"( method ) love .Font: hasGlyphs ( text : string) -> hasglyph : boolean Gets whether the Font can render a character or string. Open in Browser @ param text \u2014 A UTF-8 encoded unicode string. @ return hasglyph \u2014 Whether the font can render all the UTF-8 characters in the string.","title":"hasGlyphs"},{"location":"doc/#release_20","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setfallbacks","text":"( method ) love .Font: setFallbacks ( fallbackfont1 : love.Font, ... love .Font) Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS). Open in Browser @ param fallbackfont1 \u2014 The first fallback Font to use.","title":"setFallbacks"},{"location":"doc/#setfilter_1","text":"( method ) love .Font: setFilter ( min : \" linear \"|\" nearest \", mag: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode for a font. Open in Browser @ param min \u2014 How to scale a font down. @ param mag \u2014 How to scale a font up. @ param anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setFilter"},{"location":"doc/#setlineheight","text":"( method ) love .Font: setLineHeight ( height : number) Sets the line height. When rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0. Open in Browser @ param height \u2014 The new line height.","title":"setLineHeight"},{"location":"doc/#type_21","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_21","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovefrictionjoint","text":"","title":"love.FrictionJoint"},{"location":"doc/#destroy_3","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_1","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_1","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_1","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getmaxforce","text":"( method ) love .FrictionJoint: getMaxForce () -> force : number Gets the maximum friction force in Newtons. Open in Browser @ return force \u2014 Maximum force in Newtons.","title":"getMaxForce"},{"location":"doc/#getmaxtorque","text":"( method ) love .FrictionJoint: getMaxTorque () -> torque : number Gets the maximum friction torque in Newton-meters. Open in Browser @ return torque \u2014 Maximum torque in Newton-meters.","title":"getMaxTorque"},{"location":"doc/#getreactionforce_1","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_1","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_6","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_3","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_3","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_21","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setmaxforce","text":"( method ) love .FrictionJoint: setMaxForce ( maxForce : number) Sets the maximum friction force in Newtons. Open in Browser @ param maxForce \u2014 Max force in Newtons.","title":"setMaxForce"},{"location":"doc/#setmaxtorque","text":"( method ) love .FrictionJoint: setMaxTorque ( torque : number) Sets the maximum friction torque in Newton-meters. Open in Browser @ param torque \u2014 Maximum torque in Newton-meters.","title":"setMaxTorque"},{"location":"doc/#setuserdata_3","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_22","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_22","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovefullscreentype","text":"","title":"love.FullscreenType"},{"location":"doc/#lovegamepadaxis","text":"","title":"love.GamepadAxis"},{"location":"doc/#lovegamepadbutton","text":"","title":"love.GamepadButton"},{"location":"doc/#lovegearjoint","text":"","title":"love.GearJoint"},{"location":"doc/#destroy_4","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_2","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_2","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_2","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getjoints_1","text":"( method ) love .GearJoint: getJoints () -> joint1 : love.Joint 2. joint2 : love.Joint Get the Joints connected by this GearJoint. Open in Browser @ return joint1 \u2014 The first connected Joint. @ return joint2 \u2014 The second connected Joint.","title":"getJoints"},{"location":"doc/#getratio","text":"( method ) love .GearJoint: getRatio () -> ratio : number Get the ratio of a gear joint. Open in Browser @ return ratio \u2014 The ratio of the joint.","title":"getRatio"},{"location":"doc/#getreactionforce_2","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_2","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_7","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_4","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_4","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_22","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setratio","text":"( method ) love .GearJoint: setRatio ( ratio : number) Set the ratio of a gear joint. Open in Browser @ param ratio \u2014 The new ratio of the joint.","title":"setRatio"},{"location":"doc/#setuserdata_4","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_23","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_23","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveglyphdata","text":"","title":"love.GlyphData"},{"location":"doc/#clone_7","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getadvance","text":"( method ) love .GlyphData: getAdvance () -> advance : number Gets glyph advance. Open in Browser @ return advance \u2014 Glyph advance.","title":"getAdvance"},{"location":"doc/#getbearing","text":"( method ) love .GlyphData: getBearing () -> bx : number 2. by : number Gets glyph bearing. Open in Browser @ return bx \u2014 Glyph bearing X. @ return by \u2014 Glyph bearing Y.","title":"getBearing"},{"location":"doc/#getboundingbox_1","text":"( method ) love .GlyphData: getBoundingBox () -> x : number 2. y : number 3. width : number 4. height : number Gets glyph bounding box. Open in Browser @ return x \u2014 Glyph position x. @ return y \u2014 Glyph position y. @ return width \u2014 Glyph width. @ return height \u2014 Glyph height.","title":"getBoundingBox"},{"location":"doc/#getdimensions_2","text":"( method ) love .GlyphData: getDimensions () -> width : number 2. height : number Gets glyph dimensions. Open in Browser @ return width \u2014 Glyph width. @ return height \u2014 Glyph height.","title":"getDimensions"},{"location":"doc/#getffipointer_5","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getformat_3","text":"( method ) love .GlyphData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets glyph pixel format. Open in Browser @ return format \u2014 Glyph pixel format. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getglyph","text":"( method ) love .GlyphData: getGlyph () -> glyph : number Gets glyph number. Open in Browser @ return glyph \u2014 Glyph number.","title":"getGlyph"},{"location":"doc/#getglyphstring","text":"( method ) love .GlyphData: getGlyphString () -> glyph : string Gets glyph string. Open in Browser @ return glyph \u2014 Glyph string.","title":"getGlyphString"},{"location":"doc/#getheight_4","text":"( method ) love .GlyphData: getHeight () -> height : number Gets glyph height. Open in Browser @ return height \u2014 Glyph height.","title":"getHeight"},{"location":"doc/#getpointer_5","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_7","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_5","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#getwidth_4","text":"( method ) love .GlyphData: getWidth () -> width : number Gets glyph width. Open in Browser @ return width \u2014 Glyph width.","title":"getWidth"},{"location":"doc/#release_23","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_24","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_24","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovegraphicsfeature","text":"","title":"love.GraphicsFeature"},{"location":"doc/#lovegraphicslimit","text":"","title":"love.GraphicsLimit"},{"location":"doc/#lovehashfunction","text":"","title":"love.HashFunction"},{"location":"doc/#lovehintingmode","text":"","title":"love.HintingMode"},{"location":"doc/#loveimage","text":"","title":"love.Image"},{"location":"doc/#getdpiscale_2","text":"( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture.","title":"getDPIScale"},{"location":"doc/#getdepth_2","text":"( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture.","title":"getDepth"},{"location":"doc/#getdepthsamplemode_1","text":"( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"getDepthSampleMode"},{"location":"doc/#getdimensions_3","text":"( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture.","title":"getDimensions"},{"location":"doc/#getfilter_2","text":"( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getFilter"},{"location":"doc/#getformat_4","text":"( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getheight_5","text":"( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture.","title":"getHeight"},{"location":"doc/#getlayercount_1","text":"( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture.","title":"getLayerCount"},{"location":"doc/#getmipmapcount_2","text":"( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture.","title":"getMipmapCount"},{"location":"doc/#getmipmapfilter_1","text":"( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getMipmapFilter"},{"location":"doc/#getpixeldimensions_1","text":"( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelDimensions"},{"location":"doc/#getpixelheight_1","text":"( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelHeight"},{"location":"doc/#getpixelwidth_1","text":"( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels.","title":"getPixelWidth"},{"location":"doc/#gettexturetype_1","text":"( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.","title":"getTextureType"},{"location":"doc/#getwidth_5","text":"( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture.","title":"getWidth"},{"location":"doc/#getwrap_2","text":"( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"getWrap"},{"location":"doc/#iscompressed","text":"( method ) love .Image: isCompressed () -> compressed : boolean Gets whether the Image was created from CompressedData. Compressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data. Open in Browser @ return compressed \u2014 Whether the Image is stored as a compressed texture on the GPU.","title":"isCompressed"},{"location":"doc/#isformatlinear","text":"( method ) love .Image: isFormatLinear () -> linear : boolean Gets whether the Image was created with the linear (non-gamma corrected) flag set to true. This method always returns false when gamma-correct rendering is not enabled. Open in Browser @ return linear \u2014 Whether the Image's internal pixel format is linear (not gamma corrected), when gamma-correct rendering is enabled.","title":"isFormatLinear"},{"location":"doc/#isreadable_1","text":"( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable.","title":"isReadable"},{"location":"doc/#release_24","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#replacepixels","text":"( method ) love .Image: replacePixels ( data : love.ImageData, slice ? : number , mipmap ? : number , x ? : number , y ? : number , reloadmipmaps ? : boolean ) Replace the contents of an Image. Open in Browser @ param data \u2014 The new ImageData to replace the contents with. @ param slice \u2014 Which cubemap face, array index, or volume layer to replace, if applicable. @ param mipmap \u2014 The mimap level to replace, if the Image has mipmaps. @ param x \u2014 The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level. @ param y \u2014 The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level. @ param reloadmipmaps \u2014 Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.","title":"replacePixels"},{"location":"doc/#setdepthsamplemode_1","text":"( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"setDepthSampleMode"},{"location":"doc/#setfilter_2","text":"( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setFilter"},{"location":"doc/#setmipmapfilter_1","text":"( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setMipmapFilter"},{"location":"doc/#setwrap_1","text":"( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"setWrap"},{"location":"doc/#type_25","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_25","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveimagedata","text":"","title":"love.ImageData"},{"location":"doc/#clone_8","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#encode","text":"( method ) love .ImageData: encode ( format : \" bmp \"|\" jpg \"|\" png \"|\" tga \", filename?: string) -> filedata: love.FileData Encodes the ImageData and optionally writes it to the save directory. Open in Browser @ param format \u2014 The format to encode the image as. @ param filename \u2014 The filename to write the file to. If nil, no file will be written but the FileData will still be returned. @ return filedata \u2014 The encoded image as a new FileData object. -- -- Encoded image formats. -- -- -- [Open in Browser](https://love2d.org/wiki/ImageFormat) -- format : | \" tga \" -- Targa image format. | \" png \" -- PNG image format. | \" jpg \" -- JPG image format. | \" bmp \" -- BMP image format.","title":"encode"},{"location":"doc/#getdimensions_4","text":"( method ) love .ImageData: getDimensions () -> width : number 2. height : number Gets the width and height of the ImageData in pixels. Open in Browser @ return width \u2014 The width of the ImageData in pixels. @ return height \u2014 The height of the ImageData in pixels.","title":"getDimensions"},{"location":"doc/#getffipointer_6","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getformat_5","text":"( method ) love .ImageData: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the ImageData. Open in Browser @ return format \u2014 The pixel format the ImageData was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getheight_6","text":"( method ) love .ImageData: getHeight () -> height : number Gets the height of the ImageData in pixels. Open in Browser @ return height \u2014 The height of the ImageData in pixels.","title":"getHeight"},{"location":"doc/#getpixel","text":"( method ) love .ImageData: getPixel ( x : number, y : number) -> r : number 2. g : number 3. b : number 4. a : number Gets the color of a pixel at a specific position in the image. Valid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param x \u2014 The position of the pixel on the x-axis. @ param y \u2014 The position of the pixel on the y-axis. @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1).","title":"getPixel"},{"location":"doc/#getpointer_6","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsize_8","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_6","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#getwidth_6","text":"( method ) love .ImageData: getWidth () -> width : number Gets the width of the ImageData in pixels. Open in Browser @ return width \u2014 The width of the ImageData in pixels.","title":"getWidth"},{"location":"doc/#mappixel","text":"( method ) love .ImageData: mapPixel ( pixelFunction : function, x ? : number , y ? : number , width ? : number , height ? : number ) Transform an image by applying a function to every pixel. This function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData. The passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel. function pixelFunction(x, y, r, g, b, a) -- template for defining your own pixel mapping function -- perform computations giving the new values for r, g, b and a -- ... return r, g, b, a end In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param pixelFunction \u2014 Function to apply to every pixel. @ param x \u2014 The x-axis of the top-left corner of the area within the ImageData to apply the function to. @ param y \u2014 The y-axis of the top-left corner of the area within the ImageData to apply the function to. @ param width \u2014 The width of the area within the ImageData to apply the function to. @ param height \u2014 The height of the area within the ImageData to apply the function to.","title":"mapPixel"},{"location":"doc/#paste_1","text":"( method ) love .ImageData: paste ( source : love.ImageData, dx : number, dy : number, sx : number, sy : number, sw : number, sh : number) Paste into ImageData from another source ImageData. Open in Browser @ param source \u2014 Source ImageData from which to copy. @ param dx \u2014 Destination top-left position on x-axis. @ param dy \u2014 Destination top-left position on y-axis. @ param sx \u2014 Source top-left position on x-axis. @ param sy \u2014 Source top-left position on y-axis. @ param sw \u2014 Source width. @ param sh \u2014 Source height.","title":"paste"},{"location":"doc/#release_25","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setpixel","text":"( method ) love .ImageData: setPixel ( x : number, y : number, r : number, g : number, b : number, a : number) Sets the color of a pixel at a specific position in the image. Valid x and y values start at 0 and go up to image width and height minus 1. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param x \u2014 The position of the pixel on the x-axis. @ param y \u2014 The position of the pixel on the y-axis. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1).","title":"setPixel"},{"location":"doc/#type_26","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_26","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveimageformat","text":"","title":"love.ImageFormat"},{"location":"doc/#loveindexdatatype","text":"","title":"love.IndexDataType"},{"location":"doc/#lovejoint","text":"","title":"love.Joint"},{"location":"doc/#destroy_5","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_3","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_3","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_3","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getreactionforce_3","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_3","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_8","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_5","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_5","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_26","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setuserdata_5","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_27","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_27","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovejointtype","text":"","title":"love.JointType"},{"location":"doc/#lovejoystick","text":"","title":"love.Joystick"},{"location":"doc/#getaxes","text":"( method ) love .Joystick: getAxes () -> axisDir1 : number 2. axisDir2 : number 3. axisDirN : number Gets the direction of each axis. Open in Browser @ return axisDir1 \u2014 Direction of axis1. @ return axisDir2 \u2014 Direction of axis2. @ return axisDirN \u2014 Direction of axisN.","title":"getAxes"},{"location":"doc/#getaxis","text":"( method ) love .Joystick: getAxis ( axis : number) -> direction : number Gets the direction of an axis. Open in Browser @ param axis \u2014 The index of the axis to be checked. @ return direction \u2014 Current value of the axis.","title":"getAxis"},{"location":"doc/#getaxiscount","text":"( method ) love .Joystick: getAxisCount () -> axes : number Gets the number of axes on the joystick. Open in Browser @ return axes \u2014 The number of axes available.","title":"getAxisCount"},{"location":"doc/#getbuttoncount","text":"( method ) love .Joystick: getButtonCount () -> buttons : number Gets the number of buttons on the joystick. Open in Browser @ return buttons \u2014 The number of buttons available.","title":"getButtonCount"},{"location":"doc/#getdeviceinfo","text":"( method ) love .Joystick: getDeviceInfo () -> vendorID : number 2. productID : number 3. productVersion : number Gets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems. Can be used to show different icons, etc. for different gamepads. Open in Browser @ return vendorID \u2014 The USB vendor ID of the joystick. @ return productID \u2014 The USB product ID of the joystick. @ return productVersion \u2014 The product version of the joystick.","title":"getDeviceInfo"},{"location":"doc/#getguid","text":"( method ) love .Joystick: getGUID () -> guid : string Gets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent. Open in Browser @ return guid \u2014 The Joystick type's OS-dependent unique identifier.","title":"getGUID"},{"location":"doc/#getgamepadaxis","text":"( method ) love .Joystick: getGamepadAxis ( axis : \" leftx \"|\" lefty \"|\" rightx \"|\" righty \"|\" triggerleft \"...(+1)) -> direction: number Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a gamepad or isn't connected, this function will always return 0. Open in Browser @ param axis \u2014 The virtual axis to be checked. @ return direction \u2014 Current value of the axis. -- -- Virtual gamepad axes. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadAxis) -- axis : | \" leftx \" -- The x-axis of the left thumbstick. | \" lefty \" -- The y-axis of the left thumbstick. | \" rightx \" -- The x-axis of the right thumbstick. | \" righty \" -- The y-axis of the right thumbstick. | \" triggerleft \" -- Left analog trigger. | \" triggerright \" -- Right analog trigger.","title":"getGamepadAxis"},{"location":"doc/#getgamepadmapping","text":"( method ) love .Joystick: getGamepadMapping ( axis : \" leftx \"|\" lefty \"|\" rightx \"|\" righty \"|\" triggerleft \"...(+1)) -> inputtype: \" axis \"|\" button \"|\" hat \" 2. inputindex: number 3. hatdirection: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4) Gets the button, axis or hat that a virtual gamepad input is bound to. Open in Browser @ param axis \u2014 The virtual gamepad axis to get the binding for. @ return inputtype \u2014 The type of input the virtual gamepad axis is bound to. @ return inputindex \u2014 The index of the Joystick's button, axis or hat that the virtual gamepad axis is bound to. @ return hatdirection \u2014 The direction of the hat, if the virtual gamepad axis is bound to a hat. nil otherwise. -- -- Virtual gamepad axes. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadAxis) -- axis : | \" leftx \" -- The x-axis of the left thumbstick. | \" lefty \" -- The y-axis of the left thumbstick. | \" rightx \" -- The x-axis of the right thumbstick. | \" righty \" -- The y-axis of the right thumbstick. | \" triggerleft \" -- Left analog trigger. | \" triggerright \" -- Right analog trigger. -- -- Types of Joystick inputs. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickInputType) -- inputtype: | \" axis \" -- Analog axis. | \" button \" -- Button. | \" hat \" -- 8-direction hat value. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- hatdirection: | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up","title":"getGamepadMapping"},{"location":"doc/#getgamepadmappingstring","text":"( method ) love .Joystick: getGamepadMappingString () -> mappingstring : string Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a gamepad. The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings. Open in Browser @ return mappingstring \u2014 A string containing the Joystick's gamepad mappings, or nil if the Joystick is not recognized as a gamepad.","title":"getGamepadMappingString"},{"location":"doc/#gethat","text":"( method ) love .Joystick: getHat ( hat : number) -> direction : \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4) Gets the direction of the Joystick's hat. Open in Browser @ param hat \u2014 The index of the hat to be checked. @ return direction \u2014 The direction the hat is pushed. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- direction : | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up","title":"getHat"},{"location":"doc/#gethatcount","text":"( method ) love .Joystick: getHatCount () -> hats : number Gets the number of hats on the joystick. Open in Browser @ return hats \u2014 How many hats the joystick has.","title":"getHatCount"},{"location":"doc/#getid_2","text":"( method ) love .Joystick: getID () -> id : number 2. instanceid : number Gets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it '''will''' change when the game is re-launched. Open in Browser @ return id \u2014 The Joystick's unique identifier. Remains the same as long as the game is running. @ return instanceid \u2014 Unique instance identifier. Changes every time the Joystick is reconnected. nil if the Joystick is not connected.","title":"getID"},{"location":"doc/#getname","text":"( method ) love .Joystick: getName () -> name : string Gets the name of the joystick. Open in Browser @ return name \u2014 The name of the joystick.","title":"getName"},{"location":"doc/#getvibration","text":"( method ) love .Joystick: getVibration () -> left : number 2. right : number Gets the current vibration motor strengths on a Joystick with rumble support. Open in Browser @ return left \u2014 Current strength of the left vibration motor on the Joystick. @ return right \u2014 Current strength of the right vibration motor on the Joystick.","title":"getVibration"},{"location":"doc/#isconnected","text":"( method ) love .Joystick: isConnected () -> connected : boolean Gets whether the Joystick is connected. Open in Browser @ return connected \u2014 True if the Joystick is currently connected, false otherwise.","title":"isConnected"},{"location":"doc/#isdown","text":"( method ) love .Joystick: isDown ( buttonN : number) -> anyDown : boolean Checks if a button on the Joystick is pressed. L\u00d6VE 0.9.0 had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in 0.9.1. Open in Browser @ param buttonN \u2014 The index of a button to check. @ return anyDown \u2014 True if any supplied button is down, false if not.","title":"isDown"},{"location":"doc/#isgamepad","text":"( method ) love .Joystick: isGamepad () -> isgamepad : boolean Gets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via Joystick:getGamepadAxis, Joystick:isGamepadDown, love.gamepadpressed, and related functions. L\u00d6VE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with love.joystick.setGamepadMapping. Open in Browser @ return isgamepad \u2014 True if the Joystick is recognized as a gamepad, false otherwise.","title":"isGamepad"},{"location":"doc/#isgamepaddown","text":"( method ) love .Joystick: isGamepadDown ( buttonN : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10)) -> anyDown: boolean Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a Gamepad or isn't connected, then this function will always return false. Open in Browser @ param buttonN \u2014 The gamepad button to check. @ return anyDown \u2014 True if any supplied button is down, false if not. -- -- Virtual gamepad buttons. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadButton) -- buttonN : | \" a \" -- Bottom face button (A). | \" b \" -- Right face button (B). | \" x \" -- Left face button (X). | \" y \" -- Top face button (Y). | \" back \" -- Back button. | \" guide \" -- Guide button. | \" start \" -- Start button. | \" leftstick \" -- Left stick click button. | \" rightstick \" -- Right stick click button. | \" leftshoulder \" -- Left bumper. | \" rightshoulder \" -- Right bumper. | \" dpup \" -- D-pad up. | \" dpdown \" -- D-pad down. | \" dpleft \" -- D-pad left. | \" dpright \" -- D-pad right.","title":"isGamepadDown"},{"location":"doc/#isvibrationsupported","text":"( method ) love .Joystick: isVibrationSupported () -> supported : boolean Gets whether the Joystick supports vibration. Open in Browser @ return supported \u2014 True if rumble / force feedback vibration is supported on this Joystick, false if not.","title":"isVibrationSupported"},{"location":"doc/#release_27","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setvibration","text":"( method ) love .Joystick: setVibration ( left : number, right : number) -> success : boolean Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check. Open in Browser @ param left \u2014 Strength of the left vibration motor on the Joystick. Must be in the range of 1. @ param right \u2014 Strength of the right vibration motor on the Joystick. Must be in the range of 1. @ return success \u2014 True if the vibration was successfully applied, false if not.","title":"setVibration"},{"location":"doc/#type_28","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_28","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovejoystickhat","text":"","title":"love.JoystickHat"},{"location":"doc/#lovejoystickinputtype","text":"","title":"love.JoystickInputType"},{"location":"doc/#lovekeyconstant","text":"","title":"love.KeyConstant"},{"location":"doc/#lovelinejoin","text":"","title":"love.LineJoin"},{"location":"doc/#lovelinestyle","text":"","title":"love.LineStyle"},{"location":"doc/#lovematrixlayout","text":"","title":"love.MatrixLayout"},{"location":"doc/#lovemesh","text":"","title":"love.Mesh"},{"location":"doc/#attachattribute","text":"( method ) love .Mesh: attachAttribute ( name : string, mesh : love.Mesh) Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes. Open in Browser @ param name \u2014 The name of the vertex attribute to attach. @ param mesh \u2014 The Mesh to get the vertex attribute from.","title":"attachAttribute"},{"location":"doc/#detachattribute","text":"( method ) love .Mesh: detachAttribute ( name : string) -> success : boolean Removes a previously attached vertex attribute from this Mesh. Open in Browser @ param name \u2014 The name of the attached vertex attribute to detach. @ return success \u2014 Whether the attribute was successfully detached.","title":"detachAttribute"},{"location":"doc/#flush_5","text":"( method ) love .Mesh: flush () Immediately sends all modified vertex data in the Mesh to the graphics card. Normally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using Mesh:flush gives more control over when the work happens. If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls. Open in Browser","title":"flush"},{"location":"doc/#getdrawmode","text":"( method ) love .Mesh: getDrawMode () -> mode : \" fan \"|\" points \"|\" strip \"|\" triangles \" Gets the mode used when drawing the Mesh. Open in Browser @ return mode \u2014 The mode used when drawing the Mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.)","title":"getDrawMode"},{"location":"doc/#getdrawrange","text":"( method ) love .Mesh: getDrawRange () -> min : number 2. max : number Gets the range of vertices used when drawing the Mesh. Open in Browser @ return min \u2014 The index of the first vertex used when drawing, or the index of the first value in the vertex map used if one is set for this Mesh. @ return max \u2014 The index of the last vertex used when drawing, or the index of the last value in the vertex map used if one is set for this Mesh.","title":"getDrawRange"},{"location":"doc/#gettexture","text":"( method ) love .Mesh: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used when drawing the Mesh. Open in Browser @ return texture \u2014 The Image or Canvas to texture the Mesh with when drawing, or nil if none is set.","title":"getTexture"},{"location":"doc/#getvertex","text":"( method ) love .Mesh: getVertex ( index : number) -> attributecomponent : number Gets the properties of a vertex in the Mesh. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param index \u2014 The one-based index of the vertex you want to retrieve the information for. @ return attributecomponent \u2014 The first component of the first vertex attribute in the specified vertex.","title":"getVertex"},{"location":"doc/#getvertexattribute","text":"( method ) love .Mesh: getVertexAttribute ( vertexindex : number, attributeindex : number) -> value1 : number 2. value2 : number Gets the properties of a specific attribute within a vertex in the Mesh. Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute. Open in Browser @ param vertexindex \u2014 The index of the the vertex you want to retrieve the attribute for (one-based). @ param attributeindex \u2014 The index of the attribute within the vertex to be retrieved (one-based). @ return value1 \u2014 The value of the first component of the attribute. @ return value2 \u2014 The value of the second component of the attribute.","title":"getVertexAttribute"},{"location":"doc/#getvertexcount_1","text":"( method ) love .Mesh: getVertexCount () -> count : number Gets the total number of vertices in the Mesh. Open in Browser @ return count \u2014 The total number of vertices in the mesh.","title":"getVertexCount"},{"location":"doc/#getvertexformat","text":"( method ) love .Mesh: getVertexFormat () -> format : { attribute: table } Gets the vertex format that the Mesh was created with. Open in Browser @ return format \u2014 The vertex format of the Mesh, which is a table containing tables for each vertex attribute the Mesh was created with, in the form of {attribute, ...}.","title":"getVertexFormat"},{"location":"doc/#getvertexmap","text":"( method ) love .Mesh: getVertexMap () -> map : table Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen. If no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in L\u00d6VE 0.10.0+, or an empty table in 0.9.2 and older. Open in Browser @ return map \u2014 A table containing the list of vertex indices used when drawing.","title":"getVertexMap"},{"location":"doc/#isattributeenabled","text":"( method ) love .Mesh: isAttributeEnabled ( name : string) -> enabled : boolean Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh. Open in Browser @ param name \u2014 The name of the vertex attribute to be checked. @ return enabled \u2014 Whether the vertex attribute is used when drawing this Mesh.","title":"isAttributeEnabled"},{"location":"doc/#release_28","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setattributeenabled","text":"( method ) love .Mesh: setAttributeEnabled ( name : string, enable : boolean) Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh. Open in Browser @ param name \u2014 The name of the vertex attribute to enable or disable. @ param enable \u2014 Whether the vertex attribute is used when drawing this Mesh.","title":"setAttributeEnabled"},{"location":"doc/#setdrawmode","text":"( method ) love .Mesh: setDrawMode ( mode : \" fan \"|\" points \"|\" strip \"|\" triangles \") Sets the mode used when drawing the Mesh. Open in Browser @ param mode \u2014 The mode to use when drawing the Mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.)","title":"setDrawMode"},{"location":"doc/#setdrawrange","text":"( method ) love .Mesh: setDrawRange ( start : number, count : number) Restricts the drawn vertices of the Mesh to a subset of the total. Open in Browser @ param start \u2014 The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh. @ param count \u2014 The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.","title":"setDrawRange"},{"location":"doc/#settexture","text":"( method ) love .Mesh: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) used when drawing the Mesh. Open in Browser @ param texture \u2014 The Image or Canvas to texture the Mesh with when drawing.","title":"setTexture"},{"location":"doc/#setvertex","text":"( method ) love .Mesh: setVertex ( index : number, attributecomponent : number, ... number ) Sets the properties of a vertex in the Mesh. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param index \u2014 The index of the the vertex you want to modify (one-based). @ param attributecomponent \u2014 The first component of the first vertex attribute in the specified vertex.","title":"setVertex"},{"location":"doc/#setvertexattribute","text":"( method ) love .Mesh: setVertexAttribute ( vertexindex : number, attributeindex : number, value1 : number, value2 : number, ... number ) Sets the properties of a specific attribute within a vertex in the Mesh. Meshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute. Open in Browser @ param vertexindex \u2014 The index of the the vertex to be modified (one-based). @ param attributeindex \u2014 The index of the attribute within the vertex to be modified (one-based). @ param value1 \u2014 The new value for the first component of the attribute. @ param value2 \u2014 The new value for the second component of the attribute.","title":"setVertexAttribute"},{"location":"doc/#setvertexmap","text":"( method ) love .Mesh: setVertexMap ( map : table) Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen. The vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes. Open in Browser @ param map \u2014 A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount().","title":"setVertexMap"},{"location":"doc/#setvertices","text":"( method ) love .Mesh: setVertices ( vertices : { attributecomponent: number }, startvertex ? : number , count ? : number ) Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop. Open in Browser @ param vertices \u2014 The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}. @ param startvertex \u2014 The index of the first vertex to replace. @ param count \u2014 Amount of vertices to replace.","title":"setVertices"},{"location":"doc/#type_29","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_29","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovemeshdrawmode","text":"","title":"love.MeshDrawMode"},{"location":"doc/#lovemessageboxtype","text":"","title":"love.MessageBoxType"},{"location":"doc/#lovemipmapmode","text":"","title":"love.MipmapMode"},{"location":"doc/#lovemotorjoint","text":"","title":"love.MotorJoint"},{"location":"doc/#destroy_6","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_4","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getangularoffset","text":"( method ) love .MotorJoint: getAngularOffset () -> angleoffset : number Gets the target angular offset between the two Bodies the Joint is attached to. Open in Browser @ return angleoffset \u2014 The target angular offset in radians: the second body's angle minus the first body's angle.","title":"getAngularOffset"},{"location":"doc/#getbodies_4","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_4","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getlinearoffset","text":"( method ) love .MotorJoint: getLinearOffset () -> x : number 2. y : number Gets the target linear offset between the two Bodies the Joint is attached to. Open in Browser @ return x \u2014 The x component of the target linear offset, relative to the first Body. @ return y \u2014 The y component of the target linear offset, relative to the first Body.","title":"getLinearOffset"},{"location":"doc/#getreactionforce_4","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_4","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_9","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_6","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_6","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_29","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setangularoffset","text":"( method ) love .MotorJoint: setAngularOffset ( angleoffset : number) Sets the target angluar offset between the two Bodies the Joint is attached to. Open in Browser @ param angleoffset \u2014 The target angular offset in radians: the second body's angle minus the first body's angle.","title":"setAngularOffset"},{"location":"doc/#setlinearoffset","text":"( method ) love .MotorJoint: setLinearOffset ( x : number, y : number) Sets the target linear offset between the two Bodies the Joint is attached to. Open in Browser @ param x \u2014 The x component of the target linear offset, relative to the first Body. @ param y \u2014 The y component of the target linear offset, relative to the first Body.","title":"setLinearOffset"},{"location":"doc/#setuserdata_6","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_30","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_30","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovemousejoint","text":"","title":"love.MouseJoint"},{"location":"doc/#destroy_7","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_5","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_5","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_5","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getdampingratio_1","text":"( method ) love .MouseJoint: getDampingRatio () -> ratio : number Returns the damping ratio. Open in Browser @ return ratio \u2014 The new damping ratio.","title":"getDampingRatio"},{"location":"doc/#getfrequency_1","text":"( method ) love .MouseJoint: getFrequency () -> freq : number Returns the frequency. Open in Browser @ return freq \u2014 The frequency in hertz.","title":"getFrequency"},{"location":"doc/#getmaxforce_1","text":"( method ) love .MouseJoint: getMaxForce () -> f : number Gets the highest allowed force. Open in Browser @ return f \u2014 The max allowed force.","title":"getMaxForce"},{"location":"doc/#getreactionforce_5","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_5","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettarget_3","text":"( method ) love .MouseJoint: getTarget () -> x : number 2. y : number Gets the target point. Open in Browser @ return x \u2014 The x-component of the target. @ return y \u2014 The x-component of the target.","title":"getTarget"},{"location":"doc/#gettype_10","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_7","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_7","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_30","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setdampingratio_1","text":"( method ) love .MouseJoint: setDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio.","title":"setDampingRatio"},{"location":"doc/#setfrequency_1","text":"( method ) love .MouseJoint: setFrequency ( freq : number) Sets a new frequency. Open in Browser @ param freq \u2014 The new frequency in hertz.","title":"setFrequency"},{"location":"doc/#setmaxforce_1","text":"( method ) love .MouseJoint: setMaxForce ( f : number) Sets the highest allowed force. Open in Browser @ param f \u2014 The max allowed force.","title":"setMaxForce"},{"location":"doc/#settarget_2","text":"( method ) love .MouseJoint: setTarget ( x : number, y : number) Sets the target point. Open in Browser @ param x \u2014 The x-component of the target. @ param y \u2014 The y-component of the target.","title":"setTarget"},{"location":"doc/#setuserdata_7","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_31","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_31","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveobject","text":"","title":"love.Object"},{"location":"doc/#release_31","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_32","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_32","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveparticleinsertmode","text":"","title":"love.ParticleInsertMode"},{"location":"doc/#loveparticlesystem","text":"","title":"love.ParticleSystem"},{"location":"doc/#clone_9","text":"( method ) love .ParticleSystem: clone () -> particlesystem : love.ParticleSystem Creates an identical copy of the ParticleSystem in the stopped state. Open in Browser @ return particlesystem \u2014 The new identical copy of this ParticleSystem.","title":"clone"},{"location":"doc/#emit","text":"( method ) love .ParticleSystem: emit ( numparticles : number) Emits a burst of particles from the particle emitter. Open in Browser @ param numparticles \u2014 The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached.","title":"emit"},{"location":"doc/#getbuffersize","text":"( method ) love .ParticleSystem: getBufferSize () -> size : number Gets the maximum number of particles the ParticleSystem can have at once. Open in Browser @ return size \u2014 The maximum number of particles.","title":"getBufferSize"},{"location":"doc/#getcolors","text":"( method ) love .ParticleSystem: getColors () -> r1 : number 2. g1 : number 3. b1 : number 4. a1 : number 5. r2 : number 6. g2 : number 7. b2 : number 8. a2 : number 9. r8 : number 10. g8 : number 11. b8 : number 12. a8 : number Gets the series of colors applied to the particle sprite. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r1 \u2014 First color, red component (0-1). @ return g1 \u2014 First color, green component (0-1). @ return b1 \u2014 First color, blue component (0-1). @ return a1 \u2014 First color, alpha component (0-1). @ return r2 \u2014 Second color, red component (0-1). @ return g2 \u2014 Second color, green component (0-1). @ return b2 \u2014 Second color, blue component (0-1). @ return a2 \u2014 Second color, alpha component (0-1). @ return r8 \u2014 Eighth color, red component (0-1). @ return g8 \u2014 Eighth color, green component (0-1). @ return b8 \u2014 Eighth color, blue component (0-1). @ return a8 \u2014 Eighth color, alpha component (0-1).","title":"getColors"},{"location":"doc/#getcount_1","text":"( method ) love .ParticleSystem: getCount () -> count : number Gets the number of particles that are currently in the system. Open in Browser @ return count \u2014 The current number of live particles.","title":"getCount"},{"location":"doc/#getdirection","text":"( method ) love .ParticleSystem: getDirection () -> direction : number Gets the direction of the particle emitter (in radians). Open in Browser @ return direction \u2014 The direction of the emitter (radians).","title":"getDirection"},{"location":"doc/#getemissionarea","text":"( method ) love .ParticleSystem: getEmissionArea () -> distribution : \" borderellipse \"|\" borderrectangle \"|\" ellipse \"|\" none \"|\" normal \"...(+1) 2. dx: number 3. dy: number 4. angle: number 5. directionRelativeToCenter: boolean Gets the area-based spawn parameters for the particles. Open in Browser @ return distribution \u2014 The type of distribution for new particles. @ return dx \u2014 The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution. @ return dy \u2014 The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution. @ return angle \u2014 The angle in radians of the emission area. @ return directionRelativeToCenter \u2014 True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise. -- -- Types of particle area spread distribution. -- -- -- [Open in Browser](https://love2d.org/wiki/AreaSpreadDistribution) -- distribution : | \" uniform \" -- Uniform distribution. | \" normal \" -- Normal (gaussian) distribution. | \" ellipse \" -- Uniform distribution in an ellipse. | \" borderellipse \" -- Distribution in an ellipse with particles spawning at the edges of the ellipse. | \" borderrectangle \" -- Distribution in a rectangle with particles spawning at the edges of the rectangle. | \" none \" -- No distribution - area spread is disabled.","title":"getEmissionArea"},{"location":"doc/#getemissionrate","text":"( method ) love .ParticleSystem: getEmissionRate () -> rate : number Gets the amount of particles emitted per second. Open in Browser @ return rate \u2014 The amount of particles per second.","title":"getEmissionRate"},{"location":"doc/#getemitterlifetime","text":"( method ) love .ParticleSystem: getEmitterLifetime () -> life : number Gets how long the particle system will emit particles (if -1 then it emits particles forever). Open in Browser @ return life \u2014 The lifetime of the emitter (in seconds).","title":"getEmitterLifetime"},{"location":"doc/#getinsertmode","text":"( method ) love .ParticleSystem: getInsertMode () -> mode : \" bottom \"|\" random \"|\" top \" Gets the mode used when the ParticleSystem adds new particles. Open in Browser @ return mode \u2014 The mode used when the ParticleSystem adds new particles. -- -- How newly created particles are added to the ParticleSystem. -- -- -- [Open in Browser](https://love2d.org/wiki/ParticleInsertMode) -- mode : | \" top \" -- Particles are inserted at the top of the ParticleSystem's list of particles. | \" bottom \" -- Particles are inserted at the bottom of the ParticleSystem's list of particles. | \" random \" -- Particles are inserted at random positions in the ParticleSystem's list of particles.","title":"getInsertMode"},{"location":"doc/#getlinearacceleration","text":"( method ) love .ParticleSystem: getLinearAcceleration () -> xmin : number 2. ymin : number 3. xmax : number 4. ymax : number Gets the linear acceleration (acceleration along the x and y axes) for particles. Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax. Open in Browser @ return xmin \u2014 The minimum acceleration along the x axis. @ return ymin \u2014 The minimum acceleration along the y axis. @ return xmax \u2014 The maximum acceleration along the x axis. @ return ymax \u2014 The maximum acceleration along the y axis.","title":"getLinearAcceleration"},{"location":"doc/#getlineardamping_1","text":"( method ) love .ParticleSystem: getLinearDamping () -> min : number 2. max : number Gets the amount of linear damping (constant deceleration) for particles. Open in Browser @ return min \u2014 The minimum amount of linear damping applied to particles. @ return max \u2014 The maximum amount of linear damping applied to particles.","title":"getLinearDamping"},{"location":"doc/#getoffset","text":"( method ) love .ParticleSystem: getOffset () -> ox : number 2. oy : number Gets the particle image's draw offset. Open in Browser @ return ox \u2014 The x coordinate of the particle image's draw offset. @ return oy \u2014 The y coordinate of the particle image's draw offset.","title":"getOffset"},{"location":"doc/#getparticlelifetime","text":"( method ) love .ParticleSystem: getParticleLifetime () -> min : number 2. max : number Gets the lifetime of the particles. Open in Browser @ return min \u2014 The minimum life of the particles (in seconds). @ return max \u2014 The maximum life of the particles (in seconds).","title":"getParticleLifetime"},{"location":"doc/#getposition_5","text":"( method ) love .ParticleSystem: getPosition () -> x : number 2. y : number Gets the position of the emitter. Open in Browser @ return x \u2014 Position along x-axis. @ return y \u2014 Position along y-axis.","title":"getPosition"},{"location":"doc/#getquads","text":"( method ) love .ParticleSystem: getQuads () -> quads : table Gets the series of Quads used for the particle sprites. Open in Browser @ return quads \u2014 A table containing the Quads used.","title":"getQuads"},{"location":"doc/#getradialacceleration","text":"( method ) love .ParticleSystem: getRadialAcceleration () -> min : number 2. max : number Gets the radial acceleration (away from the emitter). Open in Browser @ return min \u2014 The minimum acceleration. @ return max \u2014 The maximum acceleration.","title":"getRadialAcceleration"},{"location":"doc/#getrotation","text":"( method ) love .ParticleSystem: getRotation () -> min : number 2. max : number Gets the rotation of the image upon particle creation (in radians). Open in Browser @ return min \u2014 The minimum initial angle (radians). @ return max \u2014 The maximum initial angle (radians).","title":"getRotation"},{"location":"doc/#getsizevariation","text":"( method ) love .ParticleSystem: getSizeVariation () -> variation : number Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ return variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).","title":"getSizeVariation"},{"location":"doc/#getsizes","text":"( method ) love .ParticleSystem: getSizes () -> size1 : number 2. size2 : number 3. size8 : number Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime. Open in Browser @ return size1 \u2014 The first size. @ return size2 \u2014 The second size. @ return size8 \u2014 The eighth size.","title":"getSizes"},{"location":"doc/#getspeed","text":"( method ) love .ParticleSystem: getSpeed () -> min : number 2. max : number Gets the speed of the particles. Open in Browser @ return min \u2014 The minimum linear speed of the particles. @ return max \u2014 The maximum linear speed of the particles.","title":"getSpeed"},{"location":"doc/#getspin","text":"( method ) love .ParticleSystem: getSpin () -> min : number 2. max : number 3. variation : number Gets the spin of the sprite. Open in Browser @ return min \u2014 The minimum spin (radians per second). @ return max \u2014 The maximum spin (radians per second). @ return variation \u2014 The degree of variation (0 meaning no variation and 1 meaning full variation between start and end).","title":"getSpin"},{"location":"doc/#getspinvariation","text":"( method ) love .ParticleSystem: getSpinVariation () -> variation : number Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ return variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).","title":"getSpinVariation"},{"location":"doc/#getspread","text":"( method ) love .ParticleSystem: getSpread () -> spread : number Gets the amount of directional spread of the particle emitter (in radians). Open in Browser @ return spread \u2014 The spread of the emitter (radians).","title":"getSpread"},{"location":"doc/#gettangentialacceleration","text":"( method ) love .ParticleSystem: getTangentialAcceleration () -> min : number 2. max : number Gets the tangential acceleration (acceleration perpendicular to the particle's direction). Open in Browser @ return min \u2014 The minimum acceleration. @ return max \u2014 The maximum acceleration.","title":"getTangentialAcceleration"},{"location":"doc/#gettexture_1","text":"( method ) love .ParticleSystem: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used for the particles. Open in Browser @ return texture \u2014 The Image or Canvas used for the particles.","title":"getTexture"},{"location":"doc/#hasrelativerotation","text":"( method ) love .ParticleSystem: hasRelativeRotation () -> enable : boolean Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle. Open in Browser @ return enable \u2014 True if relative particle rotation is enabled, false if it's disabled.","title":"hasRelativeRotation"},{"location":"doc/#isactive_4","text":"( method ) love .ParticleSystem: isActive () -> active : boolean Checks whether the particle system is actively emitting particles. Open in Browser @ return active \u2014 True if system is active, false otherwise.","title":"isActive"},{"location":"doc/#ispaused","text":"( method ) love .ParticleSystem: isPaused () -> paused : boolean Checks whether the particle system is paused. Open in Browser @ return paused \u2014 True if system is paused, false otherwise.","title":"isPaused"},{"location":"doc/#isstopped","text":"( method ) love .ParticleSystem: isStopped () -> stopped : boolean Checks whether the particle system is stopped. Open in Browser @ return stopped \u2014 True if system is stopped, false otherwise.","title":"isStopped"},{"location":"doc/#moveto","text":"( method ) love .ParticleSystem: moveTo ( x : number, y : number) Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame. Open in Browser @ param x \u2014 Position along x-axis. @ param y \u2014 Position along y-axis.","title":"moveTo"},{"location":"doc/#pause","text":"( method ) love .ParticleSystem: pause () Pauses the particle emitter. Open in Browser","title":"pause"},{"location":"doc/#release_32","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#reset","text":"( method ) love .ParticleSystem: reset () Resets the particle emitter, removing any existing particles and resetting the lifetime counter. Open in Browser","title":"reset"},{"location":"doc/#setbuffersize","text":"( method ) love .ParticleSystem: setBufferSize ( size : number) Sets the size of the buffer (the max allowed amount of particles in the system). Open in Browser @ param size \u2014 The buffer size.","title":"setBufferSize"},{"location":"doc/#setcolors","text":"( method ) love .ParticleSystem: setColors ( r1 : number, g1 : number, b1 : number, a1 ? : number , r2 ? : number , g2 ? : number , b2 ? : number , a2 ? : number , r8 ? : number , g8 ? : number , b8 ? : number , a8 ? : number ) Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime. Arguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param r1 \u2014 First color, red component (0-1). @ param g1 \u2014 First color, green component (0-1). @ param b1 \u2014 First color, blue component (0-1). @ param a1 \u2014 First color, alpha component (0-1). @ param r2 \u2014 Second color, red component (0-1). @ param g2 \u2014 Second color, green component (0-1). @ param b2 \u2014 Second color, blue component (0-1). @ param a2 \u2014 Second color, alpha component (0-1). @ param r8 \u2014 Eighth color, red component (0-1). @ param g8 \u2014 Eighth color, green component (0-1). @ param b8 \u2014 Eighth color, blue component (0-1). @ param a8 \u2014 Eighth color, alpha component (0-1).","title":"setColors"},{"location":"doc/#setdirection","text":"( method ) love .ParticleSystem: setDirection ( direction : number) Sets the direction the particles will be emitted in. Open in Browser @ param direction \u2014 The direction of the particles (in radians).","title":"setDirection"},{"location":"doc/#setemissionarea","text":"( method ) love .ParticleSystem: setEmissionArea ( distribution : \" borderellipse \"|\" borderrectangle \"|\" ellipse \"|\" none \"|\" normal \"...(+1), dx: number, dy: number, angle?: number, directionRelativeToCenter?: boolean) Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function. Open in Browser @ param distribution \u2014 The type of distribution for new particles. @ param dx \u2014 The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution. @ param dy \u2014 The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution. @ param angle \u2014 The angle in radians of the emission area. @ param directionRelativeToCenter \u2014 True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise. -- -- Types of particle area spread distribution. -- -- -- [Open in Browser](https://love2d.org/wiki/AreaSpreadDistribution) -- distribution : | \" uniform \" -- Uniform distribution. | \" normal \" -- Normal (gaussian) distribution. | \" ellipse \" -- Uniform distribution in an ellipse. | \" borderellipse \" -- Distribution in an ellipse with particles spawning at the edges of the ellipse. | \" borderrectangle \" -- Distribution in a rectangle with particles spawning at the edges of the rectangle. | \" none \" -- No distribution - area spread is disabled.","title":"setEmissionArea"},{"location":"doc/#setemissionrate","text":"( method ) love .ParticleSystem: setEmissionRate ( rate : number) Sets the amount of particles emitted per second. Open in Browser @ param rate \u2014 The amount of particles per second.","title":"setEmissionRate"},{"location":"doc/#setemitterlifetime","text":"( method ) love .ParticleSystem: setEmitterLifetime ( life : number) Sets how long the particle system should emit particles (if -1 then it emits particles forever). Open in Browser @ param life \u2014 The lifetime of the emitter (in seconds).","title":"setEmitterLifetime"},{"location":"doc/#setinsertmode","text":"( method ) love .ParticleSystem: setInsertMode ( mode : \" bottom \"|\" random \"|\" top \") Sets the mode to use when the ParticleSystem adds new particles. Open in Browser @ param mode \u2014 The mode to use when the ParticleSystem adds new particles. -- -- How newly created particles are added to the ParticleSystem. -- -- -- [Open in Browser](https://love2d.org/wiki/ParticleInsertMode) -- mode : | \" top \" -- Particles are inserted at the top of the ParticleSystem's list of particles. | \" bottom \" -- Particles are inserted at the bottom of the ParticleSystem's list of particles. | \" random \" -- Particles are inserted at random positions in the ParticleSystem's list of particles.","title":"setInsertMode"},{"location":"doc/#setlinearacceleration","text":"( method ) love .ParticleSystem: setLinearAcceleration ( xmin : number, ymin : number, xmax ? : number , ymax ? : number ) Sets the linear acceleration (acceleration along the x and y axes) for particles. Every particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax. Open in Browser @ param xmin \u2014 The minimum acceleration along the x axis. @ param ymin \u2014 The minimum acceleration along the y axis. @ param xmax \u2014 The maximum acceleration along the x axis. @ param ymax \u2014 The maximum acceleration along the y axis.","title":"setLinearAcceleration"},{"location":"doc/#setlineardamping_1","text":"( method ) love .ParticleSystem: setLinearDamping ( min : number, max ? : number ) Sets the amount of linear damping (constant deceleration) for particles. Open in Browser @ param min \u2014 The minimum amount of linear damping applied to particles. @ param max \u2014 The maximum amount of linear damping applied to particles.","title":"setLinearDamping"},{"location":"doc/#setoffset","text":"( method ) love .ParticleSystem: setOffset ( x : number, y : number) Set the offset position which the particle sprite is rotated around. If this function is not used, the particles rotate around their center. Open in Browser @ param x \u2014 The x coordinate of the rotation offset. @ param y \u2014 The y coordinate of the rotation offset.","title":"setOffset"},{"location":"doc/#setparticlelifetime","text":"( method ) love .ParticleSystem: setParticleLifetime ( min : number, max ? : number ) Sets the lifetime of the particles. Open in Browser @ param min \u2014 The minimum life of the particles (in seconds). @ param max \u2014 The maximum life of the particles (in seconds).","title":"setParticleLifetime"},{"location":"doc/#setposition_4","text":"( method ) love .ParticleSystem: setPosition ( x : number, y : number) Sets the position of the emitter. Open in Browser @ param x \u2014 Position along x-axis. @ param y \u2014 Position along y-axis.","title":"setPosition"},{"location":"doc/#setquads","text":"( method ) love .ParticleSystem: setQuads ( quad1 : love.Quad, quad2 : love.Quad) Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems. Open in Browser @ param quad1 \u2014 The first Quad to use. @ param quad2 \u2014 The second Quad to use.","title":"setQuads"},{"location":"doc/#setradialacceleration","text":"( method ) love .ParticleSystem: setRadialAcceleration ( min : number, max ? : number ) Set the radial acceleration (away from the emitter). Open in Browser @ param min \u2014 The minimum acceleration. @ param max \u2014 The maximum acceleration.","title":"setRadialAcceleration"},{"location":"doc/#setrelativerotation","text":"( method ) love .ParticleSystem: setRelativeRotation ( enable : boolean) Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle. Open in Browser @ param enable \u2014 True to enable relative particle rotation, false to disable it.","title":"setRelativeRotation"},{"location":"doc/#setrotation_1","text":"( method ) love .ParticleSystem: setRotation ( min : number, max ? : number ) Sets the rotation of the image upon particle creation (in radians). Open in Browser @ param min \u2014 The minimum initial angle (radians). @ param max \u2014 The maximum initial angle (radians).","title":"setRotation"},{"location":"doc/#setsizevariation","text":"( method ) love .ParticleSystem: setSizeVariation ( variation : number) Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ param variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).","title":"setSizeVariation"},{"location":"doc/#setsizes","text":"( method ) love .ParticleSystem: setSizes ( size1 : number, size2 ? : number , size8 ? : number ) Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime. At least one size must be specified. A maximum of eight may be used. Open in Browser @ param size1 \u2014 The first size. @ param size2 \u2014 The second size. @ param size8 \u2014 The eighth size.","title":"setSizes"},{"location":"doc/#setspeed","text":"( method ) love .ParticleSystem: setSpeed ( min : number, max ? : number ) Sets the speed of the particles. Open in Browser @ param min \u2014 The minimum linear speed of the particles. @ param max \u2014 The maximum linear speed of the particles.","title":"setSpeed"},{"location":"doc/#setspin","text":"( method ) love .ParticleSystem: setSpin ( min : number, max ? : number ) Sets the spin of the sprite. Open in Browser @ param min \u2014 The minimum spin (radians per second). @ param max \u2014 The maximum spin (radians per second).","title":"setSpin"},{"location":"doc/#setspinvariation","text":"( method ) love .ParticleSystem: setSpinVariation ( variation : number) Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end). Open in Browser @ param variation \u2014 The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).","title":"setSpinVariation"},{"location":"doc/#setspread","text":"( method ) love .ParticleSystem: setSpread ( spread : number) Sets the amount of spread for the system. Open in Browser @ param spread \u2014 The amount of spread (radians).","title":"setSpread"},{"location":"doc/#settangentialacceleration","text":"( method ) love .ParticleSystem: setTangentialAcceleration ( min : number, max ? : number ) Sets the tangential acceleration (acceleration perpendicular to the particle's direction). Open in Browser @ param min \u2014 The minimum acceleration. @ param max \u2014 The maximum acceleration.","title":"setTangentialAcceleration"},{"location":"doc/#settexture_1","text":"( method ) love .ParticleSystem: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) to be used for the particles. Open in Browser @ param texture \u2014 An Image or Canvas to use for the particles.","title":"setTexture"},{"location":"doc/#start","text":"( method ) love .ParticleSystem: start () Starts the particle emitter. Open in Browser","title":"start"},{"location":"doc/#stop","text":"( method ) love .ParticleSystem: stop () Stops the particle emitter, resetting the lifetime counter. Open in Browser","title":"stop"},{"location":"doc/#type_33","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_33","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#update_16","text":"( method ) love .ParticleSystem: update ( dt : number) Updates the particle system; moving, creating and killing particles. Open in Browser @ param dt \u2014 The time (seconds) since last frame.","title":"update"},{"location":"doc/#lovepixelformat","text":"","title":"love.PixelFormat"},{"location":"doc/#lovepolygonshape","text":"","title":"love.PolygonShape"},{"location":"doc/#computeaabb_3","text":"( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"computeAABB"},{"location":"doc/#computemass_3","text":"( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia.","title":"computeMass"},{"location":"doc/#getchildcount_3","text":"( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children.","title":"getChildCount"},{"location":"doc/#getpoints_2","text":"( method ) love .PolygonShape: getPoints () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the local coordinates of the polygon's vertices. This function has a variable number of return values. It can be used in a nested fashion with love.graphics.polygon. Open in Browser @ return x1 \u2014 The x-component of the first vertex. @ return y1 \u2014 The y-component of the first vertex. @ return x2 \u2014 The x-component of the second vertex. @ return y2 \u2014 The y-component of the second vertex.","title":"getPoints"},{"location":"doc/#getradius_3","text":"( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape.","title":"getRadius"},{"location":"doc/#gettype_11","text":"( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape.","title":"getType"},{"location":"doc/#raycast_4","text":"( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_33","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#testpoint_4","text":"( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside","title":"testPoint"},{"location":"doc/#type_34","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_34","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovepowerstate","text":"","title":"love.PowerState"},{"location":"doc/#loveprismaticjoint","text":"","title":"love.PrismaticJoint"},{"location":"doc/#arelimitsenabled","text":"( method ) love .PrismaticJoint: areLimitsEnabled () -> enabled : boolean Checks whether the limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise.","title":"areLimitsEnabled"},{"location":"doc/#destroy_8","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_6","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getaxis_1","text":"( method ) love .PrismaticJoint: getAxis () -> x : number 2. y : number Gets the world-space axis vector of the Prismatic Joint. Open in Browser @ return x \u2014 The x-axis coordinate of the world-space axis vector. @ return y \u2014 The y-axis coordinate of the world-space axis vector.","title":"getAxis"},{"location":"doc/#getbodies_6","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_6","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getjointspeed","text":"( method ) love .PrismaticJoint: getJointSpeed () -> s : number Get the current joint angle speed. Open in Browser @ return s \u2014 Joint angle speed in meters/second.","title":"getJointSpeed"},{"location":"doc/#getjointtranslation","text":"( method ) love .PrismaticJoint: getJointTranslation () -> t : number Get the current joint translation. Open in Browser @ return t \u2014 Joint translation, usually in meters..","title":"getJointTranslation"},{"location":"doc/#getlimits","text":"( method ) love .PrismaticJoint: getLimits () -> lower : number 2. upper : number Gets the joint limits. Open in Browser @ return lower \u2014 The lower limit, usually in meters. @ return upper \u2014 The upper limit, usually in meters.","title":"getLimits"},{"location":"doc/#getlowerlimit","text":"( method ) love .PrismaticJoint: getLowerLimit () -> lower : number Gets the lower limit. Open in Browser @ return lower \u2014 The lower limit, usually in meters.","title":"getLowerLimit"},{"location":"doc/#getmaxmotorforce","text":"( method ) love .PrismaticJoint: getMaxMotorForce () -> f : number Gets the maximum motor force. Open in Browser @ return f \u2014 The maximum motor force, usually in N.","title":"getMaxMotorForce"},{"location":"doc/#getmotorforce","text":"( method ) love .PrismaticJoint: getMotorForce ( invdt : number) -> force : number Returns the current motor force. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return force \u2014 The force on the motor in newtons.","title":"getMotorForce"},{"location":"doc/#getmotorspeed","text":"( method ) love .PrismaticJoint: getMotorSpeed () -> s : number Gets the motor speed. Open in Browser @ return s \u2014 The motor speed, usually in meters per second.","title":"getMotorSpeed"},{"location":"doc/#getreactionforce_6","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_6","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#getreferenceangle","text":"( method ) love .PrismaticJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians.","title":"getReferenceAngle"},{"location":"doc/#gettype_12","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getupperlimit","text":"( method ) love .PrismaticJoint: getUpperLimit () -> upper : number Gets the upper limit. Open in Browser @ return upper \u2014 The upper limit, usually in meters.","title":"getUpperLimit"},{"location":"doc/#getuserdata_8","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_8","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#ismotorenabled","text":"( method ) love .PrismaticJoint: isMotorEnabled () -> enabled : boolean Checks whether the motor is enabled. Open in Browser @ return enabled \u2014 True if enabled, false if disabled.","title":"isMotorEnabled"},{"location":"doc/#release_34","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setlimits","text":"( method ) love .PrismaticJoint: setLimits ( lower : number, upper : number) Sets the limits. Open in Browser @ param lower \u2014 The lower limit, usually in meters. @ param upper \u2014 The upper limit, usually in meters.","title":"setLimits"},{"location":"doc/#setlimitsenabled","text":"( method ) love .PrismaticJoint: setLimitsEnabled () -> enable : boolean Enables/disables the joint limit. Open in Browser @ return enable \u2014 True if enabled, false if disabled.","title":"setLimitsEnabled"},{"location":"doc/#setlowerlimit","text":"( method ) love .PrismaticJoint: setLowerLimit ( lower : number) Sets the lower limit. Open in Browser @ param lower \u2014 The lower limit, usually in meters.","title":"setLowerLimit"},{"location":"doc/#setmaxmotorforce","text":"( method ) love .PrismaticJoint: setMaxMotorForce ( f : number) Set the maximum motor force. Open in Browser @ param f \u2014 The maximum motor force, usually in N.","title":"setMaxMotorForce"},{"location":"doc/#setmotorenabled","text":"( method ) love .PrismaticJoint: setMotorEnabled ( enable : boolean) Enables/disables the joint motor. Open in Browser @ param enable \u2014 True to enable, false to disable.","title":"setMotorEnabled"},{"location":"doc/#setmotorspeed","text":"( method ) love .PrismaticJoint: setMotorSpeed ( s : number) Sets the motor speed. Open in Browser @ param s \u2014 The motor speed, usually in meters per second.","title":"setMotorSpeed"},{"location":"doc/#setupperlimit","text":"( method ) love .PrismaticJoint: setUpperLimit ( upper : number) Sets the upper limit. Open in Browser @ param upper \u2014 The upper limit, usually in meters.","title":"setUpperLimit"},{"location":"doc/#setuserdata_8","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_35","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_35","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovepulleyjoint","text":"","title":"love.PulleyJoint"},{"location":"doc/#destroy_9","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_7","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_7","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_7","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getconstant","text":"( method ) love .PulleyJoint: getConstant () -> length : number Get the total length of the rope. Open in Browser @ return length \u2014 The length of the rope in the joint.","title":"getConstant"},{"location":"doc/#getgroundanchors","text":"( method ) love .PulleyJoint: getGroundAnchors () -> a1x : number 2. a1y : number 3. a2x : number 4. a2y : number Get the ground anchor positions in world coordinates. Open in Browser @ return a1x \u2014 The x coordinate of the first anchor. @ return a1y \u2014 The y coordinate of the first anchor. @ return a2x \u2014 The x coordinate of the second anchor. @ return a2y \u2014 The y coordinate of the second anchor.","title":"getGroundAnchors"},{"location":"doc/#getlengtha","text":"( method ) love .PulleyJoint: getLengthA () -> length : number Get the current length of the rope segment attached to the first body. Open in Browser @ return length \u2014 The length of the rope segment.","title":"getLengthA"},{"location":"doc/#getlengthb","text":"( method ) love .PulleyJoint: getLengthB () -> length : number Get the current length of the rope segment attached to the second body. Open in Browser @ return length \u2014 The length of the rope segment.","title":"getLengthB"},{"location":"doc/#getmaxlengths","text":"( method ) love .PulleyJoint: getMaxLengths () -> len1 : number 2. len2 : number Get the maximum lengths of the rope segments. Open in Browser @ return len1 \u2014 The maximum length of the first rope segment. @ return len2 \u2014 The maximum length of the second rope segment.","title":"getMaxLengths"},{"location":"doc/#getratio_1","text":"( method ) love .PulleyJoint: getRatio () -> ratio : number Get the pulley ratio. Open in Browser @ return ratio \u2014 The pulley ratio of the joint.","title":"getRatio"},{"location":"doc/#getreactionforce_7","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_7","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_13","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_9","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_9","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_35","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setconstant","text":"( method ) love .PulleyJoint: setConstant ( length : number) Set the total length of the rope. Setting a new length for the rope updates the maximum length values of the joint. Open in Browser @ param length \u2014 The new length of the rope in the joint.","title":"setConstant"},{"location":"doc/#setmaxlengths","text":"( method ) love .PulleyJoint: setMaxLengths ( max1 : number, max2 : number) Set the maximum lengths of the rope segments. The physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values. Open in Browser @ param max1 \u2014 The new maximum length of the first segment. @ param max2 \u2014 The new maximum length of the second segment.","title":"setMaxLengths"},{"location":"doc/#setratio_1","text":"( method ) love .PulleyJoint: setRatio ( ratio : number) Set the pulley ratio. Open in Browser @ param ratio \u2014 The new pulley ratio of the joint.","title":"setRatio"},{"location":"doc/#setuserdata_9","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_36","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_36","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovequad","text":"","title":"love.Quad"},{"location":"doc/#gettexturedimensions","text":"( method ) love .Quad: getTextureDimensions () -> sw : number 2. sh : number Gets reference texture dimensions initially specified in love.graphics.newQuad. Open in Browser @ return sw \u2014 The Texture width used by the Quad. @ return sh \u2014 The Texture height used by the Quad.","title":"getTextureDimensions"},{"location":"doc/#getviewport","text":"( method ) love .Quad: getViewport () -> x : number 2. y : number 3. w : number 4. h : number Gets the current viewport of this Quad. Open in Browser @ return x \u2014 The top-left corner along the x-axis. @ return y \u2014 The top-left corner along the y-axis. @ return w \u2014 The width of the viewport. @ return h \u2014 The height of the viewport.","title":"getViewport"},{"location":"doc/#release_36","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setviewport","text":"( method ) love .Quad: setViewport ( x : number, y : number, w : number, h : number, sw : number, sh : number) Sets the texture coordinates according to a viewport. Open in Browser @ param x \u2014 The top-left corner along the x-axis. @ param y \u2014 The top-left corner along the y-axis. @ param w \u2014 The width of the viewport. @ param h \u2014 The height of the viewport. @ param sw \u2014 The reference width, the width of the Image. (Must be greater than 0.) @ param sh \u2014 The reference height, the height of the Image. (Must be greater than 0.)","title":"setViewport"},{"location":"doc/#type_37","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_37","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loverandomgenerator","text":"","title":"love.RandomGenerator"},{"location":"doc/#getseed_1","text":"( method ) love .RandomGenerator: getSeed () -> low : number 2. high : number Gets the seed of the random number generator object. The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53, but the seed value is an integer number in the range of 2^64 - 1. Open in Browser @ return low \u2014 Integer number representing the lower 32 bits of the RandomGenerator's 64 bit seed value. @ return high \u2014 Integer number representing the higher 32 bits of the RandomGenerator's 64 bit seed value.","title":"getSeed"},{"location":"doc/#getstate_1","text":"( method ) love .RandomGenerator: getState () -> state : string Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of L\u00d6VE. This is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number. Open in Browser @ return state \u2014 The current state of the RandomGenerator object, represented as a string.","title":"getState"},{"location":"doc/#random_1","text":"( method ) love .RandomGenerator: random () -> number : number Generates a pseudo-random number in a platform independent manner. Open in Browser @ return number \u2014 The pseudo-random number.","title":"random"},{"location":"doc/#randomnormal","text":"( method ) love .RandomGenerator: randomNormal ( stddev ? : number , mean ? : number ) -> number : number Get a normally distributed pseudo random number. Open in Browser @ param stddev \u2014 Standard deviation of the distribution. @ param mean \u2014 The mean of the distribution. @ return number \u2014 Normally distributed random number with variance (stddev)\u00b2 and the specified mean.","title":"randomNormal"},{"location":"doc/#release_37","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setseed_1","text":"( method ) love .RandomGenerator: setSeed ( seed : number) Sets the seed of the random number generator using the specified integer number. Open in Browser @ param seed \u2014 The integer number with which you want to seed the randomization. Must be within the range of 2^53.","title":"setSeed"},{"location":"doc/#setstate_1","text":"( method ) love .RandomGenerator: setState ( state : string) Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of L\u00d6VE. This is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value. Open in Browser @ param state \u2014 The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState.","title":"setState"},{"location":"doc/#type_38","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_38","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loverasterizer","text":"","title":"love.Rasterizer"},{"location":"doc/#getadvance_1","text":"( method ) love .Rasterizer: getAdvance () -> advance : number Gets font advance. Open in Browser @ return advance \u2014 Font advance.","title":"getAdvance"},{"location":"doc/#getascent_1","text":"( method ) love .Rasterizer: getAscent () -> height : number Gets ascent height. Open in Browser @ return height \u2014 Ascent height.","title":"getAscent"},{"location":"doc/#getdescent_1","text":"( method ) love .Rasterizer: getDescent () -> height : number Gets descent height. Open in Browser @ return height \u2014 Descent height.","title":"getDescent"},{"location":"doc/#getglyphcount","text":"( method ) love .Rasterizer: getGlyphCount () -> count : number Gets number of glyphs in font. Open in Browser @ return count \u2014 Glyphs count.","title":"getGlyphCount"},{"location":"doc/#getglyphdata","text":"( method ) love .Rasterizer: getGlyphData ( glyph : string) -> glyphData : love.GlyphData Gets glyph data of a specified glyph. Open in Browser @ param glyph \u2014 Glyph @ return glyphData \u2014 Glyph data","title":"getGlyphData"},{"location":"doc/#getheight_7","text":"( method ) love .Rasterizer: getHeight () -> height : number Gets font height. Open in Browser @ return height \u2014 Font height","title":"getHeight"},{"location":"doc/#getlineheight_1","text":"( method ) love .Rasterizer: getLineHeight () -> height : number Gets line height of a font. Open in Browser @ return height \u2014 Line height of a font.","title":"getLineHeight"},{"location":"doc/#hasglyphs_1","text":"( method ) love .Rasterizer: hasGlyphs ( glyph1 : string| number , glyph2 : string| number , ... string | number ) -> hasGlyphs : boolean Checks if font contains specified glyphs. Open in Browser @ param glyph1 \u2014 Glyph @ param glyph2 \u2014 Glyph @ return hasGlyphs \u2014 Whatever font contains specified glyphs.","title":"hasGlyphs"},{"location":"doc/#release_38","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#type_39","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_39","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loverecordingdevice","text":"","title":"love.RecordingDevice"},{"location":"doc/#getbitdepth_1","text":"( method ) love .RecordingDevice: getBitDepth () -> bits : number Gets the number of bits per sample in the data currently being recorded. Open in Browser @ return bits \u2014 The number of bits per sample in the data that's currently being recorded.","title":"getBitDepth"},{"location":"doc/#getchannelcount_1","text":"( method ) love .RecordingDevice: getChannelCount () -> channels : number Gets the number of channels currently being recorded (mono or stereo). Open in Browser @ return channels \u2014 The number of channels being recorded (1 for mono, 2 for stereo).","title":"getChannelCount"},{"location":"doc/#getdata","text":"( method ) love .RecordingDevice: getData () -> data : love.SoundData Gets all recorded audio SoundData stored in the device's internal ring buffer. The internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost. Open in Browser @ return data \u2014 The recorded audio data, or nil if the device isn't recording.","title":"getData"},{"location":"doc/#getname_1","text":"( method ) love .RecordingDevice: getName () -> name : string Gets the name of the recording device. Open in Browser @ return name \u2014 The name of the device.","title":"getName"},{"location":"doc/#getsamplecount","text":"( method ) love .RecordingDevice: getSampleCount () -> samples : number Gets the number of currently recorded samples. Open in Browser @ return samples \u2014 The number of samples that have been recorded so far.","title":"getSampleCount"},{"location":"doc/#getsamplerate_1","text":"( method ) love .RecordingDevice: getSampleRate () -> rate : number Gets the number of samples per second currently being recorded. Open in Browser @ return rate \u2014 The number of samples being recorded per second (sample rate).","title":"getSampleRate"},{"location":"doc/#isrecording","text":"( method ) love .RecordingDevice: isRecording () -> recording : boolean Gets whether the device is currently recording. Open in Browser @ return recording \u2014 True if the recording, false otherwise.","title":"isRecording"},{"location":"doc/#release_39","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#start_1","text":"( method ) love .RecordingDevice: start ( samplecount : number, samplerate ? : number , bitdepth ? : number , channels ? : number ) -> success : boolean Begins recording audio using this device. Open in Browser @ param samplecount \u2014 The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called. @ param samplerate \u2014 The number of samples per second to store when recording. @ param bitdepth \u2014 The number of bits per sample. @ param channels \u2014 Whether to record in mono or stereo. Most microphones don't support more than 1 channel. @ return success \u2014 True if the device successfully began recording using the specified parameters, false if not.","title":"start"},{"location":"doc/#stop_1","text":"( method ) love .RecordingDevice: stop () -> data : love.SoundData Stops recording audio from this device. Any sound data currently in the device's buffer will be returned. Open in Browser @ return data \u2014 The sound data currently in the device's buffer, or nil if the device wasn't recording.","title":"stop"},{"location":"doc/#type_40","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_40","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loverevolutejoint","text":"","title":"love.RevoluteJoint"},{"location":"doc/#arelimitsenabled_1","text":"( method ) love .RevoluteJoint: areLimitsEnabled () -> enabled : boolean Checks whether limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise.","title":"areLimitsEnabled"},{"location":"doc/#destroy_10","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_8","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_8","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_8","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getjointangle","text":"( method ) love .RevoluteJoint: getJointAngle () -> angle : number Get the current joint angle. Open in Browser @ return angle \u2014 The joint angle in radians.","title":"getJointAngle"},{"location":"doc/#getjointspeed_1","text":"( method ) love .RevoluteJoint: getJointSpeed () -> s : number Get the current joint angle speed. Open in Browser @ return s \u2014 Joint angle speed in radians/second.","title":"getJointSpeed"},{"location":"doc/#getlimits_1","text":"( method ) love .RevoluteJoint: getLimits () -> lower : number 2. upper : number Gets the joint limits. Open in Browser @ return lower \u2014 The lower limit, in radians. @ return upper \u2014 The upper limit, in radians.","title":"getLimits"},{"location":"doc/#getlowerlimit_1","text":"( method ) love .RevoluteJoint: getLowerLimit () -> lower : number Gets the lower limit. Open in Browser @ return lower \u2014 The lower limit, in radians.","title":"getLowerLimit"},{"location":"doc/#getmaxmotortorque","text":"( method ) love .RevoluteJoint: getMaxMotorTorque () -> f : number Gets the maximum motor force. Open in Browser @ return f \u2014 The maximum motor force, in Nm.","title":"getMaxMotorTorque"},{"location":"doc/#getmotorspeed_1","text":"( method ) love .RevoluteJoint: getMotorSpeed () -> s : number Gets the motor speed. Open in Browser @ return s \u2014 The motor speed, radians per second.","title":"getMotorSpeed"},{"location":"doc/#getmotortorque","text":"( method ) love .RevoluteJoint: getMotorTorque () -> f : number Get the current motor force. Open in Browser @ return f \u2014 The current motor force, in Nm.","title":"getMotorTorque"},{"location":"doc/#getreactionforce_8","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_8","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#getreferenceangle_1","text":"( method ) love .RevoluteJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians.","title":"getReferenceAngle"},{"location":"doc/#gettype_14","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getupperlimit_1","text":"( method ) love .RevoluteJoint: getUpperLimit () -> upper : number Gets the upper limit. Open in Browser @ return upper \u2014 The upper limit, in radians.","title":"getUpperLimit"},{"location":"doc/#getuserdata_10","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#haslimitsenabled","text":"( method ) love .RevoluteJoint: hasLimitsEnabled () -> enabled : boolean Checks whether limits are enabled. Open in Browser @ return enabled \u2014 True if enabled, false otherwise.","title":"hasLimitsEnabled"},{"location":"doc/#isdestroyed_10","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#ismotorenabled_1","text":"( method ) love .RevoluteJoint: isMotorEnabled () -> enabled : boolean Checks whether the motor is enabled. Open in Browser @ return enabled \u2014 True if enabled, false if disabled.","title":"isMotorEnabled"},{"location":"doc/#release_40","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setlimits_1","text":"( method ) love .RevoluteJoint: setLimits ( lower : number, upper : number) Sets the limits. Open in Browser @ param lower \u2014 The lower limit, in radians. @ param upper \u2014 The upper limit, in radians.","title":"setLimits"},{"location":"doc/#setlimitsenabled_1","text":"( method ) love .RevoluteJoint: setLimitsEnabled ( enable : boolean) Enables/disables the joint limit. Open in Browser @ param enable \u2014 True to enable, false to disable.","title":"setLimitsEnabled"},{"location":"doc/#setlowerlimit_1","text":"( method ) love .RevoluteJoint: setLowerLimit ( lower : number) Sets the lower limit. Open in Browser @ param lower \u2014 The lower limit, in radians.","title":"setLowerLimit"},{"location":"doc/#setmaxmotortorque","text":"( method ) love .RevoluteJoint: setMaxMotorTorque ( f : number) Set the maximum motor force. Open in Browser @ param f \u2014 The maximum motor force, in Nm.","title":"setMaxMotorTorque"},{"location":"doc/#setmotorenabled_1","text":"( method ) love .RevoluteJoint: setMotorEnabled ( enable : boolean) Enables/disables the joint motor. Open in Browser @ param enable \u2014 True to enable, false to disable.","title":"setMotorEnabled"},{"location":"doc/#setmotorspeed_1","text":"( method ) love .RevoluteJoint: setMotorSpeed ( s : number) Sets the motor speed. Open in Browser @ param s \u2014 The motor speed, radians per second.","title":"setMotorSpeed"},{"location":"doc/#setupperlimit_1","text":"( method ) love .RevoluteJoint: setUpperLimit ( upper : number) Sets the upper limit. Open in Browser @ param upper \u2014 The upper limit, in radians.","title":"setUpperLimit"},{"location":"doc/#setuserdata_10","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_41","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_41","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveropejoint","text":"","title":"love.RopeJoint"},{"location":"doc/#destroy_11","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_9","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_9","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_9","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getmaxlength","text":"( method ) love .RopeJoint: getMaxLength () -> maxLength : number Gets the maximum length of a RopeJoint. Open in Browser @ return maxLength \u2014 The maximum length of the RopeJoint.","title":"getMaxLength"},{"location":"doc/#getreactionforce_9","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_9","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#gettype_15","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_11","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_11","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_41","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setmaxlength","text":"( method ) love .RopeJoint: setMaxLength ( maxLength : number) Sets the maximum length of a RopeJoint. Open in Browser @ param maxLength \u2014 The new maximum length of the RopeJoint.","title":"setMaxLength"},{"location":"doc/#setuserdata_11","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_42","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_42","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovescancode","text":"","title":"love.Scancode"},{"location":"doc/#loveshader","text":"","title":"love.Shader"},{"location":"doc/#getwarnings","text":"( method ) love .Shader: getWarnings () -> warnings : string Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like. Open in Browser @ return warnings \u2014 Warning and error messages (if any).","title":"getWarnings"},{"location":"doc/#hasuniform","text":"( method ) love .Shader: hasUniform ( name : string) -> hasuniform : boolean Gets whether a uniform / extern variable exists in the Shader. If a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case. Open in Browser @ param name \u2014 The name of the uniform variable. @ return hasuniform \u2014 Whether the uniform exists in the shader and affects its final output.","title":"hasUniform"},{"location":"doc/#release_42","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#send","text":"( method ) love .Shader: send ( name : string, number : number, ... number ) Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g. uniform float time; // 'float' is the typical number type used in GLSL shaders. uniform float varsvec2 light_pos; uniform vec4 colors[4; The corresponding send calls would be shader:send('time', t) shader:send('vars',a,b) shader:send('light_pos', {light_x, light_y}) shader:send('colors', {r1, g1, b1, a1}, {r2, g2, b2, a2}, {r3, g3, b3, a3}, {r4, g4, b4, a4}) Uniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each. Open in Browser @ param name \u2014 Name of the number to send to the shader. @ param number \u2014 Number to send to store in the uniform variable.","title":"send"},{"location":"doc/#sendcolor","text":"( method ) love .Shader: sendColor ( name : string, color : table, ... table ) Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled. Extern variables must be marked using the ''extern'' keyword, e.g. extern vec4 Color; The corresponding sendColor call would be shader:sendColor('Color', {r, g, b, a}) Extern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param name \u2014 The name of the color extern variable to send to in the shader. @ param color \u2014 A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector.","title":"sendColor"},{"location":"doc/#type_43","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_43","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveshape","text":"","title":"love.Shape"},{"location":"doc/#computeaabb_4","text":"( method ) love .Shape: computeAABB ( tx : number, ty : number, tr : number, childIndex ? : number ) -> topLeftX : number 2. topLeftY : number 3. bottomRightX : number 4. bottomRightY : number Returns the points of the bounding box for the transformed shape. Open in Browser @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child to compute the bounding box of. @ return topLeftX \u2014 The x position of the top-left point. @ return topLeftY \u2014 The y position of the top-left point. @ return bottomRightX \u2014 The x position of the bottom-right point. @ return bottomRightY \u2014 The y position of the bottom-right point.","title":"computeAABB"},{"location":"doc/#computemass_4","text":"( method ) love .Shape: computeMass ( density : number) -> x : number 2. y : number 3. mass : number 4. inertia : number Computes the mass properties for the shape with the specified density. Open in Browser @ param density \u2014 The shape density. @ return x \u2014 The x postition of the center of mass. @ return y \u2014 The y postition of the center of mass. @ return mass \u2014 The mass of the shape. @ return inertia \u2014 The rotational inertia.","title":"computeMass"},{"location":"doc/#getchildcount_4","text":"( method ) love .Shape: getChildCount () -> count : number Returns the number of children the shape has. Open in Browser @ return count \u2014 The number of children.","title":"getChildCount"},{"location":"doc/#getradius_4","text":"( method ) love .Shape: getRadius () -> radius : number Gets the radius of the shape. Open in Browser @ return radius \u2014 The radius of the shape.","title":"getRadius"},{"location":"doc/#gettype_16","text":"( method ) love .Shape: getType () -> type : \"chain\" | \"circle\" | \"edge\" | \"polygon\" Gets a string representing the Shape. This function can be useful for conditional debug drawing. Open in Browser @ return type \u2014 The type of the Shape. -- -- The different types of Shapes, as returned by Shape:getType. -- -- -- [Open in Browser](https://love2d.org/wiki/ShapeType) -- type : | \"circle\" -- The Shape is a CircleShape. | \"polygon\" -- The Shape is a PolygonShape. | \"edge\" -- The Shape is a EdgeShape. | \"chain\" -- The Shape is a ChainShape.","title":"getType"},{"location":"doc/#raycast_5","text":"( method ) love .Shape: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, maxFraction : number, tx : number, ty : number, tr : number, childIndex ? : number ) -> xn : number 2. yn : number 3. fraction : number Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position. The ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length. The childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children. The world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point. hitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction Open in Browser @ param x1 \u2014 The x position of the input line starting point. @ param y1 \u2014 The y position of the input line starting point. @ param x2 \u2014 The x position of the input line end point. @ param y2 \u2014 The y position of the input line end point. @ param maxFraction \u2014 Ray length parameter. @ param tx \u2014 The translation of the shape on the x-axis. @ param ty \u2014 The translation of the shape on the y-axis. @ param tr \u2014 The shape rotation. @ param childIndex \u2014 The index of the child the ray gets cast against. @ return xn \u2014 The x component of the normal vector of the edge where the ray hit the shape. @ return yn \u2014 The y component of the normal vector of the edge where the ray hit the shape. @ return fraction \u2014 The position on the input line where the intersection happened as a factor of the line length.","title":"rayCast"},{"location":"doc/#release_43","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#testpoint_5","text":"( method ) love .Shape: testPoint ( tx : number, ty : number, tr : number, x : number, y : number) -> hit : boolean This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches. Open in Browser @ param tx \u2014 Translates the shape along the x-axis. @ param ty \u2014 Translates the shape along the y-axis. @ param tr \u2014 Rotates the shape. @ param x \u2014 The x-component of the point. @ param y \u2014 The y-component of the point. @ return hit \u2014 True if inside, false if outside","title":"testPoint"},{"location":"doc/#type_44","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_44","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveshapetype","text":"","title":"love.ShapeType"},{"location":"doc/#lovesounddata","text":"","title":"love.SoundData"},{"location":"doc/#clone_10","text":"( method ) love .Data: clone () -> clone : love.Data Creates a new copy of the Data object. Open in Browser @ return clone \u2014 The new copy.","title":"clone"},{"location":"doc/#getbitdepth_2","text":"( method ) love .SoundData: getBitDepth () -> bitdepth : number Returns the number of bits per sample. Open in Browser @ return bitdepth \u2014 Either 8, or 16.","title":"getBitDepth"},{"location":"doc/#getchannelcount_2","text":"( method ) love .SoundData: getChannelCount () -> channels : number Returns the number of channels in the SoundData. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo.","title":"getChannelCount"},{"location":"doc/#getduration_1","text":"( method ) love .SoundData: getDuration () -> duration : number Gets the duration of the sound data. Open in Browser @ return duration \u2014 The duration of the sound data in seconds.","title":"getDuration"},{"location":"doc/#getffipointer_7","text":"( method ) love .Data: getFFIPointer () -> pointer : ffi.cdata* Gets an FFI pointer to the Data. This function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used. Open in Browser @ return pointer \u2014 A raw void* pointer to the Data, or nil if FFI is unavailable.","title":"getFFIPointer"},{"location":"doc/#getpointer_7","text":"( method ) love .Data: getPointer () -> pointer : lightuserdata Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI. Open in Browser @ return pointer \u2014 A raw pointer to the Data.","title":"getPointer"},{"location":"doc/#getsample","text":"( method ) love .SoundData: getSample ( i : number) -> sample : number Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order. Open in Browser @ param i \u2014 An integer value specifying the position of the sample (starting at 0). @ return sample \u2014 The normalized samplepoint (range -1.0 to 1.0).","title":"getSample"},{"location":"doc/#getsamplecount_1","text":"( method ) love .SoundData: getSampleCount () -> count : number Returns the number of samples per channel of the SoundData. Open in Browser @ return count \u2014 Total number of samples.","title":"getSampleCount"},{"location":"doc/#getsamplerate_2","text":"( method ) love .SoundData: getSampleRate () -> rate : number Returns the sample rate of the SoundData. Open in Browser @ return rate \u2014 Number of samples per second.","title":"getSampleRate"},{"location":"doc/#getsize_9","text":"( method ) love .Data: getSize () -> size : number Gets the Data's size in bytes. Open in Browser @ return size \u2014 The size of the Data in bytes.","title":"getSize"},{"location":"doc/#getstring_7","text":"( method ) love .Data: getString () -> data : string Gets the full Data as a string. Open in Browser @ return data \u2014 The raw data.","title":"getString"},{"location":"doc/#release_44","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setsample","text":"( method ) love .SoundData: setSample ( i : number, sample : number) Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order. Open in Browser @ param i \u2014 An integer value specifying the position of the sample (starting at 0). @ param sample \u2014 The normalized samplepoint (range -1.0 to 1.0).","title":"setSample"},{"location":"doc/#type_45","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_45","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovesource","text":"","title":"love.Source"},{"location":"doc/#clone_11","text":"( method ) love .Source: clone () -> source : love.Source Creates an identical copy of the Source in the stopped state. Static Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound. Open in Browser @ return source \u2014 The new identical copy of this Source.","title":"clone"},{"location":"doc/#getactiveeffects","text":"( method ) love .Source: getActiveEffects () -> effects : table Gets a list of the Source's active effect names. Open in Browser @ return effects \u2014 A list of the source's active effect names.","title":"getActiveEffects"},{"location":"doc/#getairabsorption","text":"( method ) love .Source: getAirAbsorption () -> amount : number Gets the amount of air absorption applied to the Source. By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter. Open in Browser @ return amount \u2014 The amount of air absorption applied to the Source.","title":"getAirAbsorption"},{"location":"doc/#getattenuationdistances","text":"( method ) love .Source: getAttenuationDistances () -> ref : number 2. max : number Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener. Open in Browser @ return ref \u2014 The current reference attenuation distance. If the current DistanceModel is clamped, this is the minimum distance before the Source is no longer attenuated. @ return max \u2014 The current maximum attenuation distance.","title":"getAttenuationDistances"},{"location":"doc/#getchannelcount_3","text":"( method ) love .Source: getChannelCount () -> channels : number Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects. Open in Browser @ return channels \u2014 1 for mono, 2 for stereo.","title":"getChannelCount"},{"location":"doc/#getcone","text":"( method ) love .Source: getCone () -> innerAngle : number 2. outerAngle : number 3. outerVolume : number Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction. Open in Browser @ return innerAngle \u2014 The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle. @ return outerAngle \u2014 The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles. @ return outerVolume \u2014 The Source's volume when the listener is outside both the inner and outer cone angles.","title":"getCone"},{"location":"doc/#getdirection_1","text":"( method ) love .Source: getDirection () -> x : number 2. y : number 3. z : number Gets the direction of the Source. Open in Browser @ return x \u2014 The X part of the direction vector. @ return y \u2014 The Y part of the direction vector. @ return z \u2014 The Z part of the direction vector.","title":"getDirection"},{"location":"doc/#getduration_2","text":"( method ) love .Source: getDuration ( unit ? : \"samples\" | \"seconds\" ) -> duration : number Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all. Open in Browser @ param unit \u2014 The time unit for the return value. @ return duration \u2014 The duration of the Source, or -1 if it cannot be determined. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples.","title":"getDuration"},{"location":"doc/#geteffect","text":"( method ) love .Source: getEffect ( name : string, filtersettings : table) -> filtersettings : { volume: number, highgain : number, lowgain : number } Gets the filter settings associated to a specific effect. This function returns nil if the effect was applied with no filter settings associated to it. Open in Browser @ param name \u2014 The name of the effect. @ param filtersettings \u2014 An optional empty table that will be filled with the filter settings. @ return filtersettings \u2014 The settings for the filter associated to this effect, or nil if the effect is not present in this Source or has no filter associated. The table has the following fields:","title":"getEffect"},{"location":"doc/#getfilter_3","text":"( method ) love .Source: getFilter () -> settings : { type: \" bandpass \"|\" highpass \"|\" lowpass \", volume: number, highgain: number, lowgain: number } Gets the filter settings currently applied to the Source. Open in Browser @ return settings \u2014 The filter settings to use for this Source, or nil if the Source has no active filter. The table has the following fields:","title":"getFilter"},{"location":"doc/#getfreebuffercount","text":"( method ) love .Source: getFreeBufferCount () -> buffers : number Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with. Open in Browser @ return buffers \u2014 How many more SoundData objects can be queued up.","title":"getFreeBufferCount"},{"location":"doc/#getpitch","text":"( method ) love .Source: getPitch () -> pitch : number Gets the current pitch of the Source. Open in Browser @ return pitch \u2014 The pitch, where 1.0 is normal.","title":"getPitch"},{"location":"doc/#getposition_6","text":"( method ) love .Source: getPosition () -> x : number 2. y : number 3. z : number Gets the position of the Source. Open in Browser @ return x \u2014 The X position of the Source. @ return y \u2014 The Y position of the Source. @ return z \u2014 The Z position of the Source.","title":"getPosition"},{"location":"doc/#getrolloff","text":"( method ) love .Source: getRolloff () -> rolloff : number Returns the rolloff factor of the source. Open in Browser @ return rolloff \u2014 The rolloff factor.","title":"getRolloff"},{"location":"doc/#gettype_17","text":"( method ) love .Source: getType () -> sourcetype : \" queue \"|\" static \"|\" stream \" Gets the type of the Source. Open in Browser @ return sourcetype \u2014 The type of the source. -- -- Types of audio sources. -- -- A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once. -- -- -- [Open in Browser](https://love2d.org/wiki/SourceType) -- sourcetype : | \" static \" -- The whole audio is decoded. | \" stream \" -- The audio is decoded in chunks when needed. | \" queue \" -- The audio must be manually queued by the user.","title":"getType"},{"location":"doc/#getvelocity","text":"( method ) love .Source: getVelocity () -> x : number 2. y : number 3. z : number Gets the velocity of the Source. Open in Browser @ return x \u2014 The X part of the velocity vector. @ return y \u2014 The Y part of the velocity vector. @ return z \u2014 The Z part of the velocity vector.","title":"getVelocity"},{"location":"doc/#getvolume","text":"( method ) love .Source: getVolume () -> volume : number Gets the current volume of the Source. Open in Browser @ return volume \u2014 The volume of the Source, where 1.0 is normal volume.","title":"getVolume"},{"location":"doc/#getvolumelimits","text":"( method ) love .Source: getVolumeLimits () -> min : number 2. max : number Returns the volume limits of the source. Open in Browser @ return min \u2014 The minimum volume. @ return max \u2014 The maximum volume.","title":"getVolumeLimits"},{"location":"doc/#islooping","text":"( method ) love .Source: isLooping () -> loop : boolean Returns whether the Source will loop. Open in Browser @ return loop \u2014 True if the Source will loop, false otherwise.","title":"isLooping"},{"location":"doc/#isplaying","text":"( method ) love .Source: isPlaying () -> playing : boolean Returns whether the Source is playing. Open in Browser @ return playing \u2014 True if the Source is playing, false otherwise.","title":"isPlaying"},{"location":"doc/#isrelative","text":"( method ) love .Source: isRelative () -> relative : boolean Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener. Open in Browser @ return relative \u2014 True if the position, velocity, direction and cone angles are relative to the listener, false if they're absolute.","title":"isRelative"},{"location":"doc/#pause_1","text":"( method ) love .Source: pause () Pauses the Source. Open in Browser","title":"pause"},{"location":"doc/#play","text":"( method ) love .Source: play () -> success : boolean Starts playing the Source. Open in Browser @ return success \u2014 Whether the Source was able to successfully start playing.","title":"play"},{"location":"doc/#queue_2","text":"( method ) love .Source: queue ( sounddata : love.SoundData) -> success : boolean Queues SoundData for playback in a queueable Source. This method requires the Source to be created via love.audio.newQueueableSource. Open in Browser @ param sounddata \u2014 The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's. @ return success \u2014 True if the data was successfully queued for playback, false if there were no available buffers to use for queueing.","title":"queue"},{"location":"doc/#release_45","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#seek_4","text":"( method ) love .Source: seek ( offset : number, unit ? : \"samples\" | \"seconds\" ) Sets the currently playing position of the Source. Open in Browser @ param offset \u2014 The position to seek to. @ param unit \u2014 The unit of the position value. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples.","title":"seek"},{"location":"doc/#setairabsorption","text":"( method ) love .Source: setAirAbsorption ( amount : number) Sets the amount of air absorption applied to the Source. By default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter. Air absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area. Open in Browser @ param amount \u2014 The amount of air absorption applied to the Source. Must be between 0 and 10.","title":"setAirAbsorption"},{"location":"doc/#setattenuationdistances","text":"( method ) love .Source: setAttenuationDistances ( ref : number, max : number) Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance. Distance attenuation is only applicable to Sources based on mono (rather than stereo) audio. Open in Browser @ param ref \u2014 The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance. @ param max \u2014 The new maximum attenuation distance.","title":"setAttenuationDistances"},{"location":"doc/#setcone","text":"( method ) love .Source: setCone ( innerAngle : number, outerAngle : number, outerVolume ? : number ) Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction. Open in Browser @ param innerAngle \u2014 The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle. @ param outerAngle \u2014 The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles. @ param outerVolume \u2014 The Source's volume when the listener is outside both the inner and outer cone angles.","title":"setCone"},{"location":"doc/#setdirection_1","text":"( method ) love .Source: setDirection ( x : number, y : number, z : number) Sets the direction vector of the Source. A zero vector makes the source non-directional. Open in Browser @ param x \u2014 The X part of the direction vector. @ param y \u2014 The Y part of the direction vector. @ param z \u2014 The Z part of the direction vector.","title":"setDirection"},{"location":"doc/#seteffect","text":"( method ) love .Source: setEffect ( name : string, enable ? : boolean ) -> success : boolean Applies an audio effect to the Source. The effect must have been previously defined using love.audio.setEffect. Open in Browser @ param name \u2014 The name of the effect previously set up with love.audio.setEffect. @ param enable \u2014 If false and the given effect name was previously enabled on this Source, disables the effect. @ return success \u2014 Whether the effect was successfully applied to this Source.","title":"setEffect"},{"location":"doc/#setfilter_3","text":"( method ) love .Source: setFilter ( settings : { type: \" bandpass \"|\" highpass \"|\" lowpass \", volume: number, highgain: number, lowgain: number }) -> success: boolean Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source. Open in Browser @ param settings \u2014 The filter settings to use for this Source, with the following fields: @ return success \u2014 Whether the filter was successfully applied to the Source.","title":"setFilter"},{"location":"doc/#setlooping","text":"( method ) love .Source: setLooping ( loop : boolean) Sets whether the Source should loop. Open in Browser @ param loop \u2014 True if the source should loop, false otherwise.","title":"setLooping"},{"location":"doc/#setpitch","text":"( method ) love .Source: setPitch ( pitch : number) Sets the pitch of the Source. Open in Browser @ param pitch \u2014 Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.","title":"setPitch"},{"location":"doc/#setposition_5","text":"( method ) love .Source: setPosition ( x : number, y : number, z : number) Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files! Open in Browser @ param x \u2014 The X position of the Source. @ param y \u2014 The Y position of the Source. @ param z \u2014 The Z position of the Source.","title":"setPosition"},{"location":"doc/#setrelative","text":"( method ) love .Source: setRelative ( enable ? : boolean ) Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute. By default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. Open in Browser @ param enable \u2014 True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.","title":"setRelative"},{"location":"doc/#setrolloff","text":"( method ) love .Source: setRolloff ( rolloff : number) Sets the rolloff factor which affects the strength of the used distance attenuation. Extended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification. Open in Browser @ param rolloff \u2014 The new rolloff factor.","title":"setRolloff"},{"location":"doc/#setvelocity","text":"( method ) love .Source: setVelocity ( x : number, y : number, z : number) Sets the velocity of the Source. This does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect. Open in Browser @ param x \u2014 The X part of the velocity vector. @ param y \u2014 The Y part of the velocity vector. @ param z \u2014 The Z part of the velocity vector.","title":"setVelocity"},{"location":"doc/#setvolume","text":"( method ) love .Source: setVolume ( volume : number) Sets the current volume of the Source. Open in Browser @ param volume \u2014 The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.","title":"setVolume"},{"location":"doc/#setvolumelimits","text":"( method ) love .Source: setVolumeLimits ( min : number, max : number) Sets the volume limits of the source. The limits have to be numbers from 0 to 1. Open in Browser @ param min \u2014 The minimum volume. @ param max \u2014 The maximum volume.","title":"setVolumeLimits"},{"location":"doc/#stop_2","text":"( method ) love .Source: stop () Stops a Source. Open in Browser","title":"stop"},{"location":"doc/#tell_2","text":"( method ) love .Source: tell ( unit ? : \"samples\" | \"seconds\" ) -> position : number Gets the currently playing position of the Source. Open in Browser @ param unit \u2014 The type of unit for the return value. @ return position \u2014 The currently playing position of the Source. -- -- Units that represent time. -- -- -- [Open in Browser](https://love2d.org/wiki/TimeUnit) -- unit : | \" seconds \" -- Regular seconds. | \" samples \" -- Audio samples.","title":"tell"},{"location":"doc/#type_46","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_46","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovesourcetype","text":"","title":"love.SourceType"},{"location":"doc/#lovespritebatch","text":"","title":"love.SpriteBatch"},{"location":"doc/#add_4","text":"( method ) love .SpriteBatch: add ( x : number, y : number, r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> id : number Adds a sprite to the batch. Sprites are drawn in the order they are added. Open in Browser @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shear factor (x-axis). @ param ky \u2014 Shear factor (y-axis). @ return id \u2014 An identifier for the added sprite.","title":"add"},{"location":"doc/#addlayer","text":"( method ) love .SpriteBatch: addLayer ( layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> spriteindex : number Adds a sprite to a batch created with an Array Texture. Open in Browser @ param layerindex \u2014 The index of the layer to use for this sprite. @ param x \u2014 The position to draw the sprite (x-axis). @ param y \u2014 The position to draw the sprite (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). @ return spriteindex \u2014 The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.","title":"addLayer"},{"location":"doc/#attachattribute_1","text":"( method ) love .SpriteBatch: attachAttribute ( name : string, mesh : love.Mesh) Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors. Each sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ). Open in Browser @ param name \u2014 The name of the vertex attribute to attach. @ param mesh \u2014 The Mesh to get the vertex attribute from.","title":"attachAttribute"},{"location":"doc/#clear_8","text":"( method ) love .SpriteBatch: clear () Removes all sprites from the buffer. Open in Browser","title":"clear"},{"location":"doc/#flush_6","text":"( method ) love .SpriteBatch: flush () Immediately sends all new and modified sprite data in the batch to the graphics card. Normally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens. If this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls. Open in Browser","title":"flush"},{"location":"doc/#getbuffersize_1","text":"( method ) love .SpriteBatch: getBufferSize () -> size : number Gets the maximum number of sprites the SpriteBatch can hold. Open in Browser @ return size \u2014 The maximum number of sprites the batch can hold.","title":"getBufferSize"},{"location":"doc/#getcolor","text":"( method ) love .SpriteBatch: getColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the color that will be used for the next add and set operations. If no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1).","title":"getColor"},{"location":"doc/#getcount_2","text":"( method ) love .SpriteBatch: getCount () -> count : number Gets the number of sprites currently in the SpriteBatch. Open in Browser @ return count \u2014 The number of sprites currently in the batch.","title":"getCount"},{"location":"doc/#gettexture_2","text":"( method ) love .SpriteBatch: getTexture () -> texture : love.Texture Gets the texture (Image or Canvas) used by the SpriteBatch. Open in Browser @ return texture \u2014 The Image or Canvas used by the SpriteBatch.","title":"getTexture"},{"location":"doc/#release_46","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#set_7","text":"( method ) love .SpriteBatch: set ( spriteindex : number, x : number, y : number, r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer. Open in Browser @ param spriteindex \u2014 The index of the sprite that will be changed. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shear factor (x-axis). @ param ky \u2014 Shear factor (y-axis).","title":"set"},{"location":"doc/#setcolor","text":"( method ) love .SpriteBatch: setColor ( r : number, g : number, b : number, a ? : number ) Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. In version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color. Open in Browser @ param r \u2014 The amount of red. @ param g \u2014 The amount of green. @ param b \u2014 The amount of blue. @ param a \u2014 The amount of alpha.","title":"setColor"},{"location":"doc/#setdrawrange_1","text":"( method ) love .SpriteBatch: setDrawRange ( start : number, count : number) Restricts the drawn sprites in the SpriteBatch to a subset of the total. Open in Browser @ param start \u2014 The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add. @ param count \u2014 The number of sprites to draw.","title":"setDrawRange"},{"location":"doc/#setlayer","text":"( method ) love .SpriteBatch: setLayer ( spriteindex : number, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture. Open in Browser @ param spriteindex \u2014 The index of the existing sprite to replace. @ param layerindex \u2014 The index of the layer in the Array Texture to use for this sprite. @ param x \u2014 The position to draw the sprite (x-axis). @ param y \u2014 The position to draw the sprite (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis).","title":"setLayer"},{"location":"doc/#settexture_2","text":"( method ) love .SpriteBatch: setTexture ( texture : love.Texture) Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing. Open in Browser @ param texture \u2014 The new Image or Canvas to use for the sprites in the batch.","title":"setTexture"},{"location":"doc/#type_47","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_47","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovespritebatchusage","text":"","title":"love.SpriteBatchUsage"},{"location":"doc/#lovestacktype","text":"","title":"love.StackType"},{"location":"doc/#lovestencilaction","text":"","title":"love.StencilAction"},{"location":"doc/#lovetext","text":"","title":"love.Text"},{"location":"doc/#add_5","text":"( method ) love .Text: add ( textstring : string, x ? : number , y ? : number , angle ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> index : number Adds additional colored text to the Text object at the specified position. Open in Browser @ param textstring \u2014 The text to add to the object. @ param x \u2014 The position of the new text on the x-axis. @ param y \u2014 The position of the new text on the y-axis. @ param angle \u2014 The orientation of the new text in radians. @ param sx \u2014 Scale factor on the x-axis. @ param sy \u2014 Scale factor on the y-axis. @ param ox \u2014 Origin offset on the x-axis. @ param oy \u2014 Origin offset on the y-axis. @ param kx \u2014 Shearing / skew factor on the x-axis. @ param ky \u2014 Shearing / skew factor on the y-axis. @ return index \u2014 An index number that can be used with Text:getWidth or Text:getHeight.","title":"add"},{"location":"doc/#addf","text":"( method ) love .Text: addf ( textstring : string, wraplimit : number, align : \" center \"|\" justify \"|\" left \"|\" right \", x: number, y: number, angle?: number, sx?: number, sy?: number, ox?: number, oy?: number, kx?: number, ky?: number) -> index: number Adds additional formatted / colored text to the Text object at the specified position. The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change. Open in Browser @ param textstring \u2014 The text to add to the object. @ param wraplimit \u2014 The maximum width in pixels of the text before it gets automatically wrapped to a new line. @ param align \u2014 The alignment of the text. @ param x \u2014 The position of the new text (x-axis). @ param y \u2014 The position of the new text (y-axis). @ param angle \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing / skew factor (x-axis). @ param ky \u2014 Shearing / skew factor (y-axis). @ return index \u2014 An index number that can be used with Text:getWidth or Text:getHeight. -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right.","title":"addf"},{"location":"doc/#clear_9","text":"( method ) love .Text: clear () Clears the contents of the Text object. Open in Browser","title":"clear"},{"location":"doc/#getdimensions_5","text":"( method ) love .Text: getDimensions () -> width : number 2. height : number Gets the width and height of the text in pixels. Open in Browser @ return width \u2014 The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned. @ return height \u2014 The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned.","title":"getDimensions"},{"location":"doc/#getfont","text":"( method ) love .Text: getFont () -> font : love.Font Gets the Font used with the Text object. Open in Browser @ return font \u2014 The font used with this Text object.","title":"getFont"},{"location":"doc/#getheight_8","text":"( method ) love .Text: getHeight () -> height : number Gets the height of the text in pixels. Open in Browser @ return height \u2014 The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned.","title":"getHeight"},{"location":"doc/#getwidth_7","text":"( method ) love .Text: getWidth () -> width : number Gets the width of the text in pixels. Open in Browser @ return width \u2014 The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned.","title":"getWidth"},{"location":"doc/#release_47","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#set_8","text":"( method ) love .Text: set ( textstring : string) Replaces the contents of the Text object with a new unformatted string. Open in Browser @ param textstring \u2014 The new string of text to use.","title":"set"},{"location":"doc/#setfont","text":"( method ) love .Text: setFont ( font : love.Font) Replaces the Font used with the text. Open in Browser @ param font \u2014 The new font to use with this Text object.","title":"setFont"},{"location":"doc/#setf","text":"( method ) love .Text: setf ( textstring : string, wraplimit : number, align : \" center \"|\" justify \"|\" left \"|\" right \") Replaces the contents of the Text object with a new formatted string. Open in Browser @ param textstring \u2014 The new string of text to use. @ param wraplimit \u2014 The maximum width in pixels of the text before it gets automatically wrapped to a new line. @ param align \u2014 The alignment of the text. -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right.","title":"setf"},{"location":"doc/#type_48","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_48","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovetexture","text":"","title":"love.Texture"},{"location":"doc/#getdpiscale_3","text":"( method ) love .Texture: getDPIScale () -> dpiscale : number Gets the DPI scale factor of the Texture. The DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1. For example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi / retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic. Open in Browser @ return dpiscale \u2014 The DPI scale factor of the Texture.","title":"getDPIScale"},{"location":"doc/#getdepth_3","text":"( method ) love .Texture: getDepth () -> depth : number Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures. Open in Browser @ return depth \u2014 The depth of the volume Texture.","title":"getDepth"},{"location":"doc/#getdepthsamplemode_2","text":"( method ) love .Texture: getDepthSampleMode () -> compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) Gets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. Open in Browser @ return compare \u2014 The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"getDepthSampleMode"},{"location":"doc/#getdimensions_6","text":"( method ) love .Texture: getDimensions () -> width : number 2. height : number Gets the width and height of the Texture. Open in Browser @ return width \u2014 The width of the Texture. @ return height \u2014 The height of the Texture.","title":"getDimensions"},{"location":"doc/#getfilter_4","text":"( method ) love .Texture: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the filter mode of the Texture. Open in Browser @ return min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return mag \u2014 Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getFilter"},{"location":"doc/#getformat_6","text":"( method ) love .Texture: getFormat () -> format : \" ASTC10x10 \"|\" ASTC10x5 \"|\" ASTC10x6 \"|\" ASTC10x8 \"|\" ASTC12x10 \"...(+59) Gets the pixel format of the Texture. Open in Browser @ return format \u2014 The pixel format the Texture was created with. -- -- Pixel formats for Textures, ImageData, and CompressedImageData. -- -- -- [Open in Browser](https://love2d.org/wiki/PixelFormat) -- format : | \" unknown \" -- Indicates unknown pixel format, used internally. | \" normal \" -- Alias for rgba8, or srgba8 if gamma-correct rendering is enabled. | \" hdr \" -- A format suitable for high dynamic range content - an alias for the rgba16f format, normally. | \" r8 \" -- Single-channel (red component) format (8 bpp). | \" rg8 \" -- Two channels (red and green components) with 8 bits per channel (16 bpp). | \" rgba8 \" -- 8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders). | \" srgba8 \" -- gamma-correct version of rgba8. | \" r16 \" -- Single-channel (red component) format (16 bpp). | \" rg16 \" -- Two channels (red and green components) with 16 bits per channel (32 bpp). | \" rgba16 \" -- 16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders). | \" r16f \" -- Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504]. | \" rg16f \" -- Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504]. | \" rgba16f \" -- Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504]. | \" r32f \" -- Floating point single-channel format (32 bpp). | \" rg32f \" -- Floating point two-channel format with 32 bits per channel (64 bpp). | \" rgba32f \" -- Floating point RGBA with 32 bits per channel (128 bpp). | \" la8 \" -- Same as rg8, but accessed as (L, L, L, A) | \" rgba4 \" -- 4 bits per channel (16 bpp) RGBA. | \" rgb5a1 \" -- RGB with 5 bits each, and a 1-bit alpha channel (16 bpp). | \" rgb565 \" -- RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format. | \" rgb10a2 \" -- RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp). | \" rg11b10f \" -- Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024]. | \" stencil8 \" -- No depth buffer and 8-bit stencil buffer. | \" depth16 \" -- 16-bit depth buffer and no stencil buffer. | \" depth24 \" -- 24-bit depth buffer and no stencil buffer. | \" depth32f \" -- 32-bit float depth buffer and no stencil buffer. | \" depth24stencil8 \" -- 24-bit depth buffer and 8-bit stencil buffer. | \" depth32fstencil8 \" -- 32-bit float depth buffer and 8-bit stencil buffer. | \" DXT1 \" -- The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems. | \" DXT3 \" -- The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format. | \" DXT5 \" -- The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems. | \" BC4 \" -- The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel. | \" BC4s \" -- The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" BC5 \" -- The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel. | \" BC5s \" -- The signed variant of the BC5 format. | \" BC6h \" -- The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems. | \" BC6hs \" -- The signed variant of the BC6H format. Stores RGB data in the range of +65504. | \" BC7 \" -- The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel. | \" ETC1 \" -- The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices. | \" ETC2rgb \" -- The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices. | \" ETC2rgba \" -- The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices. | \" ETC2rgba1 \" -- The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel. | \" EACr \" -- The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel. | \" EACrs \" -- The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders. | \" EACrg \" -- The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel. | \" EACrgs \" -- The signed two-channel variant of the EAC format. | \" PVR1rgb2 \" -- The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized. | \" PVR1rgb4 \" -- The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel. | \" PVR1rgba2 \" -- The 2 bit per pixel RGBA variant of the PVRTC1 format. | \" PVR1rgba4 \" -- The 4 bit per pixel RGBA variant of the PVRTC1 format. | \" ASTC4x4 \" -- The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel. | \" ASTC5x4 \" -- The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel. | \" ASTC5x5 \" -- The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel. | \" ASTC6x5 \" -- The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel. | \" ASTC6x6 \" -- The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel. | \" ASTC8x5 \" -- The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel. | \" ASTC8x6 \" -- The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel. | \" ASTC8x8 \" -- The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel. | \" ASTC10x5 \" -- The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel. | \" ASTC10x6 \" -- The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel. | \" ASTC10x8 \" -- The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel. | \" ASTC10x10 \" -- The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel. | \" ASTC12x10 \" -- The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel. | \" ASTC12x12 \" -- The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.","title":"getFormat"},{"location":"doc/#getheight_9","text":"( method ) love .Texture: getHeight () -> height : number Gets the height of the Texture. Open in Browser @ return height \u2014 The height of the Texture.","title":"getHeight"},{"location":"doc/#getlayercount_2","text":"( method ) love .Texture: getLayerCount () -> layers : number Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures. Open in Browser @ return layers \u2014 The number of layers in the Array Texture.","title":"getLayerCount"},{"location":"doc/#getmipmapcount_3","text":"( method ) love .Texture: getMipmapCount () -> mipmaps : number Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1. Open in Browser @ return mipmaps \u2014 The number of mipmaps in the Texture.","title":"getMipmapCount"},{"location":"doc/#getmipmapfilter_2","text":"( method ) love .Texture: getMipmapFilter () -> mode : \" linear \"|\" nearest \" 2. sharpness: number Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Open in Browser @ return mode \u2014 The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled. @ return sharpness \u2014 Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getMipmapFilter"},{"location":"doc/#getpixeldimensions_2","text":"( method ) love .Texture: getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the Texture. Texture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels. @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelDimensions"},{"location":"doc/#getpixelheight_2","text":"( method ) love .Texture: getPixelHeight () -> pixelheight : number Gets the height in pixels of the Texture. DPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelheight \u2014 The height of the Texture, in pixels.","title":"getPixelHeight"},{"location":"doc/#getpixelwidth_2","text":"( method ) love .Texture: getPixelWidth () -> pixelwidth : number Gets the width in pixels of the Texture. DPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData. Open in Browser @ return pixelwidth \u2014 The width of the Texture, in pixels.","title":"getPixelWidth"},{"location":"doc/#gettexturetype_2","text":"( method ) love .Texture: getTextureType () -> texturetype : \"2 d \"|\" array \"|\" cube \"|\" volume \" Gets the type of the Texture. Open in Browser @ return texturetype \u2014 The type of the Texture. -- -- Types of textures (2D, cubemap, etc.) -- -- -- [Open in Browser](https://love2d.org/wiki/TextureType) -- texturetype : | \"2 d \" -- Regular 2D texture with width and height. | \" array \" -- Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues. | \" cube \" -- Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate. | \" volume \" -- 3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.","title":"getTextureType"},{"location":"doc/#getwidth_8","text":"( method ) love .Texture: getWidth () -> width : number Gets the width of the Texture. Open in Browser @ return width \u2014 The width of the Texture.","title":"getWidth"},{"location":"doc/#getwrap_3","text":"( method ) love .Texture: getWrap () -> horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 2. vert: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" 3. depth: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \" Gets the wrapping properties of a Texture. This function returns the currently set horizontal and vertical wrapping modes for the texture. Open in Browser @ return horiz \u2014 Horizontal wrapping mode of the texture. @ return vert \u2014 Vertical wrapping mode of the texture. @ return depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"getWrap"},{"location":"doc/#isreadable_2","text":"( method ) love .Texture: isReadable () -> readable : boolean Gets whether the Texture can be drawn and sent to a Shader. Canvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas. Non-readable Canvases can still be rendered to. Open in Browser @ return readable \u2014 Whether the Texture is readable.","title":"isReadable"},{"location":"doc/#release_48","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setdepthsamplemode_2","text":"( method ) love .Texture: setDepthSampleMode ( compare : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3)) Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D. When using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation. Depth texture comparison can only be used with readable depth-formatted Canvases. Open in Browser @ param compare \u2014 The comparison mode used when sampling from this texture in a shader. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- compare : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"setDepthSampleMode"},{"location":"doc/#setfilter_4","text":"( method ) love .Texture: setFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the filter mode of the Texture. Open in Browser @ param min \u2014 Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels). @ param mag \u2014 Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels). @ param anisotropy \u2014 Maximum amount of anisotropic filtering to use. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setFilter"},{"location":"doc/#setmipmapfilter_2","text":"( method ) love .Texture: setMipmapFilter ( filtermode : \" linear \"|\" nearest \", sharpness?: number) Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images. Mipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues. In created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers. Due to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps. Open in Browser @ param filtermode \u2014 The filter mode to use in between mipmap levels. 'nearest' will often give better performance. @ param sharpness \u2014 A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- filtermode : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setMipmapFilter"},{"location":"doc/#setwrap_2","text":"( method ) love .Texture: setWrap ( horiz : \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", vert?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \", depth?: \" clamp \"|\" clampzero \"|\" mirroredrepeat \"|\" repeat \") Sets the wrapping properties of a Texture. This function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions. Clamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad. Open in Browser @ param horiz \u2014 Horizontal wrapping mode of the texture. @ param vert \u2014 Vertical wrapping mode of the texture. @ param depth \u2014 Wrapping mode for the z-axis of a Volume texture. -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- horiz : | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- vert: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.) -- -- How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1. -- -- -- [Open in Browser](https://love2d.org/wiki/WrapMode) -- depth: | \" clamp \" -- Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture. | \" repeat \" -- Repeat the texture. Fills the whole available extent. | \" mirroredrepeat \" -- Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile. | \" clampzero \" -- Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)","title":"setWrap"},{"location":"doc/#type_49","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_49","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovetexturetype","text":"","title":"love.TextureType"},{"location":"doc/#lovethread","text":"","title":"love.Thread"},{"location":"doc/#geterror","text":"( method ) love .Thread: getError () -> err : string Retrieves the error string from the thread if it produced an error. Open in Browser @ return err \u2014 The error message, or nil if the Thread has not caused an error.","title":"getError"},{"location":"doc/#isrunning","text":"( method ) love .Thread: isRunning () -> value : boolean Returns whether the thread is currently running. Threads which are not running can be (re)started with Thread:start. Open in Browser @ return value \u2014 True if the thread is running, false otherwise.","title":"isRunning"},{"location":"doc/#release_49","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#start_2","text":"( method ) love .Thread: start () Starts the thread. Beginning with version 0.9.0, threads can be restarted after they have completed their execution. Open in Browser","title":"start"},{"location":"doc/#type_50","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_50","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#wait","text":"( method ) love .Thread: wait () Wait for a thread to finish. This call will block until the thread finishes. Open in Browser","title":"wait"},{"location":"doc/#lovetimeunit","text":"","title":"love.TimeUnit"},{"location":"doc/#lovetransform","text":"","title":"love.Transform"},{"location":"doc/#apply","text":"( method ) love .Transform: apply ( other : love.Transform) -> transform : love.Transform Applies the given other Transform object to this one. This effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object. Open in Browser @ param other \u2014 The other Transform object to apply to this Transform. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"apply"},{"location":"doc/#clone_12","text":"( method ) love .Transform: clone () -> clone : love.Transform Creates a new copy of this Transform. Open in Browser @ return clone \u2014 The copy of this Transform.","title":"clone"},{"location":"doc/#getmatrix","text":"( method ) love .Transform: getMatrix () -> e1_1 : number 2. e1_2 : number 3. e1_3 : number 4. e1_4 : number 5. e2_1 : number 6. e2_2 : number 7. e2_3 : number 8. e2_4 : number 9. e3_1 : number 10. e3_2 : number 11. e3_3 : number 12. e3_4 : number 13. e4_1 : number 14. e4_2 : number 15. e4_3 : number 16. e4_4 : number Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order. Open in Browser @ return e1_1 \u2014 The first column of the first row of the matrix. @ return e1_2 \u2014 The second column of the first row of the matrix. @ return e1_3 \u2014 The third column of the first row of the matrix. @ return e1_4 \u2014 The fourth column of the first row of the matrix. @ return e2_1 \u2014 The first column of the second row of the matrix. @ return e2_2 \u2014 The second column of the second row of the matrix. @ return e2_3 \u2014 The third column of the second row of the matrix. @ return e2_4 \u2014 The fourth column of the second row of the matrix. @ return e3_1 \u2014 The first column of the third row of the matrix. @ return e3_2 \u2014 The second column of the third row of the matrix. @ return e3_3 \u2014 The third column of the third row of the matrix. @ return e3_4 \u2014 The fourth column of the third row of the matrix. @ return e4_1 \u2014 The first column of the fourth row of the matrix. @ return e4_2 \u2014 The second column of the fourth row of the matrix. @ return e4_3 \u2014 The third column of the fourth row of the matrix. @ return e4_4 \u2014 The fourth column of the fourth row of the matrix.","title":"getMatrix"},{"location":"doc/#inverse","text":"( method ) love .Transform: inverse () -> inverse : love.Transform Creates a new Transform containing the inverse of this Transform. Open in Browser @ return inverse \u2014 A new Transform object representing the inverse of this Transform's matrix.","title":"inverse"},{"location":"doc/#inversetransformpoint","text":"( method ) love .Transform: inverseTransformPoint ( localX : number, localY : number) -> globalX : number 2. globalY : number Applies the reverse of the Transform object's transformation to the given 2D position. This effectively converts the given position from the local coordinate space of the Transform into global coordinates. One use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game. Open in Browser @ param localX \u2014 The x component of the position with the transform applied. @ param localY \u2014 The y component of the position with the transform applied. @ return globalX \u2014 The x component of the position in global coordinates. @ return globalY \u2014 The y component of the position in global coordinates.","title":"inverseTransformPoint"},{"location":"doc/#isaffine2dtransform","text":"( method ) love .Transform: isAffine2DTransform () -> affine : boolean Checks whether the Transform is an affine transformation. Open in Browser @ return affine \u2014 true if the transform object is an affine transformation, false otherwise.","title":"isAffine2DTransform"},{"location":"doc/#release_50","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#reset_1","text":"( method ) love .Transform: reset () -> transform : love.Transform Resets the Transform to an identity state. All previously applied transformations are erased. Open in Browser @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"reset"},{"location":"doc/#rotate_1","text":"( method ) love .Transform: rotate ( angle : number) -> transform : love.Transform Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param angle \u2014 The relative angle in radians to rotate this Transform by. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"rotate"},{"location":"doc/#scale_5","text":"( method ) love .Transform: scale ( sx : number, sy ? : number ) -> transform : love.Transform Scales the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param sx \u2014 The relative scale factor along the x-axis. @ param sy \u2014 The relative scale factor along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"scale"},{"location":"doc/#setmatrix","text":"( method ) love .Transform: setMatrix ( e1_1 : number, e1_2 : number, e1_3 : number, e1_4 : number, e2_1 : number, e2_2 : number, e2_3 : number, e2_4 : number, e3_1 : number, e3_2 : number, e3_3 : number, e3_4 : number, e4_1 : number, e4_2 : number, e4_3 : number, e4_4 : number) -> transform : love.Transform Directly sets the Transform's internal 4x4 transformation matrix. Open in Browser @ param e1_1 \u2014 The first column of the first row of the matrix. @ param e1_2 \u2014 The second column of the first row of the matrix. @ param e1_3 \u2014 The third column of the first row of the matrix. @ param e1_4 \u2014 The fourth column of the first row of the matrix. @ param e2_1 \u2014 The first column of the second row of the matrix. @ param e2_2 \u2014 The second column of the second row of the matrix. @ param e2_3 \u2014 The third column of the second row of the matrix. @ param e2_4 \u2014 The fourth column of the second row of the matrix. @ param e3_1 \u2014 The first column of the third row of the matrix. @ param e3_2 \u2014 The second column of the third row of the matrix. @ param e3_3 \u2014 The third column of the third row of the matrix. @ param e3_4 \u2014 The fourth column of the third row of the matrix. @ param e4_1 \u2014 The first column of the fourth row of the matrix. @ param e4_2 \u2014 The second column of the fourth row of the matrix. @ param e4_3 \u2014 The third column of the fourth row of the matrix. @ param e4_4 \u2014 The fourth column of the fourth row of the matrix. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"setMatrix"},{"location":"doc/#settransformation","text":"( method ) love .Transform: setTransformation ( x : number, y : number, angle ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) -> transform : love.Transform Resets the Transform to the specified transformation parameters. Open in Browser @ param x \u2014 The position of the Transform on the x-axis. @ param y \u2014 The position of the Transform on the y-axis. @ param angle \u2014 The orientation of the Transform in radians. @ param sx \u2014 Scale factor on the x-axis. @ param sy \u2014 Scale factor on the y-axis. @ param ox \u2014 Origin offset on the x-axis. @ param oy \u2014 Origin offset on the y-axis. @ param kx \u2014 Shearing / skew factor on the x-axis. @ param ky \u2014 Shearing / skew factor on the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"setTransformation"},{"location":"doc/#shear","text":"( method ) love .Transform: shear ( kx : number, ky : number) -> transform : love.Transform Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param kx \u2014 The shear factor along the x-axis. @ param ky \u2014 The shear factor along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"shear"},{"location":"doc/#transformpoint","text":"( method ) love .Transform: transformPoint ( globalX : number, globalY : number) -> localX : number 2. localY : number Applies the Transform object's transformation to the given 2D position. This effectively converts the given position from global coordinates into the local coordinate space of the Transform. Open in Browser @ param globalX \u2014 The x component of the position in global coordinates. @ param globalY \u2014 The y component of the position in global coordinates. @ return localX \u2014 The x component of the position with the transform applied. @ return localY \u2014 The y component of the position with the transform applied.","title":"transformPoint"},{"location":"doc/#translate_1","text":"( method ) love .Transform: translate ( dx : number, dy : number) -> transform : love.Transform Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations. Open in Browser @ param dx \u2014 The relative translation along the x-axis. @ param dy \u2014 The relative translation along the y-axis. @ return transform \u2014 The Transform object the method was called on. Allows easily chaining Transform methods.","title":"translate"},{"location":"doc/#type_51","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_51","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovevertexattributestep","text":"","title":"love.VertexAttributeStep"},{"location":"doc/#lovevertexwinding","text":"","title":"love.VertexWinding"},{"location":"doc/#lovevideo","text":"","title":"love.Video"},{"location":"doc/#getdimensions_7","text":"( method ) love .Video: getDimensions () -> width : number 2. height : number Gets the width and height of the Video in pixels. Open in Browser @ return width \u2014 The width of the Video. @ return height \u2014 The height of the Video.","title":"getDimensions"},{"location":"doc/#getfilter_5","text":"( method ) love .Video: getFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Gets the scaling filters used when drawing the Video. Open in Browser @ return min \u2014 The filter mode used when scaling the Video down. @ return mag \u2014 The filter mode used when scaling the Video up. @ return anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getFilter"},{"location":"doc/#getheight_10","text":"( method ) love .Video: getHeight () -> height : number Gets the height of the Video in pixels. Open in Browser @ return height \u2014 The height of the Video.","title":"getHeight"},{"location":"doc/#getsource","text":"( method ) love .Video: getSource () -> source : love.Source Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument. Open in Browser @ return source \u2014 The audio Source used for audio playback, or nil if the video has no audio.","title":"getSource"},{"location":"doc/#getstream","text":"( method ) love .Video: getStream () -> stream : love.VideoStream Gets the VideoStream object used for decoding and controlling the video. Open in Browser @ return stream \u2014 The VideoStream used for decoding and controlling the video.","title":"getStream"},{"location":"doc/#getwidth_9","text":"( method ) love .Video: getWidth () -> width : number Gets the width of the Video in pixels. Open in Browser @ return width \u2014 The width of the Video.","title":"getWidth"},{"location":"doc/#isplaying_1","text":"( method ) love .Video: isPlaying () -> playing : boolean Gets whether the Video is currently playing. Open in Browser @ return playing \u2014 Whether the video is playing.","title":"isPlaying"},{"location":"doc/#pause_2","text":"( method ) love .Video: pause () Pauses the Video. Open in Browser","title":"pause"},{"location":"doc/#play_1","text":"( method ) love .Video: play () Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw. Open in Browser","title":"play"},{"location":"doc/#release_51","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#rewind","text":"( method ) love .Video: rewind () Rewinds the Video to the beginning. Open in Browser","title":"rewind"},{"location":"doc/#seek_5","text":"( method ) love .Video: seek ( offset : number) Sets the current playback position of the Video. Open in Browser @ param offset \u2014 The time in seconds since the beginning of the Video.","title":"seek"},{"location":"doc/#setfilter_5","text":"( method ) love .Video: setFilter ( min : \" linear \"|\" nearest \", mag: \" linear \"|\" nearest \", anisotropy?: number) Sets the scaling filters used when drawing the Video. Open in Browser @ param min \u2014 The filter mode used when scaling the Video down. @ param mag \u2014 The filter mode used when scaling the Video up. @ param anisotropy \u2014 Maximum amount of anisotropic filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setFilter"},{"location":"doc/#setsource","text":"( method ) love .Video: setSource ( source ? : love .Source) Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization. Open in Browser @ param source \u2014 The audio Source used for audio playback, or nil to disable audio synchronization.","title":"setSource"},{"location":"doc/#tell_3","text":"( method ) love .Video: tell () -> seconds : number Gets the current playback position of the Video. Open in Browser @ return seconds \u2014 The time in seconds since the beginning of the Video.","title":"tell"},{"location":"doc/#type_52","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_52","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovevideostream","text":"","title":"love.VideoStream"},{"location":"doc/#getfilename_3","text":"( method ) love .VideoStream: getFilename () -> filename : string Gets the filename of the VideoStream. Open in Browser @ return filename \u2014 The filename of the VideoStream","title":"getFilename"},{"location":"doc/#isplaying_2","text":"( method ) love .VideoStream: isPlaying () -> playing : boolean Gets whether the VideoStream is playing. Open in Browser @ return playing \u2014 Whether the VideoStream is playing.","title":"isPlaying"},{"location":"doc/#pause_3","text":"( method ) love .VideoStream: pause () Pauses the VideoStream. Open in Browser","title":"pause"},{"location":"doc/#play_2","text":"( method ) love .VideoStream: play () Plays the VideoStream. Open in Browser","title":"play"},{"location":"doc/#release_52","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#rewind_1","text":"( method ) love .VideoStream: rewind () Rewinds the VideoStream. Synonym to VideoStream:seek(0). Open in Browser","title":"rewind"},{"location":"doc/#seek_6","text":"( method ) love .VideoStream: seek ( offset : number) Sets the current playback position of the VideoStream. Open in Browser @ param offset \u2014 The time in seconds since the beginning of the VideoStream.","title":"seek"},{"location":"doc/#tell_4","text":"( method ) love .VideoStream: tell () -> seconds : number Gets the current playback position of the VideoStream. Open in Browser @ return seconds \u2014 The number of seconds sionce the beginning of the VideoStream.","title":"tell"},{"location":"doc/#type_53","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_53","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveweldjoint","text":"","title":"love.WeldJoint"},{"location":"doc/#destroy_12","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_10","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getbodies_10","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_10","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getdampingratio_2","text":"( method ) love .WeldJoint: getDampingRatio () -> ratio : number Returns the damping ratio of the joint. Open in Browser @ return ratio \u2014 The damping ratio.","title":"getDampingRatio"},{"location":"doc/#getfrequency_2","text":"( method ) love .WeldJoint: getFrequency () -> freq : number Returns the frequency. Open in Browser @ return freq \u2014 The frequency in hertz.","title":"getFrequency"},{"location":"doc/#getreactionforce_10","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_10","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#getreferenceangle_2","text":"( method ) love .WeldJoint: getReferenceAngle () -> angle : number Gets the reference angle. Open in Browser @ return angle \u2014 The reference angle in radians.","title":"getReferenceAngle"},{"location":"doc/#gettype_18","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_12","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_12","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#release_53","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setdampingratio_2","text":"( method ) love .WeldJoint: setDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio.","title":"setDampingRatio"},{"location":"doc/#setfrequency_2","text":"( method ) love .WeldJoint: setFrequency ( freq : number) Sets a new frequency. Open in Browser @ param freq \u2014 The new frequency in hertz.","title":"setFrequency"},{"location":"doc/#setuserdata_12","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_54","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_54","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#lovewheeljoint","text":"","title":"love.WheelJoint"},{"location":"doc/#destroy_13","text":"( method ) love .Joint: destroy () Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately. Open in Browser","title":"destroy"},{"location":"doc/#getanchors_11","text":"( method ) love .Joint: getAnchors () -> x1 : number 2. y1 : number 3. x2 : number 4. y2 : number Get the anchor points of the joint. Open in Browser @ return x1 \u2014 The x-component of the anchor on Body 1. @ return y1 \u2014 The y-component of the anchor on Body 1. @ return x2 \u2014 The x-component of the anchor on Body 2. @ return y2 \u2014 The y-component of the anchor on Body 2.","title":"getAnchors"},{"location":"doc/#getaxis_2","text":"( method ) love .WheelJoint: getAxis () -> x : number 2. y : number Gets the world-space axis vector of the Wheel Joint. Open in Browser @ return x \u2014 The x-axis coordinate of the world-space axis vector. @ return y \u2014 The y-axis coordinate of the world-space axis vector.","title":"getAxis"},{"location":"doc/#getbodies_11","text":"( method ) love .Joint: getBodies () -> bodyA : love.Body 2. bodyB : love.Body Gets the bodies that the Joint is attached to. Open in Browser @ return bodyA \u2014 The first Body. @ return bodyB \u2014 The second Body.","title":"getBodies"},{"location":"doc/#getcollideconnected_11","text":"( method ) love .Joint: getCollideConnected () -> c : boolean Gets whether the connected Bodies collide. Open in Browser @ return c \u2014 True if they collide, false otherwise.","title":"getCollideConnected"},{"location":"doc/#getjointspeed_2","text":"( method ) love .WheelJoint: getJointSpeed () -> speed : number Returns the current joint translation speed. Open in Browser @ return speed \u2014 The translation speed of the joint in meters per second.","title":"getJointSpeed"},{"location":"doc/#getjointtranslation_1","text":"( method ) love .WheelJoint: getJointTranslation () -> position : number Returns the current joint translation. Open in Browser @ return position \u2014 The translation of the joint in meters.","title":"getJointTranslation"},{"location":"doc/#getmaxmotortorque_1","text":"( method ) love .WheelJoint: getMaxMotorTorque () -> maxTorque : number Returns the maximum motor torque. Open in Browser @ return maxTorque \u2014 The maximum torque of the joint motor in newton meters.","title":"getMaxMotorTorque"},{"location":"doc/#getmotorspeed_2","text":"( method ) love .WheelJoint: getMotorSpeed () -> speed : number Returns the speed of the motor. Open in Browser @ return speed \u2014 The speed of the joint motor in radians per second.","title":"getMotorSpeed"},{"location":"doc/#getmotortorque_1","text":"( method ) love .WheelJoint: getMotorTorque ( invdt : number) -> torque : number Returns the current torque on the motor. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The torque on the motor in newton meters.","title":"getMotorTorque"},{"location":"doc/#getreactionforce_11","text":"( method ) love .Joint: getReactionForce ( x : number) -> x : number 2. y : number Returns the reaction force in newtons on the second body Open in Browser @ param x \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return x \u2014 The x-component of the force. @ return y \u2014 The y-component of the force.","title":"getReactionForce"},{"location":"doc/#getreactiontorque_11","text":"( method ) love .Joint: getReactionTorque ( invdt : number) -> torque : number Returns the reaction torque on the second body. Open in Browser @ param invdt \u2014 How long the force applies. Usually the inverse time step or 1/dt. @ return torque \u2014 The reaction torque on the second body.","title":"getReactionTorque"},{"location":"doc/#getspringdampingratio","text":"( method ) love .WheelJoint: getSpringDampingRatio () -> ratio : number Returns the damping ratio. Open in Browser @ return ratio \u2014 The damping ratio.","title":"getSpringDampingRatio"},{"location":"doc/#getspringfrequency","text":"( method ) love .WheelJoint: getSpringFrequency () -> freq : number Returns the spring frequency. Open in Browser @ return freq \u2014 The frequency in hertz.","title":"getSpringFrequency"},{"location":"doc/#gettype_19","text":"( method ) love .Joint: getType () -> type : \"distance\" | \"friction\" | \"gear\" | \"mouse\" | \"prismatic\" ...(+ 4 ) Gets a string representing the type. Open in Browser @ return type \u2014 A string with the name of the Joint type. -- -- Different types of joints. -- -- -- [Open in Browser](https://love2d.org/wiki/JointType) -- type : | \"distance\" -- A DistanceJoint. | \"friction\" -- A FrictionJoint. | \"gear\" -- A GearJoint. | \"mouse\" -- A MouseJoint. | \"prismatic\" -- A PrismaticJoint. | \"pulley\" -- A PulleyJoint. | \"revolute\" -- A RevoluteJoint. | \"rope\" -- A RopeJoint. | \"weld\" -- A WeldJoint.","title":"getType"},{"location":"doc/#getuserdata_13","text":"( method ) love .Joint: getUserData () -> value : any Returns the Lua value associated with this Joint. Open in Browser @ return value \u2014 The Lua value associated with the Joint.","title":"getUserData"},{"location":"doc/#isdestroyed_13","text":"( method ) love .Joint: isDestroyed () -> destroyed : boolean Gets whether the Joint is destroyed. Destroyed joints cannot be used. Open in Browser @ return destroyed \u2014 Whether the Joint is destroyed.","title":"isDestroyed"},{"location":"doc/#ismotorenabled_2","text":"( method ) love .WheelJoint: isMotorEnabled () -> on : boolean Checks if the joint motor is running. Open in Browser @ return on \u2014 The status of the joint motor.","title":"isMotorEnabled"},{"location":"doc/#release_54","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setmaxmotortorque_1","text":"( method ) love .WheelJoint: setMaxMotorTorque ( maxTorque : number) Sets a new maximum motor torque. Open in Browser @ param maxTorque \u2014 The new maximum torque for the joint motor in newton meters.","title":"setMaxMotorTorque"},{"location":"doc/#setmotorenabled_2","text":"( method ) love .WheelJoint: setMotorEnabled ( enable : boolean) Starts and stops the joint motor. Open in Browser @ param enable \u2014 True turns the motor on and false turns it off.","title":"setMotorEnabled"},{"location":"doc/#setmotorspeed_2","text":"( method ) love .WheelJoint: setMotorSpeed ( speed : number) Sets a new speed for the motor. Open in Browser @ param speed \u2014 The new speed for the joint motor in radians per second.","title":"setMotorSpeed"},{"location":"doc/#setspringdampingratio","text":"( method ) love .WheelJoint: setSpringDampingRatio ( ratio : number) Sets a new damping ratio. Open in Browser @ param ratio \u2014 The new damping ratio.","title":"setSpringDampingRatio"},{"location":"doc/#setspringfrequency","text":"( method ) love .WheelJoint: setSpringFrequency ( freq : number) Sets a new spring frequency. Open in Browser @ param freq \u2014 The new frequency in hertz.","title":"setSpringFrequency"},{"location":"doc/#setuserdata_13","text":"( method ) love .Joint: setUserData ( value : any) Associates a Lua value with the Joint. To delete the reference, explicitly pass nil. Open in Browser @ param value \u2014 The Lua value to associate with the Joint.","title":"setUserData"},{"location":"doc/#type_55","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_55","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#loveworld","text":"","title":"love.World"},{"location":"doc/#destroy_14","text":"( method ) love .World: destroy () Destroys the world, taking all bodies, joints, fixtures and their shapes with it. An error will occur if you attempt to use any of the destroyed objects after calling this function. Open in Browser","title":"destroy"},{"location":"doc/#getbodies_12","text":"( method ) love .World: getBodies () -> bodies : table Returns a table with all bodies. Open in Browser @ return bodies \u2014 A sequence with all bodies.","title":"getBodies"},{"location":"doc/#getbodycount","text":"( method ) love .World: getBodyCount () -> n : number Returns the number of bodies in the world. Open in Browser @ return n \u2014 The number of bodies in the world.","title":"getBodyCount"},{"location":"doc/#getcallbacks","text":"( method ) love .World: getCallbacks () -> beginContact : function 2. endContact : function 3. preSolve : function 4. postSolve : function Returns functions for the callbacks during the world update. Open in Browser @ return beginContact \u2014 Gets called when two fixtures begin to overlap. @ return endContact \u2014 Gets called when two fixtures cease to overlap. @ return preSolve \u2014 Gets called before a collision gets resolved. @ return postSolve \u2014 Gets called after the collision has been resolved.","title":"getCallbacks"},{"location":"doc/#getcontactcount","text":"( method ) love .World: getContactCount () -> n : number Returns the number of contacts in the world. Open in Browser @ return n \u2014 The number of contacts in the world.","title":"getContactCount"},{"location":"doc/#getcontactfilter","text":"( method ) love .World: getContactFilter () -> contactFilter : function Returns the function for collision filtering. Open in Browser @ return contactFilter \u2014 The function that handles the contact filtering.","title":"getContactFilter"},{"location":"doc/#getcontacts_1","text":"( method ) love .World: getContacts () -> contacts : table Returns a table with all Contacts. Open in Browser @ return contacts \u2014 A sequence with all Contacts.","title":"getContacts"},{"location":"doc/#getgravity","text":"( method ) love .World: getGravity () -> x : number 2. y : number Get the gravity of the world. Open in Browser @ return x \u2014 The x component of gravity. @ return y \u2014 The y component of gravity.","title":"getGravity"},{"location":"doc/#getjointcount","text":"( method ) love .World: getJointCount () -> n : number Returns the number of joints in the world. Open in Browser @ return n \u2014 The number of joints in the world.","title":"getJointCount"},{"location":"doc/#getjoints_2","text":"( method ) love .World: getJoints () -> joints : table Returns a table with all joints. Open in Browser @ return joints \u2014 A sequence with all joints.","title":"getJoints"},{"location":"doc/#isdestroyed_14","text":"( method ) love .World: isDestroyed () -> destroyed : boolean Gets whether the World is destroyed. Destroyed worlds cannot be used. Open in Browser @ return destroyed \u2014 Whether the World is destroyed.","title":"isDestroyed"},{"location":"doc/#islocked","text":"( method ) love .World: isLocked () -> locked : boolean Returns if the world is updating its state. This will return true inside the callbacks from World:setCallbacks. Open in Browser @ return locked \u2014 Will be true if the world is in the process of updating its state.","title":"isLocked"},{"location":"doc/#issleepingallowed_1","text":"( method ) love .World: isSleepingAllowed () -> allow : boolean Gets the sleep behaviour of the world. Open in Browser @ return allow \u2014 True if bodies in the world are allowed to sleep, or false if not.","title":"isSleepingAllowed"},{"location":"doc/#queryboundingbox","text":"( method ) love .World: queryBoundingBox ( topLeftX : number, topLeftY : number, bottomRightX : number, bottomRightY : number, callback : function) Calls a function for each fixture inside the specified area by searching for any overlapping bounding box (Fixture:getBoundingBox). Open in Browser @ param topLeftX \u2014 The x position of the top-left point. @ param topLeftY \u2014 The y position of the top-left point. @ param bottomRightX \u2014 The x position of the bottom-right point. @ param bottomRightY \u2014 The y position of the bottom-right point. @ param callback \u2014 This function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false.","title":"queryBoundingBox"},{"location":"doc/#raycast_6","text":"( method ) love .World: rayCast ( x1 : number, y1 : number, x2 : number, y2 : number, callback : function) Casts a ray and calls a function for each fixtures it intersects. Open in Browser @ param x1 \u2014 The x position of the starting point of the ray. @ param y1 \u2014 The x position of the starting point of the ray. @ param x2 \u2014 The x position of the end point of the ray. @ param y2 \u2014 The x value of the surface normal vector of the shape edge. @ param callback \u2014 A function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value.","title":"rayCast"},{"location":"doc/#release_55","text":"( method ) love .Object: release () -> success : boolean Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other L\u00d6VE object or thread. This method can be used to immediately clean up resources without waiting for Lua's garbage collector. Open in Browser @ return success \u2014 True if the object was released by this call, false if it had been previously released.","title":"release"},{"location":"doc/#setcallbacks_1","text":"( method ) love .World: setCallbacks ( beginContact : function, endContact : function, preSolve ? : function , postSolve ? : function ) Sets functions for the collision callbacks during the world update. Four Lua functions can be given as arguments. The value nil removes a function. When called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the Contact between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes. If you are interested to know when exactly each callback is called, consult a Box2d manual Open in Browser @ param beginContact \u2014 Gets called when two fixtures begin to overlap. @ param endContact \u2014 Gets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed. @ param preSolve \u2014 Gets called before a collision gets resolved. @ param postSolve \u2014 Gets called after the collision has been resolved.","title":"setCallbacks"},{"location":"doc/#setcontactfilter","text":"( method ) love .World: setContactFilter ( filter : function) Sets a function for collision filtering. If the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other. Open in Browser @ param filter \u2014 The function handling the contact filtering.","title":"setContactFilter"},{"location":"doc/#setgravity","text":"( method ) love .World: setGravity ( x : number, y : number) Set the gravity of the world. Open in Browser @ param x \u2014 The x component of gravity. @ param y \u2014 The y component of gravity.","title":"setGravity"},{"location":"doc/#setsleepingallowed_1","text":"( method ) love .World: setSleepingAllowed ( allow : boolean) Sets the sleep behaviour of the world. Open in Browser @ param allow \u2014 True if bodies in the world are allowed to sleep, or false if not.","title":"setSleepingAllowed"},{"location":"doc/#translateorigin","text":"( method ) love .World: translateOrigin ( x : number, y : number) Translates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin. Open in Browser @ param x \u2014 The x component of the new origin with respect to the old origin. @ param y \u2014 The y component of the new origin with respect to the old origin.","title":"translateOrigin"},{"location":"doc/#type_56","text":"( method ) love .Object: type () -> type : string Gets the type of the object as a string. Open in Browser @ return type \u2014 The type as a string.","title":"type"},{"location":"doc/#typeof_56","text":"( method ) love .Object: typeOf ( name : string) -> b : boolean Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true. Open in Browser @ param name \u2014 The name of the type to check for. @ return b \u2014 True if the object is of the specified type, false otherwise.","title":"typeOf"},{"location":"doc/#update_17","text":"( method ) love .World: update ( dt : number, velocityiterations ? : number , positioniterations ? : number ) Update the state of the world. Open in Browser @ param dt \u2014 The time (in seconds) to advance the physics simulation. @ param velocityiterations \u2014 The maximum number of steps used to determine the new velocities when resolving a collision. @ param positioniterations \u2014 The maximum number of steps used to determine the new positions when resolving a collision.","title":"update"},{"location":"doc/#lovewrapmode","text":"","title":"love.WrapMode"},{"location":"doc/#loveaudio","text":"love .audio","title":"love.audio"},{"location":"doc/#loveaudio_1","text":"","title":"love.audio"},{"location":"doc/#getactiveeffects_1","text":"function love.audio. getActiveEffects () -> effects : table Gets a list of the names of the currently enabled effects. Open in Browser @ return effects \u2014 The list of the names of the currently enabled effects.","title":"getActiveEffects"},{"location":"doc/#getactivesourcecount","text":"function love.audio. getActiveSourceCount () -> count : number Gets the current number of simultaneously playing sources. Open in Browser @ return count \u2014 The current number of simultaneously playing sources.","title":"getActiveSourceCount"},{"location":"doc/#getdistancemodel","text":"function love.audio. getDistanceModel () -> model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2) Returns the distance attenuation model. Open in Browser @ return model \u2014 The current distance model. The default is 'inverseclamped'. -- -- The different distance models. -- -- Extended information can be found in the chapter \"3.4. Attenuation By Distance\" of the OpenAL 1.1 specification. -- -- -- [Open in Browser](https://love2d.org/wiki/DistanceModel) -- model : | \" none \" -- Sources do not get attenuated. | \" inverse \" -- Inverse distance attenuation. | \" inverseclamped \" -- Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''. | \" linear \" -- Linear attenuation. | \" linearclamped \" -- Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''. | \" exponent \" -- Exponential attenuation. | \" exponentclamped \" -- Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''.","title":"getDistanceModel"},{"location":"doc/#getdopplerscale","text":"function love.audio. getDopplerScale () -> scale : number Gets the current global scale factor for velocity-based doppler effects. Open in Browser @ return scale \u2014 The current doppler scale factor.","title":"getDopplerScale"},{"location":"doc/#geteffect_1","text":"function love.audio. getEffect ( name : string) -> settings : table Gets the settings associated with an effect. Open in Browser @ param name \u2014 The name of the effect. @ return settings \u2014 The settings associated with the effect.","title":"getEffect"},{"location":"doc/#getmaxsceneeffects","text":"function love.audio. getMaxSceneEffects () -> maximum : number Gets the maximum number of active effects supported by the system. Open in Browser @ return maximum \u2014 The maximum number of active effects.","title":"getMaxSceneEffects"},{"location":"doc/#getmaxsourceeffects","text":"function love.audio. getMaxSourceEffects () -> maximum : number Gets the maximum number of active Effects in a single Source object, that the system can support. Open in Browser @ return maximum \u2014 The maximum number of active Effects per Source.","title":"getMaxSourceEffects"},{"location":"doc/#getorientation","text":"function love.audio. getOrientation () -> fx : number 2. fy : number 3. fz : number 4. ux : number 5. uy : number 6. uz : number Returns the orientation of the listener. Open in Browser @ return fx \u2014 Forward vector of the listener orientation. @ return fy \u2014 Forward vector of the listener orientation. @ return fz \u2014 Forward vector of the listener orientation. @ return ux \u2014 Up vector of the listener orientation. @ return uy \u2014 Up vector of the listener orientation. @ return uz \u2014 Up vector of the listener orientation.","title":"getOrientation"},{"location":"doc/#getposition_7","text":"function love.audio. getPosition () -> x : number 2. y : number 3. z : number Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. Open in Browser @ return x \u2014 The X position of the listener. @ return y \u2014 The Y position of the listener. @ return z \u2014 The Z position of the listener.","title":"getPosition"},{"location":"doc/#getrecordingdevices","text":"function love.audio. getRecordingDevices () -> devices : table Gets a list of RecordingDevices on the system. The first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system. Audio recording is currently not supported on iOS. Open in Browser @ return devices \u2014 The list of connected recording devices.","title":"getRecordingDevices"},{"location":"doc/#getvelocity_1","text":"function love.audio. getVelocity () -> x : number 2. y : number 3. z : number Returns the velocity of the listener. Open in Browser @ return x \u2014 The X velocity of the listener. @ return y \u2014 The Y velocity of the listener. @ return z \u2014 The Z velocity of the listener.","title":"getVelocity"},{"location":"doc/#getvolume_1","text":"function love.audio. getVolume () -> volume : number Returns the master volume. Open in Browser @ return volume \u2014 The current master volume","title":"getVolume"},{"location":"doc/#iseffectssupported","text":"function love.audio. isEffectsSupported () -> supported : boolean Gets whether audio effects are supported in the system. Open in Browser @ return supported \u2014 True if effects are supported, false otherwise.","title":"isEffectsSupported"},{"location":"doc/#newqueueablesource","text":"function love.audio. newQueueableSource ( samplerate : number, bitdepth : number, channels : number, buffercount ? : number ) -> source : love.Source Creates a new Source usable for real-time generated sound playback with Source:queue. Open in Browser @ param samplerate \u2014 Number of samples per second when playing. @ param bitdepth \u2014 Bits per sample (8 or 16). @ param channels \u2014 1 for mono or 2 for stereo. @ param buffercount \u2014 The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified. @ return source \u2014 The new Source usable with Source:queue.","title":"newQueueableSource"},{"location":"doc/#newsource","text":"function love.audio. newSource ( filename : string, type : \"queue\" | \"static\" | \"stream\" ) -> source : love.Source Creates a new Source from a filepath, File, Decoder or SoundData. Sources created from SoundData are always static. Open in Browser @ param filename \u2014 The filepath to the audio file. @ param type \u2014 Streaming or static source. @ return source \u2014 A new Source that can play the specified audio. -- -- Types of audio sources. -- -- A good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once. -- -- -- [Open in Browser](https://love2d.org/wiki/SourceType) -- type : | \"static\" -- The whole audio is decoded. | \"stream\" -- The audio is decoded in chunks when needed. | \"queue\" -- The audio must be manually queued by the user.","title":"newSource"},{"location":"doc/#pause_4","text":"function love.audio. pause () -> Sources : table Pauses specific or all currently played Sources. Open in Browser @ return Sources \u2014 A table containing a list of Sources that were paused by this call.","title":"pause"},{"location":"doc/#play_3","text":"function love.audio. play ( source : love.Source) Plays the specified Source. Open in Browser @ param source \u2014 The Source to play.","title":"play"},{"location":"doc/#setdistancemodel","text":"function love.audio. setDistanceModel ( model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2)) Sets the distance attenuation model. Open in Browser @ param model \u2014 The new distance model. -- -- The different distance models. -- -- Extended information can be found in the chapter \"3.4. Attenuation By Distance\" of the OpenAL 1.1 specification. -- -- -- [Open in Browser](https://love2d.org/wiki/DistanceModel) -- model : | \" none \" -- Sources do not get attenuated. | \" inverse \" -- Inverse distance attenuation. | \" inverseclamped \" -- Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''. | \" linear \" -- Linear attenuation. | \" linearclamped \" -- Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''. | \" exponent \" -- Exponential attenuation. | \" exponentclamped \" -- Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''.","title":"setDistanceModel"},{"location":"doc/#setdopplerscale","text":"function love.audio. setDopplerScale ( scale : number) Sets a global scale factor for velocity-based doppler effects. The default scale value is 1. Open in Browser @ param scale \u2014 The new doppler scale factor. The scale must be greater than 0.","title":"setDopplerScale"},{"location":"doc/#seteffect_1","text":"function love.audio. setEffect ( name : string, settings : { type: \" chorus \"|\" compressor \"|\" distortion \"|\" echo \"|\" equalizer \"...(+3), volume: number }) -> success: boolean Defines an effect that can be applied to a Source. Not all system supports audio effects. Use love.audio.isEffectsSupported to check. Open in Browser @ param name \u2014 The name of the effect. @ param settings \u2014 The settings to use for this effect, with the following fields: @ return success \u2014 Whether the effect was successfully created.","title":"setEffect"},{"location":"doc/#setmixwithsystem","text":"function love.audio. setMixWithSystem ( mix : boolean) -> success : boolean Sets whether the system should mix the audio with the system's audio. Open in Browser @ param mix \u2014 True to enable mixing, false to disable it. @ return success \u2014 True if the change succeeded, false otherwise.","title":"setMixWithSystem"},{"location":"doc/#setorientation","text":"function love.audio. setOrientation ( fx : number, fy : number, fz : number, ux : number, uy : number, uz : number) Sets the orientation of the listener. Open in Browser @ param fx \u2014 Forward vector of the listener orientation. @ param fy \u2014 Forward vector of the listener orientation. @ param fz \u2014 Forward vector of the listener orientation. @ param ux \u2014 Up vector of the listener orientation. @ param uy \u2014 Up vector of the listener orientation. @ param uz \u2014 Up vector of the listener orientation.","title":"setOrientation"},{"location":"doc/#setposition_6","text":"function love.audio. setPosition ( x : number, y : number, z : number) Sets the position of the listener, which determines how sounds play. Open in Browser @ param x \u2014 The x position of the listener. @ param y \u2014 The y position of the listener. @ param z \u2014 The z position of the listener.","title":"setPosition"},{"location":"doc/#setvelocity_1","text":"function love.audio. setVelocity ( x : number, y : number, z : number) Sets the velocity of the listener. Open in Browser @ param x \u2014 The X velocity of the listener. @ param y \u2014 The Y velocity of the listener. @ param z \u2014 The Z velocity of the listener.","title":"setVelocity"},{"location":"doc/#setvolume_1","text":"function love.audio. setVolume ( volume : number) Sets the master volume. Open in Browser @ param volume \u2014 1.0 is max and 0.0 is off.","title":"setVolume"},{"location":"doc/#stop_3","text":"function love.audio. stop () Stops currently played sources. Open in Browser","title":"stop"},{"location":"doc/#loveaudiogetactiveeffects","text":"function love.audio. getActiveEffects () -> effects : table","title":"love.audio.getActiveEffects"},{"location":"doc/#loveaudiogetactivesourcecount","text":"function love.audio. getActiveSourceCount () -> count : number","title":"love.audio.getActiveSourceCount"},{"location":"doc/#loveaudiogetdistancemodel","text":"function love.audio. getDistanceModel () -> model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2)","title":"love.audio.getDistanceModel"},{"location":"doc/#loveaudiogetdopplerscale","text":"function love.audio. getDopplerScale () -> scale : number","title":"love.audio.getDopplerScale"},{"location":"doc/#loveaudiogeteffect","text":"function love.audio. getEffect ( name : string) -> settings : table","title":"love.audio.getEffect"},{"location":"doc/#loveaudiogetmaxsceneeffects","text":"function love.audio. getMaxSceneEffects () -> maximum : number","title":"love.audio.getMaxSceneEffects"},{"location":"doc/#loveaudiogetmaxsourceeffects","text":"function love.audio. getMaxSourceEffects () -> maximum : number","title":"love.audio.getMaxSourceEffects"},{"location":"doc/#loveaudiogetorientation","text":"function love.audio. getOrientation () -> fx : number 2. fy : number 3. fz : number 4. ux : number 5. uy : number 6. uz : number","title":"love.audio.getOrientation"},{"location":"doc/#loveaudiogetposition","text":"function love.audio. getPosition () -> x : number 2. y : number 3. z : number","title":"love.audio.getPosition"},{"location":"doc/#loveaudiogetrecordingdevices","text":"function love.audio. getRecordingDevices () -> devices : table","title":"love.audio.getRecordingDevices"},{"location":"doc/#loveaudiogetvelocity","text":"function love.audio. getVelocity () -> x : number 2. y : number 3. z : number","title":"love.audio.getVelocity"},{"location":"doc/#loveaudiogetvolume","text":"function love.audio. getVolume () -> volume : number","title":"love.audio.getVolume"},{"location":"doc/#loveaudioiseffectssupported","text":"function love.audio. isEffectsSupported () -> supported : boolean","title":"love.audio.isEffectsSupported"},{"location":"doc/#loveaudionewqueueablesource","text":"function love.audio. newQueueableSource ( samplerate : number, bitdepth : number, channels : number, buffercount ? : number ) -> source : love.Source","title":"love.audio.newQueueableSource"},{"location":"doc/#loveaudionewsource","text":"function love.audio. newSource ( filename : string, type : \"queue\" | \"static\" | \"stream\" ) -> source : love.Source","title":"love.audio.newSource"},{"location":"doc/#loveaudiopause","text":"function love.audio. pause () -> Sources : table","title":"love.audio.pause"},{"location":"doc/#loveaudioplay","text":"function love.audio. play ( source : love.Source)","title":"love.audio.play"},{"location":"doc/#loveaudiosetdistancemodel","text":"function love.audio. setDistanceModel ( model : \" exponent \"|\" exponentclamped \"|\" inverse \"|\" inverseclamped \"|\" linear \"...(+2))","title":"love.audio.setDistanceModel"},{"location":"doc/#loveaudiosetdopplerscale","text":"function love.audio. setDopplerScale ( scale : number)","title":"love.audio.setDopplerScale"},{"location":"doc/#loveaudioseteffect","text":"function love.audio. setEffect ( name : string, settings : { type: \" chorus \"|\" compressor \"|\" distortion \"|\" echo \"|\" equalizer \"...(+3), volume: number }) -> success: boolean","title":"love.audio.setEffect"},{"location":"doc/#loveaudiosetmixwithsystem","text":"function love.audio. setMixWithSystem ( mix : boolean) -> success : boolean","title":"love.audio.setMixWithSystem"},{"location":"doc/#loveaudiosetorientation","text":"function love.audio. setOrientation ( fx : number, fy : number, fz : number, ux : number, uy : number, uz : number)","title":"love.audio.setOrientation"},{"location":"doc/#loveaudiosetposition","text":"function love.audio. setPosition ( x : number, y : number, z : number)","title":"love.audio.setPosition"},{"location":"doc/#loveaudiosetvelocity","text":"function love.audio. setVelocity ( x : number, y : number, z : number)","title":"love.audio.setVelocity"},{"location":"doc/#loveaudiosetvolume","text":"function love.audio. setVolume ( volume : number)","title":"love.audio.setVolume"},{"location":"doc/#loveaudiostop","text":"function love.audio. stop ()","title":"love.audio.stop"},{"location":"doc/#loveconf","text":"","title":"love.conf"},{"location":"doc/#loveconf_1","text":"function love. conf ( t : any)","title":"love.conf"},{"location":"doc/#lovedata_1","text":"love .data","title":"love.data"},{"location":"doc/#lovedata_2","text":"","title":"love.data"},{"location":"doc/#compress","text":"function love.data. compress ( container : \" data \"|\" string \", format: \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \", rawstring: string, level?: number) -> compressedData: string|love.CompressedData Compresses a string or data using a specific compression algorithm. Open in Browser @ param container \u2014 What type to return the compressed data as. @ param format \u2014 The format to use when compressing the string. @ param rawstring \u2014 The raw (un-compressed) string to compress. @ param level \u2014 The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used. @ return compressedData \u2014 CompressedData/string which contains the compressed version of rawstring. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Compressed data formats. -- -- -- [Open in Browser](https://love2d.org/wiki/CompressedDataFormat) -- format: | \" lz4 \" -- The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here. | \" zlib \" -- The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio. | \" gzip \" -- The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format. | \" deflate \" -- Raw DEFLATE-compressed data (no header).","title":"compress"},{"location":"doc/#decode_1","text":"function love.data. decode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string) -> decoded: string|love.ByteData Decode Data or a string from any of the EncodeFormats to Data or string. Open in Browser @ param container \u2014 What type to return the decoded data as. @ param format \u2014 The format of the input data. @ param sourceString \u2014 The raw (encoded) data to decode. @ return decoded \u2014 ByteData/string which contains the decoded version of source. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Encoding format used to encode or decode data. -- -- -- [Open in Browser](https://love2d.org/wiki/EncodeFormat) -- format: | \" base64 \" -- Encode/decode data as base64 binary-to-text encoding. | \" hex \" -- Encode/decode data as hexadecimal string.","title":"decode"},{"location":"doc/#decompress","text":"function love.data. decompress ( container : \" data \"|\" string \", compressedData: love.CompressedData) -> decompressedData: string|love.Data Decompresses a CompressedData or previously compressed string or Data object. Open in Browser @ param container \u2014 What type to return the decompressed data as. @ param compressedData \u2014 The compressed data to decompress. @ return decompressedData \u2014 Data/string containing the raw decompressed data. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string.","title":"decompress"},{"location":"doc/#encode_1","text":"function love.data. encode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string, linelength?: number) -> encoded: string|love.ByteData Encode Data or a string to a Data or string in one of the EncodeFormats. Open in Browser @ param container \u2014 What type to return the encoded data as. @ param format \u2014 The format of the output data. @ param sourceString \u2014 The raw data to encode. @ param linelength \u2014 The maximum line length of the output. Only supported for base64, ignored if 0. @ return encoded \u2014 ByteData/string which contains the encoded version of source. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string. -- -- Encoding format used to encode or decode data. -- -- -- [Open in Browser](https://love2d.org/wiki/EncodeFormat) -- format: | \" base64 \" -- Encode/decode data as base64 binary-to-text encoding. | \" hex \" -- Encode/decode data as hexadecimal string.","title":"encode"},{"location":"doc/#getpackedsize","text":"function love.data. getPackedSize ( format : string) -> size : number Gets the size in bytes that a given format used with love.data.pack will use. This function behaves the same as Lua 5.3's string.packsize. Open in Browser @ param format \u2014 A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. @ return size \u2014 The size in bytes that the packed data will use.","title":"getPackedSize"},{"location":"doc/#hash_1","text":"function love.data. hash ( hashFunction : \" md5 \"|\" sha1 \"|\" sha224 \"|\" sha256 \"|\" sha384 \"...(+1), string: string) -> rawdigest: string Compute the message digest of a string using a specified hash algorithm. Open in Browser @ param hashFunction \u2014 Hash algorithm to use. @ param string \u2014 String to hash. @ return rawdigest \u2014 Raw message digest string. -- -- Hash algorithm of love.data.hash. -- -- -- [Open in Browser](https://love2d.org/wiki/HashFunction) -- hashFunction : | \" md5 \" -- MD5 hash algorithm (16 bytes). | \" sha1 \" -- SHA1 hash algorithm (20 bytes). | \" sha224 \" -- SHA2 hash algorithm with message digest size of 224 bits (28 bytes). | \" sha256 \" -- SHA2 hash algorithm with message digest size of 256 bits (32 bytes). | \" sha384 \" -- SHA2 hash algorithm with message digest size of 384 bits (48 bytes). | \" sha512 \" -- SHA2 hash algorithm with message digest size of 512 bits (64 bytes).","title":"hash"},{"location":"doc/#newbytedata","text":"function love.data. newByteData ( datastring : string) -> bytedata : love.ByteData Creates a new Data object containing arbitrary bytes. Data:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created. Open in Browser @ param datastring \u2014 The byte string to copy. @ return bytedata \u2014 The new Data object.","title":"newByteData"},{"location":"doc/#newdataview","text":"function love.data. newDataView ( data : love.Data, offset : number, size : number) -> view : love.Data Creates a new Data referencing a subsection of an existing Data object. Open in Browser @ param data \u2014 The Data object to reference. @ param offset \u2014 The offset of the subsection to reference, in bytes. @ param size \u2014 The size in bytes of the subsection to reference. @ return view \u2014 The new Data view.","title":"newDataView"},{"location":"doc/#pack_1","text":"function love.data. pack ( container : \" data \"|\" string \", format: string, v1: boolean|string|number, ...boolean|string|number) -> data: string|love.Data Packs (serializes) simple Lua values. This function behaves the same as Lua 5.3's string.pack. Open in Browser @ param container \u2014 What type to return the encoded data as. @ param format \u2014 A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings. @ param v1 \u2014 The first value (number, boolean, or string) to serialize. @ return data \u2014 Data/string which contains the serialized data. -- -- Return type of various data-returning functions. -- -- -- [Open in Browser](https://love2d.org/wiki/ContainerType) -- container : | \" data \" -- Return type is ByteData. | \" string \" -- Return type is string.","title":"pack"},{"location":"doc/#unpack_1","text":"function love.data. unpack ( format : string, datastring : string, pos ? : number ) -> v1 : boolean| string | number 2. index : number Unpacks (deserializes) a byte-string or Data into simple Lua values. This function behaves the same as Lua 5.3's string.unpack. Open in Browser @ param format \u2014 A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings. @ param datastring \u2014 A string containing the packed (serialized) data. @ param pos \u2014 Where to start reading in the string. Negative values can be used to read relative from the end of the string. @ return v1 \u2014 The first value (number, boolean, or string) that was unpacked. @ return index \u2014 The index of the first unread byte in the data string.","title":"unpack"},{"location":"doc/#lovedatacompress","text":"function love.data. compress ( container : \" data \"|\" string \", format: \" deflate \"|\" gzip \"|\" lz4 \"|\" zlib \", rawstring: string, level?: number) -> compressedData: string|love.CompressedData","title":"love.data.compress"},{"location":"doc/#lovedatadecode","text":"function love.data. decode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string) -> decoded: string|love.ByteData","title":"love.data.decode"},{"location":"doc/#lovedatadecompress","text":"function love.data. decompress ( container : \" data \"|\" string \", compressedData: love.CompressedData) -> decompressedData: string|love.Data","title":"love.data.decompress"},{"location":"doc/#lovedataencode","text":"function love.data. encode ( container : \" data \"|\" string \", format: \" base64 \"|\" hex \", sourceString: string, linelength?: number) -> encoded: string|love.ByteData","title":"love.data.encode"},{"location":"doc/#lovedatagetpackedsize","text":"function love.data. getPackedSize ( format : string) -> size : number","title":"love.data.getPackedSize"},{"location":"doc/#lovedatahash","text":"function love.data. hash ( hashFunction : \" md5 \"|\" sha1 \"|\" sha224 \"|\" sha256 \"|\" sha384 \"...(+1), string: string) -> rawdigest: string","title":"love.data.hash"},{"location":"doc/#lovedatanewbytedata","text":"function love.data. newByteData ( datastring : string) -> bytedata : love.ByteData","title":"love.data.newByteData"},{"location":"doc/#lovedatanewdataview","text":"function love.data. newDataView ( data : love.Data, offset : number, size : number) -> view : love.Data","title":"love.data.newDataView"},{"location":"doc/#lovedatapack","text":"function love.data. pack ( container : \" data \"|\" string \", format: string, v1: boolean|string|number, ...boolean|string|number) -> data: string|love.Data","title":"love.data.pack"},{"location":"doc/#lovedataunpack","text":"function love.data. unpack ( format : string, datastring : string, pos ? : number ) -> v1 : boolean| string | number 2. index : number","title":"love.data.unpack"},{"location":"doc/#lovedirectorydropped","text":"","title":"love.directorydropped"},{"location":"doc/#lovedisplayrotated","text":"","title":"love.displayrotated"},{"location":"doc/#lovedraw","text":"","title":"love.draw"},{"location":"doc/#loveerrorhandler","text":"","title":"love.errorhandler"},{"location":"doc/#loveevent_1","text":"","title":"love.event"},{"location":"doc/#clear_10","text":"function love.event. clear () Clears the event queue. Open in Browser","title":"clear"},{"location":"doc/#poll","text":"function love.event. poll () -> i : function Returns an iterator for messages in the event queue. Open in Browser @ return i \u2014 Iterator function usable in a for loop.","title":"poll"},{"location":"doc/#pump","text":"function love.event. pump () Pump events into the event queue. This is a low-level function, and is usually not called by the user, but by love.run. Note that this does need to be called for any OS to think you're still running, and if you want to handle OS-generated events at all (think callbacks). Open in Browser","title":"pump"},{"location":"doc/#push_5","text":"function love.event. push ( n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32), a?: any, b?: any, c?: any, d?: any, e?: any, f?: any, ...any) Adds an event to the event queue. From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six. Open in Browser @ param n \u2014 The name of the event. @ param a \u2014 First event argument. @ param b \u2014 Second event argument. @ param c \u2014 Third event argument. @ param d \u2014 Fourth event argument. @ param e \u2014 Fifth event argument. @ param f \u2014 Sixth event argument. -- -- Arguments to love.event.push() and the like. -- -- Since 0.8.0, event names are no longer abbreviated. -- -- -- [Open in Browser](https://love2d.org/wiki/Event) -- n : | \" focus \" -- Window focus gained or lost | \" joystickpressed \" -- Joystick pressed | \" joystickreleased \" -- Joystick released | \" keypressed \" -- Key pressed | \" keyreleased \" -- Key released | \" mousepressed \" -- Mouse pressed | \" mousereleased \" -- Mouse released | \" quit \" -- Quit | \" resize \" -- Window size changed by the user | \" visible \" -- Window is minimized or un-minimized by the user | \" mousefocus \" -- Window mouse focus gained or lost | \" threaderror \" -- A Lua error has occurred in a thread | \" joystickadded \" -- Joystick connected | \" joystickremoved \" -- Joystick disconnected | \" joystickaxis \" -- Joystick axis motion | \" joystickhat \" -- Joystick hat pressed | \" gamepadpressed \" -- Joystick's virtual gamepad button pressed | \" gamepadreleased \" -- Joystick's virtual gamepad button released | \" gamepadaxis \" -- Joystick's virtual gamepad axis moved | \" textinput \" -- User entered text | \" mousemoved \" -- Mouse position changed | \" lowmemory \" -- Running out of memory on mobile devices system | \" textedited \" -- Candidate text for an IME changed | \" wheelmoved \" -- Mouse wheel moved | \" touchpressed \" -- Touch screen touched | \" touchreleased \" -- Touch screen stop touching | \" touchmoved \" -- Touch press moved inside touch screen | \" directorydropped \" -- Directory is dragged and dropped onto the window | \" filedropped \" -- File is dragged and dropped onto the window. | \" jp \" -- Joystick pressed | \" jr \" -- Joystick released | \" kp \" -- Key pressed | \" kr \" -- Key released | \" mp \" -- Mouse pressed | \" mr \" -- Mouse released | \" q \" -- Quit | \" f \" -- Window focus gained or lost","title":"push"},{"location":"doc/#quit_1","text":"function love.event. quit ( exitstatus ? : number ) Adds the quit event to the queue. The quit event is a signal for the event handler to close L\u00d6VE. It's possible to abort the exit process with the love.quit callback. Open in Browser @ param exitstatus \u2014 The program exit status to use when closing the application.","title":"quit"},{"location":"doc/#wait_1","text":"function love.event. wait () -> n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32) 2. a: any 3. b: any 4. c: any 5. d: any 6. e: any 7. f: any Like love.event.poll(), but blocks until there is an event in the queue. Open in Browser @ return n \u2014 The name of event. @ return a \u2014 First event argument. @ return b \u2014 Second event argument. @ return c \u2014 Third event argument. @ return d \u2014 Fourth event argument. @ return e \u2014 Fifth event argument. @ return f \u2014 Sixth event argument. -- -- Arguments to love.event.push() and the like. -- -- Since 0.8.0, event names are no longer abbreviated. -- -- -- [Open in Browser](https://love2d.org/wiki/Event) -- n : | \" focus \" -- Window focus gained or lost | \" joystickpressed \" -- Joystick pressed | \" joystickreleased \" -- Joystick released | \" keypressed \" -- Key pressed | \" keyreleased \" -- Key released | \" mousepressed \" -- Mouse pressed | \" mousereleased \" -- Mouse released | \" quit \" -- Quit | \" resize \" -- Window size changed by the user | \" visible \" -- Window is minimized or un-minimized by the user | \" mousefocus \" -- Window mouse focus gained or lost | \" threaderror \" -- A Lua error has occurred in a thread | \" joystickadded \" -- Joystick connected | \" joystickremoved \" -- Joystick disconnected | \" joystickaxis \" -- Joystick axis motion | \" joystickhat \" -- Joystick hat pressed | \" gamepadpressed \" -- Joystick's virtual gamepad button pressed | \" gamepadreleased \" -- Joystick's virtual gamepad button released | \" gamepadaxis \" -- Joystick's virtual gamepad axis moved | \" textinput \" -- User entered text | \" mousemoved \" -- Mouse position changed | \" lowmemory \" -- Running out of memory on mobile devices system | \" textedited \" -- Candidate text for an IME changed | \" wheelmoved \" -- Mouse wheel moved | \" touchpressed \" -- Touch screen touched | \" touchreleased \" -- Touch screen stop touching | \" touchmoved \" -- Touch press moved inside touch screen | \" directorydropped \" -- Directory is dragged and dropped onto the window | \" filedropped \" -- File is dragged and dropped onto the window. | \" jp \" -- Joystick pressed | \" jr \" -- Joystick released | \" kp \" -- Key pressed | \" kr \" -- Key released | \" mp \" -- Mouse pressed | \" mr \" -- Mouse released | \" q \" -- Quit | \" f \" -- Window focus gained or lost","title":"wait"},{"location":"doc/#loveevent_2","text":"love .event","title":"love.event"},{"location":"doc/#loveeventclear","text":"function love.event. clear ()","title":"love.event.clear"},{"location":"doc/#loveeventpoll","text":"function love.event. poll () -> i : function","title":"love.event.poll"},{"location":"doc/#loveeventpump","text":"function love.event. pump ()","title":"love.event.pump"},{"location":"doc/#loveeventpush","text":"function love.event. push ( n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32), a?: any, b?: any, c?: any, d?: any, e?: any, f?: any, ...any)","title":"love.event.push"},{"location":"doc/#loveeventquit","text":"function love.event. quit ( exitstatus ? : number )","title":"love.event.quit"},{"location":"doc/#loveeventwait","text":"function love.event. wait () -> n : \" directorydropped \"|\" f \"|\" filedropped \"|\" focus \"|\" gamepadaxis \"...(+32) 2. a: any 3. b: any 4. c: any 5. d: any 6. e: any 7. f: any","title":"love.event.wait"},{"location":"doc/#lovefiledropped","text":"","title":"love.filedropped"},{"location":"doc/#lovefilesystem","text":"","title":"love.filesystem"},{"location":"doc/#append","text":"function love.filesystem. append ( name : string, data : string, size ? : number ) -> success : boolean 2. errormsg : string Append data to an existing file. Open in Browser @ param name \u2014 The name (and path) of the file. @ param data \u2014 The string data to append to the file. @ param size \u2014 How many bytes to write. @ return success \u2014 True if the operation was successful, or nil if there was an error. @ return errormsg \u2014 The error message on failure.","title":"append"},{"location":"doc/#aresymlinksenabled","text":"function love.filesystem. areSymlinksEnabled () -> enable : boolean Gets whether love.filesystem follows symbolic links. Open in Browser @ return enable \u2014 Whether love.filesystem follows symbolic links.","title":"areSymlinksEnabled"},{"location":"doc/#createdirectory","text":"function love.filesystem. createDirectory ( name : string) -> success : boolean Recursively creates a directory. When called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already. Open in Browser @ param name \u2014 The directory to create. @ return success \u2014 True if the directory was created, false if not.","title":"createDirectory"},{"location":"doc/#getappdatadirectory","text":"function love.filesystem. getAppdataDirectory () -> path : string Returns the application data directory (could be the same as getUserDirectory) Open in Browser @ return path \u2014 The path of the application data directory","title":"getAppdataDirectory"},{"location":"doc/#getcrequirepath","text":"function love.filesystem. getCRequirePath () -> paths : string Gets the filesystem paths that will be searched for c libraries when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform. The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ return paths \u2014 The paths that the ''require'' function will check for c libraries in love's filesystem.","title":"getCRequirePath"},{"location":"doc/#getdirectoryitems","text":"function love.filesystem. getDirectoryItems ( dir : string) -> files : table Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined. If the path passed to the function exists in the game and the save directory, it will list the files and directories from both places. Open in Browser @ param dir \u2014 The directory. @ return files \u2014 A sequence with the names of all files and subdirectories as strings.","title":"getDirectoryItems"},{"location":"doc/#getidentity","text":"function love.filesystem. getIdentity () -> name : string Gets the write directory name for your game. Note that this only returns the name of the folder to store your files in, not the full path. Open in Browser @ return name \u2014 The identity that is used as write directory.","title":"getIdentity"},{"location":"doc/#getinfo_1","text":"function love.filesystem. getInfo ( path : string, filtertype ? : \"directory\" | \"file\" | \"other\" | \"symlink\" ) -> info : { type: \" directory \"|\" file \"|\" other \"|\" symlink \", size: number, modtime: number } Gets information about the specified file or directory. Open in Browser @ param path \u2014 The file or directory path to check. @ param filtertype \u2014 If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type. @ return info \u2014 A table containing information about the specified path, or nil if nothing exists at the path. The table contains the following fields: -- -- The type of a file. -- -- -- [Open in Browser](https://love2d.org/wiki/FileType) -- filtertype : | \" file \" -- Regular file. | \" directory \" -- Directory. | \" symlink \" -- Symbolic link. | \" other \" -- Something completely different like a device.","title":"getInfo"},{"location":"doc/#getrealdirectory","text":"function love.filesystem. getRealDirectory ( filepath : string) -> realdir : string Gets the platform-specific absolute path of the directory containing a filepath. This can be used to determine whether a file is inside the save directory or the game's source .love. Open in Browser @ param filepath \u2014 The filepath to get the directory of. @ return realdir \u2014 The platform-specific full path of the directory containing the filepath.","title":"getRealDirectory"},{"location":"doc/#getrequirepath","text":"function love.filesystem. getRequirePath () -> paths : string Gets the filesystem paths that will be searched when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ return paths \u2014 The paths that the ''require'' function will check in love's filesystem.","title":"getRequirePath"},{"location":"doc/#getsavedirectory","text":"function love.filesystem. getSaveDirectory () -> dir : string Gets the full path to the designated save directory. This can be useful if you want to use the standard io library (or something else) to read or write in the save directory. Open in Browser @ return dir \u2014 The absolute path to the save directory.","title":"getSaveDirectory"},{"location":"doc/#getsource_1","text":"function love.filesystem. getSource () -> path : string Returns the full path to the the .love file or directory. If the game is fused to the L\u00d6VE executable, then the executable is returned. Open in Browser @ return path \u2014 The full platform-dependent path of the .love file or directory.","title":"getSource"},{"location":"doc/#getsourcebasedirectory","text":"function love.filesystem. getSourceBaseDirectory () -> path : string Returns the full path to the directory containing the .love file. If the game is fused to the L\u00d6VE executable, then the directory containing the executable is returned. If love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\\Program Files\\coolgame) readable by love.filesystem. Open in Browser @ return path \u2014 The full platform-dependent path of the directory containing the .love file.","title":"getSourceBaseDirectory"},{"location":"doc/#getuserdirectory","text":"function love.filesystem. getUserDirectory () -> path : string Returns the path of the user's directory Open in Browser @ return path \u2014 The path of the user's directory","title":"getUserDirectory"},{"location":"doc/#getworkingdirectory","text":"function love.filesystem. getWorkingDirectory () -> cwd : string Gets the current working directory. Open in Browser @ return cwd \u2014 The current working directory.","title":"getWorkingDirectory"},{"location":"doc/#init","text":"function love.filesystem. init ( appname : string) Initializes love.filesystem, will be called internally, so should not be used explicitly. Open in Browser @ param appname \u2014 The name of the application binary, typically love.","title":"init"},{"location":"doc/#isfused","text":"function love.filesystem. isFused () -> fused : boolean Gets whether the game is in fused mode or not. If a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory. A game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game. Open in Browser @ return fused \u2014 True if the game is in fused mode, false otherwise.","title":"isFused"},{"location":"doc/#lines_4","text":"function love.filesystem. lines ( name : string) -> iterator : function Iterate over the lines in a file. Open in Browser @ param name \u2014 The name (and path) of the file @ return iterator \u2014 A function that iterates over all the lines in the file","title":"lines"},{"location":"doc/#load_7","text":"function love.filesystem. load ( name : string) -> chunk : function 2. errormsg : string Loads a Lua file (but does not run it). Open in Browser @ param name \u2014 The name (and path) of the file. @ return chunk \u2014 The loaded chunk. @ return errormsg \u2014 The error message if file could not be opened.","title":"load"},{"location":"doc/#mount","text":"function love.filesystem. mount ( archive : string, mountpoint : string, appendToPath ? : boolean ) -> success : boolean Mounts a zip file or folder in the game's save directory for reading. It is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode. Open in Browser @ param archive \u2014 The folder or zip file in the game's save directory to mount. @ param mountpoint \u2014 The new path the archive will be mounted to. @ param appendToPath \u2014 Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories. @ return success \u2014 True if the archive was successfully mounted, false otherwise.","title":"mount"},{"location":"doc/#newfile","text":"function love.filesystem. newFile ( filename : string) -> file : love.File Creates a new File object. It needs to be opened before it can be accessed. Open in Browser @ param filename \u2014 The filename of the file. @ return file \u2014 The new File object.","title":"newFile"},{"location":"doc/#newfiledata","text":"function love.filesystem. newFileData ( contents : string, name : string) -> data : love.FileData Creates a new FileData object from a file on disk, or from a string in memory. Open in Browser @ param contents \u2014 The contents of the file in memory represented as a string. @ param name \u2014 The name of the file. The extension may be parsed and used by L\u00d6VE when passing the FileData object into love.audio.newSource. @ return data \u2014 The new FileData.","title":"newFileData"},{"location":"doc/#read_4","text":"function love.filesystem. read ( name : string, size ? : number ) -> contents : string 2. size : number 3. contents : nil 4. error : string Read the contents of a file. Open in Browser @ param name \u2014 The name (and path) of the file. @ param size \u2014 How many bytes to read. @ return contents \u2014 The file contents. @ return size \u2014 How many bytes have been read. @ return contents \u2014 returns nil as content. @ return error \u2014 returns an error message.","title":"read"},{"location":"doc/#remove_6","text":"function love.filesystem. remove ( name : string) -> success : boolean Removes a file or empty directory. Open in Browser @ param name \u2014 The file or directory to remove. @ return success \u2014 True if the file/directory was removed, false otherwise.","title":"remove"},{"location":"doc/#setcrequirepath","text":"function love.filesystem. setCRequirePath ( paths : string) Sets the filesystem paths that will be searched for c libraries when require is called. The paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform. The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ param paths \u2014 The paths that the ''require'' function will check in love's filesystem.","title":"setCRequirePath"},{"location":"doc/#setidentity","text":"function love.filesystem. setIdentity ( name : string) Sets the write directory for your game. Note that you can only set the name of the folder to store your files in, not the location. Open in Browser @ param name \u2014 The new identity that will be used as write directory.","title":"setIdentity"},{"location":"doc/#setrequirepath","text":"function love.filesystem. setRequirePath ( paths : string) Sets the filesystem paths that will be searched when require is called. The paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) The paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount. Open in Browser @ param paths \u2014 The paths that the ''require'' function will check in love's filesystem.","title":"setRequirePath"},{"location":"doc/#setsource_1","text":"function love.filesystem. setSource ( path : string) Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by L\u00d6VE. Open in Browser @ param path \u2014 Absolute path to the game's source folder.","title":"setSource"},{"location":"doc/#setsymlinksenabled","text":"function love.filesystem. setSymlinksEnabled ( enable : boolean) Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2. Open in Browser @ param enable \u2014 Whether love.filesystem should follow symbolic links.","title":"setSymlinksEnabled"},{"location":"doc/#unmount","text":"function love.filesystem. unmount ( archive : string) -> success : boolean Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount. Open in Browser @ param archive \u2014 The folder or zip file in the game's save directory which is currently mounted. @ return success \u2014 True if the archive was successfully unmounted, false otherwise.","title":"unmount"},{"location":"doc/#write_4","text":"function love.filesystem. write ( name : string, data : string, size ? : number ) -> success : boolean 2. message : string Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents. Open in Browser @ param name \u2014 The name (and path) of the file. @ param data \u2014 The string data to write to the file. @ param size \u2014 How many bytes to write. @ return success \u2014 If the operation was successful. @ return message \u2014 Error message if operation was unsuccessful.","title":"write"},{"location":"doc/#lovefilesystem_1","text":"love .filesystem","title":"love.filesystem"},{"location":"doc/#lovefilesystemappend","text":"function love.filesystem. append ( name : string, data : string, size ? : number ) -> success : boolean 2. errormsg : string","title":"love.filesystem.append"},{"location":"doc/#lovefilesystemaresymlinksenabled","text":"function love.filesystem. areSymlinksEnabled () -> enable : boolean","title":"love.filesystem.areSymlinksEnabled"},{"location":"doc/#lovefilesystemcreatedirectory","text":"function love.filesystem. createDirectory ( name : string) -> success : boolean","title":"love.filesystem.createDirectory"},{"location":"doc/#lovefilesystemgetappdatadirectory","text":"function love.filesystem. getAppdataDirectory () -> path : string","title":"love.filesystem.getAppdataDirectory"},{"location":"doc/#lovefilesystemgetcrequirepath","text":"function love.filesystem. getCRequirePath () -> paths : string","title":"love.filesystem.getCRequirePath"},{"location":"doc/#lovefilesystemgetdirectoryitems","text":"function love.filesystem. getDirectoryItems ( dir : string) -> files : table","title":"love.filesystem.getDirectoryItems"},{"location":"doc/#lovefilesystemgetidentity","text":"function love.filesystem. getIdentity () -> name : string","title":"love.filesystem.getIdentity"},{"location":"doc/#lovefilesystemgetinfo","text":"function love.filesystem. getInfo ( path : string, filtertype ? : \"directory\" | \"file\" | \"other\" | \"symlink\" ) -> info : { type: \" directory \"|\" file \"|\" other \"|\" symlink \", size: number, modtime: number }","title":"love.filesystem.getInfo"},{"location":"doc/#lovefilesystemgetrealdirectory","text":"function love.filesystem. getRealDirectory ( filepath : string) -> realdir : string","title":"love.filesystem.getRealDirectory"},{"location":"doc/#lovefilesystemgetrequirepath","text":"function love.filesystem. getRequirePath () -> paths : string","title":"love.filesystem.getRequirePath"},{"location":"doc/#lovefilesystemgetsavedirectory","text":"function love.filesystem. getSaveDirectory () -> dir : string","title":"love.filesystem.getSaveDirectory"},{"location":"doc/#lovefilesystemgetsource","text":"function love.filesystem. getSource () -> path : string","title":"love.filesystem.getSource"},{"location":"doc/#lovefilesystemgetsourcebasedirectory","text":"function love.filesystem. getSourceBaseDirectory () -> path : string","title":"love.filesystem.getSourceBaseDirectory"},{"location":"doc/#lovefilesystemgetuserdirectory","text":"function love.filesystem. getUserDirectory () -> path : string","title":"love.filesystem.getUserDirectory"},{"location":"doc/#lovefilesystemgetworkingdirectory","text":"function love.filesystem. getWorkingDirectory () -> cwd : string","title":"love.filesystem.getWorkingDirectory"},{"location":"doc/#lovefilesysteminit","text":"function love.filesystem. init ( appname : string)","title":"love.filesystem.init"},{"location":"doc/#lovefilesystemisfused","text":"function love.filesystem. isFused () -> fused : boolean","title":"love.filesystem.isFused"},{"location":"doc/#lovefilesystemlines","text":"function love.filesystem. lines ( name : string) -> iterator : function","title":"love.filesystem.lines"},{"location":"doc/#lovefilesystemload","text":"function love.filesystem. load ( name : string) -> chunk : function 2. errormsg : string","title":"love.filesystem.load"},{"location":"doc/#lovefilesystemmount","text":"function love.filesystem. mount ( archive : string, mountpoint : string, appendToPath ? : boolean ) -> success : boolean","title":"love.filesystem.mount"},{"location":"doc/#lovefilesystemnewfile","text":"function love.filesystem. newFile ( filename : string) -> file : love.File","title":"love.filesystem.newFile"},{"location":"doc/#lovefilesystemnewfiledata","text":"function love.filesystem. newFileData ( contents : string, name : string) -> data : love.FileData","title":"love.filesystem.newFileData"},{"location":"doc/#lovefilesystemread","text":"function love.filesystem. read ( name : string, size ? : number ) -> contents : string 2. size : number 3. contents : nil 4. error : string","title":"love.filesystem.read"},{"location":"doc/#lovefilesystemremove","text":"function love.filesystem. remove ( name : string) -> success : boolean","title":"love.filesystem.remove"},{"location":"doc/#lovefilesystemsetcrequirepath","text":"function love.filesystem. setCRequirePath ( paths : string)","title":"love.filesystem.setCRequirePath"},{"location":"doc/#lovefilesystemsetidentity","text":"function love.filesystem. setIdentity ( name : string)","title":"love.filesystem.setIdentity"},{"location":"doc/#lovefilesystemsetrequirepath","text":"function love.filesystem. setRequirePath ( paths : string)","title":"love.filesystem.setRequirePath"},{"location":"doc/#lovefilesystemsetsource","text":"function love.filesystem. setSource ( path : string)","title":"love.filesystem.setSource"},{"location":"doc/#lovefilesystemsetsymlinksenabled","text":"function love.filesystem. setSymlinksEnabled ( enable : boolean)","title":"love.filesystem.setSymlinksEnabled"},{"location":"doc/#lovefilesystemunmount","text":"function love.filesystem. unmount ( archive : string) -> success : boolean","title":"love.filesystem.unmount"},{"location":"doc/#lovefilesystemwrite","text":"function love.filesystem. write ( name : string, data : string, size ? : number ) -> success : boolean 2. message : string","title":"love.filesystem.write"},{"location":"doc/#lovefocus","text":"","title":"love.focus"},{"location":"doc/#lovefont_1","text":"love .font","title":"love.font"},{"location":"doc/#lovefont_2","text":"","title":"love.font"},{"location":"doc/#newbmfontrasterizer","text":"function love.font. newBMFontRasterizer ( imageData : love.ImageData, glyphs : string, dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new BMFont Rasterizer. Open in Browser @ param imageData \u2014 The image data containing the drawable pictures of font glyphs. @ param glyphs \u2014 The sequence of glyphs in the ImageData. @ param dpiscale \u2014 DPI scale. @ return rasterizer \u2014 The rasterizer.","title":"newBMFontRasterizer"},{"location":"doc/#newglyphdata","text":"function love.font. newGlyphData ( rasterizer : love.Rasterizer, glyph : number) Creates a new GlyphData. Open in Browser @ param rasterizer \u2014 The Rasterizer containing the font. @ param glyph \u2014 The character code of the glyph.","title":"newGlyphData"},{"location":"doc/#newimagerasterizer","text":"function love.font. newImageRasterizer ( imageData : love.ImageData, glyphs : string, extraSpacing ? : number , dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new Image Rasterizer. Open in Browser @ param imageData \u2014 Font image data. @ param glyphs \u2014 String containing font glyphs. @ param extraSpacing \u2014 Font extra spacing. @ param dpiscale \u2014 Font DPI scale. @ return rasterizer \u2014 The rasterizer.","title":"newImageRasterizer"},{"location":"doc/#newrasterizer","text":"function love.font. newRasterizer ( filename : string) -> rasterizer : love.Rasterizer Creates a new Rasterizer. Open in Browser @ param filename \u2014 The font file. @ return rasterizer \u2014 The rasterizer.","title":"newRasterizer"},{"location":"doc/#newtruetyperasterizer","text":"function love.font. newTrueTypeRasterizer ( size ? : number , hinting ? : \"light\" | \"mono\" | \"none\" | \"normal\" , dpiscale ? : number ) -> rasterizer : love.Rasterizer Creates a new TrueType Rasterizer. Open in Browser @ param size \u2014 The font size. @ param hinting \u2014 True Type hinting mode. @ param dpiscale \u2014 The font DPI scale. @ return rasterizer \u2014 The rasterizer. -- -- True Type hinting mode. -- -- -- [Open in Browser](https://love2d.org/wiki/HintingMode) -- hinting : | \" normal \" -- Default hinting. Should be preferred for typical antialiased fonts. | \" light \" -- Results in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting. | \" mono \" -- Results in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font. | \" none \" -- Disables hinting for the font. Results in fuzzier text.","title":"newTrueTypeRasterizer"},{"location":"doc/#lovefontnewbmfontrasterizer","text":"function love.font. newBMFontRasterizer ( imageData : love.ImageData, glyphs : string, dpiscale ? : number ) -> rasterizer : love.Rasterizer","title":"love.font.newBMFontRasterizer"},{"location":"doc/#lovefontnewglyphdata","text":"function love.font. newGlyphData ( rasterizer : love.Rasterizer, glyph : number)","title":"love.font.newGlyphData"},{"location":"doc/#lovefontnewimagerasterizer","text":"function love.font. newImageRasterizer ( imageData : love.ImageData, glyphs : string, extraSpacing ? : number , dpiscale ? : number ) -> rasterizer : love.Rasterizer","title":"love.font.newImageRasterizer"},{"location":"doc/#lovefontnewrasterizer","text":"function love.font. newRasterizer ( filename : string) -> rasterizer : love.Rasterizer","title":"love.font.newRasterizer"},{"location":"doc/#lovefontnewtruetyperasterizer","text":"function love.font. newTrueTypeRasterizer ( size ? : number , hinting ? : \"light\" | \"mono\" | \"none\" | \"normal\" , dpiscale ? : number ) -> rasterizer : love.Rasterizer","title":"love.font.newTrueTypeRasterizer"},{"location":"doc/#lovegamepadaxis_1","text":"","title":"love.gamepadaxis"},{"location":"doc/#lovegamepadpressed","text":"","title":"love.gamepadpressed"},{"location":"doc/#lovegamepadreleased","text":"","title":"love.gamepadreleased"},{"location":"doc/#lovegetversion","text":"function love. getVersion () -> major : number 2. minor : number 3. revision : number 4. codename : string","title":"love.getVersion"},{"location":"doc/#lovegraphics","text":"","title":"love.graphics"},{"location":"doc/#applytransform","text":"function love.graphics. applyTransform ( transform : love.Transform) Applies the given Transform object to the current coordinate transformation. This effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation. Open in Browser @ param transform \u2014 The Transform object to apply to the current graphics coordinate transform.","title":"applyTransform"},{"location":"doc/#arc","text":"function love.graphics. arc ( drawmode : \" fill \"|\" line \", x: number, y: number, radius: number, angle1: number, angle2: number, segments?: number) Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge. Open in Browser @ param drawmode \u2014 How to draw the arc. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radius \u2014 Radius of the arc. @ param angle1 \u2014 The angle at which the arc begins. @ param angle2 \u2014 The angle at which the arc terminates. @ param segments \u2014 The number of segments used for drawing the arc. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- drawmode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape.","title":"arc"},{"location":"doc/#capturescreenshot","text":"function love.graphics. captureScreenshot ( filename : string) Creates a screenshot once the current frame is done (after love.draw has finished). Since this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame. Open in Browser @ param filename \u2014 The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats.","title":"captureScreenshot"},{"location":"doc/#circle","text":"function love.graphics. circle ( mode : \" fill \"|\" line \", x: number, y: number, radius: number) Draws a circle. Open in Browser @ param mode \u2014 How to draw the circle. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radius \u2014 The radius of the circle. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape.","title":"circle"},{"location":"doc/#clear_11","text":"function love.graphics. clear () Clears the screen or active Canvas to the specified color. This function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function. Note that the scissor area bounds the cleared region. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. In versions prior to background color instead. Open in Browser","title":"clear"},{"location":"doc/#discard","text":"function love.graphics. discard ( discardcolor ? : boolean , discardstencil ? : boolean ) Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases. If the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices. On some desktop systems this function may do nothing. Open in Browser @ param discardcolor \u2014 Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.) @ param discardstencil \u2014 Whether to discard the contents of the stencil buffer of the screen / active Canvas.","title":"discard"},{"location":"doc/#draw_16","text":"function love.graphics. draw ( drawable : love.Drawable, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing. Objects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system. It's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. Note that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation. The right and bottom edges of the object are shifted at an angle defined by the shearing factors. When using the default shader anything drawn with this function will be tinted according to the currently selected color. Set it to pure white to preserve the object's original colors. Open in Browser @ param drawable \u2014 A drawable object. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis).","title":"draw"},{"location":"doc/#drawinstanced","text":"function love.graphics. drawInstanced ( mesh : love.Mesh, instancecount : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws many instances of a Mesh with a single draw call, using hardware geometry instancing. Each instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other. Instancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check. Open in Browser @ param mesh \u2014 The mesh to render. @ param instancecount \u2014 The number of instances to render. @ param x \u2014 The position to draw the instances (x-axis). @ param y \u2014 The position to draw the instances (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis).","title":"drawInstanced"},{"location":"doc/#drawlayer","text":"function love.graphics. drawLayer ( texture : love.Texture, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws a layer of an Array Texture. Open in Browser @ param texture \u2014 The Array Texture to draw. @ param layerindex \u2014 The index of the layer to use when drawing. @ param x \u2014 The position to draw the texture (x-axis). @ param y \u2014 The position to draw the texture (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis).","title":"drawLayer"},{"location":"doc/#ellipse","text":"function love.graphics. ellipse ( mode : \" fill \"|\" line \", x: number, y: number, radiusx: number, radiusy: number) Draws an ellipse. Open in Browser @ param mode \u2014 How to draw the ellipse. @ param x \u2014 The position of the center along x-axis. @ param y \u2014 The position of the center along y-axis. @ param radiusx \u2014 The radius of the ellipse along the x-axis (half the ellipse's width). @ param radiusy \u2014 The radius of the ellipse along the y-axis (half the ellipse's height). -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape.","title":"ellipse"},{"location":"doc/#flushbatch","text":"function love.graphics. flushBatch () Immediately renders any pending automatically batched draws. L\u00d6VE will call this function internally as needed when most state is changed, so it is not necessary to manually call it. The current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch. SpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn. Open in Browser","title":"flushBatch"},{"location":"doc/#getbackgroundcolor","text":"function love.graphics. getBackgroundColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the current background color. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1).","title":"getBackgroundColor"},{"location":"doc/#getblendmode","text":"function love.graphics. getBlendMode () -> mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7) 2. alphamode: \" alphamultiply \"|\" premultiplied \" Gets the blending mode. Open in Browser @ return mode \u2014 The current blend mode. @ return alphamode \u2014 The current blend alpha mode \u2013 it determines how the alpha of drawn objects affects blending. -- -- Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendMode) -- mode : | \" alpha \" -- Alpha blending (normal). The alpha of what's drawn determines its opacity. | \" replace \" -- The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens. | \" screen \" -- 'Screen' blending. | \" add \" -- The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified. | \" subtract \" -- The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified. | \" multiply \" -- The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \" alphamultiply \" BlendAlphaMode is used. | \" lighten \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" darken \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" additive \" -- Additive blend mode. | \" subtractive \" -- Subtractive blend mode. | \" multiplicative \" -- Multiply blend mode. | \" premultiplied \" -- Premultiplied alpha blend mode. -- -- Different ways alpha affects color blending. See BlendMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendAlphaMode) -- alphamode: | \" alphamultiply \" -- The RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode. | \" premultiplied \" -- The RGB values of what's drawn are '''not''' multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously (\" premultiplied alpha \").","title":"getBlendMode"},{"location":"doc/#getcanvas","text":"function love.graphics. getCanvas () -> canvas : love.Canvas Gets the current target Canvas. Open in Browser @ return canvas \u2014 The Canvas set by setCanvas. Returns nil if drawing to the real screen.","title":"getCanvas"},{"location":"doc/#getcanvasformats","text":"function love.graphics. getCanvasFormats () -> formats : table Gets the available Canvas formats, and whether each is supported. Open in Browser @ return formats \u2014 A table containing CanvasFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.","title":"getCanvasFormats"},{"location":"doc/#getcolor_1","text":"function love.graphics. getColor () -> r : number 2. g : number 3. b : number 4. a : number Gets the current color. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ return r \u2014 The red component (0-1). @ return g \u2014 The green component (0-1). @ return b \u2014 The blue component (0-1). @ return a \u2014 The alpha component (0-1).","title":"getColor"},{"location":"doc/#getcolormask","text":"function love.graphics. getColorMask () -> r : boolean 2. g : boolean 3. b : boolean 4. a : boolean Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used. The color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well. Open in Browser @ return r \u2014 Whether the red color component is active when rendering. @ return g \u2014 Whether the green color component is active when rendering. @ return b \u2014 Whether the blue color component is active when rendering. @ return a \u2014 Whether the alpha color component is active when rendering.","title":"getColorMask"},{"location":"doc/#getdpiscale_4","text":"function love.graphics. getDPIScale () -> scale : number Gets the DPI scale factor of the window. The DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case. The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Open in Browser @ return scale \u2014 The pixel scale factor associated with the window.","title":"getDPIScale"},{"location":"doc/#getdefaultfilter","text":"function love.graphics. getDefaultFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number Returns the default scaling filters used with Images, Canvases, and Fonts. Open in Browser @ return min \u2014 Filter mode used when scaling the image down. @ return mag \u2014 Filter mode used when scaling the image up. @ return anisotropy \u2014 Maximum amount of Anisotropic Filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"getDefaultFilter"},{"location":"doc/#getdepthmode","text":"function love.graphics. getDepthMode () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. write: boolean Gets the current depth test mode and whether writing to the depth buffer is enabled. This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images. Open in Browser @ return comparemode \u2014 Depth comparison mode used for depth testing. @ return write \u2014 Whether to write update / write values to the depth buffer when rendering. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"getDepthMode"},{"location":"doc/#getdimensions_8","text":"function love.graphics. getDimensions () -> width : number 2. height : number Gets the width and height in pixels of the window. Open in Browser @ return width \u2014 The width of the window. @ return height \u2014 The height of the window.","title":"getDimensions"},{"location":"doc/#getfont_1","text":"function love.graphics. getFont () -> font : love.Font Gets the current Font object. Open in Browser @ return font \u2014 The current Font. Automatically creates and sets the default font, if none is set yet.","title":"getFont"},{"location":"doc/#getfrontfacewinding","text":"function love.graphics. getFrontFaceWinding () -> winding : \" ccw \"|\" cw \" Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing. This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices. Open in Browser @ return winding \u2014 The winding mode being used. The default winding is counterclockwise ('ccw'). -- -- How Mesh geometry vertices are ordered. -- -- -- [Open in Browser](https://love2d.org/wiki/VertexWinding) -- winding : | \" cw \" -- Clockwise. | \" ccw \" -- Counter-clockwise.","title":"getFrontFaceWinding"},{"location":"doc/#getheight_11","text":"function love.graphics. getHeight () -> height : number Gets the height in pixels of the window. Open in Browser @ return height \u2014 The height of the window.","title":"getHeight"},{"location":"doc/#getimageformats","text":"function love.graphics. getImageFormats () -> formats : table Gets the raw and compressed pixel formats usable for Images, and whether each is supported. Open in Browser @ return formats \u2014 A table containing PixelFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.","title":"getImageFormats"},{"location":"doc/#getlinejoin","text":"function love.graphics. getLineJoin () -> join : \" bevel \"|\" miter \"|\" none \" Gets the line join style. Open in Browser @ return join \u2014 The LineJoin style. -- -- Line join style. -- -- -- [Open in Browser](https://love2d.org/wiki/LineJoin) -- join : | \" miter \" -- The ends of the line segments beveled in an angle so that they join seamlessly. | \" none \" -- No cap applied to the ends of the line segments. | \" bevel \" -- Flattens the point where line segments join together.","title":"getLineJoin"},{"location":"doc/#getlinestyle","text":"function love.graphics. getLineStyle () -> style : \" rough \"|\" smooth \" Gets the line style. Open in Browser @ return style \u2014 The current line style. -- -- The styles in which lines are drawn. -- -- -- [Open in Browser](https://love2d.org/wiki/LineStyle) -- style : | \" rough \" -- Draw rough lines. | \" smooth \" -- Draw smooth lines.","title":"getLineStyle"},{"location":"doc/#getlinewidth","text":"function love.graphics. getLineWidth () -> width : number Gets the current line width. Open in Browser @ return width \u2014 The current line width.","title":"getLineWidth"},{"location":"doc/#getmeshcullmode","text":"function love.graphics. getMeshCullMode () -> mode : \" back \"|\" front \"|\" none \" Gets whether back-facing triangles in a Mesh are culled. Mesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer. Open in Browser @ return mode \u2014 The Mesh face culling mode in use (whether to render everything, cull back-facing triangles, or cull front-facing triangles). -- -- How Mesh geometry is culled when rendering. -- -- -- [Open in Browser](https://love2d.org/wiki/CullMode) -- mode : | \" back \" -- Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing. | \" front \" -- Front-facing triangles in Meshes are culled. | \" none \" -- Both back- and front-facing triangles in Meshes are rendered.","title":"getMeshCullMode"},{"location":"doc/#getpixeldimensions_3","text":"function love.graphics. getPixelDimensions () -> pixelwidth : number 2. pixelheight : number Gets the width and height in pixels of the window. love.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelwidth \u2014 The width of the window in pixels. @ return pixelheight \u2014 The height of the window in pixels.","title":"getPixelDimensions"},{"location":"doc/#getpixelheight_3","text":"function love.graphics. getPixelHeight () -> pixelheight : number Gets the height in pixels of the window. The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelheight \u2014 The height of the window in pixels.","title":"getPixelHeight"},{"location":"doc/#getpixelwidth_3","text":"function love.graphics. getPixelWidth () -> pixelwidth : number Gets the width in pixels of the window. The graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example). Open in Browser @ return pixelwidth \u2014 The width of the window in pixels.","title":"getPixelWidth"},{"location":"doc/#getpointsize","text":"function love.graphics. getPointSize () -> size : number Gets the point size. Open in Browser @ return size \u2014 The current point size.","title":"getPointSize"},{"location":"doc/#getrendererinfo","text":"function love.graphics. getRendererInfo () -> name : string 2. version : string 3. vendor : string 4. device : string Gets information about the system's video card and drivers. Open in Browser @ return name \u2014 The name of the renderer, e.g. 'OpenGL' or 'OpenGL ES'. @ return version \u2014 The version of the renderer with some extra driver-dependent version info, e.g. '2.1 INTEL-8.10.44'. @ return vendor \u2014 The name of the graphics card vendor, e.g. 'Intel Inc'. @ return device \u2014 The name of the graphics card, e.g. 'Intel HD Graphics 3000 OpenGL Engine'.","title":"getRendererInfo"},{"location":"doc/#getscissor","text":"function love.graphics. getScissor () -> x : number 2. y : number 3. width : number 4. height : number Gets the current scissor box. Open in Browser @ return x \u2014 The x-component of the top-left point of the box. @ return y \u2014 The y-component of the top-left point of the box. @ return width \u2014 The width of the box. @ return height \u2014 The height of the box.","title":"getScissor"},{"location":"doc/#getshader","text":"function love.graphics. getShader () -> shader : love.Shader Gets the current Shader. Returns nil if none is set. Open in Browser @ return shader \u2014 The currently active Shader, or nil if none is set.","title":"getShader"},{"location":"doc/#getstackdepth","text":"function love.graphics. getStackDepth () -> depth : number Gets the current depth of the transform / state stack (the number of pushes without corresponding pops). Open in Browser @ return depth \u2014 The current depth of the transform and state love.graphics stack.","title":"getStackDepth"},{"location":"doc/#getstats","text":"function love.graphics. getStats () -> stats : { drawcalls: number, canvasswitches : number, texturememory : number, images : number, canvases : number, fonts : number, shaderswitches : number, drawcallsbatched : number } Gets performance-related rendering statistics. Open in Browser @ return stats \u2014 A table with the following fields:","title":"getStats"},{"location":"doc/#getstenciltest","text":"function love.graphics. getStencilTest () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. comparevalue: number Gets the current stencil test configuration. When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil. Each Canvas has its own per-pixel stencil values. Open in Browser @ return comparemode \u2014 The type of comparison that is made for each pixel. Will be 'always' if stencil testing is disabled. @ return comparevalue \u2014 The value used when comparing with the stencil value of each pixel. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"getStencilTest"},{"location":"doc/#getsupported","text":"function love.graphics. getSupported () -> features : table Gets the optional graphics features and whether they're supported on the system. Some older or low-end systems don't always support all graphics features. Open in Browser @ return features \u2014 A table containing GraphicsFeature keys, and boolean values indicating whether each feature is supported.","title":"getSupported"},{"location":"doc/#getsystemlimits","text":"function love.graphics. getSystemLimits () -> limits : table Gets the system-dependent maximum values for love.graphics features. Open in Browser @ return limits \u2014 A table containing GraphicsLimit keys, and number values.","title":"getSystemLimits"},{"location":"doc/#gettexturetypes","text":"function love.graphics. getTextureTypes () -> texturetypes : table Gets the available texture types, and whether each is supported. Open in Browser @ return texturetypes \u2014 A table containing TextureTypes as keys, and a boolean indicating whether the type is supported as values. Not all systems support all types.","title":"getTextureTypes"},{"location":"doc/#getwidth_10","text":"function love.graphics. getWidth () -> width : number Gets the width in pixels of the window. Open in Browser @ return width \u2014 The width of the window.","title":"getWidth"},{"location":"doc/#intersectscissor","text":"function love.graphics. intersectScissor ( x : number, y : number, width : number, height : number) Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor. If no scissor is active yet, it behaves like love.graphics.setScissor. The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...). Open in Browser @ param x \u2014 The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. @ param y \u2014 The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle. @ param width \u2014 The width of the rectangle to intersect with the existing scissor rectangle. @ param height \u2014 The height of the rectangle to intersect with the existing scissor rectangle.","title":"intersectScissor"},{"location":"doc/#inversetransformpoint_1","text":"function love.graphics. inverseTransformPoint ( screenX : number, screenY : number) -> globalX : number 2. globalY : number Converts the given 2D position from screen-space into global coordinates. This effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects. Open in Browser @ param screenX \u2014 The x component of the screen-space position. @ param screenY \u2014 The y component of the screen-space position. @ return globalX \u2014 The x component of the position in global coordinates. @ return globalY \u2014 The y component of the position in global coordinates.","title":"inverseTransformPoint"},{"location":"doc/#isactive_5","text":"function love.graphics. isActive () -> active : boolean Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash. The graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case. Open in Browser @ return active \u2014 Whether the graphics module is active and able to be used.","title":"isActive"},{"location":"doc/#isgammacorrect","text":"function love.graphics. isGammaCorrect () -> gammacorrect : boolean Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf. Not all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3. Open in Browser @ return gammacorrect \u2014 True if gamma-correct rendering is supported and was enabled in love.conf, false otherwise.","title":"isGammaCorrect"},{"location":"doc/#iswireframe","text":"function love.graphics. isWireframe () -> wireframe : boolean Gets whether wireframe mode is used when drawing. Open in Browser @ return wireframe \u2014 True if wireframe lines are used when drawing, false if it's not.","title":"isWireframe"},{"location":"doc/#line","text":"function love.graphics. line ( x1 : number, y1 : number, x2 : number, y2 : number, ... number ) Draws lines between points. Open in Browser @ param x1 \u2014 The position of first point on the x-axis. @ param y1 \u2014 The position of first point on the y-axis. @ param x2 \u2014 The position of second point on the x-axis. @ param y2 \u2014 The position of second point on the y-axis.","title":"line"},{"location":"doc/#newarrayimage","text":"function love.graphics. newArrayImage ( slices : table, settings ? : { mipmaps : boolean, linear : boolean, dpiscale : number }) -> image : love.Image Creates a new array Image. An array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do \u2013 although every sub-image must have the same dimensions. A specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader. To use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component. Open in Browser @ param slices \u2014 A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table. @ param settings \u2014 Optional table of settings to configure the array image, containing the following fields: @ return image \u2014 An Array Image object.","title":"newArrayImage"},{"location":"doc/#newcanvas","text":"function love.graphics. newCanvas () -> canvas : love.Canvas Creates a new Canvas object for offscreen rendering. Open in Browser @ return canvas \u2014 A new Canvas with dimensions equal to the window's size in pixels.","title":"newCanvas"},{"location":"doc/#newcubeimage","text":"function love.graphics. newCubeImage ( filename : string, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image Creates a new cubemap Image. Cubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send). To use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates. Each face in a cubemap image must have square dimensions. For variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image: +y +z +x -z -y -x or: +y -x +z +x -z -y or: +x -x +y -y +z -z or: +x -x +y -y +z -z Open in Browser @ param filename \u2014 The filepath to a cubemap image file (or a File, FileData, or ImageData). @ param settings \u2014 Optional table of settings to configure the cubemap image, containing the following fields: @ return image \u2014 An cubemap Image object.","title":"newCubeImage"},{"location":"doc/#newfont","text":"function love.graphics. newFont ( filename : string) -> font : love.Font Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object. All variants which accept a filename can also accept a Data object instead. Open in Browser @ param filename \u2014 The filepath to the BMFont or TrueType font file. @ return font \u2014 A Font object which can be used to draw text on screen.","title":"newFont"},{"location":"doc/#newimage","text":"function love.graphics. newImage ( filename : string, settings ? : { dpiscale : number, linear : boolean, mipmaps : boolean }) -> image : love.Image Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image. Open in Browser @ param filename \u2014 The filepath to the image file. @ param settings \u2014 A table containing the following fields: @ return image \u2014 A new Image object which can be drawn on screen.","title":"newImage"},{"location":"doc/#newimagefont","text":"function love.graphics. newImageFont ( filename : string, glyphs : string) -> font : love.Font Creates a new specifically formatted image. In versions prior to 0.9.0, L\u00d6VE expects ISO 8859-1 encoding for the glyphs string. Open in Browser @ param filename \u2014 The filepath to the image file. @ param glyphs \u2014 A string of the characters in the image in order from left to right. @ return font \u2014 A Font object which can be used to draw text on screen.","title":"newImageFont"},{"location":"doc/#newmesh","text":"function love.graphics. newMesh ( vertices : { [\"1\"] : number, [ \"2\" ]: number , [ \"3\" ]: number , [ \"4\" ]: number , [ \"5\" ]: number , [ \"6\" ]: number , [ \"7\" ]: number , [ \"8\" ]: number }, mode ? : \"fan\" | \"points\" | \"strip\" | \"triangles\" , usage ? : \"dynamic\" | \"static\" | \"stream\" ) -> mesh : love.Mesh Creates a new Mesh. Use Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param vertices \u2014 The table filled with vertex information tables for each vertex as follows: @ param mode \u2014 How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons. @ param usage \u2014 The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance. @ return mesh \u2014 The new mesh. -- -- How a Mesh's vertices are used when drawing. -- -- -- [Open in Browser](https://love2d.org/wiki/MeshDrawMode) -- mode : | \" fan \" -- The vertices create a \" fan \" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons. | \" strip \" -- The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on. | \" triangles \" -- The vertices create unconnected triangles. | \" points \" -- The vertices are drawn as unconnected points (see love.graphics.setPointSize.) -- -- Usage hints for SpriteBatches and Meshes to optimize data storage and access. -- -- -- [Open in Browser](https://love2d.org/wiki/SpriteBatchUsage) -- usage: | \" dynamic \" -- The object's data will change occasionally during its lifetime. | \" static \" -- The object will not be modified after initial sprites or vertices are added. | \" stream \" -- The object data will always change between draws.","title":"newMesh"},{"location":"doc/#newparticlesystem","text":"function love.graphics. newParticleSystem ( image : love.Image, buffer ? : number ) -> system : love.ParticleSystem Creates a new ParticleSystem. Open in Browser @ param image \u2014 The image to use. @ param buffer \u2014 The max number of particles at the same time. @ return system \u2014 A new ParticleSystem.","title":"newParticleSystem"},{"location":"doc/#newquad","text":"function love.graphics. newQuad ( x : number, y : number, width : number, height : number, sw : number, sh : number) -> quad : love.Quad Creates a new Quad. The purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation. Open in Browser @ param x \u2014 The top-left position in the Image along the x-axis. @ param y \u2014 The top-left position in the Image along the y-axis. @ param width \u2014 The width of the Quad in the Image. (Must be greater than 0.) @ param height \u2014 The height of the Quad in the Image. (Must be greater than 0.) @ param sw \u2014 The reference width, the width of the Image. (Must be greater than 0.) @ param sh \u2014 The reference height, the height of the Image. (Must be greater than 0.) @ return quad \u2014 The new Quad.","title":"newQuad"},{"location":"doc/#newshader","text":"function love.graphics. newShader ( code : string) -> shader : love.Shader Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both. Shaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader. Open in Browser @ param code \u2014 The pixel shader or vertex shader code, or a filename pointing to a file with the code. @ return shader \u2014 A Shader object for use in drawing operations.","title":"newShader"},{"location":"doc/#newspritebatch","text":"function love.graphics. newSpriteBatch ( image : love.Image, maxsprites ? : number ) -> spriteBatch : love.SpriteBatch Creates a new SpriteBatch object. Open in Browser @ param image \u2014 The Image to use for the sprites. @ param maxsprites \u2014 The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch. @ return spriteBatch \u2014 The new SpriteBatch.","title":"newSpriteBatch"},{"location":"doc/#newtext","text":"function love.graphics. newText ( font : love.Font, textstring ? : string ) -> text : love.Text Creates a new drawable Text object. Open in Browser @ param font \u2014 The font to use for the text. @ param textstring \u2014 The initial string of text that the new Text object will contain. May be nil. @ return text \u2014 The new drawable Text object.","title":"newText"},{"location":"doc/#newvideo","text":"function love.graphics. newVideo ( filename : string) -> video : love.Video Creates a new drawable Video. Currently only Ogg Theora video files are supported. Open in Browser @ param filename \u2014 The file path to the Ogg Theora video file. @ return video \u2014 A new Video.","title":"newVideo"},{"location":"doc/#newvolumeimage","text":"function love.graphics. newVolumeImage ( layers : table, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image Creates a new volume (3D) Image. Volume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send). To use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1). Volume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table. Array images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them. Open in Browser @ param layers \u2014 A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap. @ param settings \u2014 Optional table of settings to configure the volume image, containing the following fields: @ return image \u2014 A volume Image object.","title":"newVolumeImage"},{"location":"doc/#origin_4","text":"function love.graphics. origin () Resets the current coordinate transformation. This function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults. Open in Browser","title":"origin"},{"location":"doc/#points","text":"function love.graphics. points ( x : number, y : number, ... number ) Draws one or more points. Open in Browser @ param x \u2014 The position of the first point on the x-axis. @ param y \u2014 The position of the first point on the y-axis.","title":"points"},{"location":"doc/#polygon","text":"function love.graphics. polygon ( mode : \" fill \"|\" line \", ...number) Draw a polygon. Following the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices. Open in Browser @ param mode \u2014 How to draw the polygon. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape.","title":"polygon"},{"location":"doc/#pop_6","text":"function love.graphics. pop () Pops the current coordinate transformation from the transformation stack. This function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push. Open in Browser","title":"pop"},{"location":"doc/#present","text":"function love.graphics. present () Displays the results of drawing operations on the screen. This function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function. Open in Browser","title":"present"},{"location":"doc/#print","text":"function love.graphics. print ( text : string| number , x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws text on screen. If no Font is set, one will be created and set (once) if needed. As of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first. If you don't script with this in mind, the text won't be in the right position, or possibly even on screen. love.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param text \u2014 The text to draw. @ param x \u2014 The position to draw the object (x-axis). @ param y \u2014 The position to draw the object (y-axis). @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis).","title":"print"},{"location":"doc/#printf","text":"function love.graphics. printf ( text : string| number , x : number, y : number, limit : number, align ? : \"center\" | \"justify\" | \"left\" | \"right\" , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number ) Draws formatted text, with word wrap and alignment. See additional notes in love.graphics.print. The word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change. In version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case. In versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param text \u2014 A text string. @ param x \u2014 The position on the x-axis. @ param y \u2014 The position on the y-axis. @ param limit \u2014 Wrap the line after this many horizontal pixels. @ param align \u2014 The alignment. @ param r \u2014 Orientation (radians). @ param sx \u2014 Scale factor (x-axis). @ param sy \u2014 Scale factor (y-axis). @ param ox \u2014 Origin offset (x-axis). @ param oy \u2014 Origin offset (y-axis). @ param kx \u2014 Shearing factor (x-axis). @ param ky \u2014 Shearing factor (y-axis). -- -- Text alignment. -- -- -- [Open in Browser](https://love2d.org/wiki/AlignMode) -- align : | \" center \" -- Align text center. | \" left \" -- Align text left. | \" right \" -- Align text right. | \" justify \" -- Align text both left and right.","title":"printf"},{"location":"doc/#push_6","text":"function love.graphics. push () Copies and pushes the current coordinate transformation to the transformation stack. This function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push. Open in Browser","title":"push"},{"location":"doc/#rectangle","text":"function love.graphics. rectangle ( mode : \" fill \"|\" line \", x: number, y: number, width: number, height: number) Draws a rectangle. Open in Browser @ param mode \u2014 How to draw the rectangle. @ param x \u2014 The position of top-left corner along the x-axis. @ param y \u2014 The position of top-left corner along the y-axis. @ param width \u2014 Width of the rectangle. @ param height \u2014 Height of the rectangle. -- -- Controls whether shapes are drawn as an outline, or filled. -- -- -- [Open in Browser](https://love2d.org/wiki/DrawMode) -- mode : | \" fill \" -- Draw filled shape. | \" line \" -- Draw outlined shape.","title":"rectangle"},{"location":"doc/#replacetransform","text":"function love.graphics. replaceTransform ( transform : love.Transform) Replaces the current coordinate transformation with the given Transform object. Open in Browser @ param transform \u2014 The Transform object to replace the current graphics coordinate transform with.","title":"replaceTransform"},{"location":"doc/#reset_2","text":"function love.graphics. reset () Resets the current graphics settings. Calling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0. Open in Browser","title":"reset"},{"location":"doc/#rotate_2","text":"function love.graphics. rotate ( angle : number) Rotates the coordinate system in two dimensions. Calling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits. Open in Browser @ param angle \u2014 The amount to rotate the coordinate system in radians.","title":"rotate"},{"location":"doc/#scale_6","text":"function love.graphics. scale ( sx : number, sy ? : number ) Scales the coordinate system in two dimensions. By default the coordinate system in L\u00d6VE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation. After scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation. Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome. Scaling lasts until love.draw() exits. Open in Browser @ param sx \u2014 The scaling in the direction of the x-axis. @ param sy \u2014 The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx.","title":"scale"},{"location":"doc/#setbackgroundcolor","text":"function love.graphics. setBackgroundColor ( red : number, green : number, blue : number, alpha ? : number ) Sets the background color. Open in Browser @ param red \u2014 The red component (0-1). @ param green \u2014 The green component (0-1). @ param blue \u2014 The blue component (0-1). @ param alpha \u2014 The alpha component (0-1).","title":"setBackgroundColor"},{"location":"doc/#setblendmode","text":"function love.graphics. setBlendMode ( mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7)) Sets the blending mode. Open in Browser @ param mode \u2014 The blend mode to use. -- -- Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes. -- -- -- [Open in Browser](https://love2d.org/wiki/BlendMode) -- mode : | \" alpha \" -- Alpha blending (normal). The alpha of what's drawn determines its opacity. | \" replace \" -- The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens. | \" screen \" -- 'Screen' blending. | \" add \" -- The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified. | \" subtract \" -- The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified. | \" multiply \" -- The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \" alphamultiply \" BlendAlphaMode is used. | \" lighten \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" darken \" -- The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \" premultiplied \" BlendAlphaMode is used in love.graphics.setBlendMode. | \" additive \" -- Additive blend mode. | \" subtractive \" -- Subtractive blend mode. | \" multiplicative \" -- Multiply blend mode. | \" premultiplied \" -- Premultiplied alpha blend mode.","title":"setBlendMode"},{"location":"doc/#setcanvas","text":"function love.graphics. setCanvas ( canvas : love.Canvas, mipmap ? : number ) Captures drawing operations to a Canvas. Open in Browser @ param canvas \u2014 The new target. @ param mipmap \u2014 The mipmap level to render to, for Canvases with mipmaps.","title":"setCanvas"},{"location":"doc/#setcolor_1","text":"function love.graphics. setColor ( red : number, green : number, blue : number, alpha ? : number ) Sets the color used for drawing. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param red \u2014 The amount of red. @ param green \u2014 The amount of green. @ param blue \u2014 The amount of blue. @ param alpha \u2014 The amount of alpha. The alpha value will be applied to all subsequent draw operations, even the drawing of an image.","title":"setColor"},{"location":"doc/#setcolormask","text":"function love.graphics. setColorMask ( red : boolean, green : boolean, blue : boolean, alpha : boolean) Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels. Open in Browser @ param red \u2014 Render red component. @ param green \u2014 Render green component. @ param blue \u2014 Render blue component. @ param alpha \u2014 Render alpha component.","title":"setColorMask"},{"location":"doc/#setdefaultfilter","text":"function love.graphics. setDefaultFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number) Sets the default scaling filters used with Images, Canvases, and Fonts. Open in Browser @ param min \u2014 Filter mode used when scaling the image down. @ param mag \u2014 Filter mode used when scaling the image up. @ param anisotropy \u2014 Maximum amount of Anisotropic Filtering used. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- min : | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation. -- -- How the image is filtered when scaling. -- -- -- [Open in Browser](https://love2d.org/wiki/FilterMode) -- mag: | \" linear \" -- Scale image with linear interpolation. | \" nearest \" -- Scale image with nearest neighbor interpolation.","title":"setDefaultFilter"},{"location":"doc/#setdepthmode","text":"function love.graphics. setDepthMode ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), write: boolean) Configures depth testing and writing to the depth buffer. This is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images. Open in Browser @ param comparemode \u2014 Depth comparison mode used for depth testing. @ param write \u2014 Whether to write update / write values to the depth buffer when rendering. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"setDepthMode"},{"location":"doc/#setfont_1","text":"function love.graphics. setFont ( font : love.Font) Set an already-loaded Font as the current font or create and load a new one from the file and size. It's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage. Open in Browser @ param font \u2014 The Font object to use.","title":"setFont"},{"location":"doc/#setfrontfacewinding","text":"function love.graphics. setFrontFaceWinding ( winding : \" ccw \"|\" cw \") Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing. This is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices. Open in Browser @ param winding \u2014 The winding mode to use. The default winding is counterclockwise ('ccw'). -- -- How Mesh geometry vertices are ordered. -- -- -- [Open in Browser](https://love2d.org/wiki/VertexWinding) -- winding : | \" cw \" -- Clockwise. | \" ccw \" -- Counter-clockwise.","title":"setFrontFaceWinding"},{"location":"doc/#setlinejoin","text":"function love.graphics. setLineJoin ( join : \" bevel \"|\" miter \"|\" none \") Sets the line join style. See LineJoin for the possible options. Open in Browser @ param join \u2014 The LineJoin to use. -- -- Line join style. -- -- -- [Open in Browser](https://love2d.org/wiki/LineJoin) -- join : | \" miter \" -- The ends of the line segments beveled in an angle so that they join seamlessly. | \" none \" -- No cap applied to the ends of the line segments. | \" bevel \" -- Flattens the point where line segments join together.","title":"setLineJoin"},{"location":"doc/#setlinestyle","text":"function love.graphics. setLineStyle ( style : \" rough \"|\" smooth \") Sets the line style. Open in Browser @ param style \u2014 The LineStyle to use. Line styles include smooth and rough. -- -- The styles in which lines are drawn. -- -- -- [Open in Browser](https://love2d.org/wiki/LineStyle) -- style : | \" rough \" -- Draw rough lines. | \" smooth \" -- Draw smooth lines.","title":"setLineStyle"},{"location":"doc/#setlinewidth","text":"function love.graphics. setLineWidth ( width : number) Sets the line width. Open in Browser @ param width \u2014 The width of the line.","title":"setLineWidth"},{"location":"doc/#setmeshcullmode","text":"function love.graphics. setMeshCullMode ( mode : \" back \"|\" front \"|\" none \") Sets whether back-facing triangles in a Mesh are culled. This is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer. By default, both front- and back-facing triangles in Meshes are rendered. Open in Browser @ param mode \u2014 The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles). -- -- How Mesh geometry is culled when rendering. -- -- -- [Open in Browser](https://love2d.org/wiki/CullMode) -- mode : | \" back \" -- Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing. | \" front \" -- Front-facing triangles in Meshes are culled. | \" none \" -- Both back- and front-facing triangles in Meshes are rendered.","title":"setMeshCullMode"},{"location":"doc/#setnewfont","text":"function love.graphics. setNewFont ( size ? : number ) -> font : love.Font Creates and sets a new Font. Open in Browser @ param size \u2014 The size of the font. @ return font \u2014 The new font.","title":"setNewFont"},{"location":"doc/#setpointsize","text":"function love.graphics. setPointSize ( size : number) Sets the point size. Open in Browser @ param size \u2014 The new point size.","title":"setPointSize"},{"location":"doc/#setscissor","text":"function love.graphics. setScissor ( x : number, y : number, width : number, height : number) Sets or disables scissor. The scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. The dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...). Open in Browser @ param x \u2014 x coordinate of upper left corner. @ param y \u2014 y coordinate of upper left corner. @ param width \u2014 width of clipping rectangle. @ param height \u2014 height of clipping rectangle.","title":"setScissor"},{"location":"doc/#setshader","text":"function love.graphics. setShader ( shader : love.Shader) Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified. Open in Browser @ param shader \u2014 The new shader.","title":"setShader"},{"location":"doc/#setstenciltest","text":"function love.graphics. setStencilTest ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), comparevalue: number) Configures or disables stencil testing. When stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil. Open in Browser @ param comparemode \u2014 The type of comparison to make for each pixel. @ param comparevalue \u2014 The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255. -- -- Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches. -- -- -- [Open in Browser](https://love2d.org/wiki/CompareMode) -- comparemode : | \" equal \" -- * stencil tests: the stencil value of the pixel must be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel. | \" notequal \" -- * stencil tests: the stencil value of the pixel must not be equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel. | \" less \" -- * stencil tests: the stencil value of the pixel must be less than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel. | \" lequal \" -- * stencil tests: the stencil value of the pixel must be less than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel. | \" gequal \" -- * stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel. | \" greater \" -- * stencil tests: the stencil value of the pixel must be greater than the supplied value. -- * depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel. | \" never \" -- Objects will never be drawn. | \" always \" -- Objects will always be drawn. Effectively disables the depth or stencil test.","title":"setStencilTest"},{"location":"doc/#setwireframe","text":"function love.graphics. setWireframe ( enable : boolean) Sets whether wireframe lines will be used when drawing. Open in Browser @ param enable \u2014 True to enable wireframe mode when drawing, false to disable it.","title":"setWireframe"},{"location":"doc/#shear_1","text":"function love.graphics. shear ( kx : number, ky : number) Shears the coordinate system. Open in Browser @ param kx \u2014 The shear factor on the x-axis. @ param ky \u2014 The shear factor on the y-axis.","title":"shear"},{"location":"doc/#stencil","text":"function love.graphics. stencil ( stencilfunction : function, action ? : \"decrement\" | \"decrementwrap\" | \"increment\" | \"incrementwrap\" | \"invert\" ...(+ 1 ), value ? : number , keepvalues ? : boolean ) Draws geometry as a stencil. The geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel. Stencil values are integers within the range of 255. Open in Browser @ param stencilfunction \u2014 Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry. @ param action \u2014 How to modify any stencil values of pixels that are touched by what's drawn in the stencil function. @ param value \u2014 The new stencil value to use for pixels if the 'replace' stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255. @ param keepvalues \u2014 True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values. -- -- How a stencil function modifies the stencil values of pixels it touches. -- -- -- [Open in Browser](https://love2d.org/wiki/StencilAction) -- action : | \" replace \" -- The stencil value of a pixel will be replaced by the value specified in love.graphics.stencil, if any object touches the pixel. | \" increment \" -- The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255. | \" decrement \" -- The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0. | \" incrementwrap \" -- The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0. | \" decrementwrap \" -- The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255. | \" invert \" -- The stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255.","title":"stencil"},{"location":"doc/#transformpoint_1","text":"function love.graphics. transformPoint ( globalX : number, globalY : number) -> screenX : number 2. screenY : number Converts the given 2D position from global coordinates into screen-space. This effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects. Open in Browser @ param globalX \u2014 The x component of the position in global coordinates. @ param globalY \u2014 The y component of the position in global coordinates. @ return screenX \u2014 The x component of the position with graphics transformations applied. @ return screenY \u2014 The y component of the position with graphics transformations applied.","title":"transformPoint"},{"location":"doc/#translate_2","text":"function love.graphics. translate ( dx : number, dy : number) Translates the coordinate system in two dimensions. When this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy. Scale and translate are not commutative operations, therefore, calling them in different orders will change the outcome. This change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push. Translating using whole numbers will prevent tearing/blurring of images and fonts draw after translating. Open in Browser @ param dx \u2014 The translation relative to the x-axis. @ param dy \u2014 The translation relative to the y-axis.","title":"translate"},{"location":"doc/#validateshader","text":"function love.graphics. validateShader ( gles : boolean, code : string) -> status : boolean 2. message : string Validates shader code. Check if specified shader code does not contain any errors. Open in Browser @ param gles \u2014 Validate code as GLSL ES shader. @ param code \u2014 The pixel shader or vertex shader code, or a filename pointing to a file with the code. @ return status \u2014 true if specified shader code doesn't contain any errors. false otherwise. @ return message \u2014 Reason why shader code validation failed (or nil if validation succeded).","title":"validateShader"},{"location":"doc/#lovegraphics_1","text":"love .graphics","title":"love.graphics"},{"location":"doc/#lovegraphicsapplytransform","text":"function love.graphics. applyTransform ( transform : love.Transform)","title":"love.graphics.applyTransform"},{"location":"doc/#lovegraphicsarc","text":"function love.graphics. arc ( drawmode : \" fill \"|\" line \", x: number, y: number, radius: number, angle1: number, angle2: number, segments?: number)","title":"love.graphics.arc"},{"location":"doc/#lovegraphicscapturescreenshot","text":"function love.graphics. captureScreenshot ( filename : string)","title":"love.graphics.captureScreenshot"},{"location":"doc/#lovegraphicscircle","text":"function love.graphics. circle ( mode : \" fill \"|\" line \", x: number, y: number, radius: number)","title":"love.graphics.circle"},{"location":"doc/#lovegraphicsclear","text":"function love.graphics. clear ()","title":"love.graphics.clear"},{"location":"doc/#lovegraphicsdiscard","text":"function love.graphics. discard ( discardcolor ? : boolean , discardstencil ? : boolean )","title":"love.graphics.discard"},{"location":"doc/#lovegraphicsdraw","text":"function love.graphics. draw ( drawable : love.Drawable, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number )","title":"love.graphics.draw"},{"location":"doc/#lovegraphicsdrawinstanced","text":"function love.graphics. drawInstanced ( mesh : love.Mesh, instancecount : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number )","title":"love.graphics.drawInstanced"},{"location":"doc/#lovegraphicsdrawlayer","text":"function love.graphics. drawLayer ( texture : love.Texture, layerindex : number, x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number )","title":"love.graphics.drawLayer"},{"location":"doc/#lovegraphicsellipse","text":"function love.graphics. ellipse ( mode : \" fill \"|\" line \", x: number, y: number, radiusx: number, radiusy: number)","title":"love.graphics.ellipse"},{"location":"doc/#lovegraphicsflushbatch","text":"function love.graphics. flushBatch ()","title":"love.graphics.flushBatch"},{"location":"doc/#lovegraphicsgetbackgroundcolor","text":"function love.graphics. getBackgroundColor () -> r : number 2. g : number 3. b : number 4. a : number","title":"love.graphics.getBackgroundColor"},{"location":"doc/#lovegraphicsgetblendmode","text":"function love.graphics. getBlendMode () -> mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7) 2. alphamode: \" alphamultiply \"|\" premultiplied \"","title":"love.graphics.getBlendMode"},{"location":"doc/#lovegraphicsgetcanvas","text":"function love.graphics. getCanvas () -> canvas : love.Canvas","title":"love.graphics.getCanvas"},{"location":"doc/#lovegraphicsgetcanvasformats","text":"function love.graphics. getCanvasFormats () -> formats : table","title":"love.graphics.getCanvasFormats"},{"location":"doc/#lovegraphicsgetcolor","text":"function love.graphics. getColor () -> r : number 2. g : number 3. b : number 4. a : number","title":"love.graphics.getColor"},{"location":"doc/#lovegraphicsgetcolormask","text":"function love.graphics. getColorMask () -> r : boolean 2. g : boolean 3. b : boolean 4. a : boolean","title":"love.graphics.getColorMask"},{"location":"doc/#lovegraphicsgetdpiscale","text":"function love.graphics. getDPIScale () -> scale : number","title":"love.graphics.getDPIScale"},{"location":"doc/#lovegraphicsgetdefaultfilter","text":"function love.graphics. getDefaultFilter () -> min : \" linear \"|\" nearest \" 2. mag: \" linear \"|\" nearest \" 3. anisotropy: number","title":"love.graphics.getDefaultFilter"},{"location":"doc/#lovegraphicsgetdepthmode","text":"function love.graphics. getDepthMode () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. write: boolean","title":"love.graphics.getDepthMode"},{"location":"doc/#lovegraphicsgetdimensions","text":"function love.graphics. getDimensions () -> width : number 2. height : number","title":"love.graphics.getDimensions"},{"location":"doc/#lovegraphicsgetfont","text":"function love.graphics. getFont () -> font : love.Font","title":"love.graphics.getFont"},{"location":"doc/#lovegraphicsgetfrontfacewinding","text":"function love.graphics. getFrontFaceWinding () -> winding : \" ccw \"|\" cw \"","title":"love.graphics.getFrontFaceWinding"},{"location":"doc/#lovegraphicsgetheight","text":"function love.graphics. getHeight () -> height : number","title":"love.graphics.getHeight"},{"location":"doc/#lovegraphicsgetimageformats","text":"function love.graphics. getImageFormats () -> formats : table","title":"love.graphics.getImageFormats"},{"location":"doc/#lovegraphicsgetlinejoin","text":"function love.graphics. getLineJoin () -> join : \" bevel \"|\" miter \"|\" none \"","title":"love.graphics.getLineJoin"},{"location":"doc/#lovegraphicsgetlinestyle","text":"function love.graphics. getLineStyle () -> style : \" rough \"|\" smooth \"","title":"love.graphics.getLineStyle"},{"location":"doc/#lovegraphicsgetlinewidth","text":"function love.graphics. getLineWidth () -> width : number","title":"love.graphics.getLineWidth"},{"location":"doc/#lovegraphicsgetmeshcullmode","text":"function love.graphics. getMeshCullMode () -> mode : \" back \"|\" front \"|\" none \"","title":"love.graphics.getMeshCullMode"},{"location":"doc/#lovegraphicsgetpixeldimensions","text":"function love.graphics. getPixelDimensions () -> pixelwidth : number 2. pixelheight : number","title":"love.graphics.getPixelDimensions"},{"location":"doc/#lovegraphicsgetpixelheight","text":"function love.graphics. getPixelHeight () -> pixelheight : number","title":"love.graphics.getPixelHeight"},{"location":"doc/#lovegraphicsgetpixelwidth","text":"function love.graphics. getPixelWidth () -> pixelwidth : number","title":"love.graphics.getPixelWidth"},{"location":"doc/#lovegraphicsgetpointsize","text":"function love.graphics. getPointSize () -> size : number","title":"love.graphics.getPointSize"},{"location":"doc/#lovegraphicsgetrendererinfo","text":"function love.graphics. getRendererInfo () -> name : string 2. version : string 3. vendor : string 4. device : string","title":"love.graphics.getRendererInfo"},{"location":"doc/#lovegraphicsgetscissor","text":"function love.graphics. getScissor () -> x : number 2. y : number 3. width : number 4. height : number","title":"love.graphics.getScissor"},{"location":"doc/#lovegraphicsgetshader","text":"function love.graphics. getShader () -> shader : love.Shader","title":"love.graphics.getShader"},{"location":"doc/#lovegraphicsgetstackdepth","text":"function love.graphics. getStackDepth () -> depth : number","title":"love.graphics.getStackDepth"},{"location":"doc/#lovegraphicsgetstats","text":"function love.graphics. getStats () -> stats : { drawcalls: number, canvasswitches : number, texturememory : number, images : number, canvases : number, fonts : number, shaderswitches : number, drawcallsbatched : number }","title":"love.graphics.getStats"},{"location":"doc/#lovegraphicsgetstenciltest","text":"function love.graphics. getStencilTest () -> comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3) 2. comparevalue: number","title":"love.graphics.getStencilTest"},{"location":"doc/#lovegraphicsgetsupported","text":"function love.graphics. getSupported () -> features : table","title":"love.graphics.getSupported"},{"location":"doc/#lovegraphicsgetsystemlimits","text":"function love.graphics. getSystemLimits () -> limits : table","title":"love.graphics.getSystemLimits"},{"location":"doc/#lovegraphicsgettexturetypes","text":"function love.graphics. getTextureTypes () -> texturetypes : table","title":"love.graphics.getTextureTypes"},{"location":"doc/#lovegraphicsgetwidth","text":"function love.graphics. getWidth () -> width : number","title":"love.graphics.getWidth"},{"location":"doc/#lovegraphicsintersectscissor","text":"function love.graphics. intersectScissor ( x : number, y : number, width : number, height : number)","title":"love.graphics.intersectScissor"},{"location":"doc/#lovegraphicsinversetransformpoint","text":"function love.graphics. inverseTransformPoint ( screenX : number, screenY : number) -> globalX : number 2. globalY : number","title":"love.graphics.inverseTransformPoint"},{"location":"doc/#lovegraphicsisactive","text":"function love.graphics. isActive () -> active : boolean","title":"love.graphics.isActive"},{"location":"doc/#lovegraphicsisgammacorrect","text":"function love.graphics. isGammaCorrect () -> gammacorrect : boolean","title":"love.graphics.isGammaCorrect"},{"location":"doc/#lovegraphicsiswireframe","text":"function love.graphics. isWireframe () -> wireframe : boolean","title":"love.graphics.isWireframe"},{"location":"doc/#lovegraphicsline","text":"function love.graphics. line ( x1 : number, y1 : number, x2 : number, y2 : number, ... number )","title":"love.graphics.line"},{"location":"doc/#lovegraphicsnewarrayimage","text":"function love.graphics. newArrayImage ( slices : table, settings ? : { mipmaps : boolean, linear : boolean, dpiscale : number }) -> image : love.Image","title":"love.graphics.newArrayImage"},{"location":"doc/#lovegraphicsnewcanvas","text":"function love.graphics. newCanvas () -> canvas : love.Canvas","title":"love.graphics.newCanvas"},{"location":"doc/#lovegraphicsnewcubeimage","text":"function love.graphics. newCubeImage ( filename : string, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image","title":"love.graphics.newCubeImage"},{"location":"doc/#lovegraphicsnewfont","text":"function love.graphics. newFont ( filename : string) -> font : love.Font","title":"love.graphics.newFont"},{"location":"doc/#lovegraphicsnewimage","text":"function love.graphics. newImage ( filename : string, settings ? : { dpiscale : number, linear : boolean, mipmaps : boolean }) -> image : love.Image","title":"love.graphics.newImage"},{"location":"doc/#lovegraphicsnewimagefont","text":"function love.graphics. newImageFont ( filename : string, glyphs : string) -> font : love.Font","title":"love.graphics.newImageFont"},{"location":"doc/#lovegraphicsnewmesh","text":"function love.graphics. newMesh ( vertices : { [\"1\"] : number, [ \"2\" ]: number , [ \"3\" ]: number , [ \"4\" ]: number , [ \"5\" ]: number , [ \"6\" ]: number , [ \"7\" ]: number , [ \"8\" ]: number }, mode ? : \"fan\" | \"points\" | \"strip\" | \"triangles\" , usage ? : \"dynamic\" | \"static\" | \"stream\" ) -> mesh : love.Mesh","title":"love.graphics.newMesh"},{"location":"doc/#lovegraphicsnewparticlesystem","text":"function love.graphics. newParticleSystem ( image : love.Image, buffer ? : number ) -> system : love.ParticleSystem","title":"love.graphics.newParticleSystem"},{"location":"doc/#lovegraphicsnewquad","text":"function love.graphics. newQuad ( x : number, y : number, width : number, height : number, sw : number, sh : number) -> quad : love.Quad","title":"love.graphics.newQuad"},{"location":"doc/#lovegraphicsnewshader","text":"function love.graphics. newShader ( code : string) -> shader : love.Shader","title":"love.graphics.newShader"},{"location":"doc/#lovegraphicsnewspritebatch","text":"function love.graphics. newSpriteBatch ( image : love.Image, maxsprites ? : number ) -> spriteBatch : love.SpriteBatch","title":"love.graphics.newSpriteBatch"},{"location":"doc/#lovegraphicsnewtext","text":"function love.graphics. newText ( font : love.Font, textstring ? : string ) -> text : love.Text","title":"love.graphics.newText"},{"location":"doc/#lovegraphicsnewvideo","text":"function love.graphics. newVideo ( filename : string) -> video : love.Video","title":"love.graphics.newVideo"},{"location":"doc/#lovegraphicsnewvolumeimage","text":"function love.graphics. newVolumeImage ( layers : table, settings ? : { mipmaps : boolean, linear : boolean }) -> image : love.Image","title":"love.graphics.newVolumeImage"},{"location":"doc/#lovegraphicsorigin","text":"function love.graphics. origin ()","title":"love.graphics.origin"},{"location":"doc/#lovegraphicspoints","text":"function love.graphics. points ( x : number, y : number, ... number )","title":"love.graphics.points"},{"location":"doc/#lovegraphicspolygon","text":"function love.graphics. polygon ( mode : \" fill \"|\" line \", ...number)","title":"love.graphics.polygon"},{"location":"doc/#lovegraphicspop","text":"function love.graphics. pop ()","title":"love.graphics.pop"},{"location":"doc/#lovegraphicspresent","text":"function love.graphics. present ()","title":"love.graphics.present"},{"location":"doc/#lovegraphicsprint","text":"function love.graphics. print ( text : string| number , x ? : number , y ? : number , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number )","title":"love.graphics.print"},{"location":"doc/#lovegraphicsprintf","text":"function love.graphics. printf ( text : string| number , x : number, y : number, limit : number, align ? : \"center\" | \"justify\" | \"left\" | \"right\" , r ? : number , sx ? : number , sy ? : number , ox ? : number , oy ? : number , kx ? : number , ky ? : number )","title":"love.graphics.printf"},{"location":"doc/#lovegraphicspush","text":"function love.graphics. push ()","title":"love.graphics.push"},{"location":"doc/#lovegraphicsrectangle","text":"function love.graphics. rectangle ( mode : \" fill \"|\" line \", x: number, y: number, width: number, height: number)","title":"love.graphics.rectangle"},{"location":"doc/#lovegraphicsreplacetransform","text":"function love.graphics. replaceTransform ( transform : love.Transform)","title":"love.graphics.replaceTransform"},{"location":"doc/#lovegraphicsreset","text":"function love.graphics. reset ()","title":"love.graphics.reset"},{"location":"doc/#lovegraphicsrotate","text":"function love.graphics. rotate ( angle : number)","title":"love.graphics.rotate"},{"location":"doc/#lovegraphicsscale","text":"function love.graphics. scale ( sx : number, sy ? : number )","title":"love.graphics.scale"},{"location":"doc/#lovegraphicssetbackgroundcolor","text":"function love.graphics. setBackgroundColor ( red : number, green : number, blue : number, alpha ? : number )","title":"love.graphics.setBackgroundColor"},{"location":"doc/#lovegraphicssetblendmode","text":"function love.graphics. setBlendMode ( mode : \" add \"|\" additive \"|\" alpha \"|\" darken \"|\" lighten \"...(+7))","title":"love.graphics.setBlendMode"},{"location":"doc/#lovegraphicssetcanvas","text":"function love.graphics. setCanvas ( canvas : love.Canvas, mipmap ? : number )","title":"love.graphics.setCanvas"},{"location":"doc/#lovegraphicssetcolor","text":"function love.graphics. setColor ( red : number, green : number, blue : number, alpha ? : number )","title":"love.graphics.setColor"},{"location":"doc/#lovegraphicssetcolormask","text":"function love.graphics. setColorMask ( red : boolean, green : boolean, blue : boolean, alpha : boolean)","title":"love.graphics.setColorMask"},{"location":"doc/#lovegraphicssetdefaultfilter","text":"function love.graphics. setDefaultFilter ( min : \" linear \"|\" nearest \", mag?: \" linear \"|\" nearest \", anisotropy?: number)","title":"love.graphics.setDefaultFilter"},{"location":"doc/#lovegraphicssetdepthmode","text":"function love.graphics. setDepthMode ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), write: boolean)","title":"love.graphics.setDepthMode"},{"location":"doc/#lovegraphicssetfont","text":"function love.graphics. setFont ( font : love.Font)","title":"love.graphics.setFont"},{"location":"doc/#lovegraphicssetfrontfacewinding","text":"function love.graphics. setFrontFaceWinding ( winding : \" ccw \"|\" cw \")","title":"love.graphics.setFrontFaceWinding"},{"location":"doc/#lovegraphicssetlinejoin","text":"function love.graphics. setLineJoin ( join : \" bevel \"|\" miter \"|\" none \")","title":"love.graphics.setLineJoin"},{"location":"doc/#lovegraphicssetlinestyle","text":"function love.graphics. setLineStyle ( style : \" rough \"|\" smooth \")","title":"love.graphics.setLineStyle"},{"location":"doc/#lovegraphicssetlinewidth","text":"function love.graphics. setLineWidth ( width : number)","title":"love.graphics.setLineWidth"},{"location":"doc/#lovegraphicssetmeshcullmode","text":"function love.graphics. setMeshCullMode ( mode : \" back \"|\" front \"|\" none \")","title":"love.graphics.setMeshCullMode"},{"location":"doc/#lovegraphicssetnewfont","text":"function love.graphics. setNewFont ( size ? : number ) -> font : love.Font","title":"love.graphics.setNewFont"},{"location":"doc/#lovegraphicssetpointsize","text":"function love.graphics. setPointSize ( size : number)","title":"love.graphics.setPointSize"},{"location":"doc/#lovegraphicssetscissor","text":"function love.graphics. setScissor ( x : number, y : number, width : number, height : number)","title":"love.graphics.setScissor"},{"location":"doc/#lovegraphicssetshader","text":"function love.graphics. setShader ( shader : love.Shader)","title":"love.graphics.setShader"},{"location":"doc/#lovegraphicssetstenciltest","text":"function love.graphics. setStencilTest ( comparemode : \" always \"|\" equal \"|\" gequal \"|\" greater \"|\" lequal \"...(+3), comparevalue: number)","title":"love.graphics.setStencilTest"},{"location":"doc/#lovegraphicssetwireframe","text":"function love.graphics. setWireframe ( enable : boolean)","title":"love.graphics.setWireframe"},{"location":"doc/#lovegraphicsshear","text":"function love.graphics. shear ( kx : number, ky : number)","title":"love.graphics.shear"},{"location":"doc/#lovegraphicsstencil","text":"function love.graphics. stencil ( stencilfunction : function, action ? : \"decrement\" | \"decrementwrap\" | \"increment\" | \"incrementwrap\" | \"invert\" ...(+ 1 ), value ? : number , keepvalues ? : boolean )","title":"love.graphics.stencil"},{"location":"doc/#lovegraphicstransformpoint","text":"function love.graphics. transformPoint ( globalX : number, globalY : number) -> screenX : number 2. screenY : number","title":"love.graphics.transformPoint"},{"location":"doc/#lovegraphicstranslate","text":"function love.graphics. translate ( dx : number, dy : number)","title":"love.graphics.translate"},{"location":"doc/#lovegraphicsvalidateshader","text":"function love.graphics. validateShader ( gles : boolean, code : string) -> status : boolean 2. message : string","title":"love.graphics.validateShader"},{"location":"doc/#lovehasdeprecationoutput","text":"function love. hasDeprecationOutput () -> enabled : boolean","title":"love.hasDeprecationOutput"},{"location":"doc/#loveimage_1","text":"","title":"love.image"},{"location":"doc/#iscompressed_1","text":"function love.image. isCompressed ( filename : string) -> compressed : boolean Determines whether a file can be loaded as CompressedImageData. Open in Browser @ param filename \u2014 The filename of the potentially compressed image file. @ return compressed \u2014 Whether the file can be loaded as CompressedImageData or not.","title":"isCompressed"},{"location":"doc/#newcompresseddata","text":"function love.image. newCompressedData ( filename : string) -> compressedImageData : love.CompressedImageData Create a new CompressedImageData object from a compressed image file. L\u00d6VE supports several compressed texture formats, enumerated in the CompressedImageFormat page. Open in Browser @ param filename \u2014 The filename of the compressed image file. @ return compressedImageData \u2014 The new CompressedImageData object.","title":"newCompressedData"},{"location":"doc/#newimagedata_1","text":"function love.image. newImageData ( width : number, height : number) -> imageData : love.ImageData Creates a new ImageData object. Open in Browser @ param width \u2014 The width of the ImageData. @ param height \u2014 The height of the ImageData. @ return imageData \u2014 The new blank ImageData object. Each pixel's color values, (including the alpha values!) will be set to zero.","title":"newImageData"},{"location":"doc/#loveimage_2","text":"love .image","title":"love.image"},{"location":"doc/#loveimageiscompressed","text":"function love.image. isCompressed ( filename : string) -> compressed : boolean","title":"love.image.isCompressed"},{"location":"doc/#loveimagenewcompresseddata","text":"function love.image. newCompressedData ( filename : string) -> compressedImageData : love.CompressedImageData","title":"love.image.newCompressedData"},{"location":"doc/#loveimagenewimagedata","text":"function love.image. newImageData ( width : number, height : number) -> imageData : love.ImageData","title":"love.image.newImageData"},{"location":"doc/#loveisversioncompatible","text":"function love. isVersionCompatible ( version : string) -> compatible : boolean","title":"love.isVersionCompatible"},{"location":"doc/#lovejoystick_1","text":"","title":"love.joystick"},{"location":"doc/#getgamepadmappingstring_1","text":"function love.joystick. getGamepadMappingString ( guid : string) -> mappingstring : string Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad. The mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings. Open in Browser @ param guid \u2014 The GUID value to get the mapping string for. @ return mappingstring \u2014 A string containing the Joystick's gamepad mappings, or nil if the GUID is not recognized as a gamepad.","title":"getGamepadMappingString"},{"location":"doc/#getjoystickcount","text":"function love.joystick. getJoystickCount () -> joystickcount : number Gets the number of connected joysticks. Open in Browser @ return joystickcount \u2014 The number of connected joysticks.","title":"getJoystickCount"},{"location":"doc/#getjoysticks","text":"function love.joystick. getJoysticks () -> joysticks : table Gets a list of connected Joysticks. Open in Browser @ return joysticks \u2014 The list of currently connected Joysticks.","title":"getJoysticks"},{"location":"doc/#loadgamepadmappings","text":"function love.joystick. loadGamepadMappings ( filename : string) Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings. It also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded. Open in Browser @ param filename \u2014 The filename to load the mappings string from.","title":"loadGamepadMappings"},{"location":"doc/#savegamepadmappings","text":"function love.joystick. saveGamepadMappings ( filename : string) -> mappings : string Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified. The mappings are stored as a string for use with love.joystick.loadGamepadMappings. Open in Browser @ param filename \u2014 The filename to save the mappings string to. @ return mappings \u2014 The mappings string that was written to the file.","title":"saveGamepadMappings"},{"location":"doc/#setgamepadmapping","text":"function love.joystick. setGamepadMapping ( guid : string, button : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10), inputtype: \" axis \"|\" button \"|\" hat \", inputindex: number, hatdir?: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4)) -> success: boolean Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X. L\u00d6VE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default. The virtual gamepad buttons and axes are designed around the Xbox 360 controller layout. Open in Browser @ param guid \u2014 The OS-dependent GUID for the type of Joystick the binding will affect. @ param button \u2014 The virtual gamepad button to bind. @ param inputtype \u2014 The type of input to bind the virtual gamepad button to. @ param inputindex \u2014 The index of the axis, button, or hat to bind the virtual gamepad button to. @ param hatdir \u2014 The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise. @ return success \u2014 Whether the virtual gamepad button was successfully bound. -- -- Virtual gamepad buttons. -- -- -- [Open in Browser](https://love2d.org/wiki/GamepadButton) -- button : | \" a \" -- Bottom face button (A). | \" b \" -- Right face button (B). | \" x \" -- Left face button (X). | \" y \" -- Top face button (Y). | \" back \" -- Back button. | \" guide \" -- Guide button. | \" start \" -- Start button. | \" leftstick \" -- Left stick click button. | \" rightstick \" -- Right stick click button. | \" leftshoulder \" -- Left bumper. | \" rightshoulder \" -- Right bumper. | \" dpup \" -- D-pad up. | \" dpdown \" -- D-pad down. | \" dpleft \" -- D-pad left. | \" dpright \" -- D-pad right. -- -- Types of Joystick inputs. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickInputType) -- inputtype: | \" axis \" -- Analog axis. | \" button \" -- Button. | \" hat \" -- 8-direction hat value. -- -- Joystick hat positions. -- -- -- [Open in Browser](https://love2d.org/wiki/JoystickHat) -- hatdir: | \" c \" -- Centered | \" d \" -- Down | \" l \" -- Left | \" ld \" -- Left+Down | \" lu \" -- Left+Up | \" r \" -- Right | \" rd \" -- Right+Down | \" ru \" -- Right+Up | \" u \" -- Up","title":"setGamepadMapping"},{"location":"doc/#lovejoystick_2","text":"love .joystick","title":"love.joystick"},{"location":"doc/#lovejoystickgetgamepadmappingstring","text":"function love.joystick. getGamepadMappingString ( guid : string) -> mappingstring : string","title":"love.joystick.getGamepadMappingString"},{"location":"doc/#lovejoystickgetjoystickcount","text":"function love.joystick. getJoystickCount () -> joystickcount : number","title":"love.joystick.getJoystickCount"},{"location":"doc/#lovejoystickgetjoysticks","text":"function love.joystick. getJoysticks () -> joysticks : table","title":"love.joystick.getJoysticks"},{"location":"doc/#lovejoystickloadgamepadmappings","text":"function love.joystick. loadGamepadMappings ( filename : string)","title":"love.joystick.loadGamepadMappings"},{"location":"doc/#lovejoysticksavegamepadmappings","text":"function love.joystick. saveGamepadMappings ( filename : string) -> mappings : string","title":"love.joystick.saveGamepadMappings"},{"location":"doc/#lovejoysticksetgamepadmapping","text":"function love.joystick. setGamepadMapping ( guid : string, button : \" a \"|\" b \"|\" back \"|\" dpdown \"|\" dpleft \"...(+10), inputtype: \" axis \"|\" button \"|\" hat \", inputindex: number, hatdir?: \" c \"|\" d \"|\" l \"|\" ld \"|\" lu \"...(+4)) -> success: boolean","title":"love.joystick.setGamepadMapping"},{"location":"doc/#lovejoystickadded","text":"","title":"love.joystickadded"},{"location":"doc/#lovejoystickaxis","text":"","title":"love.joystickaxis"},{"location":"doc/#lovejoystickhat_1","text":"","title":"love.joystickhat"},{"location":"doc/#lovejoystickpressed","text":"","title":"love.joystickpressed"},{"location":"doc/#lovejoystickreleased","text":"","title":"love.joystickreleased"},{"location":"doc/#lovejoystickremoved","text":"","title":"love.joystickremoved"},{"location":"doc/#lovekeyboard","text":"love .keyboard","title":"love.keyboard"},{"location":"doc/#lovekeyboard_1","text":"","title":"love.keyboard"},{"location":"doc/#getkeyfromscancode","text":"function love.keyboard. getKeyFromScancode ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 )) -> key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 ) Gets the key corresponding to the given hardware scancode. Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Scancodes are useful for creating default controls that have the same physical locations on on all systems. Open in Browser @ param scancode \u2014 The scancode to get the key from. @ return key \u2014 The key corresponding to the given scancode, or 'unknown' if the scancode doesn't map to a KeyConstant on the current system. -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode : | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key: | \"a\" -- The A key | \"b\" -- The B key | \"c\" -- The C key | \"d\" -- The D key | \"e\" -- The E key | \"f\" -- The F key | \"g\" -- The G key | \"h\" -- The H key | \"i\" -- The I key | \"j\" -- The J key | \"k\" -- The K key | \"l\" -- The L key | \"m\" -- The M key | \"n\" -- The N key | \"o\" -- The O key | \"p\" -- The P key | \"q\" -- The Q key | \"r\" -- The R key | \"s\" -- The S key | \"t\" -- The T key | \"u\" -- The U key | \"v\" -- The V key | \"w\" -- The W key | \"x\" -- The X key | \"y\" -- The Y key | \"z\" -- The Z key | \"0\" -- The zero key | \"1\" -- The one key | \"2\" -- The two key | \"3\" -- The three key | \"4\" -- The four key | \"5\" -- The five key | \"6\" -- The six key | \"7\" -- The seven key | \"8\" -- The eight key | \"9\" -- The nine key | \"space\" -- Space key | \"!\" -- Exclamation mark key | \"\\\"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \" ( \" -- Left parenthesis key | \" ) \" -- Right parenthesis key | \" * \" -- Asterisk key | \" + \" -- Plus key | \" , \" -- Comma key | \" - \" -- Hyphen-minus key | \" . \" -- Full stop key | \" / \" -- Slash key | \" : \" -- Colon key | \" ; \" -- Semicolon key | \" < \" -- Less-than key | \" = \" -- Equal key | \" > \" -- Greater-than key | \" ? \" -- Question mark key | \" @ \" -- At sign key | \" [ \" -- Left square bracket key | \" \\ \" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key","title":"getKeyFromScancode"},{"location":"doc/#getscancodefromkey","text":"function love.keyboard. getScancodeFromKey ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ) Gets the hardware scancode corresponding to the given key. Unlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Scancodes are useful for creating default controls that have the same physical locations on on all systems. Open in Browser @ param key \u2014 The key to get the scancode from. @ return scancode \u2014 The scancode corresponding to the given key, or 'unknown' if the given key has no known physical representation on the current system. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key : | \" a \" -- The A key | \" b \" -- The B key | \" c \" -- The C key | \" d \" -- The D key | \" e \" -- The E key | \" f \" -- The F key | \" g \" -- The G key | \" h \" -- The H key | \" i \" -- The I key | \" j \" -- The J key | \" k \" -- The K key | \" l \" -- The L key | \" m \" -- The M key | \" n \" -- The N key | \" o \" -- The O key | \" p \" -- The P key | \" q \" -- The Q key | \" r \" -- The R key | \" s \" -- The S key | \" t \" -- The T key | \" u \" -- The U key | \" v \" -- The V key | \" w \" -- The W key | \" x \" -- The X key | \" y \" -- The Y key | \" z \" -- The Z key | \" 0 \" -- The zero key | \" 1 \" -- The one key | \" 2 \" -- The two key | \" 3 \" -- The three key | \" 4 \" -- The four key | \" 5 \" -- The five key | \" 6 \" -- The six key | \" 7 \" -- The seven key | \" 8 \" -- The eight key | \" 9 \" -- The nine key | \" space \" -- Space key | \" ! \" -- Exclamation mark key | \" \\ \"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \"(\" -- Left parenthesis key | \")\" -- Right parenthesis key | \"*\" -- Asterisk key | \"+\" -- Plus key | \",\" -- Comma key | \"-\" -- Hyphen-minus key | \".\" -- Full stop key | \"/\" -- Slash key | \":\" -- Colon key | \";\" -- Semicolon key | \"<\" -- Less-than key | \"=\" -- Equal key | \">\" -- Greater-than key | \"?\" -- Question mark key | \"@\" -- At sign key | \"[\" -- Left square bracket key | \"\\\" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \" w \" will be generated if the key in the same place as the \" w \" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode: | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key.","title":"getScancodeFromKey"},{"location":"doc/#haskeyrepeat","text":"function love.keyboard. hasKeyRepeat () -> enabled : boolean Gets whether key repeat is enabled. Open in Browser @ return enabled \u2014 Whether key repeat is enabled.","title":"hasKeyRepeat"},{"location":"doc/#hasscreenkeyboard","text":"function love.keyboard. hasScreenKeyboard () -> supported : boolean Gets whether screen keyboard is supported. Open in Browser @ return supported \u2014 Whether screen keyboard is supported.","title":"hasScreenKeyboard"},{"location":"doc/#hastextinput","text":"function love.keyboard. hasTextInput () -> enabled : boolean Gets whether text input events are enabled. Open in Browser @ return enabled \u2014 Whether text input events are enabled.","title":"hasTextInput"},{"location":"doc/#isdown_1","text":"function love.keyboard. isDown ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> down : boolean Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased. Open in Browser @ param key \u2014 The key to check. @ return down \u2014 True if the key is down, false if not. -- -- All the keys you can press. Note that some keys may not be available on your keyboard or system. -- -- -- [Open in Browser](https://love2d.org/wiki/KeyConstant) -- key : | \" a \" -- The A key | \" b \" -- The B key | \" c \" -- The C key | \" d \" -- The D key | \" e \" -- The E key | \" f \" -- The F key | \" g \" -- The G key | \" h \" -- The H key | \" i \" -- The I key | \" j \" -- The J key | \" k \" -- The K key | \" l \" -- The L key | \" m \" -- The M key | \" n \" -- The N key | \" o \" -- The O key | \" p \" -- The P key | \" q \" -- The Q key | \" r \" -- The R key | \" s \" -- The S key | \" t \" -- The T key | \" u \" -- The U key | \" v \" -- The V key | \" w \" -- The W key | \" x \" -- The X key | \" y \" -- The Y key | \" z \" -- The Z key | \" 0 \" -- The zero key | \" 1 \" -- The one key | \" 2 \" -- The two key | \" 3 \" -- The three key | \" 4 \" -- The four key | \" 5 \" -- The five key | \" 6 \" -- The six key | \" 7 \" -- The seven key | \" 8 \" -- The eight key | \" 9 \" -- The nine key | \" space \" -- Space key | \" ! \" -- Exclamation mark key | \" \\ \"\" -- Double quote key | \"#\" -- Hash key | \"$\" -- Dollar key | \"&\" -- Ampersand key | \"'\" -- Single quote key | \"(\" -- Left parenthesis key | \")\" -- Right parenthesis key | \"*\" -- Asterisk key | \"+\" -- Plus key | \",\" -- Comma key | \"-\" -- Hyphen-minus key | \".\" -- Full stop key | \"/\" -- Slash key | \":\" -- Colon key | \";\" -- Semicolon key | \"<\" -- Less-than key | \"=\" -- Equal key | \">\" -- Greater-than key | \"?\" -- Question mark key | \"@\" -- At sign key | \"[\" -- Left square bracket key | \"\\\" -- Backslash key | \" ] \" -- Right square bracket key | \" ^ \" -- Caret key | \" _ \" -- Underscore key | \" ` \" -- Grave accent key | \" kp0 \" -- The numpad zero key | \" kp1 \" -- The numpad one key | \" kp2 \" -- The numpad two key | \" kp3 \" -- The numpad three key | \" kp4 \" -- The numpad four key | \" kp5 \" -- The numpad five key | \" kp6 \" -- The numpad six key | \" kp7 \" -- The numpad seven key | \" kp8 \" -- The numpad eight key | \" kp9 \" -- The numpad nine key | \" kp . \" -- The numpad decimal point key | \" kp/ \" -- The numpad division key | \" kp * \" -- The numpad multiplication key | \" kp - \" -- The numpad substraction key | \" kp + \" -- The numpad addition key | \" kpenter \" -- The numpad enter key | \" kp = \" -- The numpad equals key | \" up \" -- Up cursor key | \" down \" -- Down cursor key | \" right \" -- Right cursor key | \" left \" -- Left cursor key | \" home \" -- Home key | \" end \" -- End key | \" pageup \" -- Page up key | \" pagedown \" -- Page down key | \" insert \" -- Insert key | \" backspace \" -- Backspace key | \" tab \" -- Tab key | \" clear \" -- Clear key | \" return \" -- Return key | \" delete \" -- Delete key | \" f1 \" -- The 1st function key | \" f2 \" -- The 2nd function key | \" f3 \" -- The 3rd function key | \" f4 \" -- The 4th function key | \" f5 \" -- The 5th function key | \" f6 \" -- The 6th function key | \" f7 \" -- The 7th function key | \" f8 \" -- The 8th function key | \" f9 \" -- The 9th function key | \" f10 \" -- The 10th function key | \" f11 \" -- The 11th function key | \" f12 \" -- The 12th function key | \" f13 \" -- The 13th function key | \" f14 \" -- The 14th function key | \" f15 \" -- The 15th function key | \" numlock \" -- Num-lock key | \" capslock \" -- Caps-lock key | \" scrollock \" -- Scroll-lock key | \" rshift \" -- Right shift key | \" lshift \" -- Left shift key | \" rctrl \" -- Right control key | \" lctrl \" -- Left control key | \" ralt \" -- Right alt key | \" lalt \" -- Left alt key | \" rmeta \" -- Right meta key | \" lmeta \" -- Left meta key | \" lsuper \" -- Left super key | \" rsuper \" -- Right super key | \" mode \" -- Mode key | \" compose \" -- Compose key | \" pause \" -- Pause key | \" escape \" -- Escape key | \" help \" -- Help key | \" print \" -- Print key | \" sysreq \" -- System request key | \" break \" -- Break key | \" menu \" -- Menu key | \" power \" -- Power key | \" euro \" -- Euro (&euro;) key | \" undo \" -- Undo key | \" www \" -- WWW key | \" mail \" -- Mail key | \" calculator \" -- Calculator key | \" appsearch \" -- Application search key | \" apphome \" -- Application home key | \" appback \" -- Application back key | \" appforward \" -- Application forward key | \" apprefresh \" -- Application refresh key | \" appbookmarks \" -- Application bookmarks key","title":"isDown"},{"location":"doc/#isscancodedown","text":"function love.keyboard. isScancodeDown ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ), ... \"'\" | \",\" | \"-\" | \".\" | \"/\" ...(+ 189 )) -> down : boolean Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased. Unlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. Open in Browser @ param scancode \u2014 A Scancode to check. @ return down \u2014 True if any supplied Scancode is down, false if not. -- -- Keyboard scancodes. -- -- Scancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are. -- -- Using scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support. -- -- One could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated. -- -- -- [Open in Browser](https://love2d.org/wiki/Scancode) -- scancode : | \" a \" -- The 'A' key on an American layout. | \" b \" -- The 'B' key on an American layout. | \" c \" -- The 'C' key on an American layout. | \" d \" -- The 'D' key on an American layout. | \" e \" -- The 'E' key on an American layout. | \" f \" -- The 'F' key on an American layout. | \" g \" -- The 'G' key on an American layout. | \" h \" -- The 'H' key on an American layout. | \" i \" -- The 'I' key on an American layout. | \" j \" -- The 'J' key on an American layout. | \" k \" -- The 'K' key on an American layout. | \" l \" -- The 'L' key on an American layout. | \" m \" -- The 'M' key on an American layout. | \" n \" -- The 'N' key on an American layout. | \" o \" -- The 'O' key on an American layout. | \" p \" -- The 'P' key on an American layout. | \" q \" -- The 'Q' key on an American layout. | \" r \" -- The 'R' key on an American layout. | \" s \" -- The 'S' key on an American layout. | \" t \" -- The 'T' key on an American layout. | \" u \" -- The 'U' key on an American layout. | \" v \" -- The 'V' key on an American layout. | \" w \" -- The 'W' key on an American layout. | \" x \" -- The 'X' key on an American layout. | \" y \" -- The 'Y' key on an American layout. | \" z \" -- The 'Z' key on an American layout. | \" 1 \" -- The '1' key on an American layout. | \" 2 \" -- The '2' key on an American layout. | \" 3 \" -- The '3' key on an American layout. | \" 4 \" -- The '4' key on an American layout. | \" 5 \" -- The '5' key on an American layout. | \" 6 \" -- The '6' key on an American layout. | \" 7 \" -- The '7' key on an American layout. | \" 8 \" -- The '8' key on an American layout. | \" 9 \" -- The '9' key on an American layout. | \" 0 \" -- The '0' key on an American layout. | \" return \" -- The 'return' / 'enter' key on an American layout. | \" escape \" -- The 'escape' key on an American layout. | \" backspace \" -- The 'backspace' key on an American layout. | \" tab \" -- The 'tab' key on an American layout. | \" space \" -- The spacebar on an American layout. | \" - \" -- The minus key on an American layout. | \" = \" -- The equals key on an American layout. | \" [ \" -- The left-bracket key on an American layout. | \" ] \" -- The right-bracket key on an American layout. | \" \\ \" -- The backslash key on an American layout. | \" nonus # \" -- The non-U.S. hash scancode. | \" ; \" -- The semicolon key on an American layout. | \"'\" -- The apostrophe key on an American layout. | \"`\" -- The back-tick / grave key on an American layout. | \",\" -- The comma key on an American layout. | \".\" -- The period key on an American layout. | \"/\" -- The forward-slash key on an American layout. | \"capslock\" -- The capslock key on an American layout. | \"f1\" -- The F1 key on an American layout. | \"f2\" -- The F2 key on an American layout. | \"f3\" -- The F3 key on an American layout. | \"f4\" -- The F4 key on an American layout. | \"f5\" -- The F5 key on an American layout. | \"f6\" -- The F6 key on an American layout. | \"f7\" -- The F7 key on an American layout. | \"f8\" -- The F8 key on an American layout. | \"f9\" -- The F9 key on an American layout. | \"f10\" -- The F10 key on an American layout. | \"f11\" -- The F11 key on an American layout. | \"f12\" -- The F12 key on an American layout. | \"f13\" -- The F13 key on an American layout. | \"f14\" -- The F14 key on an American layout. | \"f15\" -- The F15 key on an American layout. | \"f16\" -- The F16 key on an American layout. | \"f17\" -- The F17 key on an American layout. | \"f18\" -- The F18 key on an American layout. | \"f19\" -- The F19 key on an American layout. | \"f20\" -- The F20 key on an American layout. | \"f21\" -- The F21 key on an American layout. | \"f22\" -- The F22 key on an American layout. | \"f23\" -- The F23 key on an American layout. | \"f24\" -- The F24 key on an American layout. | \"lctrl\" -- The left control key on an American layout. | \"lshift\" -- The left shift key on an American layout. | \"lalt\" -- The left alt / option key on an American layout. | \"lgui\" -- The left GUI (command / windows / super) key on an American layout. | \"rctrl\" -- The right control key on an American layout. | \"rshift\" -- The right shift key on an American layout. | \"ralt\" -- The right alt / option key on an American layout. | \"rgui\" -- The right GUI (command / windows / super) key on an American layout. | \"printscreen\" -- The printscreen key on an American layout. | \"scrolllock\" -- The scroll-lock key on an American layout. | \"pause\" -- The pause key on an American layout. | \"insert\" -- The insert key on an American layout. | \"home\" -- The home key on an American layout. | \"numlock\" -- The numlock / clear key on an American layout. | \"pageup\" -- The page-up key on an American layout. | \"delete\" -- The forward-delete key on an American layout. | \"end\" -- The end key on an American layout. | \"pagedown\" -- The page-down key on an American layout. | \"right\" -- The right-arrow key on an American layout. | \"left\" -- The left-arrow key on an American layout. | \"down\" -- The down-arrow key on an American layout. | \"up\" -- The up-arrow key on an American layout. | \"nonusbackslash\" -- The non-U.S. backslash scancode. | \"application\" -- The application key on an American layout. Windows contextual menu, compose key. | \"execute\" -- The ' execute ' key on an American layout. | \"help\" -- The ' help ' key on an American layout. | \"menu\" -- The ' menu ' key on an American layout. | \"select\" -- The ' select ' key on an American layout. | \"stop\" -- The ' stop ' key on an American layout. | \"again\" -- The ' again ' key on an American layout. | \"undo\" -- The ' undo ' key on an American layout. | \"cut\" -- The ' cut ' key on an American layout. | \"copy\" -- The ' copy ' key on an American layout. | \"paste\" -- The ' paste ' key on an American layout. | \"find\" -- The ' find ' key on an American layout. | \"kp/\" -- The keypad forward-slash key on an American layout. | \"kp*\" -- The keypad ' * ' key on an American layout. | \"kp-\" -- The keypad minus key on an American layout. | \"kp+\" -- The keypad plus key on an American layout. | \"kp=\" -- The keypad equals key on an American layout. | \"kpenter\" -- The keypad enter key on an American layout. | \"kp1\" -- The keypad ' 1 ' key on an American layout. | \"kp2\" -- The keypad ' 2 ' key on an American layout. | \"kp3\" -- The keypad ' 3 ' key on an American layout. | \"kp4\" -- The keypad ' 4 ' key on an American layout. | \"kp5\" -- The keypad ' 5 ' key on an American layout. | \"kp6\" -- The keypad ' 6 ' key on an American layout. | \"kp7\" -- The keypad ' 7 ' key on an American layout. | \"kp8\" -- The keypad ' 8 ' key on an American layout. | \"kp9\" -- The keypad ' 9 ' key on an American layout. | \"kp0\" -- The keypad ' 0 ' key on an American layout. | \"kp.\" -- The keypad period key on an American layout. | \"international1\" -- The 1st international key on an American layout. Used on Asian keyboards. | \"international2\" -- The 2nd international key on an American layout. | \"international3\" -- The 3rd international key on an American layout. Yen. | \"international4\" -- The 4th international key on an American layout. | \"international5\" -- The 5th international key on an American layout. | \"international6\" -- The 6th international key on an American layout. | \"international7\" -- The 7th international key on an American layout. | \"international8\" -- The 8th international key on an American layout. | \"international9\" -- The 9th international key on an American layout. | \"lang1\" -- Hangul/English toggle scancode. | \"lang2\" -- Hanja conversion scancode. | \"lang3\" -- Katakana scancode. | \"lang4\" -- Hiragana scancode. | \"lang5\" -- Zenkaku/Hankaku scancode. | \"mute\" -- The mute key on an American layout. | \"volumeup\" -- The volume up key on an American layout. | \"volumedown\" -- The volume down key on an American layout. | \"audionext\" -- The audio next track key on an American layout. | \"audioprev\" -- The audio previous track key on an American layout. | \"audiostop\" -- The audio stop key on an American layout. | \"audioplay\" -- The audio play key on an American layout. | \"audiomute\" -- The audio mute key on an American layout. | \"mediaselect\" -- The media select key on an American layout. | \"www\" -- The ' WWW ' key on an American layout. | \"mail\" -- The Mail key on an American layout. | \"calculator\" -- The calculator key on an American layout. | \"computer\" -- The ' computer ' key on an American layout. | \"acsearch\" -- The AC Search key on an American layout. | \"achome\" -- The AC Home key on an American layout. | \"acback\" -- The AC Back key on an American layout. | \"acforward\" -- The AC Forward key on an American layout. | \"acstop\" -- Th AC Stop key on an American layout. | \"acrefresh\" -- The AC Refresh key on an American layout. | \"acbookmarks\" -- The AC Bookmarks key on an American layout. | \"power\" -- The system power scancode. | \"brightnessdown\" -- The brightness-down scancode. | \"brightnessup\" -- The brightness-up scancode. | \"displayswitch\" -- The display switch scancode. | \"kbdillumtoggle\" -- The keyboard illumination toggle scancode. | \"kbdillumdown\" -- The keyboard illumination down scancode. | \"kbdillumup\" -- The keyboard illumination up scancode. | \"eject\" -- The eject scancode. | \"sleep\" -- The system sleep scancode. | \"alterase\" -- The alt-erase key on an American layout. | \"sysreq\" -- The sysreq key on an American layout. | \"cancel\" -- The ' cancel ' key on an American layout. | \"clear\" -- The ' clear ' key on an American layout. | \"prior\" -- The ' prior ' key on an American layout. | \"return2\" -- The ' return2 ' key on an American layout. | \"separator\" -- The ' separator ' key on an American layout. | \"out\" -- The ' out ' key on an American layout. | \"oper\" -- The ' oper ' key on an American layout. | \"clearagain\" -- The ' clearagain ' key on an American layout. | \"crsel\" -- The ' crsel ' key on an American layout. | \"exsel\" -- The ' exsel ' key on an American layout. | \"kp00\" -- The keypad 00 key on an American layout. | \"kp000\" -- The keypad 000 key on an American layout. | \"thsousandsseparator\" -- The thousands-separator key on an American layout. | \"decimalseparator\" -- The decimal separator key on an American layout. | \"currencyunit\" -- The currency unit key on an American layout. | \"currencysubunit\" -- The currency sub-unit key on an American layout. | \"app1\" -- The ' app1 ' scancode. | \"app2\" -- The ' app2 ' scancode. | \"unknown\" -- An unknown key.","title":"isScancodeDown"},{"location":"doc/#setkeyrepeat","text":"function love.keyboard. setKeyRepeat ( enable : boolean) Enables or disables key repeat for love.keypressed. It is disabled by default. Open in Browser @ param enable \u2014 Whether repeat keypress events should be enabled when a key is held down.","title":"setKeyRepeat"},{"location":"doc/#settextinput","text":"function love.keyboard. setTextInput ( enable : boolean) Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android. On touch devices, this shows the system's native on-screen keyboard when it's enabled. Open in Browser @ param enable \u2014 Whether text input events should be enabled.","title":"setTextInput"},{"location":"doc/#lovekeyboardgetkeyfromscancode","text":"function love.keyboard. getKeyFromScancode ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 )) -> key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )","title":"love.keyboard.getKeyFromScancode"},{"location":"doc/#lovekeyboardgetscancodefromkey","text":"function love.keyboard. getScancodeFromKey ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 )","title":"love.keyboard.getScancodeFromKey"},{"location":"doc/#lovekeyboardhaskeyrepeat","text":"function love.keyboard. hasKeyRepeat () -> enabled : boolean","title":"love.keyboard.hasKeyRepeat"},{"location":"doc/#lovekeyboardhasscreenkeyboard","text":"function love.keyboard. hasScreenKeyboard () -> supported : boolean","title":"love.keyboard.hasScreenKeyboard"},{"location":"doc/#lovekeyboardhastextinput","text":"function love.keyboard. hasTextInput () -> enabled : boolean","title":"love.keyboard.hasTextInput"},{"location":"doc/#lovekeyboardisdown","text":"function love.keyboard. isDown ( key : \"!\"|\"#\"|\"$\"|\"&\"|\"'\" ...(+ 139 )) -> down : boolean","title":"love.keyboard.isDown"},{"location":"doc/#lovekeyboardisscancodedown","text":"function love.keyboard. isScancodeDown ( scancode : \"'\"|\",\"|\"-\"|\" . \"|\"/\" ...(+ 189 ), ... \"'\" | \",\" | \"-\" | \".\" | \"/\" ...(+ 189 )) -> down : boolean","title":"love.keyboard.isScancodeDown"},{"location":"doc/#lovekeyboardsetkeyrepeat","text":"function love.keyboard. setKeyRepeat ( enable : boolean)","title":"love.keyboard.setKeyRepeat"},{"location":"doc/#lovekeyboardsettextinput","text":"function love.keyboard. setTextInput ( enable : boolean)","title":"love.keyboard.setTextInput"},{"location":"doc/#lovekeypressed","text":"","title":"love.keypressed"},{"location":"doc/#lovekeyreleased","text":"","title":"love.keyreleased"},{"location":"doc/#loveload","text":"","title":"love.load"},{"location":"doc/#lovelowmemory","text":"","title":"love.lowmemory"},{"location":"doc/#lovemath","text":"love .math","title":"love.math"},{"location":"doc/#lovemath_1","text":"","title":"love.math"},{"location":"doc/#colorfrombytes","text":"function love.math. colorFromBytes ( rb : number, gb : number, bb : number, ab ? : number ) -> r : number 2. g : number 3. b : number 4. a : number Converts a color from 0..255 to 0..1 range. Open in Browser @ param rb \u2014 Red color component in 0..255 range. @ param gb \u2014 Green color component in 0..255 range. @ param bb \u2014 Blue color component in 0..255 range. @ param ab \u2014 Alpha color component in 0..255 range. @ return r \u2014 Red color component in 0..1 range. @ return g \u2014 Green color component in 0..1 range. @ return b \u2014 Blue color component in 0..1 range. @ return a \u2014 Alpha color component in 0..1 range or nil if alpha is not specified.","title":"colorFromBytes"},{"location":"doc/#colortobytes","text":"function love.math. colorToBytes ( r : number, g : number, b : number, a ? : number ) -> rb : number 2. gb : number 3. bb : number 4. ab : number Converts a color from 0..1 to 0..255 range. Open in Browser @ param r \u2014 Red color component. @ param g \u2014 Green color component. @ param b \u2014 Blue color component. @ param a \u2014 Alpha color component. @ return rb \u2014 Red color component in 0..255 range. @ return gb \u2014 Green color component in 0..255 range. @ return bb \u2014 Blue color component in 0..255 range. @ return ab \u2014 Alpha color component in 0..255 range or nil if alpha is not specified.","title":"colorToBytes"},{"location":"doc/#gammatolinear","text":"function love.math. gammaToLinear ( r : number, g : number, b : number) -> lr : number 2. lg : number 3. lb : number Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where L\u00d6VE doesn't handle conversions automatically. Read more about gamma-correct rendering here, here, and here. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param r \u2014 The red channel of the sRGB color to convert. @ param g \u2014 The green channel of the sRGB color to convert. @ param b \u2014 The blue channel of the sRGB color to convert. @ return lr \u2014 The red channel of the converted color in linear RGB space. @ return lg \u2014 The green channel of the converted color in linear RGB space. @ return lb \u2014 The blue channel of the converted color in linear RGB space.","title":"gammaToLinear"},{"location":"doc/#getrandomseed","text":"function love.math. getRandomSeed () -> low : number 2. high : number Gets the seed of the random number generator. The seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer values above 2^53, but the seed can be an integer value up to 2^64. Open in Browser @ return low \u2014 Integer number representing the lower 32 bits of the random number generator's 64 bit seed value. @ return high \u2014 Integer number representing the higher 32 bits of the random number generator's 64 bit seed value.","title":"getRandomSeed"},{"location":"doc/#getrandomstate","text":"function love.math. getRandomState () -> state : string Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState. This is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number. Open in Browser @ return state \u2014 The current state of the random number generator, represented as a string.","title":"getRandomState"},{"location":"doc/#isconvex","text":"function love.math. isConvex ( vertices : table) -> convex : boolean Checks whether a polygon is convex. PolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons. Open in Browser @ param vertices \u2014 The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. @ return convex \u2014 Whether the given polygon is convex.","title":"isConvex"},{"location":"doc/#lineartogamma","text":"function love.math. linearToGamma ( lr : number, lg : number, lb : number) -> cr : number 2. cg : number 3. cb : number Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing. In general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space. Read more about gamma-correct rendering here, here, and here. In versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1. Open in Browser @ param lr \u2014 The red channel of the linear RGB color to convert. @ param lg \u2014 The green channel of the linear RGB color to convert. @ param lb \u2014 The blue channel of the linear RGB color to convert. @ return cr \u2014 The red channel of the converted color in gamma sRGB space. @ return cg \u2014 The green channel of the converted color in gamma sRGB space. @ return cb \u2014 The blue channel of the converted color in gamma sRGB space.","title":"linearToGamma"},{"location":"doc/#newbeziercurve","text":"function love.math. newBezierCurve ( vertices : table) -> curve : love.BezierCurve Creates a new BezierCurve object. The number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) B\u00e9zier curve, four vertices define a cubic (degree 3) B\u00e9zier curve, etc. Open in Browser @ param vertices \u2014 The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}. @ return curve \u2014 A B\u00e9zier curve object.","title":"newBezierCurve"},{"location":"doc/#newrandomgenerator","text":"function love.math. newRandomGenerator () -> rng : love.RandomGenerator Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions. Open in Browser @ return rng \u2014 The new Random Number Generator object.","title":"newRandomGenerator"},{"location":"doc/#newtransform","text":"function love.math. newTransform () -> transform : love.Transform Creates a new Transform object. Open in Browser @ return transform \u2014 The new Transform object.","title":"newTransform"},{"location":"doc/#noise","text":"function love.math. noise ( x : number) -> value : number Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments. Simplex noise is closely related to Perlin noise. It is widely used for procedural content generation. There are many webpages which discuss Perlin and Simplex noise in detail. Open in Browser @ param x \u2014 The number used to generate the noise value. @ return value \u2014 The noise value in the range of 1.","title":"noise"},{"location":"doc/#random_2","text":"function love.math. random () -> number : number Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself. Open in Browser @ return number \u2014 The pseudo-random number.","title":"random"},{"location":"doc/#randomnormal_1","text":"function love.math. randomNormal ( stddev ? : number , mean ? : number ) -> number : number Get a normally distributed pseudo random number. Open in Browser @ param stddev \u2014 Standard deviation of the distribution. @ param mean \u2014 The mean of the distribution. @ return number \u2014 Normally distributed random number with variance (stddev)\u00b2 and the specified mean.","title":"randomNormal"},{"location":"doc/#setrandomseed","text":"function love.math. setRandomSeed ( seed : number) Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself. Open in Browser @ param seed \u2014 The integer number with which you want to seed the randomization. Must be within the range of 2^53 - 1.","title":"setRandomSeed"},{"location":"doc/#setrandomstate","text":"function love.math. setRandomState ( state : string) Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState. This is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value. Open in Browser @ param state \u2014 The new state of the random number generator, represented as a string. This should originate from a previous call to love.math.getRandomState.","title":"setRandomState"},{"location":"doc/#triangulate","text":"function love.math. triangulate ( polygon : table) -> triangles : table Decomposes a simple convex or concave polygon into triangles. Open in Browser @ param polygon \u2014 Polygon to triangulate. Must not intersect itself. @ return triangles \u2014 List of triangles the polygon is composed of, in the form of {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.","title":"triangulate"},{"location":"doc/#lovemathcolorfrombytes","text":"function love.math. colorFromBytes ( rb : number, gb : number, bb : number, ab ? : number ) -> r : number 2. g : number 3. b : number 4. a : number","title":"love.math.colorFromBytes"},{"location":"doc/#lovemathcolortobytes","text":"function love.math. colorToBytes ( r : number, g : number, b : number, a ? : number ) -> rb : number 2. gb : number 3. bb : number 4. ab : number","title":"love.math.colorToBytes"},{"location":"doc/#lovemathgammatolinear","text":"function love.math. gammaToLinear ( r : number, g : number, b : number) -> lr : number 2. lg : number 3. lb : number","title":"love.math.gammaToLinear"},{"location":"doc/#lovemathgetrandomseed","text":"function love.math. getRandomSeed () -> low : number 2. high : number","title":"love.math.getRandomSeed"},{"location":"doc/#lovemathgetrandomstate","text":"function love.math. getRandomState () -> state : string","title":"love.math.getRandomState"},{"location":"doc/#lovemathisconvex","text":"function love.math. isConvex ( vertices : table) -> convex : boolean","title":"love.math.isConvex"},{"location":"doc/#lovemathlineartogamma","text":"function love.math. linearToGamma ( lr : number, lg : number, lb : number) -> cr : number 2. cg : number 3. cb : number","title":"love.math.linearToGamma"},{"location":"doc/#lovemathnewbeziercurve","text":"function love.math. newBezierCurve ( vertices : table) -> curve : love.BezierCurve","title":"love.math.newBezierCurve"},{"location":"doc/#lovemathnewrandomgenerator","text":"function love.math. newRandomGenerator () -> rng : love.RandomGenerator","title":"love.math.newRandomGenerator"},{"location":"doc/#lovemathnewtransform","text":"function love.math. newTransform () -> transform : love.Transform","title":"love.math.newTransform"},{"location":"doc/#lovemathnoise","text":"function love.math. noise ( x : number) -> value : number","title":"love.math.noise"},{"location":"doc/#lovemathrandom","text":"function love.math. random () -> number : number","title":"love.math.random"},{"location":"doc/#lovemathrandomnormal","text":"function love.math. randomNormal ( stddev ? : number , mean ? : number ) -> number : number","title":"love.math.randomNormal"},{"location":"doc/#lovemathsetrandomseed","text":"function love.math. setRandomSeed ( seed : number)","title":"love.math.setRandomSeed"},{"location":"doc/#lovemathsetrandomstate","text":"function love.math. setRandomState ( state : string)","title":"love.math.setRandomState"},{"location":"doc/#lovemathtriangulate","text":"function love.math. triangulate ( polygon : table) -> triangles : table","title":"love.math.triangulate"},{"location":"doc/#lovemouse","text":"","title":"love.mouse"},{"location":"doc/#getcursor","text":"function love.mouse. getCursor () -> cursor : love.Cursor Gets the current Cursor. Open in Browser @ return cursor \u2014 The current cursor, or nil if no cursor is set.","title":"getCursor"},{"location":"doc/#getposition_8","text":"function love.mouse. getPosition () -> x : number 2. y : number Returns the current position of the mouse. Open in Browser @ return x \u2014 The position of the mouse along the x-axis. @ return y \u2014 The position of the mouse along the y-axis.","title":"getPosition"},{"location":"doc/#getrelativemode","text":"function love.mouse. getRelativeMode () -> enabled : boolean Gets whether relative mode is enabled for the mouse. If relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen. The reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated. Open in Browser @ return enabled \u2014 True if relative mode is enabled, false if it's disabled.","title":"getRelativeMode"},{"location":"doc/#getsystemcursor","text":"function love.mouse. getSystemCursor ( ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8)) -> cursor: love.Cursor Gets a Cursor object representing a system-native hardware cursor. Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates. Open in Browser @ param ctype \u2014 The type of system cursor to get. @ return cursor \u2014 The Cursor object representing the system cursor type. -- -- Types of hardware cursors. -- -- -- [Open in Browser](https://love2d.org/wiki/CursorType) -- ctype : | \" image \" -- The cursor is using a custom image. | \" arrow \" -- An arrow pointer. | \" ibeam \" -- An I-beam, normally used when mousing over editable or selectable text. | \" wait \" -- Wait graphic. | \" waitarrow \" -- Small wait cursor with an arrow pointer. | \" crosshair \" -- Crosshair symbol. | \" sizenwse \" -- Double arrow pointing to the top-left and bottom-right. | \" sizenesw \" -- Double arrow pointing to the top-right and bottom-left. | \" sizewe \" -- Double arrow pointing left and right. | \" sizens \" -- Double arrow pointing up and down. | \" sizeall \" -- Four-pointed arrow pointing up, down, left, and right. | \" no \" -- Slashed circle or crossbones. | \" hand \" -- Hand symbol.","title":"getSystemCursor"},{"location":"doc/#getx_1","text":"function love.mouse. getX () -> x : number Returns the current x-position of the mouse. Open in Browser @ return x \u2014 The position of the mouse along the x-axis.","title":"getX"},{"location":"doc/#gety_1","text":"function love.mouse. getY () -> y : number Returns the current y-position of the mouse. Open in Browser @ return y \u2014 The position of the mouse along the y-axis.","title":"getY"},{"location":"doc/#iscursorsupported","text":"function love.mouse. isCursorSupported () -> supported : boolean Gets whether cursor functionality is supported. If it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors. Open in Browser @ return supported \u2014 Whether the system has cursor functionality.","title":"isCursorSupported"},{"location":"doc/#isdown_2","text":"function love.mouse. isDown ( button : number, ... number ) -> down : boolean Checks whether a certain mouse button is down. This function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. Open in Browser @ param button \u2014 The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant. @ return down \u2014 True if any specified button is down.","title":"isDown"},{"location":"doc/#isgrabbed","text":"function love.mouse. isGrabbed () -> grabbed : boolean Checks if the mouse is grabbed. Open in Browser @ return grabbed \u2014 True if the cursor is grabbed, false if it is not.","title":"isGrabbed"},{"location":"doc/#isvisible","text":"function love.mouse. isVisible () -> visible : boolean Checks if the cursor is visible. Open in Browser @ return visible \u2014 True if the cursor to visible, false if the cursor is hidden.","title":"isVisible"},{"location":"doc/#newcursor","text":"function love.mouse. newCursor ( imageData : love.ImageData, hotx ? : number , hoty ? : number ) -> cursor : love.Cursor Creates a new hardware Cursor object from an image file or ImageData. Hardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates. The hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle. Open in Browser @ param imageData \u2014 The ImageData to use for the new Cursor. @ param hotx \u2014 The x-coordinate in the ImageData of the cursor's hot spot. @ param hoty \u2014 The y-coordinate in the ImageData of the cursor's hot spot. @ return cursor \u2014 The new Cursor object.","title":"newCursor"},{"location":"doc/#setcursor","text":"function love.mouse. setCursor ( cursor : love.Cursor) Sets the current mouse cursor. Open in Browser @ param cursor \u2014 The Cursor object to use as the current mouse cursor.","title":"setCursor"},{"location":"doc/#setgrabbed","text":"function love.mouse. setGrabbed ( grab : boolean) Grabs the mouse and confines it to the window. Open in Browser @ param grab \u2014 True to confine the mouse, false to let it leave the window.","title":"setGrabbed"},{"location":"doc/#setposition_7","text":"function love.mouse. setPosition ( x : number, y : number) Sets the current position of the mouse. Non-integer values are floored. Open in Browser @ param x \u2014 The new position of the mouse along the x-axis. @ param y \u2014 The new position of the mouse along the y-axis.","title":"setPosition"},{"location":"doc/#setrelativemode","text":"function love.mouse. setRelativeMode ( enable : boolean) Sets whether relative mode is enabled for the mouse. When relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen. The reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated. Open in Browser @ param enable \u2014 True to enable relative mode, false to disable it.","title":"setRelativeMode"},{"location":"doc/#setvisible","text":"function love.mouse. setVisible ( visible : boolean) Sets the current visibility of the cursor. Open in Browser @ param visible \u2014 True to set the cursor to visible, false to hide the cursor.","title":"setVisible"},{"location":"doc/#setx_1","text":"function love.mouse. setX ( x : number) Sets the current X position of the mouse. Non-integer values are floored. Open in Browser @ param x \u2014 The new position of the mouse along the x-axis.","title":"setX"},{"location":"doc/#sety_1","text":"function love.mouse. setY ( y : number) Sets the current Y position of the mouse. Non-integer values are floored. Open in Browser @ param y \u2014 The new position of the mouse along the y-axis.","title":"setY"},{"location":"doc/#lovemouse_1","text":"love .mouse","title":"love.mouse"},{"location":"doc/#lovemousegetcursor","text":"function love.mouse. getCursor () -> cursor : love.Cursor","title":"love.mouse.getCursor"},{"location":"doc/#lovemousegetposition","text":"function love.mouse. getPosition () -> x : number 2. y : number","title":"love.mouse.getPosition"},{"location":"doc/#lovemousegetrelativemode","text":"function love.mouse. getRelativeMode () -> enabled : boolean","title":"love.mouse.getRelativeMode"},{"location":"doc/#lovemousegetsystemcursor","text":"function love.mouse. getSystemCursor ( ctype : \" arrow \"|\" crosshair \"|\" hand \"|\" ibeam \"|\" image \"...(+8)) -> cursor: love.Cursor","title":"love.mouse.getSystemCursor"},{"location":"doc/#lovemousegetx","text":"function love.mouse. getX () -> x : number","title":"love.mouse.getX"},{"location":"doc/#lovemousegety","text":"function love.mouse. getY () -> y : number","title":"love.mouse.getY"},{"location":"doc/#lovemouseiscursorsupported","text":"function love.mouse. isCursorSupported () -> supported : boolean","title":"love.mouse.isCursorSupported"},{"location":"doc/#lovemouseisdown","text":"function love.mouse. isDown ( button : number, ... number ) -> down : boolean","title":"love.mouse.isDown"},{"location":"doc/#lovemouseisgrabbed","text":"function love.mouse. isGrabbed () -> grabbed : boolean","title":"love.mouse.isGrabbed"},{"location":"doc/#lovemouseisvisible","text":"function love.mouse. isVisible () -> visible : boolean","title":"love.mouse.isVisible"},{"location":"doc/#lovemousenewcursor","text":"function love.mouse. newCursor ( imageData : love.ImageData, hotx ? : number , hoty ? : number ) -> cursor : love.Cursor","title":"love.mouse.newCursor"},{"location":"doc/#lovemousesetcursor","text":"function love.mouse. setCursor ( cursor : love.Cursor)","title":"love.mouse.setCursor"},{"location":"doc/#lovemousesetgrabbed","text":"function love.mouse. setGrabbed ( grab : boolean)","title":"love.mouse.setGrabbed"},{"location":"doc/#lovemousesetposition","text":"function love.mouse. setPosition ( x : number, y : number)","title":"love.mouse.setPosition"},{"location":"doc/#lovemousesetrelativemode","text":"function love.mouse. setRelativeMode ( enable : boolean)","title":"love.mouse.setRelativeMode"},{"location":"doc/#lovemousesetvisible","text":"function love.mouse. setVisible ( visible : boolean)","title":"love.mouse.setVisible"},{"location":"doc/#lovemousesetx","text":"function love.mouse. setX ( x : number)","title":"love.mouse.setX"},{"location":"doc/#lovemousesety","text":"function love.mouse. setY ( y : number)","title":"love.mouse.setY"},{"location":"doc/#lovemousefocus","text":"","title":"love.mousefocus"},{"location":"doc/#lovemousemoved","text":"","title":"love.mousemoved"},{"location":"doc/#lovemousepressed","text":"","title":"love.mousepressed"},{"location":"doc/#lovemousereleased","text":"","title":"love.mousereleased"},{"location":"doc/#lovephysics","text":"love .physics","title":"love.physics"},{"location":"doc/#lovephysics_1","text":"","title":"love.physics"},{"location":"doc/#getdistance","text":"function love.physics. getDistance ( fixture1 : love.Fixture, fixture2 : love.Fixture) -> distance : number 2. x1 : number 3. y1 : number 4. x2 : number 5. y2 : number Returns the two closest points between two fixtures and their distance. Open in Browser @ param fixture1 \u2014 The first fixture. @ param fixture2 \u2014 The second fixture. @ return distance \u2014 The distance of the two points. @ return x1 \u2014 The x-coordinate of the first point. @ return y1 \u2014 The y-coordinate of the first point. @ return x2 \u2014 The x-coordinate of the second point. @ return y2 \u2014 The y-coordinate of the second point.","title":"getDistance"},{"location":"doc/#getmeter","text":"function love.physics. getMeter () -> scale : number Returns the meter scale factor. All coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations. It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. Open in Browser @ return scale \u2014 The scale factor as an integer.","title":"getMeter"},{"location":"doc/#newbody","text":"function love.physics. newBody ( world : love.World, x ? : number , y ? : number , type ? : \"dynamic\" | \"kinematic\" | \"static\" ) -> body : love.Body Creates a new body. There are three types of bodies. Static bodies do not move, have a infinite mass, and can be used for level boundaries. Dynamic bodies are the main actors in the simulation, they collide with everything. Kinematic bodies do not react to forces and only collide with dynamic bodies. The mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData. Open in Browser @ param world \u2014 The world to create the body in. @ param x \u2014 The x position of the body. @ param y \u2014 The y position of the body. @ param type \u2014 The type of the body. @ return body \u2014 A new body. -- -- The types of a Body. -- -- -- [Open in Browser](https://love2d.org/wiki/BodyType) -- type : | \"static\" -- Static bodies do not move. | \"dynamic\" -- Dynamic bodies collide with all bodies. | \"kinematic\" -- Kinematic bodies only collide with dynamic bodies.","title":"newBody"},{"location":"doc/#newchainshape","text":"function love.physics. newChainShape ( loop : boolean, x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> shape : love.ChainShape Creates a new ChainShape. Open in Browser @ param loop \u2014 If the chain should loop back to the first point. @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return shape \u2014 The new shape.","title":"newChainShape"},{"location":"doc/#newcircleshape","text":"function love.physics. newCircleShape ( radius : number) -> shape : love.CircleShape Creates a new CircleShape. Open in Browser @ param radius \u2014 The radius of the circle. @ return shape \u2014 The new shape.","title":"newCircleShape"},{"location":"doc/#newdistancejoint","text":"function love.physics. newDistanceJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, collideConnected ? : boolean ) -> joint : love.DistanceJoint Creates a DistanceJoint between two bodies. This joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x1 \u2014 The x position of the first anchor point (world space). @ param y1 \u2014 The y position of the first anchor point (world space). @ param x2 \u2014 The x position of the second anchor point (world space). @ param y2 \u2014 The y position of the second anchor point (world space). @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new distance joint.","title":"newDistanceJoint"},{"location":"doc/#newedgeshape","text":"function love.physics. newEdgeShape ( x1 : number, y1 : number, x2 : number, y2 : number) -> shape : love.EdgeShape Creates a new EdgeShape. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ return shape \u2014 The new shape.","title":"newEdgeShape"},{"location":"doc/#newfixture","text":"function love.physics. newFixture ( body : love.Body, shape : love.Shape, density ? : number ) -> fixture : love.Fixture Creates and attaches a Fixture to a body. Note that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape. Open in Browser @ param body \u2014 The body which gets the fixture attached. @ param shape \u2014 The shape to be copied to the fixture. @ param density \u2014 The density of the fixture. @ return fixture \u2014 The new fixture.","title":"newFixture"},{"location":"doc/#newfrictionjoint","text":"function love.physics. newFrictionJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.FrictionJoint Create a friction joint between two bodies. A FrictionJoint applies friction to a body. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x \u2014 The x position of the anchor point. @ param y \u2014 The y position of the anchor point. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new FrictionJoint.","title":"newFrictionJoint"},{"location":"doc/#newgearjoint","text":"function love.physics. newGearJoint ( joint1 : love.Joint, joint2 : love.Joint, ratio ? : number , collideConnected ? : boolean ) -> joint : love.GearJoint Create a GearJoint connecting two Joints. The gear joint connects two joints that must be either prismatic or revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints. The gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created. Open in Browser @ param joint1 \u2014 The first joint to connect with a gear joint. @ param joint2 \u2014 The second joint to connect with a gear joint. @ param ratio \u2014 The gear ratio. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new gear joint.","title":"newGearJoint"},{"location":"doc/#newmotorjoint","text":"function love.physics. newMotorJoint ( body1 : love.Body, body2 : love.Body, correctionFactor ? : number ) -> joint : love.MotorJoint Creates a joint between two bodies which controls the relative motion between them. Position and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param correctionFactor \u2014 The joint's initial position correction factor, in the range of 1. @ return joint \u2014 The new MotorJoint.","title":"newMotorJoint"},{"location":"doc/#newmousejoint","text":"function love.physics. newMouseJoint ( body : love.Body, x : number, y : number) -> joint : love.MouseJoint Create a joint between a body and the mouse. This joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below). The advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. Open in Browser @ param body \u2014 The body to attach to the mouse. @ param x \u2014 The x position of the connecting point. @ param y \u2014 The y position of the connecting point. @ return joint \u2014 The new mouse joint.","title":"newMouseJoint"},{"location":"doc/#newpolygonshape","text":"function love.physics. newPolygonShape ( x1 : number, y1 : number, x2 : number, y2 : number, x3 : number, y3 : number, ... number ) -> shape : love.PolygonShape Creates a new PolygonShape. This shape can have 8 vertices at most, and must form a convex shape. Open in Browser @ param x1 \u2014 The x position of the first point. @ param y1 \u2014 The y position of the first point. @ param x2 \u2014 The x position of the second point. @ param y2 \u2014 The y position of the second point. @ param x3 \u2014 The x position of the third point. @ param y3 \u2014 The y position of the third point. @ return shape \u2014 A new PolygonShape.","title":"newPolygonShape"},{"location":"doc/#newprismaticjoint","text":"function love.physics. newPrismaticJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.PrismaticJoint Creates a PrismaticJoint between two bodies. A prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a revolute joint, but with translation and force substituted for angle and torque. Open in Browser @ param body1 \u2014 The first body to connect with a prismatic joint. @ param body2 \u2014 The second body to connect with a prismatic joint. @ param x \u2014 The x coordinate of the anchor point. @ param y \u2014 The y coordinate of the anchor point. @ param ax \u2014 The x coordinate of the axis vector. @ param ay \u2014 The y coordinate of the axis vector. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new prismatic joint.","title":"newPrismaticJoint"},{"location":"doc/#newpulleyjoint","text":"function love.physics. newPulleyJoint ( body1 : love.Body, body2 : love.Body, gx1 : number, gy1 : number, gx2 : number, gy2 : number, x1 : number, y1 : number, x2 : number, y2 : number, ratio ? : number , collideConnected ? : boolean ) -> joint : love.PulleyJoint Creates a PulleyJoint to join two bodies to each other and the ground. The pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created. Pulley joints can behave unpredictably if one side is fully extended. It is recommended that the method setMaxLengths be used to constrain the maximum lengths each side can attain. Open in Browser @ param body1 \u2014 The first body to connect with a pulley joint. @ param body2 \u2014 The second body to connect with a pulley joint. @ param gx1 \u2014 The x coordinate of the first body's ground anchor. @ param gy1 \u2014 The y coordinate of the first body's ground anchor. @ param gx2 \u2014 The x coordinate of the second body's ground anchor. @ param gy2 \u2014 The y coordinate of the second body's ground anchor. @ param x1 \u2014 The x coordinate of the pulley joint anchor in the first body. @ param y1 \u2014 The y coordinate of the pulley joint anchor in the first body. @ param x2 \u2014 The x coordinate of the pulley joint anchor in the second body. @ param y2 \u2014 The y coordinate of the pulley joint anchor in the second body. @ param ratio \u2014 The joint ratio. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new pulley joint.","title":"newPulleyJoint"},{"location":"doc/#newrectangleshape","text":"function love.physics. newRectangleShape ( width : number, height : number) -> shape : love.PolygonShape Shorthand for creating rectangular PolygonShapes. By default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics. Open in Browser @ param width \u2014 The width of the rectangle. @ param height \u2014 The height of the rectangle. @ return shape \u2014 A new PolygonShape.","title":"newRectangleShape"},{"location":"doc/#newrevolutejoint","text":"function love.physics. newRevoluteJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.RevoluteJoint Creates a pivot joint between two bodies. This joint connects two bodies to a point around which they can pivot. Open in Browser @ param body1 \u2014 The first body. @ param body2 \u2014 The second body. @ param x \u2014 The x position of the connecting point. @ param y \u2014 The y position of the connecting point. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new revolute joint.","title":"newRevoluteJoint"},{"location":"doc/#newropejoint","text":"function love.physics. newRopeJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, maxLength : number, collideConnected ? : boolean ) -> joint : love.RopeJoint Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x1 \u2014 The x position of the first anchor point. @ param y1 \u2014 The y position of the first anchor point. @ param x2 \u2014 The x position of the second anchor point. @ param y2 \u2014 The y position of the second anchor point. @ param maxLength \u2014 The maximum distance for the bodies. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new RopeJoint.","title":"newRopeJoint"},{"location":"doc/#newweldjoint","text":"function love.physics. newWeldJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.WeldJoint Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver. Open in Browser @ param body1 \u2014 The first body to attach to the joint. @ param body2 \u2014 The second body to attach to the joint. @ param x \u2014 The x position of the anchor point (world space). @ param y \u2014 The y position of the anchor point (world space). @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new WeldJoint.","title":"newWeldJoint"},{"location":"doc/#newwheeljoint","text":"function love.physics. newWheelJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.WheelJoint Creates a wheel joint. Open in Browser @ param body1 \u2014 The first body. @ param body2 \u2014 The second body. @ param x \u2014 The x position of the anchor point. @ param y \u2014 The y position of the anchor point. @ param ax \u2014 The x position of the axis unit vector. @ param ay \u2014 The y position of the axis unit vector. @ param collideConnected \u2014 Specifies whether the two bodies should collide with each other. @ return joint \u2014 The new WheelJoint.","title":"newWheelJoint"},{"location":"doc/#newworld","text":"function love.physics. newWorld ( xg ? : number , yg ? : number , sleep ? : boolean ) -> world : love.World Creates a new World. Open in Browser @ param xg \u2014 The x component of gravity. @ param yg \u2014 The y component of gravity. @ param sleep \u2014 Whether the bodies in this world are allowed to sleep. @ return world \u2014 A brave new World.","title":"newWorld"},{"location":"doc/#setmeter","text":"function love.physics. setMeter ( scale : number) Sets the pixels to meter scale factor. All coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations. It is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30. Open in Browser @ param scale \u2014 The scale factor as an integer.","title":"setMeter"},{"location":"doc/#lovephysicsgetdistance","text":"function love.physics. getDistance ( fixture1 : love.Fixture, fixture2 : love.Fixture) -> distance : number 2. x1 : number 3. y1 : number 4. x2 : number 5. y2 : number","title":"love.physics.getDistance"},{"location":"doc/#lovephysicsgetmeter","text":"function love.physics. getMeter () -> scale : number","title":"love.physics.getMeter"},{"location":"doc/#lovephysicsnewbody","text":"function love.physics. newBody ( world : love.World, x ? : number , y ? : number , type ? : \"dynamic\" | \"kinematic\" | \"static\" ) -> body : love.Body","title":"love.physics.newBody"},{"location":"doc/#lovephysicsnewchainshape","text":"function love.physics. newChainShape ( loop : boolean, x1 : number, y1 : number, x2 : number, y2 : number, ... number ) -> shape : love.ChainShape","title":"love.physics.newChainShape"},{"location":"doc/#lovephysicsnewcircleshape","text":"function love.physics. newCircleShape ( radius : number) -> shape : love.CircleShape","title":"love.physics.newCircleShape"},{"location":"doc/#lovephysicsnewdistancejoint","text":"function love.physics. newDistanceJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, collideConnected ? : boolean ) -> joint : love.DistanceJoint","title":"love.physics.newDistanceJoint"},{"location":"doc/#lovephysicsnewedgeshape","text":"function love.physics. newEdgeShape ( x1 : number, y1 : number, x2 : number, y2 : number) -> shape : love.EdgeShape","title":"love.physics.newEdgeShape"},{"location":"doc/#lovephysicsnewfixture","text":"function love.physics. newFixture ( body : love.Body, shape : love.Shape, density ? : number ) -> fixture : love.Fixture","title":"love.physics.newFixture"},{"location":"doc/#lovephysicsnewfrictionjoint","text":"function love.physics. newFrictionJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.FrictionJoint","title":"love.physics.newFrictionJoint"},{"location":"doc/#lovephysicsnewgearjoint","text":"function love.physics. newGearJoint ( joint1 : love.Joint, joint2 : love.Joint, ratio ? : number , collideConnected ? : boolean ) -> joint : love.GearJoint","title":"love.physics.newGearJoint"},{"location":"doc/#lovephysicsnewmotorjoint","text":"function love.physics. newMotorJoint ( body1 : love.Body, body2 : love.Body, correctionFactor ? : number ) -> joint : love.MotorJoint","title":"love.physics.newMotorJoint"},{"location":"doc/#lovephysicsnewmousejoint","text":"function love.physics. newMouseJoint ( body : love.Body, x : number, y : number) -> joint : love.MouseJoint","title":"love.physics.newMouseJoint"},{"location":"doc/#lovephysicsnewpolygonshape","text":"function love.physics. newPolygonShape ( x1 : number, y1 : number, x2 : number, y2 : number, x3 : number, y3 : number, ... number ) -> shape : love.PolygonShape","title":"love.physics.newPolygonShape"},{"location":"doc/#lovephysicsnewprismaticjoint","text":"function love.physics. newPrismaticJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.PrismaticJoint","title":"love.physics.newPrismaticJoint"},{"location":"doc/#lovephysicsnewpulleyjoint","text":"function love.physics. newPulleyJoint ( body1 : love.Body, body2 : love.Body, gx1 : number, gy1 : number, gx2 : number, gy2 : number, x1 : number, y1 : number, x2 : number, y2 : number, ratio ? : number , collideConnected ? : boolean ) -> joint : love.PulleyJoint","title":"love.physics.newPulleyJoint"},{"location":"doc/#lovephysicsnewrectangleshape","text":"function love.physics. newRectangleShape ( width : number, height : number) -> shape : love.PolygonShape","title":"love.physics.newRectangleShape"},{"location":"doc/#lovephysicsnewrevolutejoint","text":"function love.physics. newRevoluteJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.RevoluteJoint","title":"love.physics.newRevoluteJoint"},{"location":"doc/#lovephysicsnewropejoint","text":"function love.physics. newRopeJoint ( body1 : love.Body, body2 : love.Body, x1 : number, y1 : number, x2 : number, y2 : number, maxLength : number, collideConnected ? : boolean ) -> joint : love.RopeJoint","title":"love.physics.newRopeJoint"},{"location":"doc/#lovephysicsnewweldjoint","text":"function love.physics. newWeldJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, collideConnected ? : boolean ) -> joint : love.WeldJoint","title":"love.physics.newWeldJoint"},{"location":"doc/#lovephysicsnewwheeljoint","text":"function love.physics. newWheelJoint ( body1 : love.Body, body2 : love.Body, x : number, y : number, ax : number, ay : number, collideConnected ? : boolean ) -> joint : love.WheelJoint","title":"love.physics.newWheelJoint"},{"location":"doc/#lovephysicsnewworld","text":"function love.physics. newWorld ( xg ? : number , yg ? : number , sleep ? : boolean ) -> world : love.World","title":"love.physics.newWorld"},{"location":"doc/#lovephysicssetmeter","text":"function love.physics. setMeter ( scale : number)","title":"love.physics.setMeter"},{"location":"doc/#lovequit","text":"","title":"love.quit"},{"location":"doc/#loveresize","text":"","title":"love.resize"},{"location":"doc/#loverun","text":"","title":"love.run"},{"location":"doc/#lovesetdeprecationoutput","text":"function love. setDeprecationOutput ( enable : boolean)","title":"love.setDeprecationOutput"},{"location":"doc/#lovesound","text":"love .sound","title":"love.sound"},{"location":"doc/#lovesound_1","text":"","title":"love.sound"},{"location":"doc/#newdecoder","text":"function love.sound. newDecoder ( file : love.File, buffer ? : number ) -> decoder : love.Decoder Attempts to find a decoder for the encoded sound data in the specified file. Open in Browser @ param file \u2014 The file with encoded sound data. @ param buffer \u2014 The size of each decoded chunk, in bytes. @ return decoder \u2014 A new Decoder object.","title":"newDecoder"},{"location":"doc/#newsounddata","text":"function love.sound. newSoundData ( filename : string) -> soundData : love.SoundData Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth. The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way. Open in Browser @ param filename \u2014 The file name of the file to load. @ return soundData \u2014 A new SoundData object.","title":"newSoundData"},{"location":"doc/#lovesoundnewdecoder","text":"function love.sound. newDecoder ( file : love.File, buffer ? : number ) -> decoder : love.Decoder","title":"love.sound.newDecoder"},{"location":"doc/#lovesoundnewsounddata","text":"function love.sound. newSoundData ( filename : string) -> soundData : love.SoundData","title":"love.sound.newSoundData"},{"location":"doc/#lovesystem","text":"love .system","title":"love.system"},{"location":"doc/#lovesystem_1","text":"","title":"love.system"},{"location":"doc/#getclipboardtext","text":"function love.system. getClipboardText () -> text : string Gets text from the clipboard. Open in Browser @ return text \u2014 The text currently held in the system's clipboard.","title":"getClipboardText"},{"location":"doc/#getos","text":"function love.system. getOS () -> osString : string Gets the current operating system. In general, L\u00d6VE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.) Open in Browser @ return osString \u2014 The current operating system. 'OS X', 'Windows', 'Linux', 'Android' or 'iOS'.","title":"getOS"},{"location":"doc/#getpowerinfo","text":"function love.system. getPowerInfo () -> state : \" battery \"|\" charged \"|\" charging \"|\" nobattery \"|\" unknown \" 2. percent: number 3. seconds: number Gets information about the system's power supply. Open in Browser @ return state \u2014 The basic state of the power supply. @ return percent \u2014 Percentage of battery life left, between 0 and 100. nil if the value can't be determined or there's no battery. @ return seconds \u2014 Seconds of battery life left. nil if the value can't be determined or there's no battery. -- -- The basic state of the system's power supply. -- -- -- [Open in Browser](https://love2d.org/wiki/PowerState) -- state : | \" unknown \" -- Cannot determine power status. | \" battery \" -- Not plugged in, running on a battery. | \" nobattery \" -- Plugged in, no battery available. | \" charging \" -- Plugged in, charging battery. | \" charged \" -- Plugged in, battery is fully charged.","title":"getPowerInfo"},{"location":"doc/#getprocessorcount","text":"function love.system. getProcessorCount () -> processorCount : number Gets the amount of logical processor in the system. Open in Browser @ return processorCount \u2014 Amount of logical processors.","title":"getProcessorCount"},{"location":"doc/#hasbackgroundmusic","text":"function love.system. hasBackgroundMusic () -> backgroundmusic : boolean Gets whether another application on the system is playing music in the background. Currently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while L\u00d6VE is open. Open in Browser @ return backgroundmusic \u2014 True if the user is playing music in the background via another app, false otherwise.","title":"hasBackgroundMusic"},{"location":"doc/#openurl","text":"function love.system. openURL ( url : string) -> success : boolean Opens a URL with the user's web or file browser. Open in Browser @ param url \u2014 The URL to open. Must be formatted as a proper URL. @ return success \u2014 Whether the URL was opened successfully.","title":"openURL"},{"location":"doc/#setclipboardtext","text":"function love.system. setClipboardText ( text : string) Puts text in the clipboard. Open in Browser @ param text \u2014 The new text to hold in the system's clipboard.","title":"setClipboardText"},{"location":"doc/#vibrate","text":"function love.system. vibrate ( seconds ? : number ) Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor. Open in Browser @ param seconds \u2014 The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.","title":"vibrate"},{"location":"doc/#lovesystemgetclipboardtext","text":"function love.system. getClipboardText () -> text : string","title":"love.system.getClipboardText"},{"location":"doc/#lovesystemgetos","text":"function love.system. getOS () -> osString : string","title":"love.system.getOS"},{"location":"doc/#lovesystemgetpowerinfo","text":"function love.system. getPowerInfo () -> state : \" battery \"|\" charged \"|\" charging \"|\" nobattery \"|\" unknown \" 2. percent: number 3. seconds: number","title":"love.system.getPowerInfo"},{"location":"doc/#lovesystemgetprocessorcount","text":"function love.system. getProcessorCount () -> processorCount : number","title":"love.system.getProcessorCount"},{"location":"doc/#lovesystemhasbackgroundmusic","text":"function love.system. hasBackgroundMusic () -> backgroundmusic : boolean","title":"love.system.hasBackgroundMusic"},{"location":"doc/#lovesystemopenurl","text":"function love.system. openURL ( url : string) -> success : boolean","title":"love.system.openURL"},{"location":"doc/#lovesystemsetclipboardtext","text":"function love.system. setClipboardText ( text : string)","title":"love.system.setClipboardText"},{"location":"doc/#lovesystemvibrate","text":"function love.system. vibrate ( seconds ? : number )","title":"love.system.vibrate"},{"location":"doc/#lovetextedited","text":"","title":"love.textedited"},{"location":"doc/#lovetextinput","text":"","title":"love.textinput"},{"location":"doc/#lovethread_1","text":"","title":"love.thread"},{"location":"doc/#getchannel","text":"function love.thread. getChannel ( name : string) -> channel : love.Channel Creates or retrieves a named thread channel. Open in Browser @ param name \u2014 The name of the channel you want to create or retrieve. @ return channel \u2014 The Channel object associated with the name.","title":"getChannel"},{"location":"doc/#newchannel","text":"function love.thread. newChannel () -> channel : love.Channel Create a new unnamed thread channel. One use for them is to pass new unnamed channels to other threads via Channel:push on a named channel. Open in Browser @ return channel \u2014 The new Channel object.","title":"newChannel"},{"location":"doc/#newthread","text":"function love.thread. newThread ( filename : string) -> thread : love.Thread Creates a new Thread from a filename, string or FileData object containing Lua code. Open in Browser @ param filename \u2014 The name of the Lua file to use as the source. @ return thread \u2014 A new Thread that has yet to be started.","title":"newThread"},{"location":"doc/#lovethread_2","text":"love .thread","title":"love.thread"},{"location":"doc/#lovethreadgetchannel","text":"function love.thread. getChannel ( name : string) -> channel : love.Channel","title":"love.thread.getChannel"},{"location":"doc/#lovethreadnewchannel","text":"function love.thread. newChannel () -> channel : love.Channel","title":"love.thread.newChannel"},{"location":"doc/#lovethreadnewthread","text":"function love.thread. newThread ( filename : string) -> thread : love.Thread","title":"love.thread.newThread"},{"location":"doc/#lovethreaderror","text":"","title":"love.threaderror"},{"location":"doc/#lovetimer","text":"love .timer","title":"love.timer"},{"location":"doc/#lovetimer_1","text":"","title":"love.timer"},{"location":"doc/#getaveragedelta","text":"function love.timer. getAverageDelta () -> delta : number Returns the average delta time (seconds per frame) over the last second. Open in Browser @ return delta \u2014 The average delta time over the last second.","title":"getAverageDelta"},{"location":"doc/#getdelta","text":"function love.timer. getDelta () -> dt : number Returns the time between the last two frames. Open in Browser @ return dt \u2014 The time passed (in seconds).","title":"getDelta"},{"location":"doc/#getfps","text":"function love.timer. getFPS () -> fps : number Returns the current frames per second. Open in Browser @ return fps \u2014 The current FPS.","title":"getFPS"},{"location":"doc/#gettime","text":"function love.timer. getTime () -> time : number Returns the value of a timer with an unspecified starting time. This function should only be used to calculate differences between points in time, as the starting time of the timer is unknown. Open in Browser @ return time \u2014 The time in seconds. Given as a decimal, accurate to the microsecond.","title":"getTime"},{"location":"doc/#sleep","text":"function love.timer. sleep ( s : number) Pauses the current thread for the specified amount of time. Open in Browser @ param s \u2014 Seconds to sleep for.","title":"sleep"},{"location":"doc/#step_1","text":"function love.timer. step () -> dt : number Measures the time between two frames. Calling this changes the return value of love.timer.getDelta. Open in Browser @ return dt \u2014 The time passed (in seconds).","title":"step"},{"location":"doc/#lovetimergetaveragedelta","text":"function love.timer. getAverageDelta () -> delta : number","title":"love.timer.getAverageDelta"},{"location":"doc/#lovetimergetdelta","text":"function love.timer. getDelta () -> dt : number","title":"love.timer.getDelta"},{"location":"doc/#lovetimergetfps","text":"function love.timer. getFPS () -> fps : number","title":"love.timer.getFPS"},{"location":"doc/#lovetimergettime","text":"function love.timer. getTime () -> time : number","title":"love.timer.getTime"},{"location":"doc/#lovetimersleep","text":"function love.timer. sleep ( s : number)","title":"love.timer.sleep"},{"location":"doc/#lovetimerstep","text":"function love.timer. step () -> dt : number","title":"love.timer.step"},{"location":"doc/#lovetouch","text":"","title":"love.touch"},{"location":"doc/#getposition_9","text":"function love.touch. getPosition ( id : lightuserdata) -> x : number 2. y : number Gets the current position of the specified touch-press, in pixels. Open in Browser @ param id \u2014 The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. @ return x \u2014 The position along the x-axis of the touch-press inside the window, in pixels. @ return y \u2014 The position along the y-axis of the touch-press inside the window, in pixels.","title":"getPosition"},{"location":"doc/#getpressure","text":"function love.touch. getPressure ( id : lightuserdata) -> pressure : number Gets the current pressure of the specified touch-press. Open in Browser @ param id \u2014 The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values. @ return pressure \u2014 The pressure of the touch-press. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.","title":"getPressure"},{"location":"doc/#gettouches","text":"function love.touch. getTouches () -> touches : table Gets a list of all active touch-presses. Open in Browser @ return touches \u2014 A list of active touch-press id values, which can be used with love.touch.getPosition.","title":"getTouches"},{"location":"doc/#lovetouch_1","text":"love .touch","title":"love.touch"},{"location":"doc/#lovetouchgetposition","text":"function love.touch. getPosition ( id : lightuserdata) -> x : number 2. y : number","title":"love.touch.getPosition"},{"location":"doc/#lovetouchgetpressure","text":"function love.touch. getPressure ( id : lightuserdata) -> pressure : number","title":"love.touch.getPressure"},{"location":"doc/#lovetouchgettouches","text":"function love.touch. getTouches () -> touches : table","title":"love.touch.getTouches"},{"location":"doc/#lovetouchmoved","text":"","title":"love.touchmoved"},{"location":"doc/#lovetouchpressed","text":"","title":"love.touchpressed"},{"location":"doc/#lovetouchreleased","text":"","title":"love.touchreleased"},{"location":"doc/#loveupdate","text":"","title":"love.update"},{"location":"doc/#lovevideo_1","text":"","title":"love.video"},{"location":"doc/#newvideostream","text":"function love.video. newVideoStream ( filename : string) -> videostream : love.VideoStream Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that. Open in Browser @ param filename \u2014 The file path to the Ogg Theora video file. @ return videostream \u2014 A new VideoStream.","title":"newVideoStream"},{"location":"doc/#lovevideo_2","text":"love .video","title":"love.video"},{"location":"doc/#lovevideonewvideostream","text":"function love.video. newVideoStream ( filename : string) -> videostream : love.VideoStream","title":"love.video.newVideoStream"},{"location":"doc/#lovevisible","text":"","title":"love.visible"},{"location":"doc/#lovewheelmoved","text":"","title":"love.wheelmoved"},{"location":"doc/#lovewindow","text":"love .window","title":"love.window"},{"location":"doc/#lovewindow_1","text":"","title":"love.window"},{"location":"doc/#close_5","text":"function love.window. close () Closes the window. It can be reopened with love.window.setMode. Open in Browser","title":"close"},{"location":"doc/#frompixels","text":"function love.window. fromPixels ( pixelvalue : number) -> value : number Converts a number from pixels to density-independent units. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case. This function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Most L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units. Open in Browser @ param pixelvalue \u2014 A number in pixels to convert to density-independent units. @ return value \u2014 The converted number, in density-independent units.","title":"fromPixels"},{"location":"doc/#getdpiscale_5","text":"function love.window. getDPIScale () -> scale : number Gets the DPI scale factor associated with the window. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case. The love.window.fromPixels and love.window.toPixels functions can also be used to convert between units. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Open in Browser @ return scale \u2014 The pixel scale factor associated with the window.","title":"getDPIScale"},{"location":"doc/#getdesktopdimensions","text":"function love.window. getDesktopDimensions ( displayindex ? : number ) -> width : number 2. height : number Gets the width and height of the desktop. Open in Browser @ param displayindex \u2014 The index of the display, if multiple monitors are available. @ return width \u2014 The width of the desktop. @ return height \u2014 The height of the desktop.","title":"getDesktopDimensions"},{"location":"doc/#getdisplaycount","text":"function love.window. getDisplayCount () -> count : number Gets the number of connected monitors. Open in Browser @ return count \u2014 The number of currently connected displays.","title":"getDisplayCount"},{"location":"doc/#getdisplayname","text":"function love.window. getDisplayName ( displayindex ? : number ) -> name : string Gets the name of a display. Open in Browser @ param displayindex \u2014 The index of the display to get the name of. @ return name \u2014 The name of the specified display.","title":"getDisplayName"},{"location":"doc/#getdisplayorientation","text":"function love.window. getDisplayOrientation ( displayindex ? : number ) -> orientation : \" landscape \"|\" landscapeflipped \"|\" portrait \"|\" portraitflipped \"|\" unknown \" Gets current device display orientation. Open in Browser @ param displayindex \u2014 Display index to get its display orientation, or nil for default display index. @ return orientation \u2014 Current device display orientation. -- -- Types of device display orientation. -- -- -- [Open in Browser](https://love2d.org/wiki/DisplayOrientation) -- orientation : | \" unknown \" -- Orientation cannot be determined. | \" landscape \" -- Landscape orientation. | \" landscapeflipped \" -- Landscape orientation (flipped). | \" portrait \" -- Portrait orientation. | \" portraitflipped \" -- Portrait orientation (flipped).","title":"getDisplayOrientation"},{"location":"doc/#getfullscreen","text":"function love.window. getFullscreen () -> fullscreen : boolean 2. fstype : \" desktop \"|\" exclusive \"|\" normal \" Gets whether the window is fullscreen. Open in Browser @ return fullscreen \u2014 True if the window is fullscreen, false otherwise. @ return fstype \u2014 The type of fullscreen mode used. -- -- Types of fullscreen modes. -- -- -- [Open in Browser](https://love2d.org/wiki/FullscreenType) -- fstype : | \" desktop \" -- Sometimes known as borderless fullscreen windowed mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed. | \" exclusive \" -- Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor. | \" normal \" -- Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.","title":"getFullscreen"},{"location":"doc/#getfullscreenmodes","text":"function love.window. getFullscreenModes ( displayindex ? : number ) -> modes : table Gets a list of supported fullscreen modes. Open in Browser @ param displayindex \u2014 The index of the display, if multiple monitors are available. @ return modes \u2014 A table of width/height pairs. (Note that this may not be in order.)","title":"getFullscreenModes"},{"location":"doc/#geticon","text":"function love.window. getIcon () -> imagedata : love.ImageData Gets the window icon. Open in Browser @ return imagedata \u2014 The window icon imagedata, or nil if no icon has been set with love.window.setIcon.","title":"getIcon"},{"location":"doc/#getmode_4","text":"function love.window. getMode () -> width : number 2. height : number 3. flags : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, refreshrate: number, x: number, y: number, srgb: boolean } Gets the display mode and properties of the window. Open in Browser @ return width \u2014 Window width. @ return height \u2014 Window height. @ return flags \u2014 Table with the window properties:","title":"getMode"},{"location":"doc/#getposition_10","text":"function love.window. getPosition () -> x : number 2. y : number 3. displayindex : number Gets the position of the window on the screen. The window position is in the coordinate space of the display it is currently in. Open in Browser @ return x \u2014 The x-coordinate of the window's position. @ return y \u2014 The y-coordinate of the window's position. @ return displayindex \u2014 The index of the display that the window is in.","title":"getPosition"},{"location":"doc/#getsafearea","text":"function love.window. getSafeArea () -> x : number 2. y : number 3. w : number 4. h : number Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user. Open in Browser @ return x \u2014 Starting position of safe area (x-axis). @ return y \u2014 Starting position of safe area (y-axis). @ return w \u2014 Width of safe area. @ return h \u2014 Height of safe area.","title":"getSafeArea"},{"location":"doc/#gettitle","text":"function love.window. getTitle () -> title : string Gets the window title. Open in Browser @ return title \u2014 The current window title.","title":"getTitle"},{"location":"doc/#getvsync","text":"function love.window. getVSync () -> vsync : number Gets current vertical synchronization (vsync). Open in Browser @ return vsync \u2014 Current vsync status. 1 if enabled, 0 if disabled, and -1 for adaptive vsync.","title":"getVSync"},{"location":"doc/#hasfocus","text":"function love.window. hasFocus () -> focus : boolean Checks if the game window has keyboard focus. Open in Browser @ return focus \u2014 True if the window has the focus or false if not.","title":"hasFocus"},{"location":"doc/#hasmousefocus","text":"function love.window. hasMouseFocus () -> focus : boolean Checks if the game window has mouse focus. Open in Browser @ return focus \u2014 True if the window has mouse focus or false if not.","title":"hasMouseFocus"},{"location":"doc/#isdisplaysleepenabled","text":"function love.window. isDisplaySleepEnabled () -> enabled : boolean Gets whether the display is allowed to sleep while the program is running. Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed. Open in Browser @ return enabled \u2014 True if system display sleep is enabled / allowed, false otherwise.","title":"isDisplaySleepEnabled"},{"location":"doc/#ismaximized","text":"function love.window. isMaximized () -> maximized : boolean Gets whether the Window is currently maximized. The window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called. Open in Browser @ return maximized \u2014 True if the window is currently maximized in windowed mode, false otherwise.","title":"isMaximized"},{"location":"doc/#isminimized","text":"function love.window. isMinimized () -> minimized : boolean Gets whether the Window is currently minimized. Open in Browser @ return minimized \u2014 True if the window is currently minimized, false otherwise.","title":"isMinimized"},{"location":"doc/#isopen_2","text":"function love.window. isOpen () -> open : boolean Checks if the window is open. Open in Browser @ return open \u2014 True if the window is open, false otherwise.","title":"isOpen"},{"location":"doc/#isvisible_1","text":"function love.window. isVisible () -> visible : boolean Checks if the game window is visible. The window is considered visible if it's not minimized and the program isn't hidden. Open in Browser @ return visible \u2014 True if the window is visible or false if not.","title":"isVisible"},{"location":"doc/#maximize","text":"function love.window. maximize () Makes the window as large as possible. This function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button. Open in Browser","title":"maximize"},{"location":"doc/#minimize","text":"function love.window. minimize () Minimizes the window to the system's task bar / dock. Open in Browser","title":"minimize"},{"location":"doc/#requestattention","text":"function love.window. requestAttention ( continuous ? : boolean ) Causes the window to request the attention of the user if it is not in the foreground. In Windows the taskbar icon will flash, and in OS X the dock icon will bounce. Open in Browser @ param continuous \u2014 Whether to continuously request attention until the window becomes active, or to do it only once.","title":"requestAttention"},{"location":"doc/#restore","text":"function love.window. restore () Restores the size and position of the window if it was minimized or maximized. Open in Browser","title":"restore"},{"location":"doc/#setdisplaysleepenabled","text":"function love.window. setDisplaySleepEnabled ( enable : boolean) Sets whether the display is allowed to sleep while the program is running. Display sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed. Open in Browser @ param enable \u2014 True to enable system display sleep, false to disable it.","title":"setDisplaySleepEnabled"},{"location":"doc/#setfullscreen","text":"function love.window. setFullscreen ( fullscreen : boolean) -> success : boolean Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected. Open in Browser @ param fullscreen \u2014 Whether to enter or exit fullscreen mode. @ return success \u2014 True if an attempt to enter fullscreen was successful, false otherwise.","title":"setFullscreen"},{"location":"doc/#seticon","text":"function love.window. setIcon ( imagedata : love.ImageData) -> success : boolean Sets the window icon until the game is quit. Not all operating systems support very large icon images. Open in Browser @ param imagedata \u2014 The window icon image. @ return success \u2014 Whether the icon has been set successfully.","title":"setIcon"},{"location":"doc/#setmode","text":"function love.window. setMode ( width : number, height : number, flags ? : { fullscreen : boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, stencil: boolean, depth: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number, usedpiscale: boolean, srgb: boolean }) -> success: boolean Sets the display mode and properties of the window. If width or height is 0, setMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to. Open in Browser @ param width \u2014 Display width. @ param height \u2014 Display height. @ param flags \u2014 The flags table with the options: @ return success \u2014 True if successful, false otherwise.","title":"setMode"},{"location":"doc/#setposition_8","text":"function love.window. setPosition ( x : number, y : number, displayindex ? : number ) Sets the position of the window on the screen. The window position is in the coordinate space of the specified display. Open in Browser @ param x \u2014 The x-coordinate of the window's position. @ param y \u2014 The y-coordinate of the window's position. @ param displayindex \u2014 The index of the display that the new window position is relative to.","title":"setPosition"},{"location":"doc/#settitle","text":"function love.window. setTitle ( title : string) Sets the window title. Open in Browser @ param title \u2014 The new window title.","title":"setTitle"},{"location":"doc/#setvsync","text":"function love.window. setVSync ( vsync : number) Sets vertical synchronization mode. Open in Browser @ param vsync \u2014 VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.","title":"setVSync"},{"location":"doc/#showmessagebox","text":"function love.window. showMessageBox ( title : string, message : string, type ? : \"error\" | \"info\" | \"warning\" , attachtowindow ? : boolean ) -> success : boolean Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons. Open in Browser @ param title \u2014 The title of the message box. @ param message \u2014 The text inside the message box. @ param type \u2014 The type of the message box. @ param attachtowindow \u2014 Whether the message box should be attached to the love window or free-floating. @ return success \u2014 Whether the message box was successfully displayed. -- -- Types of message box dialogs. Different types may have slightly different looks. -- -- -- [Open in Browser](https://love2d.org/wiki/MessageBoxType) -- type : | \"info\" -- Informational dialog. | \"warning\" -- Warning dialog. | \"error\" -- Error dialog.","title":"showMessageBox"},{"location":"doc/#topixels","text":"function love.window. toPixels ( value : number) -> pixelvalue : number Converts a number from density-independent units to pixels. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case. This is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled. Most L\u00d6VE functions return values and expect arguments in terms of pixels rather than density-independent units. Open in Browser @ param value \u2014 A number in density-independent units to convert to pixels. @ return pixelvalue \u2014 The converted number, in pixels.","title":"toPixels"},{"location":"doc/#updatemode","text":"function love.window. updateMode ( width : number, height : number, settings : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number }) -> success: boolean Sets the display mode and properties of the window, without modifying unspecified properties. If width or height is 0, updateMode will use the width and height of the desktop. Changing the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to. Open in Browser @ param width \u2014 Window width. @ param height \u2014 Window height. @ param settings \u2014 The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode. @ return success \u2014 True if successful, false otherwise.","title":"updateMode"},{"location":"doc/#lovewindowclose","text":"function love.window. close ()","title":"love.window.close"},{"location":"doc/#lovewindowfrompixels","text":"function love.window. fromPixels ( pixelvalue : number) -> value : number","title":"love.window.fromPixels"},{"location":"doc/#lovewindowgetdpiscale","text":"function love.window. getDPIScale () -> scale : number","title":"love.window.getDPIScale"},{"location":"doc/#lovewindowgetdesktopdimensions","text":"function love.window. getDesktopDimensions ( displayindex ? : number ) -> width : number 2. height : number","title":"love.window.getDesktopDimensions"},{"location":"doc/#lovewindowgetdisplaycount","text":"function love.window. getDisplayCount () -> count : number","title":"love.window.getDisplayCount"},{"location":"doc/#lovewindowgetdisplayname","text":"function love.window. getDisplayName ( displayindex ? : number ) -> name : string","title":"love.window.getDisplayName"},{"location":"doc/#lovewindowgetdisplayorientation","text":"function love.window. getDisplayOrientation ( displayindex ? : number ) -> orientation : \" landscape \"|\" landscapeflipped \"|\" portrait \"|\" portraitflipped \"|\" unknown \"","title":"love.window.getDisplayOrientation"},{"location":"doc/#lovewindowgetfullscreen","text":"function love.window. getFullscreen () -> fullscreen : boolean 2. fstype : \" desktop \"|\" exclusive \"|\" normal \"","title":"love.window.getFullscreen"},{"location":"doc/#lovewindowgetfullscreenmodes","text":"function love.window. getFullscreenModes ( displayindex ? : number ) -> modes : table","title":"love.window.getFullscreenModes"},{"location":"doc/#lovewindowgeticon","text":"function love.window. getIcon () -> imagedata : love.ImageData","title":"love.window.getIcon"},{"location":"doc/#lovewindowgetmode","text":"function love.window. getMode () -> width : number 2. height : number 3. flags : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, refreshrate: number, x: number, y: number, srgb: boolean }","title":"love.window.getMode"},{"location":"doc/#lovewindowgetposition","text":"function love.window. getPosition () -> x : number 2. y : number 3. displayindex : number","title":"love.window.getPosition"},{"location":"doc/#lovewindowgetsafearea","text":"function love.window. getSafeArea () -> x : number 2. y : number 3. w : number 4. h : number","title":"love.window.getSafeArea"},{"location":"doc/#lovewindowgettitle","text":"function love.window. getTitle () -> title : string","title":"love.window.getTitle"},{"location":"doc/#lovewindowgetvsync","text":"function love.window. getVSync () -> vsync : number","title":"love.window.getVSync"},{"location":"doc/#lovewindowhasfocus","text":"function love.window. hasFocus () -> focus : boolean","title":"love.window.hasFocus"},{"location":"doc/#lovewindowhasmousefocus","text":"function love.window. hasMouseFocus () -> focus : boolean","title":"love.window.hasMouseFocus"},{"location":"doc/#lovewindowisdisplaysleepenabled","text":"function love.window. isDisplaySleepEnabled () -> enabled : boolean","title":"love.window.isDisplaySleepEnabled"},{"location":"doc/#lovewindowismaximized","text":"function love.window. isMaximized () -> maximized : boolean","title":"love.window.isMaximized"},{"location":"doc/#lovewindowisminimized","text":"function love.window. isMinimized () -> minimized : boolean","title":"love.window.isMinimized"},{"location":"doc/#lovewindowisopen","text":"function love.window. isOpen () -> open : boolean","title":"love.window.isOpen"},{"location":"doc/#lovewindowisvisible","text":"function love.window. isVisible () -> visible : boolean","title":"love.window.isVisible"},{"location":"doc/#lovewindowmaximize","text":"function love.window. maximize ()","title":"love.window.maximize"},{"location":"doc/#lovewindowminimize","text":"function love.window. minimize ()","title":"love.window.minimize"},{"location":"doc/#lovewindowrequestattention","text":"function love.window. requestAttention ( continuous ? : boolean )","title":"love.window.requestAttention"},{"location":"doc/#lovewindowrestore","text":"function love.window. restore ()","title":"love.window.restore"},{"location":"doc/#lovewindowsetdisplaysleepenabled","text":"function love.window. setDisplaySleepEnabled ( enable : boolean)","title":"love.window.setDisplaySleepEnabled"},{"location":"doc/#lovewindowsetfullscreen","text":"function love.window. setFullscreen ( fullscreen : boolean) -> success : boolean","title":"love.window.setFullscreen"},{"location":"doc/#lovewindowseticon","text":"function love.window. setIcon ( imagedata : love.ImageData) -> success : boolean","title":"love.window.setIcon"},{"location":"doc/#lovewindowsetmode","text":"function love.window. setMode ( width : number, height : number, flags ? : { fullscreen : boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, stencil: boolean, depth: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number, usedpiscale: boolean, srgb: boolean }) -> success: boolean","title":"love.window.setMode"},{"location":"doc/#lovewindowsetposition","text":"function love.window. setPosition ( x : number, y : number, displayindex ? : number )","title":"love.window.setPosition"},{"location":"doc/#lovewindowsettitle","text":"function love.window. setTitle ( title : string)","title":"love.window.setTitle"},{"location":"doc/#lovewindowsetvsync","text":"function love.window. setVSync ( vsync : number)","title":"love.window.setVSync"},{"location":"doc/#lovewindowshowmessagebox","text":"function love.window. showMessageBox ( title : string, message : string, type ? : \"error\" | \"info\" | \"warning\" , attachtowindow ? : boolean ) -> success : boolean","title":"love.window.showMessageBox"},{"location":"doc/#lovewindowtopixels","text":"function love.window. toPixels ( value : number) -> pixelvalue : number","title":"love.window.toPixels"},{"location":"doc/#lovewindowupdatemode","text":"function love.window. updateMode ( width : number, height : number, settings : { fullscreen: boolean, fullscreentype : \" desktop \"|\" exclusive \"|\" normal \", vsync: boolean, msaa: number, resizable: boolean, borderless: boolean, centered: boolean, display: number, minwidth: number, minheight: number, highdpi: boolean, x: number, y: number }) -> success: boolean","title":"love.window.updateMode"},{"location":"doc/#math_1","text":"mathlib","title":"math"},{"location":"doc/#mathabs","text":"function math. abs ( x : < Number:number>) -> < Number :number>","title":"math.abs"},{"location":"doc/#mathacos","text":"function math. acos ( x : number) -> number","title":"math.acos"},{"location":"doc/#mathasin","text":"function math. asin ( x : number) -> number","title":"math.asin"},{"location":"doc/#mathatan","text":"function math. atan ( y : number) -> number","title":"math.atan"},{"location":"doc/#mathatan2","text":"function math. atan2 ( y : number, x : number) -> number","title":"math.atan2"},{"location":"doc/#mathceil","text":"function math. ceil ( x : number) -> integer","title":"math.ceil"},{"location":"doc/#mathcos","text":"function math. cos ( x : number) -> number","title":"math.cos"},{"location":"doc/#mathcosh","text":"function math. cosh ( x : number) -> number","title":"math.cosh"},{"location":"doc/#mathdeg","text":"function math. deg ( x : number) -> number","title":"math.deg"},{"location":"doc/#mathexp","text":"function math. exp ( x : number) -> number","title":"math.exp"},{"location":"doc/#mathfloor","text":"function math. floor ( x : number) -> integer","title":"math.floor"},{"location":"doc/#mathfmod","text":"function math. fmod ( x : number, y : number) -> number","title":"math.fmod"},{"location":"doc/#mathfrexp","text":"function math. frexp ( x : number) -> m : number 2. e : number","title":"math.frexp"},{"location":"doc/#mathldexp","text":"function math. ldexp ( m : number, e : number) -> number","title":"math.ldexp"},{"location":"doc/#mathlog","text":"function math. log ( x : number, base ? : integer ) -> number","title":"math.log"},{"location":"doc/#mathlog10","text":"function math. log10 ( x : number) -> number","title":"math.log10"},{"location":"doc/#mathmax","text":"function math. max ( x : < Number:number>, ...< Number :number>) -> < Number :number>","title":"math.max"},{"location":"doc/#mathmin","text":"function math. min ( x : < Number:number>, ...< Number :number>) -> < Number :number>","title":"math.min"},{"location":"doc/#mathmodf","text":"function math. modf ( x : number) -> integer 2. number","title":"math.modf"},{"location":"doc/#mathpow","text":"function math. pow ( x : number, y : number) -> number","title":"math.pow"},{"location":"doc/#mathrad","text":"function math. rad ( x : number) -> number","title":"math.rad"},{"location":"doc/#mathrandom","text":"function math. random ( m : integer, n : integer) -> integer","title":"math.random"},{"location":"doc/#mathrandomseed","text":"function math. randomseed ( x : integer)","title":"math.randomseed"},{"location":"doc/#mathsin","text":"function math. sin ( x : number) -> number","title":"math.sin"},{"location":"doc/#mathsinh","text":"function math. sinh ( x : number) -> number","title":"math.sinh"},{"location":"doc/#mathsqrt","text":"function math. sqrt ( x : number) -> number","title":"math.sqrt"},{"location":"doc/#mathtan","text":"function math. tan ( x : number) -> number","title":"math.tan"},{"location":"doc/#mathtanh","text":"function math. tanh ( x : number) -> number","title":"math.tanh"},{"location":"doc/#mathtointeger","text":"function math. tointeger ( x : any) -> integer ?","title":"math.tointeger"},{"location":"doc/#mathtype","text":"function math. type ( x : any) -> \"float\" | \"integer\" | 'nil'","title":"math.type"},{"location":"doc/#mathult","text":"function math. ult ( m : integer, n : integer) -> boolean","title":"math.ult"},{"location":"doc/#mathlib","text":"","title":"mathlib"},{"location":"doc/#abs","text":"function math. abs ( x : < Number:number>) -> < Number :number> Returns the absolute value of x . View documents","title":"abs"},{"location":"doc/#acos","text":"function math. acos ( x : number) -> number Returns the arc cosine of x (in radians). View documents","title":"acos"},{"location":"doc/#asin","text":"function math. asin ( x : number) -> number Returns the arc sine of x (in radians). View documents","title":"asin"},{"location":"doc/#atan","text":"function math. atan ( y : number) -> number Returns the arc tangent of x (in radians). View documents","title":"atan"},{"location":"doc/#atan2","text":"function math. atan2 ( y : number, x : number) -> number Returns the arc tangent of y/x (in radians). View documents","title":"atan2"},{"location":"doc/#ceil","text":"function math. ceil ( x : number) -> integer Returns the smallest integral value larger than or equal to x . View documents","title":"ceil"},{"location":"doc/#cos","text":"function math. cos ( x : number) -> number Returns the cosine of x (assumed to be in radians). View documents","title":"cos"},{"location":"doc/#cosh","text":"function math. cosh ( x : number) -> number Returns the hyperbolic cosine of x (assumed to be in radians). View documents","title":"cosh"},{"location":"doc/#deg","text":"function math. deg ( x : number) -> number Converts the angle x from radians to degrees. View documents","title":"deg"},{"location":"doc/#exp","text":"function math. exp ( x : number) -> number Returns the value e^x (where e is the base of natural logarithms). View documents","title":"exp"},{"location":"doc/#floor","text":"function math. floor ( x : number) -> integer Returns the largest integral value smaller than or equal to x . View documents","title":"floor"},{"location":"doc/#fmod","text":"function math. fmod ( x : number, y : number) -> number Returns the remainder of the division of x by y that rounds the quotient towards zero. View documents","title":"fmod"},{"location":"doc/#frexp","text":"function math. frexp ( x : number) -> m : number 2. e : number Decompose x into tails and exponents. Returns m and e such that x = m * (2 ^ e) , e is an integer and the absolute value of m is in the range [0.5, 1) (or zero when x is zero). View documents","title":"frexp"},{"location":"doc/#huge","text":"number A value larger than any other numeric value. View documents","title":"huge"},{"location":"doc/#ldexp","text":"function math. ldexp ( m : number, e : number) -> number Returns m * (2 ^ e) . View documents","title":"ldexp"},{"location":"doc/#log","text":"function math. log ( x : number, base ? : integer ) -> number Returns the logarithm of x in the given base. View documents","title":"log"},{"location":"doc/#log10","text":"function math. log10 ( x : number) -> number Returns the base-10 logarithm of x. View documents","title":"log10"},{"location":"doc/#max","text":"function math. max ( x : < Number:number>, ...< Number :number>) -> < Number :number> Returns the argument with the maximum value, according to the Lua operator < . View documents","title":"max"},{"location":"doc/#min","text":"function math. min ( x : < Number:number>, ...< Number :number>) -> < Number :number> Returns the argument with the minimum value, according to the Lua operator < . View documents","title":"min"},{"location":"doc/#modf","text":"function math. modf ( x : number) -> integer 2. number Returns the integral part of x and the fractional part of x . View documents","title":"modf"},{"location":"doc/#pi","text":"number The value of \u03c0 . View documents","title":"pi"},{"location":"doc/#pow","text":"function math. pow ( x : number, y : number) -> number Returns x ^ y . View documents","title":"pow"},{"location":"doc/#rad","text":"function math. rad ( x : number) -> number Converts the angle x from degrees to radians. View documents","title":"rad"},{"location":"doc/#random_3","text":"function math. random ( m : integer, n : integer) -> integer math.random() : Returns a float in the range [0,1). math.random(n) : Returns a integer in the range [1, n]. math.random(m, n) : Returns a integer in the range [m, n]. View documents","title":"random"},{"location":"doc/#randomseed_1","text":"function math. randomseed ( x : integer) Sets x as the \"seed\" for the pseudo-random generator. View documents","title":"randomseed"},{"location":"doc/#sin","text":"function math. sin ( x : number) -> number Returns the sine of x (assumed to be in radians). View documents","title":"sin"},{"location":"doc/#sinh","text":"function math. sinh ( x : number) -> number Returns the hyperbolic sine of x (assumed to be in radians). View documents","title":"sinh"},{"location":"doc/#sqrt","text":"function math. sqrt ( x : number) -> number Returns the square root of x . View documents","title":"sqrt"},{"location":"doc/#tan","text":"function math. tan ( x : number) -> number Returns the tangent of x (assumed to be in radians). View documents","title":"tan"},{"location":"doc/#tanh","text":"function math. tanh ( x : number) -> number Returns the hyperbolic tangent of x (assumed to be in radians). View documents","title":"tanh"},{"location":"doc/#tointeger","text":"function math. tointeger ( x : any) -> integer ? Miss locale View documents","title":"tointeger"},{"location":"doc/#type_57","text":"function math. type ( x : any) -> \"float\" | \"integer\" | 'nil' Miss locale View documents return # 1 : | \"integer\" | \"float\" | 'nil'","title":"type"},{"location":"doc/#ult","text":"function math. ult ( m : integer, n : integer) -> boolean Miss locale View documents","title":"ult"},{"location":"doc/#metatable","text":"","title":"metatable"},{"location":"doc/#__add_3","text":"fun ( t1 : any, t2 : any): any | nil","title":"__add"},{"location":"doc/#__call_78","text":"fun ( t : any, ... any ):... unknown | nil","title":"__call"},{"location":"doc/#__concat","text":"fun ( t1 : any, t2 : any): any | nil","title":"__concat"},{"location":"doc/#__div","text":"fun ( t1 : any, t2 : any): any | nil","title":"__div"},{"location":"doc/#__eq_3","text":"fun ( t1 : any, t2 : any): boolean | nil","title":"__eq"},{"location":"doc/#__gc","text":"fun ( t : any)| nil","title":"__gc"},{"location":"doc/#__index_78","text":"table | fun ( t : any, k : any): any | nil","title":"__index"},{"location":"doc/#__le_1","text":"fun ( t1 : any, t2 : any): boolean | nil","title":"__le"},{"location":"doc/#__len","text":"fun ( t : any): integer | nil","title":"__len"},{"location":"doc/#__lt_1","text":"fun ( t1 : any, t2 : any): boolean | nil","title":"__lt"},{"location":"doc/#__metatable","text":"any","title":"__metatable"},{"location":"doc/#__mod","text":"fun ( t1 : any, t2 : any): any | nil","title":"__mod"},{"location":"doc/#__mode","text":"'k' | 'kv' | 'v' | nil","title":"__mode"},{"location":"doc/#__mul_3","text":"fun ( t1 : any, t2 : any): any | nil","title":"__mul"},{"location":"doc/#__newindex","text":"table | fun ( t : any, k : any, v : any)| nil","title":"__newindex"},{"location":"doc/#__pow","text":"fun ( t1 : any, t2 : any): any | nil","title":"__pow"},{"location":"doc/#__sub_3","text":"fun ( t1 : any, t2 : any): any | nil","title":"__sub"},{"location":"doc/#__tostring_4","text":"fun ( t : any): string | nil","title":"__tostring"},{"location":"doc/#__unm_3","text":"fun ( t : any): any | nil","title":"__unm"},{"location":"doc/#module","text":"function module ( name : string, ... any )","title":"module"},{"location":"doc/#newproxy","text":"function newproxy ( proxy : boolean| table | userdata ) -> userdata","title":"newproxy"},{"location":"doc/#next_3","text":"function next ( table : table<< K >, < V >>, index ? : < K >) -> < K > ? 2. < V > ?","title":"next"},{"location":"doc/#nil","text":"","title":"nil"},{"location":"doc/#number","text":"","title":"number"},{"location":"doc/#openmode","text":"","title":"openmode"},{"location":"doc/#os_2","text":"oslib","title":"os"},{"location":"doc/#osclock","text":"function os. clock () -> number","title":"os.clock"},{"location":"doc/#osdate","text":"function os. date ( format ? : string , time ? : integer ) -> string | osdate","title":"os.date"},{"location":"doc/#osdifftime","text":"function os. difftime ( t2 : integer, t1 : integer) -> integer","title":"os.difftime"},{"location":"doc/#osexecute","text":"function os. execute ( command ? : string ) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer?","title":"os.execute"},{"location":"doc/#osexit","text":"function os. exit ( code ? : boolean | integer , close ? : boolean )","title":"os.exit"},{"location":"doc/#osgetenv","text":"function os. getenv ( varname : string) -> string ?","title":"os.getenv"},{"location":"doc/#osremove","text":"function os. remove ( filename : string) -> suc : boolean 2. errmsg : string ?","title":"os.remove"},{"location":"doc/#osrename","text":"function os. rename ( oldname : string, newname : string) -> suc : boolean 2. errmsg : string ?","title":"os.rename"},{"location":"doc/#ossetlocale","text":"function os. setlocale ( locale : string| nil , category ? : \"all\" | \"collate\" | \"ctype\" | \"monetary\" | \"numeric\" ...(+ 1 )) -> localecategory : string","title":"os.setlocale"},{"location":"doc/#ostime","text":"function os. time ( date ? : osdateparam ) -> integer","title":"os.time"},{"location":"doc/#ostmpname","text":"function os. tmpname () -> string","title":"os.tmpname"},{"location":"doc/#osdate_1","text":"","title":"osdate"},{"location":"doc/#day","text":"string | integer 1-31 View documents","title":"day"},{"location":"doc/#hour","text":"string | integer 0-23 View documents","title":"hour"},{"location":"doc/#isdst","text":"boolean daylight saving flag, a boolean View documents","title":"isdst"},{"location":"doc/#min_1","text":"string | integer 0-59 View documents","title":"min"},{"location":"doc/#month","text":"string | integer 1-12 View documents","title":"month"},{"location":"doc/#sec","text":"string | integer 0-61 View documents","title":"sec"},{"location":"doc/#wday","text":"string | integer weekday, 1\u20137, Sunday is 1 View documents","title":"wday"},{"location":"doc/#yday","text":"string | integer day of the year, 1\u2013366 View documents","title":"yday"},{"location":"doc/#year","text":"string | integer four digits View documents","title":"year"},{"location":"doc/#osdateparam","text":"","title":"osdateparam"},{"location":"doc/#day_1","text":"string | integer 1-31 View documents","title":"day"},{"location":"doc/#hour_1","text":"( string | integer ) ? 0-23 View documents","title":"hour"},{"location":"doc/#isdst_1","text":"boolean ? daylight saving flag, a boolean View documents","title":"isdst"},{"location":"doc/#min_2","text":"( string | integer ) ? 0-59 View documents","title":"min"},{"location":"doc/#month_1","text":"string | integer 1-12 View documents","title":"month"},{"location":"doc/#sec_1","text":"( string | integer ) ? 0-61 View documents","title":"sec"},{"location":"doc/#wday_1","text":"( string | integer ) ? weekday, 1\u20137, Sunday is 1 View documents","title":"wday"},{"location":"doc/#yday_1","text":"( string | integer ) ? day of the year, 1\u2013366 View documents","title":"yday"},{"location":"doc/#year_1","text":"string | integer four digits View documents","title":"year"},{"location":"doc/#oslib","text":"","title":"oslib"},{"location":"doc/#clock","text":"function os. clock () -> number Returns an approximation of the amount in seconds of CPU time used by the program. View documents","title":"clock"},{"location":"doc/#date","text":"function os. date ( format ? : string , time ? : integer ) -> string | osdate Returns a string or a table containing date and time, formatted according to the given string format . View documents","title":"date"},{"location":"doc/#difftime","text":"function os. difftime ( t2 : integer, t1 : integer) -> integer Returns the difference, in seconds, from time t1 to time t2 . View documents","title":"difftime"},{"location":"doc/#execute_9","text":"function os. execute ( command ? : string ) -> suc : boolean ? 2. exitcode : (\" exit \"|\" signal \")? 3. code: integer? Passes command to be executed by an operating system shell. View documents exitcode : | \" exit \" | \" signal \"","title":"execute"},{"location":"doc/#exit","text":"function os. exit ( code ? : boolean | integer , close ? : boolean ) Calls the ISO C function exit to terminate the host program. View documents","title":"exit"},{"location":"doc/#getenv","text":"function os. getenv ( varname : string) -> string ? Returns the value of the process environment variable varname . View documents","title":"getenv"},{"location":"doc/#remove_7","text":"function os. remove ( filename : string) -> suc : boolean 2. errmsg : string ? Deletes the file with the given name. View documents","title":"remove"},{"location":"doc/#rename","text":"function os. rename ( oldname : string, newname : string) -> suc : boolean 2. errmsg : string ? Renames the file or directory named oldname to newname . View documents","title":"rename"},{"location":"doc/#setlocale","text":"function os. setlocale ( locale : string| nil , category ? : \"all\" | \"collate\" | \"ctype\" | \"monetary\" | \"numeric\" ...(+ 1 )) -> localecategory : string Sets the current locale of the program. View documents category : -> \" all \" | \" collate \" | \" ctype \" | \" monetary \" | \" numeric \" | \" time \"","title":"setlocale"},{"location":"doc/#time_2","text":"function os. time ( date ? : osdateparam ) -> integer Returns the current time when called without arguments, or a time representing the local date and time specified by the given table. View documents","title":"time"},{"location":"doc/#tmpname","text":"function os. tmpname () -> string Returns a string with a file name that can be used for a temporary file. View documents","title":"tmpname"},{"location":"doc/#package","text":"packagelib","title":"package"},{"location":"doc/#packageconfig","text":"string","title":"package.config"},{"location":"doc/#packageloaders","text":"table","title":"package.loaders"},{"location":"doc/#packageloadlib","text":"function package. loadlib ( libname : string, funcname : string) -> any","title":"package.loadlib"},{"location":"doc/#packagesearchers","text":"table","title":"package.searchers"},{"location":"doc/#packagesearchpath","text":"function package. searchpath ( name : string, path : string, sep ? : string , rep ? : string ) -> filename : string ? 2. errmsg : string ?","title":"package.searchpath"},{"location":"doc/#packageseeall","text":"function package. seeall ( module : table)","title":"package.seeall"},{"location":"doc/#packagelib","text":"","title":"packagelib"},{"location":"doc/#config","text":"string A string describing some compile-time configurations for packages. View documents","title":"config"},{"location":"doc/#cpath","text":"string The path used by require to search for a C loader. View documents","title":"cpath"},{"location":"doc/#loaded","text":"table A table used by require to control which modules are already loaded. View documents","title":"loaded"},{"location":"doc/#loaders","text":"table A table used by require to control how to load modules. View documents","title":"loaders"},{"location":"doc/#loadlib","text":"function package. loadlib ( libname : string, funcname : string) -> any Dynamically links the host program with the C library libname . View documents","title":"loadlib"},{"location":"doc/#path_2","text":"string The path used by require to search for a Lua loader. View documents","title":"path"},{"location":"doc/#preload","text":"table A table to store loaders for specific modules. View documents","title":"preload"},{"location":"doc/#searchers","text":"table A table used by require to control how to load modules. View documents","title":"searchers"},{"location":"doc/#searchpath","text":"function package. searchpath ( name : string, path : string, sep ? : string , rep ? : string ) -> filename : string ? 2. errmsg : string ? Searches for the given name in the given path . View documents","title":"searchpath"},{"location":"doc/#seeall","text":"function package. seeall ( module : table) Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function module . View documents","title":"seeall"},{"location":"doc/#pairs","text":"function pairs ( t : < T:table>) -> fun ( table : table<< K >, < V >>, index ? : < K >):< K >, < V > 2. < T :table>","title":"pairs"},{"location":"doc/#pcall","text":"function pcall ( f : fun (... any ):... unknown , arg1 ? : any , ... any ) -> success : boolean 2. result : any 3. ... any","title":"pcall"},{"location":"doc/#popenmode","text":"","title":"popenmode"},{"location":"doc/#print_1","text":"function print (... any )","title":"print"},{"location":"doc/#prism","text":"table","title":"prism"},{"location":"doc/#prismaction","text":"unknown","title":"prism.Action"},{"location":"doc/#prismactor","text":"unknown","title":"prism.Actor"},{"location":"doc/#prismactorstorage","text":"unknown","title":"prism.ActorStorage"},{"location":"doc/#prismbehaviortree","text":"table","title":"prism.BehaviorTree"},{"location":"doc/#prismbehaviortreenode","text":"unknown","title":"prism.BehaviorTree.Node"},{"location":"doc/#prismbehaviortreeroot","text":"unknown","title":"prism.BehaviorTree.Root"},{"location":"doc/#prismbehaviortreeselector","text":"unknown","title":"prism.BehaviorTree.Selector"},{"location":"doc/#prismbehaviortreesequence","text":"unknown","title":"prism.BehaviorTree.Sequence"},{"location":"doc/#prismbehaviortreesucceeder","text":"unknown","title":"prism.BehaviorTree.Succeeder"},{"location":"doc/#prismbitmaskbuffer","text":"unknown","title":"prism.BitmaskBuffer"},{"location":"doc/#prismbooleanbuffer","text":"unknown","title":"prism.BooleanBuffer"},{"location":"doc/#prismboundingbox","text":"unknown","title":"prism.BoundingBox"},{"location":"doc/#prismbreadthfirstsearch","text":"unknown","title":"prism.BreadthFirstSearch"},{"location":"doc/#prismbresenham","text":"unknown","title":"prism.Bresenham"},{"location":"doc/#prismcell","text":"unknown","title":"prism.Cell"},{"location":"doc/#prismcollision","text":"unknown","title":"prism.Collision"},{"location":"doc/#prismcolor4","text":"unknown","title":"prism.Color4"},{"location":"doc/#prismcomponent","text":"unknown","title":"prism.Component"},{"location":"doc/#prismdecision","text":"unknown","title":"prism.Decision"},{"location":"doc/#prismellipse","text":"unknown","title":"prism.Ellipse"},{"location":"doc/#prismgrid","text":"unknown","title":"prism.Grid"},{"location":"doc/#prismlevel","text":"unknown","title":"prism.Level"},{"location":"doc/#prismmap","text":"unknown","title":"prism.Map"},{"location":"doc/#prismmapbuilder","text":"unknown","title":"prism.MapBuilder"},{"location":"doc/#prismmessage","text":"unknown","title":"prism.Message"},{"location":"doc/#prismobject","text":"unknown","title":"prism.Object"},{"location":"doc/#prismpath","text":"unknown","title":"prism.Path"},{"location":"doc/#prismpriorityqueue","text":"unknown","title":"prism.PriorityQueue"},{"location":"doc/#prismqueue","text":"unknown","title":"prism.Queue"},{"location":"doc/#prismrng","text":"unknown","title":"prism.RNG"},{"location":"doc/#prismscheduler","text":"unknown","title":"prism.Scheduler"},{"location":"doc/#prismsimplescheduler","text":"unknown","title":"prism.SimpleScheduler"},{"location":"doc/#prismsparsearray","text":"unknown","title":"prism.SparseArray"},{"location":"doc/#prismsparsegrid","text":"unknown","title":"prism.SparseGrid"},{"location":"doc/#prismsparsemap","text":"unknown","title":"prism.SparseMap"},{"location":"doc/#prismsystem","text":"unknown","title":"prism.System"},{"location":"doc/#prismsystemmanager","text":"unknown","title":"prism.SystemManager"},{"location":"doc/#prismtarget","text":"unknown","title":"prism.Target"},{"location":"doc/#prismvector2","text":"unknown","title":"prism.Vector2"},{"location":"doc/#prism_isclass","text":"table","title":"prism._ISCLASS"},{"location":"doc/#prism_objectregistry","text":"table","title":"prism._OBJECTREGISTRY"},{"location":"doc/#prism_defaultdistance","text":"string","title":"prism._defaultDistance"},{"location":"doc/#prism_defaultrangetype","text":"string","title":"prism._defaultRangeType"},{"location":"doc/#prism_initialized","text":"boolean","title":"prism._initialized"},{"location":"doc/#prism_itempatterns","text":"table","title":"prism._itemPatterns"},{"location":"doc/#prism_items","text":"table","title":"prism._items"},{"location":"doc/#prismactions","text":"table","title":"prism.actions"},{"location":"doc/#prismactors","text":"table","title":"prism.actors"},{"location":"doc/#prismadvancecoroutine","text":"function prism. advanceCoroutine ( updateCoroutine : any, level : any, decision : any) -> Message | nil","title":"prism.advanceCoroutine"},{"location":"doc/#prismastar","text":"unknown","title":"prism.astar"},{"location":"doc/#prismbehaviors","text":"table","title":"prism.behaviors"},{"location":"doc/#prismcells","text":"table","title":"prism.cells"},{"location":"doc/#prismcomponents","text":"table","title":"prism.components"},{"location":"doc/#prismcomponentscollider","text":"unknown","title":"prism.components.Collider"},{"location":"doc/#prismcomponentscontroller","text":"unknown","title":"prism.components.Controller"},{"location":"doc/#prismcomponentsopaque","text":"unknown","title":"prism.components.Opaque"},{"location":"doc/#prismcomponentsplayercontroller","text":"unknown","title":"prism.components.PlayerController"},{"location":"doc/#prismcomponentssenses","text":"unknown","title":"prism.components.Senses"},{"location":"doc/#prismcomputefov","text":"unknown","title":"prism.computeFOV"},{"location":"doc/#prismdecisions","text":"table","title":"prism.decisions"},{"location":"doc/#prismdecisionsactiondecision","text":"unknown","title":"prism.decisions.ActionDecision"},{"location":"doc/#prismfov","text":"table","title":"prism.fov"},{"location":"doc/#prismfovfraction","text":"unknown","title":"prism.fov.Fraction"},{"location":"doc/#prismfovquadrant","text":"unknown","title":"prism.fov.Quadrant"},{"location":"doc/#prismfovrow","text":"unknown","title":"prism.fov.Row"},{"location":"doc/#prismhotload","text":"function prism. hotload ()","title":"prism.hotload"},{"location":"doc/#prismjson","text":"unknown","title":"prism.json"},{"location":"doc/#prismloadmodule","text":"function prism. loadModule ( directory : any)","title":"prism.loadModule"},{"location":"doc/#prismmessages","text":"table table","title":"prism.messages"},{"location":"doc/#prismmessagesactionmessage","text":"unknown","title":"prism.messages.ActionMessage"},{"location":"doc/#prismmessagesdebugmessage","text":"unknown","title":"prism.messages.DebugMessage"},{"location":"doc/#prismmodules","text":"table","title":"prism.modules"},{"location":"doc/#prismneighborhood","text":"Vector2 [] Vector2 []","title":"prism.neighborhood"},{"location":"doc/#prismpath_1","text":"unknown","title":"prism.path"},{"location":"doc/#prismrequire","text":"function prism. require ( p : any) -> unknown 2. nil","title":"prism.require"},{"location":"doc/#prismsetdefaultneighborhood","text":"function prism. setDefaultNeighborhood ( neighborhood : Vector2[])","title":"prism.setDefaultNeighborhood"},{"location":"doc/#prismsystems","text":"table","title":"prism.systems"},{"location":"doc/#prismsystemssenses","text":"unknown","title":"prism.systems.Senses"},{"location":"doc/#prismtargets","text":"table","title":"prism.targets"},{"location":"doc/#prismturn","text":"function prism. turn ( level : Level, actor : Actor, controller : ControllerComponent)","title":"prism.turn"},{"location":"doc/#rawequal","text":"function rawequal ( v1 : any, v2 : any) -> boolean","title":"rawequal"},{"location":"doc/#rawget","text":"function rawget ( table : table, index : any) -> any","title":"rawget"},{"location":"doc/#rawlen","text":"function rawlen ( v : string| table ) -> len : integer","title":"rawlen"},{"location":"doc/#rawset","text":"function rawset ( table : table, index : any, value : any) -> table","title":"rawset"},{"location":"doc/#readmode","text":"","title":"readmode"},{"location":"doc/#require","text":"function require ( modname : string) -> unknown","title":"require"},{"location":"doc/#seekwhence","text":"","title":"seekwhence"},{"location":"doc/#select","text":"function select ( index : integer| \"#\" , ... any ) -> any","title":"select"},{"location":"doc/#setfenv_1","text":"function setfenv ( f : integer| fun (... any ):... unknown , table : table) -> function","title":"setfenv"},{"location":"doc/#setmetatable_1","text":"function setmetatable ( table : table, metatable ? : table | metatable ) -> table","title":"setmetatable"},{"location":"doc/#spectrum","text":"table","title":"spectrum"},{"location":"doc/#spectrumcamera","text":"unknown","title":"spectrum.Camera"},{"location":"doc/#spectrumdisplay","text":"unknown","title":"spectrum.Display"},{"location":"doc/#spectrumgamestate","text":"unknown","title":"spectrum.GameState"},{"location":"doc/#spectrumkeybinding","text":"unknown","title":"spectrum.Keybinding"},{"location":"doc/#spectrumlevelstate","text":"unknown","title":"spectrum.LevelState"},{"location":"doc/#spectrumsensestracker","text":"unknown","title":"spectrum.SensesTracker"},{"location":"doc/#spectrumspriteatlas","text":"unknown","title":"spectrum.SpriteAtlas"},{"location":"doc/#spectrumstatemanager","text":"unknown","title":"spectrum.StateManager"},{"location":"doc/#spectrumpath","text":"unknown","title":"spectrum.path"},{"location":"doc/#spectrumrequire","text":"function spectrum. require ( p : any) -> unknown 2. nil","title":"spectrum.require"},{"location":"doc/#string_2","text":"stringlib","title":"string"},{"location":"doc/#string_3","text":"","title":"string"},{"location":"doc/#byte_1","text":"function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents","title":"byte"},{"location":"doc/#char_2","text":"function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents","title":"char"},{"location":"doc/#dump_1","text":"function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents","title":"dump"},{"location":"doc/#find_1","text":"function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured","title":"find"},{"location":"doc/#format_1","text":"function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents","title":"format"},{"location":"doc/#gmatch_1","text":"function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents","title":"gmatch"},{"location":"doc/#gsub_1","text":"function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents","title":"gsub"},{"location":"doc/#len_1","text":"function string. len ( s : string| number ) -> integer Returns its length. View documents","title":"len"},{"location":"doc/#lower_1","text":"function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents","title":"lower"},{"location":"doc/#match_1","text":"function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents","title":"match"},{"location":"doc/#pack_2","text":"function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents","title":"pack"},{"location":"doc/#packsize_1","text":"function string. packsize ( fmt : string) -> integer Miss locale View documents","title":"packsize"},{"location":"doc/#rep_1","text":"function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents","title":"rep"},{"location":"doc/#reverse_1","text":"function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents","title":"reverse"},{"location":"doc/#sub_1","text":"function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents","title":"sub"},{"location":"doc/#unpack_2","text":"function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents","title":"unpack"},{"location":"doc/#upper_1","text":"function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents","title":"upper"},{"location":"doc/#stringbuffer","text":"","title":"string.buffer"},{"location":"doc/#commit","text":"( method ) string .buffer: commit ( used : integer) -> string .buffer Appends the used bytes of the previously returned write space to the buffer data.","title":"commit"},{"location":"doc/#decode_2","text":"( method ) string .buffer: decode () -> obj : string| number | table | nil De-serializes one object from the buffer. The returned object may be any of the supported Lua types \u2014 even nil . This function may throw an error when fed with malformed or incomplete encoded data. Leaves any left-over data in the buffer. Attempting to de-serialize an FFI type will throw an error, if the FFI library is not built-in or has not been loaded, yet.","title":"decode"},{"location":"doc/#encode_2","text":"( method ) string .buffer: encode ( obj : string| number | table ) -> string .buffer Serializes (encodes) the Lua object to the buffer This function may throw an error when attempting to serialize unsupported object types, circular references or deeply nested tables.","title":"encode"},{"location":"doc/#free_1","text":"( method ) string .buffer: free () The buffer space of the buffer object is freed. The object itself remains intact, empty and may be reused. Note: you normally don't need to use this method. The garbage collector automatically frees the buffer space, when the buffer object is collected. Use this method, if you need to free the associated memory immediately.","title":"free"},{"location":"doc/#get_7","text":"( method ) string .buffer: get ( len ? : integer , ... integer | nil ) -> ... string Consumes the buffer data and returns one or more strings. If called without arguments, the whole buffer data is consumed. If called with a number, up to len bytes are consumed. A nil argument consumes the remaining buffer space (this only makes sense as the last argument). Multiple arguments consume the buffer data in the given order. Note: a zero length or no remaining buffer data returns an empty string and not nil .","title":"get"},{"location":"doc/#put","text":"( method ) string .buffer: put ( data : string| number | table , ... string | number | table ) -> string .buffer Appends a string str, a number num or any object obj with a __tostring metamethod to the buffer. Multiple arguments are appended in the given order. Appending a buffer to a buffer is possible and short-circuited internally. But it still involves a copy. Better combine the buffer writes to use a single buffer.","title":"put"},{"location":"doc/#putcdata","text":"( method ) string .buffer: putcdata ( cdata : ffi.cdata*, len : integer) -> string .buffer Appends the given len number of bytes from the memory pointed to by the FFI cdata object to the buffer. The object needs to be convertible to a (constant) pointer.","title":"putcdata"},{"location":"doc/#putf","text":"( method ) string .buffer: putf ( format : string, ... string | number | table ) -> string .buffer Appends the formatted arguments to the buffer. The format string supports the same options as string.format().","title":"putf"},{"location":"doc/#ref","text":"( method ) string .buffer: ref () -> ptr : ffi.cdata* 2. len : integer Returns an uint8_t * FFI cdata pointer ptr that points to the buffer data. The length of the buffer data in bytes is returned in len. The returned pointer can be directly passed to C functions that expect a buffer and a length. You can also do bytewise reads ( local x = ptr[i] ) or writes ( ptr[i] = 0x40 ) of the buffer data. In conjunction with the buf:skip() method, this allows zero-copy use of C write-style APIs: repeat local ptr , len = buf : ref () if len == 0 then break end local n = C . write ( fd , ptr , len ) if n < 0 then error ( \"write error\" ) end buf : skip ( n ) until n >= len Unlike Lua strings, buffer data is not implicitly zero-terminated. It's not safe to pass ptr to C functions that expect zero-terminated strings. If you're not using len, then you're doing something wrong. @ return ptr \u2014 an uint8_t * FFI cdata pointer that points to the buffer data. @ return len \u2014 length of the buffer data in bytes","title":"ref"},{"location":"doc/#reserve","text":"( method ) string .buffer: reserve ( size : integer) -> ptr : ffi.cdata* 2. len : integer The reserve method reserves at least size bytes of write space in the buffer. It returns an uint8_t * FFI cdata pointer ptr that points to this space. The available length in bytes is returned in len. This is at least size bytes, but may be more to facilitate efficient buffer growth. You can either make use of the additional space or ignore len and only use size bytes. This, along with buf:commit() allow zero-copy use of C read-style APIs: local MIN_SIZE = 65536 repeat local ptr , len = buf : reserve ( MIN_SIZE ) local n = C . read ( fd , ptr , len ) if n == 0 then break end -- EOF. if n < 0 then error ( \"read error\" ) end buf : commit ( n ) until false The reserved write space is not initialized. At least the used bytes must be written to before calling the commit method. There's no need to call the commit method, if nothing is added to the buffer (e.g. on error). @ return ptr \u2014 an uint8_t * FFI cdata pointer that points to this space @ return len \u2014 available length (bytes)","title":"reserve"},{"location":"doc/#reset_3","text":"( method ) string .buffer: reset () -> string .buffer Reset (empty) the buffer. The allocated buffer space is not freed and may be reused.","title":"reset"},{"location":"doc/#set_9","text":"( method ) string .buffer: set ( str : string| number | table ) -> string .buffer This method allows zero-copy consumption of a string or an FFI cdata object as a buffer. It stores a reference to the passed string str or the FFI cdata object in the buffer. Any buffer space originally allocated is freed. This is not an append operation, unlike the buf:put*() methods. After calling this method, the buffer behaves as if buf:free():put(str) or buf:free():put(cdata, len) had been called. However, the data is only referenced and not copied, as long as the buffer is only consumed. In case the buffer is written to later on, the referenced data is copied and the object reference is removed (copy-on-write semantics). The stored reference is an anchor for the garbage collector and keeps the originally passed string or FFI cdata object alive.","title":"set"},{"location":"doc/#skip","text":"( method ) string .buffer: skip ( len : integer) -> string .buffer Skips (consumes) len bytes from the buffer up to the current length of the buffer data.","title":"skip"},{"location":"doc/#tostring","text":"( method ) string .buffer: tostring () -> string Creates a string from the buffer data, but doesn't consume it. The buffer remains unchanged. Buffer objects also define a __tostring metamethod . This means buffers can be passed to the global tostring() function and many other functions that accept this in place of strings. The important internal uses in functions like io.write() are short-circuited to avoid the creation of an intermediate string object.","title":"tostring"},{"location":"doc/#stringbufferdata","text":"","title":"string.buffer.data"},{"location":"doc/#stringbufferserializationopts","text":"","title":"string.buffer.serialization.opts"},{"location":"doc/#dict","text":"string []","title":"dict"},{"location":"doc/#metatable_1","text":"table []","title":"metatable"},{"location":"doc/#stringbyte","text":"function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer","title":"string.byte"},{"location":"doc/#stringchar","text":"function string. char ( byte : integer, ... integer ) -> string","title":"string.char"},{"location":"doc/#stringdump","text":"function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string","title":"string.dump"},{"location":"doc/#stringfind","text":"function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any","title":"string.find"},{"location":"doc/#stringformat","text":"function string. format ( s : string| number , ... any ) -> string","title":"string.format"},{"location":"doc/#stringgmatch","text":"function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown","title":"string.gmatch"},{"location":"doc/#stringgsub","text":"function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer","title":"string.gsub"},{"location":"doc/#stringlen","text":"function string. len ( s : string| number ) -> integer","title":"string.len"},{"location":"doc/#stringlower","text":"function string. lower ( s : string| number ) -> string","title":"string.lower"},{"location":"doc/#stringmatch","text":"function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any","title":"string.match"},{"location":"doc/#stringpack","text":"function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string","title":"string.pack"},{"location":"doc/#stringpacksize","text":"function string. packsize ( fmt : string) -> integer","title":"string.packsize"},{"location":"doc/#stringrep","text":"function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string","title":"string.rep"},{"location":"doc/#stringreverse","text":"function string. reverse ( s : string| number ) -> string","title":"string.reverse"},{"location":"doc/#stringsub","text":"function string. sub ( s : string| number , i : integer, j ? : integer ) -> string","title":"string.sub"},{"location":"doc/#stringunpack","text":"function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer","title":"string.unpack"},{"location":"doc/#stringupper","text":"function string. upper ( s : string| number ) -> string","title":"string.upper"},{"location":"doc/#stringlib","text":"","title":"stringlib"},{"location":"doc/#byte_2","text":"function string. byte ( s : string| number , i ? : integer , j ? : integer ) -> ... integer Returns the internal numeric codes of the characters s[i], s[i+1], ..., s[j] . View documents","title":"byte"},{"location":"doc/#char_3","text":"function string. char ( byte : integer, ... integer ) -> string Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument. View documents","title":"char"},{"location":"doc/#dump_2","text":"function string. dump ( f : fun (... any ):... unknown , strip ? : boolean ) -> string Returns a string containing a binary representation (a binary chunk ) of the given function. View documents","title":"dump"},{"location":"doc/#find_2","text":"function string. find ( s : string| number , pattern : string| number , init ? : integer , plain ? : boolean ) -> start : integer| nil 2. end : integer | nil 3. ... any Miss locale View documents @ return start @ return end @ return ... \u2014 captured","title":"find"},{"location":"doc/#format_2","text":"function string. format ( s : string| number , ... any ) -> string Returns a formatted version of its variable number of arguments following the description given in its first argument. View documents","title":"format"},{"location":"doc/#gmatch_2","text":"function string. gmatch ( s : string| number , pattern : string| number ) -> fun (): string , ... unknown Miss locale View documents","title":"gmatch"},{"location":"doc/#gsub_2","text":"function string. gsub ( s : string| number , pattern : string| number , repl : string| number | function | table , n ? : integer ) -> string 2. count : integer Miss locale View documents","title":"gsub"},{"location":"doc/#len_2","text":"function string. len ( s : string| number ) -> integer Returns its length. View documents","title":"len"},{"location":"doc/#lower_2","text":"function string. lower ( s : string| number ) -> string Returns a copy of this string with all uppercase letters changed to lowercase. View documents","title":"lower"},{"location":"doc/#match_2","text":"function string. match ( s : string| number , pattern : string| number , init ? : integer ) -> ... any Miss locale View documents","title":"match"},{"location":"doc/#pack_3","text":"function string. pack ( fmt : string, v1 : string| number , v2 ? : string | number , ... string | number ) -> binary : string Miss locale View documents","title":"pack"},{"location":"doc/#packsize_2","text":"function string. packsize ( fmt : string) -> integer Miss locale View documents","title":"packsize"},{"location":"doc/#rep_2","text":"function string. rep ( s : string| number , n : integer, sep ? : string | number ) -> string Returns a string that is the concatenation of n copies of the string s separated by the string sep . View documents","title":"rep"},{"location":"doc/#reverse_2","text":"function string. reverse ( s : string| number ) -> string Returns a string that is the string s reversed. View documents","title":"reverse"},{"location":"doc/#sub_2","text":"function string. sub ( s : string| number , i : integer, j ? : integer ) -> string Returns the substring of the string that starts at i and continues until j . View documents","title":"sub"},{"location":"doc/#unpack_3","text":"function string. unpack ( fmt : string, s : string, pos ? : integer ) -> ... any 2. offset : integer Returns the values packed in string according to the format string fmt (see \u00a76.4.2 ) . View documents","title":"unpack"},{"location":"doc/#upper_2","text":"function string. upper ( s : string| number ) -> string Returns a copy of this string with all lowercase letters changed to uppercase. View documents","title":"upper"},{"location":"doc/#table","text":"","title":"table"},{"location":"doc/#table_1","text":"tablelib","title":"table"},{"location":"doc/#tableconcat","text":"function table. concat ( list : table, sep ? : string , i ? : integer , j ? : integer ) -> string","title":"table.concat"},{"location":"doc/#tableforeach","text":"function table. foreach ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil","title":"table.foreach"},{"location":"doc/#tableforeachi","text":"function table. foreachi ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil","title":"table.foreachi"},{"location":"doc/#tablegetn","text":"function table. getn ( list : < T>[]) -> integer","title":"table.getn"},{"location":"doc/#tableinsert","text":"function table. insert ( list : table, pos : integer, value : any)","title":"table.insert"},{"location":"doc/#tablemaxn","text":"function table. maxn ( table : table) -> integer","title":"table.maxn"},{"location":"doc/#tablemove","text":"function table. move ( a1 : table, f : integer, e : integer, t : integer, a2 ? : table ) -> a2 : table","title":"table.move"},{"location":"doc/#tablepack","text":"function table. pack (... any ) -> table","title":"table.pack"},{"location":"doc/#tableremove","text":"function table. remove ( list : table, pos ? : integer ) -> any","title":"table.remove"},{"location":"doc/#tablesort","text":"function table. sort ( list : < T>[], comp ? : fun ( a : < T>, b : < T>): boolean )","title":"table.sort"},{"location":"doc/#tableunpack","text":"function table. unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 >","title":"table.unpack"},{"location":"doc/#tablelib","text":"","title":"tablelib"},{"location":"doc/#concat","text":"function table. concat ( list : table, sep ? : string , i ? : integer , j ? : integer ) -> string Given a list where all elements are strings or numbers, returns the string list[i]..sep..list[i+1] \u00b7\u00b7\u00b7 sep..list[j] . View documents","title":"concat"},{"location":"doc/#foreach","text":"function table. foreach ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach. View documents","title":"foreach"},{"location":"doc/#foreachi","text":"function table. foreachi ( list : any, callback : fun ( key : string, value : any):< T >| nil ) -> < T >| nil Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi. View documents","title":"foreachi"},{"location":"doc/#getn","text":"function table. getn ( list : < T>[]) -> integer Returns the number of elements in the table. This function is equivalent to #list . View documents","title":"getn"},{"location":"doc/#insert_1","text":"function table. insert ( list : table, pos : integer, value : any) Inserts element value at position pos in list . View documents","title":"insert"},{"location":"doc/#maxn","text":"function table. maxn ( table : table) -> integer Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices. View documents","title":"maxn"},{"location":"doc/#move_2","text":"function table. move ( a1 : table, f : integer, e : integer, t : integer, a2 ? : table ) -> a2 : table Moves elements from table a1 to table a2 . a2 [ t ], \u00b7\u00b7\u00b7 = a1 [ f ], \u00b7\u00b7\u00b7 , a1 [ e ] return a2 View documents","title":"move"},{"location":"doc/#pack_4","text":"function table. pack (... any ) -> table Returns a new table with all arguments stored into keys 1 , 2 , etc. and with a field \"n\" with the total number of arguments. View documents","title":"pack"},{"location":"doc/#remove_8","text":"function table. remove ( list : table, pos ? : integer ) -> any Removes from list the element at position pos , returning the value of the removed element. View documents","title":"remove"},{"location":"doc/#sort","text":"function table. sort ( list : < T>[], comp ? : fun ( a : < T>, b : < T>): boolean ) Sorts list elements in a given order, in-place , from list[1] to list[#list] . View documents","title":"sort"},{"location":"doc/#unpack_4","text":"function table. unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 > Returns the elements from the given list. This function is equivalent to return list [ i ], list [ i + 1 ], \u00b7\u00b7\u00b7 , list [ j ] By default, i is 1 and j is #list . View documents","title":"unpack"},{"location":"doc/#thread_1","text":"","title":"thread"},{"location":"doc/#tonumber_1","text":"function tonumber ( e : any) -> number ?","title":"tonumber"},{"location":"doc/#tostring_1","text":"function tostring ( v : any) -> string","title":"tostring"},{"location":"doc/#true","text":"","title":"true"},{"location":"doc/#type_58","text":"function type ( v : any) -> type : \"boolean\" | \"function\" | \"nil\" | \"number\" | \"string\" ...(+ 3 )","title":"type"},{"location":"doc/#type_59","text":"","title":"type"},{"location":"doc/#unknown_1","text":"","title":"unknown"},{"location":"doc/#unpack_5","text":"function unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 >, [ 10 ]: < T10 > }, i ? : integer , j ? : integer ) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 > 10. < T10 > function unpack ( list : { [1] : < T1>, [ 2 ]: < T2 >, [ 3 ]: < T3 >, [ 4 ]: < T4 >, [ 5 ]: < T5 >, [ 6 ]: < T6 >, [ 7 ]: < T7 >, [ 8 ]: < T8 >, [ 9 ]: < T9 > }) -> < T1 > 2. < T2 > 3. < T3 > 4. < T4 > 5. < T5 > 6. < T6 > 7. < T7 > 8. < T8 > 9. < T9 >","title":"unpack"},{"location":"doc/#userdata","text":"","title":"userdata"},{"location":"doc/#vbuf","text":"","title":"vbuf"},{"location":"doc/#warn","text":"function warn ( message : string, ... any )","title":"warn"},{"location":"doc/#xpcall","text":"function xpcall ( f : fun (... any ):... unknown , msgh : function, arg1 ? : any , ... any ) -> success : boolean 2. result : any 3. ... any","title":"xpcall"},{"location":"making-a-roguelike-part1/","text":"Getting Started with L\u00d6VE 2D Installation To begin, download and install L\u00d6VE 2D from https://love2d.org/ . If you are using Linux, L\u00d6VE is often available through your distribution's package manager. Running the Template Download the provided zipped release template and extract its contents. Run the project by: Dragging the folder containing main.lua onto the L\u00d6VE executable. Navigating to the project folder in a terminal and executing: love . Upon launching, you should see an @ symbol on the screen. You can move this character using the following default keys: - WASD for movement - QEZC for diagonal movement These key bindings can be modified in keymapschema.lua , included in the template. Creating an Enemy To make the game more engaging, let's introduce an enemy: the Kobold . Adding the Kobold Actor Navigate to the /modules/MyGame/actors/ directory. Create a new file named kobold.lua . Add the following code to define the Kobold actor: --- @class Kobold : Actor local Kobold = prism .Actor: extend ( \"Kobold\" ) Kobold .name = \"Kobold\" function Kobold: initialize () return { -- Defines the drawable appearance of the Kobold. -- Each index corresponds to a character byte + 1 in the spritesheet. -- The second argument specifies the Kobold's color (red). prism .components. Drawable ( string.byte ( \"k\" ) + 1 , prism . Color4 ( 1 , 0 , 0 )), -- Collider component ensures the Kobold occupies space on the map. -- Custom movement types can be specified for pathing exceptions. prism .components. Collider (), -- Senses component acts as a hub for implementing perception mechanics, -- such as Sight, Tremorsense, or Sound awareness. prism .components. Senses (), -- Sight component provides the Kobold with a field of vision. -- Defined in `modules/Sight` and included in the template. prism .components.Sight{ range = 12 , fov = true }, -- Move component enables movement actions, restricted to specified movement types. prism .components.Mover{ \"walk\" } } end return Kobold With this, the Kobold is now a simple enemy with: - A visual representation. - A collider preventing overlap with other solid objects. - A perception system to detect other actors. - A line-of-sight system. - A movement component allowing it to navigate the world. Let's run the game again, and press \"~\". This open Geometer, the editor. Click on the k on the right hand side and use the pen tool to draw a kobold in. Press the green button to resume the game. The Kobold Controller Now that the kobold exists in the world, you might notice something\u2014it\u2019s not moving! To give it behavior, we need to implement a Controller component. A Controller (or one of its derivatives) defines an act function, which takes the level and the actor as arguments and returns a valid action. Importantly, the act function should not modify the level directly \u2014it should only use it to validate actions. Navigate to modules/MyGame/components/ . Create a new file named koboldcontroller.lua . Add the following code: --- @class KoboldController : Controller --- @field blackboard table|nil --- @overload fun(): KoboldController --- @type KoboldController local KoboldController = prism .Controller: extend ( \"KoboldController\" ) KoboldController .name = \"KoboldController\" ---@return Action function KoboldController: act ( level , actor ) -- Retrieve the senses component to detect nearby actors. local senses = self : getComponent ( prism .components.Senses) -- Identify the closest sensed actor that has a Controller. local closest local closestDistance for sensedActor in senses .actors: eachActor ( prism .components.Controller) do local dist = sensedActor : getRange ( actor ) if dist < closestDistance then closest = sensedActor closestDistance = dist end end -- If no valid target is found, wait. if not closest then return prism .actions. Wait () end -- Use Prism's pathfinding to determine a route to the closest actor. local path = level : findPath ( actor : getPosition (), closest : getPosition (), nil , stats .mask) -- If a valid path is found, attempt to move along it. if path then local move = prism .actions. Move ( actor , { path : pop ()}) if move : canPerform ( level ) then return move end end -- If no action can be taken, wait. return prism .actions. Wait () end return KoboldController Integrating the Controller Now, open kobold.lua and add the new component: prism .components. KoboldController () Testing the Kobold AI Run the game and open Geometer by pressing ~ . 1. Click on the \"k\" character. 2. Click anywhere in the level to spawn a kobold . 3. Resume the game using the green button . The kobold should now follow you when it sees you. However, if you spawn a second kobold, you\u2019ll notice an issue\u2014they can get stuck in a loop following each other! To fix this, we\u2019ll ensure that kobolds only follow the player . Adding a Player Tag To differentiate the player from other actors, we need a way to identify it. A full roguelike might implement a faction system, but for now, we\u2019ll use a simple tag component . Creating the PlayerTag Component Navigate to modules/MyGame/components/ . Create a new file named player.lua . Add the following code: local PlayerTag = prism .Component: extend ( \"PlayerTagComponent\" ) PlayerTag .name = \"PlayerTag\" Assigning the PlayerTag Next, modify modules/MyGame/actors/player.lua to add the new component: prism .components. PlayerTag () Updating the Kobold AI Now, we\u2019ll modify KoboldController so kobolds only follow actors with the PlayerTag . Replace the act function in koboldcontroller.lua with the following: function KoboldController: act ( level , actor ) -- Retrieve the senses component to detect nearby actors. local senses = self : getComponent ( prism .components.Senses) -- Identify the player from sensed actors. local player for sensedActor in senses .actors: eachActor ( prism .components.Player) do player = sensedActor end if player then -- Use Prism's pathfinding to determine a route to the player. local path = level : findPath ( actor : getPosition (), player : getPosition (), nil , stats .mask) -- If a valid path is found, attempt to move along it. if path then local move = prism .actions. Move ( actor , { path : pop ()}) if move : canPerform ( level ) then return move end end end -- If no action can be taken, wait. return prism .actions. Wait () end Now, kobolds will only track the player! Kicking Kobolds In this section we'll give you something to do to these kobolds. Kick them! We'll need to create our first action. Head over to /modules/MyGame/actions and add kick.lua. Let's first create a target for our kick. Put this at the top of kick.lua. local KickTarget = prism .Target: extend ( \"KickTarget\" ) -- This can be Actor, Point, Cell, or Any. You can accept a union of these types and -- differentiate in canPerform/perform KickTarget .typesAllowed = { Actor = true } -- Targets have built in range checking for brevity, we specify one here. KickTarget .range = 1 function KickTarget: validate ( owner , actor , targets ) -- check if the actor has a collider return actor : hasComponent ( prism .components.Collider) end So with this target we're saying you can only kick actors at range one with a collider component. ---@class KickAction : Action ---@field name string ---@field targets Target[] ---@field previousPosition Vector2 local Kick = prism .Action: extend ( \"KickAction\" ) Kick .name = \"move\" Kick .targets = { KickTarget } Kick .requiredComponents = { prism .components.Controller, prism .components.Kicker, } --- @param level Level --- @param kicked Actor function Kick: _perform ( level , kicked ) local kicker = self .owner: expectComponent ( prism .components.Kicker) local kx , ky = ( kicked : getPosition () - self .owner: getPosition ()): decompose () -- 'normalize' the kick direction if kx > 0 then kx = 1 elseif kx < 0 then kx = - 1 end if ky > 0 then ky = 1 elseif ky < 0 then ky = - 1 end -- recompose back into a vector local kickdir = prism . Vector2 ( kx , ky ) -- our movetype mask for the kick, we'll give them the 'fly' movetype local mask = prism .Collision.createBitmaskFromMovetypes{ \"fly\" } -- now we loop and continue to try to move the kicked in the direction -- of the kick a number of tiles equal to the kicker's kick strength. for i = 1 , kicker .strength do local nextpos = kicked : getPosition () + kickdir if level : getCellPassable ( nextpos .x, nextpos .y, mask ) then level : moveActor ( kicked , nextpos ) end end end return Kick","title":"Part 01"},{"location":"making-a-roguelike-part1/#getting-started-with-love-2d","text":"","title":"Getting Started with L\u00d6VE 2D"},{"location":"making-a-roguelike-part1/#installation","text":"To begin, download and install L\u00d6VE 2D from https://love2d.org/ . If you are using Linux, L\u00d6VE is often available through your distribution's package manager.","title":"Installation"},{"location":"making-a-roguelike-part1/#running-the-template","text":"Download the provided zipped release template and extract its contents. Run the project by: Dragging the folder containing main.lua onto the L\u00d6VE executable. Navigating to the project folder in a terminal and executing: love . Upon launching, you should see an @ symbol on the screen. You can move this character using the following default keys: - WASD for movement - QEZC for diagonal movement These key bindings can be modified in keymapschema.lua , included in the template.","title":"Running the Template"},{"location":"making-a-roguelike-part1/#creating-an-enemy","text":"To make the game more engaging, let's introduce an enemy: the Kobold .","title":"Creating an Enemy"},{"location":"making-a-roguelike-part1/#adding-the-kobold-actor","text":"Navigate to the /modules/MyGame/actors/ directory. Create a new file named kobold.lua . Add the following code to define the Kobold actor: --- @class Kobold : Actor local Kobold = prism .Actor: extend ( \"Kobold\" ) Kobold .name = \"Kobold\" function Kobold: initialize () return { -- Defines the drawable appearance of the Kobold. -- Each index corresponds to a character byte + 1 in the spritesheet. -- The second argument specifies the Kobold's color (red). prism .components. Drawable ( string.byte ( \"k\" ) + 1 , prism . Color4 ( 1 , 0 , 0 )), -- Collider component ensures the Kobold occupies space on the map. -- Custom movement types can be specified for pathing exceptions. prism .components. Collider (), -- Senses component acts as a hub for implementing perception mechanics, -- such as Sight, Tremorsense, or Sound awareness. prism .components. Senses (), -- Sight component provides the Kobold with a field of vision. -- Defined in `modules/Sight` and included in the template. prism .components.Sight{ range = 12 , fov = true }, -- Move component enables movement actions, restricted to specified movement types. prism .components.Mover{ \"walk\" } } end return Kobold With this, the Kobold is now a simple enemy with: - A visual representation. - A collider preventing overlap with other solid objects. - A perception system to detect other actors. - A line-of-sight system. - A movement component allowing it to navigate the world. Let's run the game again, and press \"~\". This open Geometer, the editor. Click on the k on the right hand side and use the pen tool to draw a kobold in. Press the green button to resume the game.","title":"Adding the Kobold Actor"},{"location":"making-a-roguelike-part1/#the-kobold-controller","text":"Now that the kobold exists in the world, you might notice something\u2014it\u2019s not moving! To give it behavior, we need to implement a Controller component. A Controller (or one of its derivatives) defines an act function, which takes the level and the actor as arguments and returns a valid action. Importantly, the act function should not modify the level directly \u2014it should only use it to validate actions. Navigate to modules/MyGame/components/ . Create a new file named koboldcontroller.lua . Add the following code: --- @class KoboldController : Controller --- @field blackboard table|nil --- @overload fun(): KoboldController --- @type KoboldController local KoboldController = prism .Controller: extend ( \"KoboldController\" ) KoboldController .name = \"KoboldController\" ---@return Action function KoboldController: act ( level , actor ) -- Retrieve the senses component to detect nearby actors. local senses = self : getComponent ( prism .components.Senses) -- Identify the closest sensed actor that has a Controller. local closest local closestDistance for sensedActor in senses .actors: eachActor ( prism .components.Controller) do local dist = sensedActor : getRange ( actor ) if dist < closestDistance then closest = sensedActor closestDistance = dist end end -- If no valid target is found, wait. if not closest then return prism .actions. Wait () end -- Use Prism's pathfinding to determine a route to the closest actor. local path = level : findPath ( actor : getPosition (), closest : getPosition (), nil , stats .mask) -- If a valid path is found, attempt to move along it. if path then local move = prism .actions. Move ( actor , { path : pop ()}) if move : canPerform ( level ) then return move end end -- If no action can be taken, wait. return prism .actions. Wait () end return KoboldController","title":"The Kobold Controller"},{"location":"making-a-roguelike-part1/#integrating-the-controller","text":"Now, open kobold.lua and add the new component: prism .components. KoboldController ()","title":"Integrating the Controller"},{"location":"making-a-roguelike-part1/#testing-the-kobold-ai","text":"Run the game and open Geometer by pressing ~ . 1. Click on the \"k\" character. 2. Click anywhere in the level to spawn a kobold . 3. Resume the game using the green button . The kobold should now follow you when it sees you. However, if you spawn a second kobold, you\u2019ll notice an issue\u2014they can get stuck in a loop following each other! To fix this, we\u2019ll ensure that kobolds only follow the player .","title":"Testing the Kobold AI"},{"location":"making-a-roguelike-part1/#adding-a-player-tag","text":"To differentiate the player from other actors, we need a way to identify it. A full roguelike might implement a faction system, but for now, we\u2019ll use a simple tag component .","title":"Adding a Player Tag"},{"location":"making-a-roguelike-part1/#creating-the-playertag-component","text":"Navigate to modules/MyGame/components/ . Create a new file named player.lua . Add the following code: local PlayerTag = prism .Component: extend ( \"PlayerTagComponent\" ) PlayerTag .name = \"PlayerTag\"","title":"Creating the PlayerTag Component"},{"location":"making-a-roguelike-part1/#assigning-the-playertag","text":"Next, modify modules/MyGame/actors/player.lua to add the new component: prism .components. PlayerTag ()","title":"Assigning the PlayerTag"},{"location":"making-a-roguelike-part1/#updating-the-kobold-ai","text":"Now, we\u2019ll modify KoboldController so kobolds only follow actors with the PlayerTag . Replace the act function in koboldcontroller.lua with the following: function KoboldController: act ( level , actor ) -- Retrieve the senses component to detect nearby actors. local senses = self : getComponent ( prism .components.Senses) -- Identify the player from sensed actors. local player for sensedActor in senses .actors: eachActor ( prism .components.Player) do player = sensedActor end if player then -- Use Prism's pathfinding to determine a route to the player. local path = level : findPath ( actor : getPosition (), player : getPosition (), nil , stats .mask) -- If a valid path is found, attempt to move along it. if path then local move = prism .actions. Move ( actor , { path : pop ()}) if move : canPerform ( level ) then return move end end end -- If no action can be taken, wait. return prism .actions. Wait () end Now, kobolds will only track the player!","title":"Updating the Kobold AI"},{"location":"making-a-roguelike-part1/#kicking-kobolds","text":"In this section we'll give you something to do to these kobolds. Kick them! We'll need to create our first action. Head over to /modules/MyGame/actions and add kick.lua. Let's first create a target for our kick. Put this at the top of kick.lua. local KickTarget = prism .Target: extend ( \"KickTarget\" ) -- This can be Actor, Point, Cell, or Any. You can accept a union of these types and -- differentiate in canPerform/perform KickTarget .typesAllowed = { Actor = true } -- Targets have built in range checking for brevity, we specify one here. KickTarget .range = 1 function KickTarget: validate ( owner , actor , targets ) -- check if the actor has a collider return actor : hasComponent ( prism .components.Collider) end So with this target we're saying you can only kick actors at range one with a collider component. ---@class KickAction : Action ---@field name string ---@field targets Target[] ---@field previousPosition Vector2 local Kick = prism .Action: extend ( \"KickAction\" ) Kick .name = \"move\" Kick .targets = { KickTarget } Kick .requiredComponents = { prism .components.Controller, prism .components.Kicker, } --- @param level Level --- @param kicked Actor function Kick: _perform ( level , kicked ) local kicker = self .owner: expectComponent ( prism .components.Kicker) local kx , ky = ( kicked : getPosition () - self .owner: getPosition ()): decompose () -- 'normalize' the kick direction if kx > 0 then kx = 1 elseif kx < 0 then kx = - 1 end if ky > 0 then ky = 1 elseif ky < 0 then ky = - 1 end -- recompose back into a vector local kickdir = prism . Vector2 ( kx , ky ) -- our movetype mask for the kick, we'll give them the 'fly' movetype local mask = prism .Collision.createBitmaskFromMovetypes{ \"fly\" } -- now we loop and continue to try to move the kicked in the direction -- of the kick a number of tiles equal to the kicker's kick strength. for i = 1 , kicker .strength do local nextpos = kicked : getPosition () + kickdir if level : getCellPassable ( nextpos .x, nextpos .y, mask ) then level : moveActor ( kicked , nextpos ) end end end return Kick","title":"Kicking Kobolds"},{"location":"api/action/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Action : __new ( owner : Actor, targets ? : [ Object ], source ? : Actor ) Constructor for the Action class. @ param owner \u2014 The actor that is performing the action. @ param targets \u2014 An optional list of target actors. Not all actions require targets. @ param source \u2014 An optional actor indicating the source of that action, for stuff like a wand or scroll. _canPerform ( method ) Action : _canPerform ( level : Level, ... any ) -> canPerform : boolean This method should be overriden by subclasses. This is called to make sure an action is valid for the actor. This would be useful for _perform ( method ) Action : _perform ( level : Level, ... any ) Performs the action. This should be overriden on all subclasses @ param level \u2014 The level the action is being performed in. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown canPerform ( method ) Action : canPerform ( level : Level) -> canPerform : boolean Call this function to check if the action is valid and can be executed in the given level. This calls the inner overrideable _canPerform, and unpacks the target objects. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getNumTargets ( method ) Action : getNumTargets () -> numTargets : number Returns the number of targets associated with this action. @ return numTargets \u2014 The number of targets associated with this action. getTarget ( method ) Action : getTarget ( n : number) -> target : any Returns the target actor at the specified index. @ param n \u2014 The index of the target actor to retrieve. @ return target \u2014 The target actor at the specified index. getTargetObject ( method ) Action : getTargetObject ( index : any) -> targetObject : Target| nil Returns the target object at the specified index. @tparam number index The index of the target object to retrieve. hasRequisiteComponents ( method ) Action : hasRequisiteComponents ( actor : Actor) -> hasRequisiteComponents : boolean hasTarget ( method ) Action : hasTarget ( actor : any) -> boolean Determines if the specified actor is a target of this action. @tparam Actor actor The actor to check if they are a target of this action. @treturn boolean true if the specified actor is a target of this action, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The actor taking the action. perform ( method ) Action : perform ( level : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requiredComponents Component [] serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table silent boolean A silent action doesn't generate messages source Actor ? An object granting the owner of the action this action. A wand's zap action is a good example. stripName boolean targetObjects [ Object ] targets [ Target ] time number The time it takes to perform this action. Lower is better. validateTarget ( method ) Action : validateTarget ( n : number, owner : Actor, toValidate : Actor, targets : [ any]) -> true : boolean _validates the specified target for this action. @ param n \u2014 The index of the target object to _validate. @ param owner \u2014 The actor that is performing the action. @ param toValidate \u2014 The target actor to _validate. @ param targets \u2014 The previously selected targets. @ return true \u2014 if the specified target actor is valid for this action, false otherwise.","title":"action"},{"location":"api/action/#__call","text":"function","title":"__call"},{"location":"api/action/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/action/#__new","text":"( method ) Action : __new ( owner : Actor, targets ? : [ Object ], source ? : Actor ) Constructor for the Action class. @ param owner \u2014 The actor that is performing the action. @ param targets \u2014 An optional list of target actors. Not all actions require targets. @ param source \u2014 An optional actor indicating the source of that action, for stuff like a wand or scroll.","title":"__new"},{"location":"api/action/#_canperform","text":"( method ) Action : _canPerform ( level : Level, ... any ) -> canPerform : boolean This method should be overriden by subclasses. This is called to make sure an action is valid for the actor. This would be useful for","title":"_canPerform"},{"location":"api/action/#_perform","text":"( method ) Action : _perform ( level : Level, ... any ) Performs the action. This should be overriden on all subclasses @ param level \u2014 The level the action is being performed in.","title":"_perform"},{"location":"api/action/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/action/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/action/#canperform","text":"( method ) Action : canPerform ( level : Level) -> canPerform : boolean Call this function to check if the action is valid and can be executed in the given level. This calls the inner overrideable _canPerform, and unpacks the target objects.","title":"canPerform"},{"location":"api/action/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/action/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/action/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/action/#getnumtargets","text":"( method ) Action : getNumTargets () -> numTargets : number Returns the number of targets associated with this action. @ return numTargets \u2014 The number of targets associated with this action.","title":"getNumTargets"},{"location":"api/action/#gettarget","text":"( method ) Action : getTarget ( n : number) -> target : any Returns the target actor at the specified index. @ param n \u2014 The index of the target actor to retrieve. @ return target \u2014 The target actor at the specified index.","title":"getTarget"},{"location":"api/action/#gettargetobject","text":"( method ) Action : getTargetObject ( index : any) -> targetObject : Target| nil Returns the target object at the specified index. @tparam number index The index of the target object to retrieve.","title":"getTargetObject"},{"location":"api/action/#hasrequisitecomponents","text":"( method ) Action : hasRequisiteComponents ( actor : Actor) -> hasRequisiteComponents : boolean","title":"hasRequisiteComponents"},{"location":"api/action/#hastarget","text":"( method ) Action : hasTarget ( actor : any) -> boolean Determines if the specified actor is a target of this action. @tparam Actor actor The actor to check if they are a target of this action. @treturn boolean true if the specified actor is a target of this action, false otherwise.","title":"hasTarget"},{"location":"api/action/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/action/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/action/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/action/#name","text":"string","title":"name"},{"location":"api/action/#owner","text":"Actor The actor taking the action.","title":"owner"},{"location":"api/action/#perform","text":"( method ) Action : perform ( level : any)","title":"perform"},{"location":"api/action/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/action/#requiredcomponents","text":"Component []","title":"requiredComponents"},{"location":"api/action/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/action/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/action/#silent","text":"boolean A silent action doesn't generate messages","title":"silent"},{"location":"api/action/#source","text":"Actor ? An object granting the owner of the action this action. A wand's zap action is a good example.","title":"source"},{"location":"api/action/#stripname","text":"boolean","title":"stripName"},{"location":"api/action/#targetobjects","text":"[ Object ]","title":"targetObjects"},{"location":"api/action/#targets","text":"[ Target ]","title":"targets"},{"location":"api/action/#time","text":"number The time it takes to perform this action. Lower is better.","title":"time"},{"location":"api/action/#validatetarget","text":"( method ) Action : validateTarget ( n : number, owner : Actor, toValidate : Actor, targets : [ any]) -> true : boolean _validates the specified target for this action. @ param n \u2014 The index of the target object to _validate. @ param owner \u2014 The actor that is performing the action. @ param toValidate \u2014 The target actor to _validate. @ param targets \u2014 The previously selected targets. @ return true \u2014 if the specified target actor is valid for this action, false otherwise.","title":"validateTarget"},{"location":"api/actiondecision/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActionDecision : __new ( actor : Actor) _serializationBlacklist table action Action | nil An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more. actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setAction ( method ) ActionDecision : setAction ( action : any) stripName boolean validateResponse ( method ) ActionDecision : validateResponse () -> boolean","title":"actiondecision"},{"location":"api/actiondecision/#__call","text":"function","title":"__call"},{"location":"api/actiondecision/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/actiondecision/#__new","text":"( method ) ActionDecision : __new ( actor : Actor)","title":"__new"},{"location":"api/actiondecision/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/actiondecision/#action","text":"Action | nil An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more.","title":"action"},{"location":"api/actiondecision/#actor","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"api/actiondecision/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/actiondecision/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/actiondecision/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/actiondecision/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/actiondecision/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/actiondecision/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/actiondecision/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/actiondecision/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/actiondecision/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/actiondecision/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/actiondecision/#setaction","text":"( method ) ActionDecision : setAction ( action : any)","title":"setAction"},{"location":"api/actiondecision/#stripname","text":"boolean","title":"stripName"},{"location":"api/actiondecision/#validateresponse","text":"( method ) ActionDecision : validateResponse () -> boolean","title":"validateResponse"},{"location":"api/actionmessage/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActionMessage : __new ( action : Action) _serializationBlacklist table action Action An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more. actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"actionmessage"},{"location":"api/actionmessage/#__call","text":"function","title":"__call"},{"location":"api/actionmessage/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/actionmessage/#__new","text":"( method ) ActionMessage : __new ( action : Action)","title":"__new"},{"location":"api/actionmessage/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/actionmessage/#action","text":"Action An 'Action' is a command that affects a discrete change in the game state. An Action consists of an owner, a name, a list of targets, and a list of target objects. See Target for more.","title":"action"},{"location":"api/actionmessage/#actor","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"api/actionmessage/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/actionmessage/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/actionmessage/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/actionmessage/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/actionmessage/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/actionmessage/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/actionmessage/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/actionmessage/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/actionmessage/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/actionmessage/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/actionmessage/#stripname","text":"boolean","title":"stripName"},{"location":"api/actor/","text":"__addComponent ( method ) Actor : __addComponent ( component : Component) Adds a component to the actor. This function will check if the component's prerequisites are met and will throw an error if they are not. @ param component \u2014 The component to add to the actor. __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Actor : __new () Constructor for an actor. Initializes and copies the actor's fields from its prototype. __removeComponent ( method ) Actor : __removeComponent ( component : Component) -> unknown Removes a component from the actor. This function will throw an error if the component is not present on the actor. @ param component \u2014 The component to remove from the actor. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown char string The character to draw for this actor. className string A unique name for this class. By convention this should match the annotation name you use. componentCache table This is a cache for component queries, reducing most queries to a hashmap lookup. components Component [] A table containing all of the actor's component instances. Generated at runtime. deserialize function Object. deserialize ( data : any) -> unknown expectComponent ( method ) Actor : expectComponent ( prototype : < T>) -> < T > Expects a component, returning it or erroring on nil. @ param prototype \u2014 The type of the component to return. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActions ( method ) Actor : getActions () -> totalActions : Action[] Get a list of actions that the actor can perform. @ return totalActions \u2014 Returns a table of all actions. getComponent ( method ) Actor : getComponent ( prototype : < T>) -> < T > ? Searches for a component that inherits from the supplied prototype @ param prototype \u2014 The type of the component to return. getPosition ( method ) Actor : getPosition () -> position : Vector2 Returns the current position of the actor. @ return position \u2014 Returns a copy of the actor's current position. getRange ( method ) Actor : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , actor : Actor) -> Returns : number Get the range from this actor to another actor. @ param actor \u2014 The other actor to get the range to. @ return Returns \u2014 the calculated range. type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\" getRangeVec ( method ) Actor : getRangeVec ( type : any , vector : any) -> number Get the range from this actor to a given vector. @function Actor:getRangeVec @tparam string type The type of range calculation to use. @tparam Vector2 vector The vector to get the range to. @treturn number Returns the calculated range. hasComponent ( method ) Actor : hasComponent ( prototype : Component) -> hasComponent : boolean Returns a bool indicating whether the actor has a component of the given type. @ param prototype \u2014 The prototype of the component to check for. initialize ( method ) Actor : initialize () -> Component [] Creates the components for the actor. Override this. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string The string name of the actor, used for display to the user. position Vector2 An actor's position in the game world. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"actor"},{"location":"api/actor/#__addcomponent","text":"( method ) Actor : __addComponent ( component : Component) Adds a component to the actor. This function will check if the component's prerequisites are met and will throw an error if they are not. @ param component \u2014 The component to add to the actor.","title":"__addComponent"},{"location":"api/actor/#__call","text":"function","title":"__call"},{"location":"api/actor/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/actor/#__new","text":"( method ) Actor : __new () Constructor for an actor. Initializes and copies the actor's fields from its prototype.","title":"__new"},{"location":"api/actor/#__removecomponent","text":"( method ) Actor : __removeComponent ( component : Component) -> unknown Removes a component from the actor. This function will throw an error if the component is not present on the actor. @ param component \u2014 The component to remove from the actor.","title":"__removeComponent"},{"location":"api/actor/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/actor/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/actor/#char","text":"string The character to draw for this actor.","title":"char"},{"location":"api/actor/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/actor/#componentcache","text":"table This is a cache for component queries, reducing most queries to a hashmap lookup.","title":"componentCache"},{"location":"api/actor/#components","text":"Component [] A table containing all of the actor's component instances. Generated at runtime.","title":"components"},{"location":"api/actor/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/actor/#expectcomponent","text":"( method ) Actor : expectComponent ( prototype : < T>) -> < T > Expects a component, returning it or erroring on nil. @ param prototype \u2014 The type of the component to return.","title":"expectComponent"},{"location":"api/actor/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/actor/#getactions","text":"( method ) Actor : getActions () -> totalActions : Action[] Get a list of actions that the actor can perform. @ return totalActions \u2014 Returns a table of all actions.","title":"getActions"},{"location":"api/actor/#getcomponent","text":"( method ) Actor : getComponent ( prototype : < T>) -> < T > ? Searches for a component that inherits from the supplied prototype @ param prototype \u2014 The type of the component to return.","title":"getComponent"},{"location":"api/actor/#getposition","text":"( method ) Actor : getPosition () -> position : Vector2 Returns the current position of the actor. @ return position \u2014 Returns a copy of the actor's current position.","title":"getPosition"},{"location":"api/actor/#getrange","text":"( method ) Actor : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , actor : Actor) -> Returns : number Get the range from this actor to another actor. @ param actor \u2014 The other actor to get the range to. @ return Returns \u2014 the calculated range. type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\"","title":"getRange"},{"location":"api/actor/#getrangevec","text":"( method ) Actor : getRangeVec ( type : any , vector : any) -> number Get the range from this actor to a given vector. @function Actor:getRangeVec @tparam string type The type of range calculation to use. @tparam Vector2 vector The vector to get the range to. @treturn number Returns the calculated range.","title":"getRangeVec"},{"location":"api/actor/#hascomponent","text":"( method ) Actor : hasComponent ( prototype : Component) -> hasComponent : boolean Returns a bool indicating whether the actor has a component of the given type. @ param prototype \u2014 The prototype of the component to check for.","title":"hasComponent"},{"location":"api/actor/#initialize","text":"( method ) Actor : initialize () -> Component [] Creates the components for the actor. Override this.","title":"initialize"},{"location":"api/actor/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/actor/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/actor/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/actor/#name","text":"string The string name of the actor, used for display to the user.","title":"name"},{"location":"api/actor/#position","text":"Vector2 An actor's position in the game world.","title":"position"},{"location":"api/actor/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/actor/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/actor/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/actor/#stripname","text":"boolean","title":"stripName"},{"location":"api/actorstorage/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ActorStorage : __new ( insertSparseMapCallback : any, removeSparseMapCallback : any) The constructor for the 'ActorStorage' class. Initializes the list, spatial map, and component cache. _serializationBlacklist table actorToID table < Actor , integer ? > A hashmap of actors to ids. actors Actor [] The list of actors in the storage. addActor ( method ) ActorStorage : addActor ( actor : Actor) Adds an actor to the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. componentCache table The cache for storing actor components. deserialize function Object. deserialize ( data : any) -> unknown eachActor ( method ) ActorStorage : eachActor (... Component ? ) -> iter : function Returns an iterator over the actors in the storage. If a component is specified, only actors with that component will be returned. @ param ... \u2014 The components to filter by. @ return iter \u2014 An iterator over the actors in the storage. eachActorAt ( method ) ActorStorage : eachActorAt ( x : number, y : number) -> iterator : function Returns an iterator over the actors in the storage at the given position. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return iterator \u2014 An iterator over the actors at the given position. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActorByType ( method ) ActorStorage : getActorByType ( prototype : Actor) -> The : Actor| nil Returns an iterator over the actors in the storage that have the specified prototype. @ param prototype \u2014 The prototype to filter by. @ return The \u2014 first actor that matches the prototype, or nil if no actor matches. getActorsAt ( method ) ActorStorage : getActorsAt ( x : number, y : number) -> actors : Actor[] Returns a table of actors in the storage at the given position. TODO: Return an ActorStorage object instead of a table. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return actors \u2014 A table of actors at the given position. getID ( method ) ActorStorage : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the ActorStorage but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found. hasActor ( method ) ActorStorage : hasActor ( actor : Actor) -> True : boolean Returns whether the storage contains the specified actor. @ param actor \u2014 The actor to check. @ return True \u2014 if the storage contains the actor, false otherwise. ids SparseArray A sparse array of references to the Actors in the storage. The ID is derived from this. insertSparseMapCallback function insertSparseMapEntries ( method ) ActorStorage : insertSparseMapEntries ( actor : Actor) Inserts the specified actor into the spatial map. @ param actor \u2014 The actor to insert. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. merge ( method ) ActorStorage : merge ( other : ActorStorage) Merges another ActorStorage instance with this one. @ param other \u2014 The other ActorStorage instance to merge with this one. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onDeserialize ( method ) ActorStorage : onDeserialize () prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) ActorStorage : removeActor ( actor : Actor) Removes an actor from the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to remove. removeComponentCache ( method ) ActorStorage : removeComponentCache ( actor : Actor) Removes the specified actor from the component cache. @ param actor \u2014 The actor to remove from the component cache. removeSparseMapCallback function removeSparseMapEntries ( method ) ActorStorage : removeSparseMapEntries ( actor : Actor) Removes the specified actor from the spatial map. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setCallbacks ( method ) ActorStorage : setCallbacks ( insertCallback : any, removeCallback : any) sparseMap SparseMap The spatial map for storing actor positions. stripName boolean updateComponentCache ( method ) ActorStorage : updateComponentCache ( actor : Actor) Updates the component cache for the specified actor. @ param actor \u2014 The actor to update the component cache for.","title":"actorstorage"},{"location":"api/actorstorage/#__call","text":"function","title":"__call"},{"location":"api/actorstorage/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/actorstorage/#__new","text":"( method ) ActorStorage : __new ( insertSparseMapCallback : any, removeSparseMapCallback : any) The constructor for the 'ActorStorage' class. Initializes the list, spatial map, and component cache.","title":"__new"},{"location":"api/actorstorage/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/actorstorage/#actortoid","text":"table < Actor , integer ? > A hashmap of actors to ids.","title":"actorToID"},{"location":"api/actorstorage/#actors","text":"Actor [] The list of actors in the storage.","title":"actors"},{"location":"api/actorstorage/#addactor","text":"( method ) ActorStorage : addActor ( actor : Actor) Adds an actor to the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to add.","title":"addActor"},{"location":"api/actorstorage/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/actorstorage/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/actorstorage/#componentcache","text":"table The cache for storing actor components.","title":"componentCache"},{"location":"api/actorstorage/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/actorstorage/#eachactor","text":"( method ) ActorStorage : eachActor (... Component ? ) -> iter : function Returns an iterator over the actors in the storage. If a component is specified, only actors with that component will be returned. @ param ... \u2014 The components to filter by. @ return iter \u2014 An iterator over the actors in the storage.","title":"eachActor"},{"location":"api/actorstorage/#eachactorat","text":"( method ) ActorStorage : eachActorAt ( x : number, y : number) -> iterator : function Returns an iterator over the actors in the storage at the given position. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return iterator \u2014 An iterator over the actors at the given position.","title":"eachActorAt"},{"location":"api/actorstorage/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/actorstorage/#getactorbytype","text":"( method ) ActorStorage : getActorByType ( prototype : Actor) -> The : Actor| nil Returns an iterator over the actors in the storage that have the specified prototype. @ param prototype \u2014 The prototype to filter by. @ return The \u2014 first actor that matches the prototype, or nil if no actor matches.","title":"getActorByType"},{"location":"api/actorstorage/#getactorsat","text":"( method ) ActorStorage : getActorsAt ( x : number, y : number) -> actors : Actor[] Returns a table of actors in the storage at the given position. TODO: Return an ActorStorage object instead of a table. @ param x \u2014 The x-coordinate to check. @ param y \u2014 The y-coordinate to check. @ return actors \u2014 A table of actors at the given position.","title":"getActorsAt"},{"location":"api/actorstorage/#getid","text":"( method ) ActorStorage : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the ActorStorage but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found.","title":"getID"},{"location":"api/actorstorage/#hasactor","text":"( method ) ActorStorage : hasActor ( actor : Actor) -> True : boolean Returns whether the storage contains the specified actor. @ param actor \u2014 The actor to check. @ return True \u2014 if the storage contains the actor, false otherwise.","title":"hasActor"},{"location":"api/actorstorage/#ids","text":"SparseArray A sparse array of references to the Actors in the storage. The ID is derived from this.","title":"ids"},{"location":"api/actorstorage/#insertsparsemapcallback","text":"function","title":"insertSparseMapCallback"},{"location":"api/actorstorage/#insertsparsemapentries","text":"( method ) ActorStorage : insertSparseMapEntries ( actor : Actor) Inserts the specified actor into the spatial map. @ param actor \u2014 The actor to insert.","title":"insertSparseMapEntries"},{"location":"api/actorstorage/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/actorstorage/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/actorstorage/#merge","text":"( method ) ActorStorage : merge ( other : ActorStorage) Merges another ActorStorage instance with this one. @ param other \u2014 The other ActorStorage instance to merge with this one.","title":"merge"},{"location":"api/actorstorage/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/actorstorage/#ondeserialize","text":"( method ) ActorStorage : onDeserialize ()","title":"onDeserialize"},{"location":"api/actorstorage/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/actorstorage/#removeactor","text":"( method ) ActorStorage : removeActor ( actor : Actor) Removes an actor from the storage, updating the spatial map and component cache. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"api/actorstorage/#removecomponentcache","text":"( method ) ActorStorage : removeComponentCache ( actor : Actor) Removes the specified actor from the component cache. @ param actor \u2014 The actor to remove from the component cache.","title":"removeComponentCache"},{"location":"api/actorstorage/#removesparsemapcallback","text":"function","title":"removeSparseMapCallback"},{"location":"api/actorstorage/#removesparsemapentries","text":"( method ) ActorStorage : removeSparseMapEntries ( actor : Actor) Removes the specified actor from the spatial map. @ param actor \u2014 The actor to remove.","title":"removeSparseMapEntries"},{"location":"api/actorstorage/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/actorstorage/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/actorstorage/#setcallbacks","text":"( method ) ActorStorage : setCallbacks ( insertCallback : any, removeCallback : any)","title":"setCallbacks"},{"location":"api/actorstorage/#sparsemap","text":"SparseMap The spatial map for storing actor positions.","title":"sparseMap"},{"location":"api/actorstorage/#stripname","text":"boolean","title":"stripName"},{"location":"api/actorstorage/#updatecomponentcache","text":"( method ) ActorStorage : updateComponentCache ( actor : Actor) Updates the component cache for the specified actor. @ param actor \u2014 The actor to update the component cache for.","title":"updateComponentCache"},{"location":"api/arg/","text":"string []","title":"arg"},{"location":"api/assert/","text":"function assert ( v ? : < T >, message ? : any , ... any ) -> < T > 2. ... any","title":"assert"},{"location":"api/bitmaskbuffer/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BitmaskBuffer : __new ( w : integer, h : integer) Constructor for the BitmaskBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown buffer ffi .cdata* Initialize the buffer with zeroed 16-bit values className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) BitmaskBuffer : clear () Clear the buffer, setting all values to zero. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getBit ( method ) BitmaskBuffer : getBit ( x : integer, y : integer, bitIndex : integer) -> value : boolean Get the value of a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to retrieve. @ return value \u2014 The value of the bit (true if set, false if not). getIndex ( method ) BitmaskBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array. getMask ( method ) BitmaskBuffer : getMask ( x : integer, y : integer) -> value : integer Get the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The 16-bit mask value. h integer instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setBit ( method ) BitmaskBuffer : setBit ( x : integer, y : integer, bitIndex : integer, v : boolean) Set a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to set. @ param v \u2014 The value to set (true to set, false to clear). setMask ( method ) BitmaskBuffer : setMask ( x : integer, y : integer, value : integer) Set the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param value \u2014 The 16-bit value to set. stripName boolean w integer","title":"bitmaskbuffer"},{"location":"api/bitmaskbuffer/#__call","text":"function","title":"__call"},{"location":"api/bitmaskbuffer/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/bitmaskbuffer/#__new","text":"( method ) BitmaskBuffer : __new ( w : integer, h : integer) Constructor for the BitmaskBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer.","title":"__new"},{"location":"api/bitmaskbuffer/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/bitmaskbuffer/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/bitmaskbuffer/#buffer","text":"ffi .cdata* Initialize the buffer with zeroed 16-bit values","title":"buffer"},{"location":"api/bitmaskbuffer/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/bitmaskbuffer/#clear","text":"( method ) BitmaskBuffer : clear () Clear the buffer, setting all values to zero.","title":"clear"},{"location":"api/bitmaskbuffer/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/bitmaskbuffer/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/bitmaskbuffer/#getbit","text":"( method ) BitmaskBuffer : getBit ( x : integer, y : integer, bitIndex : integer) -> value : boolean Get the value of a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to retrieve. @ return value \u2014 The value of the bit (true if set, false if not).","title":"getBit"},{"location":"api/bitmaskbuffer/#getindex","text":"( method ) BitmaskBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array.","title":"getIndex"},{"location":"api/bitmaskbuffer/#getmask","text":"( method ) BitmaskBuffer : getMask ( x : integer, y : integer) -> value : integer Get the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The 16-bit mask value.","title":"getMask"},{"location":"api/bitmaskbuffer/#h","text":"integer","title":"h"},{"location":"api/bitmaskbuffer/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/bitmaskbuffer/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/bitmaskbuffer/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/bitmaskbuffer/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/bitmaskbuffer/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/bitmaskbuffer/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/bitmaskbuffer/#setbit","text":"( method ) BitmaskBuffer : setBit ( x : integer, y : integer, bitIndex : integer, v : boolean) Set a specific bit at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param bitIndex \u2014 The bit index (0-15) to set. @ param v \u2014 The value to set (true to set, false to clear).","title":"setBit"},{"location":"api/bitmaskbuffer/#setmask","text":"( method ) BitmaskBuffer : setMask ( x : integer, y : integer, value : integer) Set the full 16-bit mask value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param value \u2014 The 16-bit value to set.","title":"setMask"},{"location":"api/bitmaskbuffer/#stripname","text":"boolean","title":"stripName"},{"location":"api/bitmaskbuffer/#w","text":"integer","title":"w"},{"location":"api/boolean/","text":"","title":"boolean"},{"location":"api/booleanbuffer/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BooleanBuffer : __new ( w : integer, h : integer) Constructor for the BooleanBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown buffer ffi .cdata* Initialize the buffer with false values className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) BooleanBuffer : clear () Clear the buffer, setting all values to false. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) BooleanBuffer : get ( x : integer, y : integer) -> value : boolean Get the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The value at the given coordinates. getIndex ( method ) BooleanBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array. h integer The height of the buffer. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) BooleanBuffer : set ( x : integer, y : integer, v : boolean) Set the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param v \u2014 The value to set. stripName boolean w integer The width of the buffer.","title":"booleanbuffer"},{"location":"api/booleanbuffer/#__call","text":"function","title":"__call"},{"location":"api/booleanbuffer/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/booleanbuffer/#__new","text":"( method ) BooleanBuffer : __new ( w : integer, h : integer) Constructor for the BooleanBuffer class. @ param w \u2014 The width of the buffer. @ param h \u2014 The height of the buffer.","title":"__new"},{"location":"api/booleanbuffer/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/booleanbuffer/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/booleanbuffer/#buffer","text":"ffi .cdata* Initialize the buffer with false values","title":"buffer"},{"location":"api/booleanbuffer/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/booleanbuffer/#clear","text":"( method ) BooleanBuffer : clear () Clear the buffer, setting all values to false.","title":"clear"},{"location":"api/booleanbuffer/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/booleanbuffer/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/booleanbuffer/#get","text":"( method ) BooleanBuffer : get ( x : integer, y : integer) -> value : boolean Get the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return value \u2014 The value at the given coordinates.","title":"get"},{"location":"api/booleanbuffer/#getindex","text":"( method ) BooleanBuffer : getIndex ( x : integer, y : integer) -> index : integer Calculate the index in the buffer array for the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ return index \u2014 The corresponding index in the buffer array.","title":"getIndex"},{"location":"api/booleanbuffer/#h","text":"integer The height of the buffer.","title":"h"},{"location":"api/booleanbuffer/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/booleanbuffer/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/booleanbuffer/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/booleanbuffer/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/booleanbuffer/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/booleanbuffer/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/booleanbuffer/#set","text":"( method ) BooleanBuffer : set ( x : integer, y : integer, v : boolean) Set the value at the given coordinates. @ param x \u2014 The x-coordinate (1-based). @ param y \u2014 The y-coordinate (1-based). @ param v \u2014 The value to set.","title":"set"},{"location":"api/booleanbuffer/#stripname","text":"boolean","title":"stripName"},{"location":"api/booleanbuffer/#w","text":"integer The width of the buffer.","title":"w"},{"location":"api/boundingbox/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BoundingBox : __new ( x : any, y : any, i : any, j : any) __tostring ( method ) BoundingBox : __tostring () -> string _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. contains ( method ) BoundingBox : contains ( x : any, y : any) -> boolean deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getHeight ( method ) BoundingBox : getHeight () -> unknown getWidth ( method ) BoundingBox : getWidth () -> unknown i any instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. intersects ( method ) BoundingBox : intersects ( other : any) -> boolean is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. j any mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean union ( method ) BoundingBox : union ( other : any) -> BoundingBox x any y any","title":"boundingbox"},{"location":"api/boundingbox/#__call","text":"function","title":"__call"},{"location":"api/boundingbox/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/boundingbox/#__new","text":"( method ) BoundingBox : __new ( x : any, y : any, i : any, j : any)","title":"__new"},{"location":"api/boundingbox/#__tostring","text":"( method ) BoundingBox : __tostring () -> string","title":"__tostring"},{"location":"api/boundingbox/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/boundingbox/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/boundingbox/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/boundingbox/#contains","text":"( method ) BoundingBox : contains ( x : any, y : any) -> boolean","title":"contains"},{"location":"api/boundingbox/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/boundingbox/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/boundingbox/#getheight","text":"( method ) BoundingBox : getHeight () -> unknown","title":"getHeight"},{"location":"api/boundingbox/#getwidth","text":"( method ) BoundingBox : getWidth () -> unknown","title":"getWidth"},{"location":"api/boundingbox/#i","text":"any","title":"i"},{"location":"api/boundingbox/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/boundingbox/#intersects","text":"( method ) BoundingBox : intersects ( other : any) -> boolean","title":"intersects"},{"location":"api/boundingbox/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/boundingbox/#j","text":"any","title":"j"},{"location":"api/boundingbox/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/boundingbox/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/boundingbox/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/boundingbox/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/boundingbox/#stripname","text":"boolean","title":"stripName"},{"location":"api/boundingbox/#union","text":"( method ) BoundingBox : union ( other : any) -> BoundingBox","title":"union"},{"location":"api/boundingbox/#x","text":"any","title":"x"},{"location":"api/boundingbox/#y","text":"any","title":"y"},{"location":"api/btconditional/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTConditional : __new ( conditionFunc : fun ( self : any, level : Level, actor : Actor): boolean ) Creates a new BTConditional. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. conditionFunc fun ( self : any, level : Level, actor : Actor): boolean deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTConditional : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the conditional node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btconditional"},{"location":"api/btconditional/#__call","text":"function","title":"__call"},{"location":"api/btconditional/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btconditional/#__new","text":"( method ) BTConditional : __new ( conditionFunc : fun ( self : any, level : Level, actor : Actor): boolean ) Creates a new BTConditional.","title":"__new"},{"location":"api/btconditional/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btconditional/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btconditional/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btconditional/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btconditional/#conditionfunc","text":"fun ( self : any, level : Level, actor : Actor): boolean","title":"conditionFunc"},{"location":"api/btconditional/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btconditional/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btconditional/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btconditional/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btconditional/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btconditional/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btconditional/#run","text":"( method ) BTConditional : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the conditional node.","title":"run"},{"location":"api/btconditional/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btconditional/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btconditional/#stripname","text":"boolean","title":"stripName"},{"location":"api/btnode/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTNode : __new ( run : fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action ) You can also construct an anonymous node like: prism.BTNode(function(level, actor) return true end) For this reason simple nodes like succeeders, inverters, failers etc. should just be created using these anonymous nodes. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btnode"},{"location":"api/btnode/#__call","text":"function","title":"__call"},{"location":"api/btnode/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btnode/#__new","text":"( method ) BTNode : __new ( run : fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action ) You can also construct an anonymous node like: prism.BTNode(function(level, actor) return true end) For this reason simple nodes like succeeders, inverters, failers etc. should just be created using these anonymous nodes.","title":"__new"},{"location":"api/btnode/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btnode/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btnode/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btnode/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btnode/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btnode/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btnode/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btnode/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btnode/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btnode/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btnode/#run","text":"fun ( self : BTNode, level : Level, actor : Actor, controller : ControllerComponent): boolean | Action","title":"run"},{"location":"api/btnode/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btnode/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btnode/#stripname","text":"boolean","title":"stripName"},{"location":"api/btroot/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTRoot : __new ( children : BTNode[]) Creates a new BTRoot. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTRoot : run ( level : Level, actor : Actor, controller : ControllerComponent) -> Action Runs the behavior tree starting from this root node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btroot"},{"location":"api/btroot/#__call","text":"function","title":"__call"},{"location":"api/btroot/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btroot/#__new","text":"( method ) BTRoot : __new ( children : BTNode[]) Creates a new BTRoot.","title":"__new"},{"location":"api/btroot/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btroot/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btroot/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btroot/#children","text":"BTNode []","title":"children"},{"location":"api/btroot/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btroot/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btroot/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btroot/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btroot/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btroot/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btroot/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btroot/#run","text":"( method ) BTRoot : run ( level : Level, actor : Actor, controller : ControllerComponent) -> Action Runs the behavior tree starting from this root node.","title":"run"},{"location":"api/btroot/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btroot/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btroot/#stripname","text":"boolean","title":"stripName"},{"location":"api/btselector/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSelector : __new ( children : BTNode[]) Creates a new BTSelector. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSelector : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the selector node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btselector"},{"location":"api/btselector/#__call","text":"function","title":"__call"},{"location":"api/btselector/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btselector/#__new","text":"( method ) BTSelector : __new ( children : BTNode[]) Creates a new BTSelector.","title":"__new"},{"location":"api/btselector/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btselector/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btselector/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btselector/#children","text":"BTNode []","title":"children"},{"location":"api/btselector/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btselector/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btselector/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btselector/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btselector/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btselector/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btselector/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btselector/#run","text":"( method ) BTSelector : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the selector node.","title":"run"},{"location":"api/btselector/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btselector/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btselector/#stripname","text":"boolean","title":"stripName"},{"location":"api/btsequence/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSequence : __new ( children : BTNode[]) Creates a new BTSequence. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? children BTNode [] className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSequence : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the sequence node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btsequence"},{"location":"api/btsequence/#__call","text":"function","title":"__call"},{"location":"api/btsequence/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btsequence/#__new","text":"( method ) BTSequence : __new ( children : BTNode[]) Creates a new BTSequence.","title":"__new"},{"location":"api/btsequence/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btsequence/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btsequence/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btsequence/#children","text":"BTNode []","title":"children"},{"location":"api/btsequence/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btsequence/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btsequence/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btsequence/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btsequence/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btsequence/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btsequence/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btsequence/#run","text":"( method ) BTSequence : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the sequence node.","title":"run"},{"location":"api/btsequence/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btsequence/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btsequence/#stripname","text":"boolean","title":"stripName"},{"location":"api/btsucceeder/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) BTSucceeder : __new ( node : BTNode) Creates a new BTSucceeder. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. node BTNode The base class for all nodes in the behavior tree. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run ( method ) BTSucceeder : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the succeeder node. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"btsucceeder"},{"location":"api/btsucceeder/#__call","text":"function","title":"__call"},{"location":"api/btsucceeder/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/btsucceeder/#__new","text":"( method ) BTSucceeder : __new ( node : BTNode) Creates a new BTSucceeder.","title":"__new"},{"location":"api/btsucceeder/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/btsucceeder/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/btsucceeder/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/btsucceeder/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/btsucceeder/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/btsucceeder/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/btsucceeder/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/btsucceeder/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/btsucceeder/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/btsucceeder/#node","text":"BTNode The base class for all nodes in the behavior tree.","title":"node"},{"location":"api/btsucceeder/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/btsucceeder/#run","text":"( method ) BTSucceeder : run ( level : Level, actor : Actor, controller : ControllerComponent) -> boolean | Action Runs the succeeder node.","title":"run"},{"location":"api/btsucceeder/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/btsucceeder/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/btsucceeder/#stripname","text":"boolean","title":"stripName"},{"location":"api/button/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props ButtonProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"button"},{"location":"api/button/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/button/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/button/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/button/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/button/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/button/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/button/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/button/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/button/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/button/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/button/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/button/#props","text":"ButtonProps","title":"props"},{"location":"api/button/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/button/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/button/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/buttonprops/","text":"_internal Inky .Props.Internal disabled boolean disabledQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser hovered boolean hoveredQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser onPress fun ( pointer : Inky.Pointer) ? a function called after pressing the button onRelease fun ( pointer : Inky.Pointer) ? a function called after releasing the button pressed boolean whether the button is pressed pressedQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser tileset love .Image Drawable image type. Open in Browser toggle boolean whether the button stays pressed after clicking unpressedQuad love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser untoggle boolean if the button is toggleable, whether you can untoggle","title":"buttonprops"},{"location":"api/buttonprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/buttonprops/#disabled","text":"boolean","title":"disabled"},{"location":"api/buttonprops/#disabledquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"disabledQuad"},{"location":"api/buttonprops/#hovered","text":"boolean","title":"hovered"},{"location":"api/buttonprops/#hoveredquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"hoveredQuad"},{"location":"api/buttonprops/#onpress","text":"fun ( pointer : Inky.Pointer) ? a function called after pressing the button","title":"onPress"},{"location":"api/buttonprops/#onrelease","text":"fun ( pointer : Inky.Pointer) ? a function called after releasing the button","title":"onRelease"},{"location":"api/buttonprops/#pressed","text":"boolean whether the button is pressed","title":"pressed"},{"location":"api/buttonprops/#pressedquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"pressedQuad"},{"location":"api/buttonprops/#tileset","text":"love .Image Drawable image type. Open in Browser","title":"tileset"},{"location":"api/buttonprops/#toggle","text":"boolean whether the button stays pressed after clicking","title":"toggle"},{"location":"api/buttonprops/#unpressedquad","text":"love .Quad A quadrilateral (a polygon with four sides and four corners) with texture coordinate information. Quads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images. Open in Browser","title":"unpressedQuad"},{"location":"api/buttonprops/#untoggle","text":"boolean if the button is toggleable, whether you can untoggle","title":"untoggle"},{"location":"api/camera/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Camera : __new ( x : any, y : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getPosition ( method ) Camera : getPosition () -> x : number 2. y : number @ return x \u2014 The x position. @ return y \u2014 The y position. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. move ( method ) Camera : move ( dx : number, dy : number) pop ( method ) Camera : pop () Pops the camera's transform. Call this after drawing. position Vector2 prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) Camera : push () Pushes the camera's transform. Call this before drawing. rotation number scale Vector2 scaleAroundPoint ( method ) Camera : scaleAroundPoint ( factorX : number, factorY : number, pointX : number, pointY : number) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setPosition ( method ) Camera : setPosition ( x : number, y : number) setRotation ( method ) Camera : setRotation ( rotation : number) setScale ( method ) Camera : setScale ( scaleX : number, scaleY : number) stripName boolean toWorldSpace ( method ) Camera : toWorldSpace ( x : number, y : number) -> number 2. number","title":"camera"},{"location":"api/camera/#__call","text":"function","title":"__call"},{"location":"api/camera/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/camera/#__new","text":"( method ) Camera : __new ( x : any, y : any)","title":"__new"},{"location":"api/camera/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/camera/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/camera/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/camera/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/camera/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/camera/#getposition","text":"( method ) Camera : getPosition () -> x : number 2. y : number @ return x \u2014 The x position. @ return y \u2014 The y position.","title":"getPosition"},{"location":"api/camera/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/camera/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/camera/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/camera/#move","text":"( method ) Camera : move ( dx : number, dy : number)","title":"move"},{"location":"api/camera/#pop","text":"( method ) Camera : pop () Pops the camera's transform. Call this after drawing.","title":"pop"},{"location":"api/camera/#position","text":"Vector2","title":"position"},{"location":"api/camera/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/camera/#push","text":"( method ) Camera : push () Pushes the camera's transform. Call this before drawing.","title":"push"},{"location":"api/camera/#rotation","text":"number","title":"rotation"},{"location":"api/camera/#scale","text":"Vector2","title":"scale"},{"location":"api/camera/#scalearoundpoint","text":"( method ) Camera : scaleAroundPoint ( factorX : number, factorY : number, pointX : number, pointY : number)","title":"scaleAroundPoint"},{"location":"api/camera/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/camera/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/camera/#setposition","text":"( method ) Camera : setPosition ( x : number, y : number)","title":"setPosition"},{"location":"api/camera/#setrotation","text":"( method ) Camera : setRotation ( rotation : number)","title":"setRotation"},{"location":"api/camera/#setscale","text":"( method ) Camera : setScale ( scaleX : number, scaleY : number)","title":"setScale"},{"location":"api/camera/#stripname","text":"boolean","title":"stripName"},{"location":"api/camera/#toworldspace","text":"( method ) Camera : toWorldSpace ( x : number, y : number) -> number 2. number","title":"toWorldSpace"},{"location":"api/cell/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Cell : __new () Constructor for the Cell class. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) Cell : afterAction ( level : Level, actor : Actor, action : Action) Called right after an action is taken on the cell. @ param level \u2014 The level where the action took place. @ param actor \u2014 The actor that took the action. @ param action \u2014 The action that was taken. allowedMovetypes string [] ? beforeAction ( method ) Cell : beforeAction ( level : Level, actor : Actor, action : Action) Called right before an action takes place on this cell. className string A unique name for this class. By convention this should match the annotation name you use. collisionMask integer Defines whether a cell can moved through. deserialize function Object. deserialize ( data : any) -> unknown drawable DrawableComponent extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getComponent ( method ) Cell : getComponent ( component : any) -> DrawableComponent instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Displayed in the user interface. onEnter ( method ) Cell : onEnter ( level : Level, actor : Actor) Called when an actor enters the cell. @ param level \u2014 The level where the actor entered the cell. @ param actor \u2014 The actor that entered the cell. onLeave ( method ) Cell : onLeave ( level : Level, actor : Actor) Called when an actor leaves the cell. @ param level \u2014 The level where the actor left the cell. @ param actor \u2014 The actor that left the cell. opaque boolean Defines whether a cell can be seen through. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"cell"},{"location":"api/cell/#__call","text":"function","title":"__call"},{"location":"api/cell/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/cell/#__new","text":"( method ) Cell : __new () Constructor for the Cell class.","title":"__new"},{"location":"api/cell/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/cell/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/cell/#afteraction","text":"( method ) Cell : afterAction ( level : Level, actor : Actor, action : Action) Called right after an action is taken on the cell. @ param level \u2014 The level where the action took place. @ param actor \u2014 The actor that took the action. @ param action \u2014 The action that was taken.","title":"afterAction"},{"location":"api/cell/#allowedmovetypes","text":"string [] ?","title":"allowedMovetypes"},{"location":"api/cell/#beforeaction","text":"( method ) Cell : beforeAction ( level : Level, actor : Actor, action : Action) Called right before an action takes place on this cell.","title":"beforeAction"},{"location":"api/cell/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/cell/#collisionmask","text":"integer Defines whether a cell can moved through.","title":"collisionMask"},{"location":"api/cell/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/cell/#drawable","text":"DrawableComponent","title":"drawable"},{"location":"api/cell/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/cell/#getcomponent","text":"( method ) Cell : getComponent ( component : any) -> DrawableComponent","title":"getComponent"},{"location":"api/cell/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/cell/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/cell/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/cell/#name","text":"string Displayed in the user interface.","title":"name"},{"location":"api/cell/#onenter","text":"( method ) Cell : onEnter ( level : Level, actor : Actor) Called when an actor enters the cell. @ param level \u2014 The level where the actor entered the cell. @ param actor \u2014 The actor that entered the cell.","title":"onEnter"},{"location":"api/cell/#onleave","text":"( method ) Cell : onLeave ( level : Level, actor : Actor) Called when an actor leaves the cell. @ param level \u2014 The level where the actor left the cell. @ param actor \u2014 The actor that left the cell.","title":"onLeave"},{"location":"api/cell/#opaque","text":"boolean Defines whether a cell can be seen through.","title":"opaque"},{"location":"api/cell/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/cell/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/cell/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/cell/#stripname","text":"boolean","title":"stripName"},{"location":"api/collectgarbage/","text":"function collectgarbage ( opt ? : \"collect\" | \"count\" | \"isrunning\" | \"restart\" | \"setpause\" ...(+ 3 ), arg ? : integer ) -> any","title":"collectgarbage"},{"location":"api/collidercomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) ColliderComponent : __new ( options : ColliderOptions) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mask integer mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"collidercomponent"},{"location":"api/collidercomponent/#__call","text":"function","title":"__call"},{"location":"api/collidercomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/collidercomponent/#__new","text":"( method ) ColliderComponent : __new ( options : ColliderOptions)","title":"__new"},{"location":"api/collidercomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/collidercomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/collidercomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/collidercomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/collidercomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/collidercomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/collidercomponent/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/collidercomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/collidercomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/collidercomponent/#mask","text":"integer","title":"mask"},{"location":"api/collidercomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/collidercomponent/#name","text":"string","title":"name"},{"location":"api/collidercomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/collidercomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/collidercomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/collidercomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/collidercomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/collidercomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/collideroptions/","text":"allowedMovetypes string []","title":"collideroptions"},{"location":"api/collideroptions/#allowedmovetypes","text":"string []","title":"allowedMovetypes"},{"location":"api/collisionmask/","text":"","title":"collisionmask"},{"location":"api/color4/","text":"BLACK Color4 Predefined colors BLUE Color4 GREEN Color4 RED Color4 TRANSPARENT Color4 WHITE Color4 __add function Color4. __add ( a : Color4, b : Color4) -> The : Color4 Adds two colors together. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 sum of the two colors. __call function __eq function Color4. __eq ( a : Color4, b : Color4) -> True : boolean Checks equality between two colors. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return True \u2014 if the colors are equal, false otherwise. __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __mul function Color4. __mul ( self : Color4, scalar : number) -> The : Color4 Multiplies the color's components by a scalar. @ param scalar \u2014 The scalar value. @ return The \u2014 scaled color. __new ( method ) Color4 : __new ( r : number, g : number, b : number, a : number) Constructor for Color4 accepts red, green, blue, and alpha values. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1). __sub function Color4. __sub ( a : Color4, b : Color4) -> The : Color4 Subtracts one color from another. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 difference of the two colors. __tostring ( method ) Color4 : __tostring () -> The : string Creates a string representation of the color. @ return The \u2014 string representation. __unm function Color4. __unm ( self : Color4) -> The : Color4 Negates the color's components. @ return The \u2014 negated color. _serializationBlacklist table a number The alpha component (0-1). adopt ( method ) Object : adopt ( o : any) -> unknown b number The blue component (0-1). clamp ( method ) Color4 : clamp () -> The : Color4 Clamps the components of the color between 0 and 1. @ return The \u2014 clamped color. className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) Color4 : copy () -> A : Color4 Returns a copy of the color. @ return A \u2014 copy of the color. decompose ( method ) Color4 : decompose () -> r : number 2. g : number 3. b : number 4. a : number Returns the components of the color as numbers. @ return r,g,b,a \u2014 The components of the color. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fromHex function Color4. fromHex ( hex : number) Constructor for Color4 that accepts a hexadecimal number. @ param hex \u2014 A hex number representing a color, e.g. 0xFFFFFF. Alpha is optional and defaults to 1. g number The green component (0-1). instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. lerp ( method ) Color4 : lerp ( target : Color4, t : number) -> The : Color4 Linearly interpolates between two colors. @ param target \u2014 The target color. @ param t \u2014 A value between 0 and 1, where 0 is this color and 1 is the target color. @ return The \u2014 interpolated color. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. r number The red component (0-1). serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"color4"},{"location":"api/color4/#black","text":"Color4 Predefined colors","title":"BLACK"},{"location":"api/color4/#blue","text":"Color4","title":"BLUE"},{"location":"api/color4/#green","text":"Color4","title":"GREEN"},{"location":"api/color4/#red","text":"Color4","title":"RED"},{"location":"api/color4/#transparent","text":"Color4","title":"TRANSPARENT"},{"location":"api/color4/#white","text":"Color4","title":"WHITE"},{"location":"api/color4/#__add","text":"function Color4. __add ( a : Color4, b : Color4) -> The : Color4 Adds two colors together. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 sum of the two colors.","title":"__add"},{"location":"api/color4/#__call","text":"function","title":"__call"},{"location":"api/color4/#__eq","text":"function Color4. __eq ( a : Color4, b : Color4) -> True : boolean Checks equality between two colors. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return True \u2014 if the colors are equal, false otherwise.","title":"__eq"},{"location":"api/color4/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/color4/#__mul","text":"function Color4. __mul ( self : Color4, scalar : number) -> The : Color4 Multiplies the color's components by a scalar. @ param scalar \u2014 The scalar value. @ return The \u2014 scaled color.","title":"__mul"},{"location":"api/color4/#__new","text":"( method ) Color4 : __new ( r : number, g : number, b : number, a : number) Constructor for Color4 accepts red, green, blue, and alpha values. @ param r \u2014 The red component (0-1). @ param g \u2014 The green component (0-1). @ param b \u2014 The blue component (0-1). @ param a \u2014 The alpha component (0-1).","title":"__new"},{"location":"api/color4/#__sub","text":"function Color4. __sub ( a : Color4, b : Color4) -> The : Color4 Subtracts one color from another. @ param a \u2014 The first color. @ param b \u2014 The second color. @ return The \u2014 difference of the two colors.","title":"__sub"},{"location":"api/color4/#__tostring","text":"( method ) Color4 : __tostring () -> The : string Creates a string representation of the color. @ return The \u2014 string representation.","title":"__tostring"},{"location":"api/color4/#__unm","text":"function Color4. __unm ( self : Color4) -> The : Color4 Negates the color's components. @ return The \u2014 negated color.","title":"__unm"},{"location":"api/color4/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/color4/#a","text":"number The alpha component (0-1).","title":"a"},{"location":"api/color4/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/color4/#b","text":"number The blue component (0-1).","title":"b"},{"location":"api/color4/#clamp","text":"( method ) Color4 : clamp () -> The : Color4 Clamps the components of the color between 0 and 1. @ return The \u2014 clamped color.","title":"clamp"},{"location":"api/color4/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/color4/#copy","text":"( method ) Color4 : copy () -> A : Color4 Returns a copy of the color. @ return A \u2014 copy of the color.","title":"copy"},{"location":"api/color4/#decompose","text":"( method ) Color4 : decompose () -> r : number 2. g : number 3. b : number 4. a : number Returns the components of the color as numbers. @ return r,g,b,a \u2014 The components of the color.","title":"decompose"},{"location":"api/color4/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/color4/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/color4/#fromhex","text":"function Color4. fromHex ( hex : number) Constructor for Color4 that accepts a hexadecimal number. @ param hex \u2014 A hex number representing a color, e.g. 0xFFFFFF. Alpha is optional and defaults to 1.","title":"fromHex"},{"location":"api/color4/#g","text":"number The green component (0-1).","title":"g"},{"location":"api/color4/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/color4/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/color4/#lerp","text":"( method ) Color4 : lerp ( target : Color4, t : number) -> The : Color4 Linearly interpolates between two colors. @ param target \u2014 The target color. @ param t \u2014 A value between 0 and 1, where 0 is this color and 1 is the target color. @ return The \u2014 interpolated color.","title":"lerp"},{"location":"api/color4/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/color4/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/color4/#r","text":"number The red component (0-1).","title":"r"},{"location":"api/color4/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/color4/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/color4/#stripname","text":"boolean","title":"stripName"},{"location":"api/component/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"component"},{"location":"api/component/#__call","text":"function","title":"__call"},{"location":"api/component/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/component/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/component/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/component/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/component/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/component/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/component/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/component/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/component/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/component/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/component/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/component/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/component/#name","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"api/component/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/component/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/component/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/component/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/component/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/component/#stripname","text":"boolean","title":"stripName"},{"location":"api/controllercomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table act ( method ) ControllerComponent : act ( level : any, actor : any) -> Action adopt ( method ) Object : adopt ( o : any) -> unknown blackboard table | nil checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"controllercomponent"},{"location":"api/controllercomponent/#__call","text":"function","title":"__call"},{"location":"api/controllercomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/controllercomponent/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/controllercomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/controllercomponent/#act","text":"( method ) ControllerComponent : act ( level : any, actor : any) -> Action","title":"act"},{"location":"api/controllercomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/controllercomponent/#blackboard","text":"table | nil","title":"blackboard"},{"location":"api/controllercomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/controllercomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/controllercomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/controllercomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/controllercomponent/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/controllercomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/controllercomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/controllercomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/controllercomponent/#name","text":"string","title":"name"},{"location":"api/controllercomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/controllercomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/controllercomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/controllercomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/controllercomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/controllercomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/coroutine/","text":"coroutinelib coroutine.close function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any coroutine.create function coroutine. create ( f : fun (... any ):... unknown ) -> thread coroutine.isyieldable function coroutine. isyieldable () -> boolean coroutine.resume function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any coroutine.running function coroutine. running () -> running : thread 2. ismain : boolean coroutine.status function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" coroutine.wrap function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown coroutine.yield ( async ) function coroutine. yield (... any ) -> ... any","title":"coroutine"},{"location":"api/coroutine/#coroutineclose","text":"function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any","title":"coroutine.close"},{"location":"api/coroutine/#coroutinecreate","text":"function coroutine. create ( f : fun (... any ):... unknown ) -> thread","title":"coroutine.create"},{"location":"api/coroutine/#coroutineisyieldable","text":"function coroutine. isyieldable () -> boolean","title":"coroutine.isyieldable"},{"location":"api/coroutine/#coroutineresume","text":"function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any","title":"coroutine.resume"},{"location":"api/coroutine/#coroutinerunning","text":"function coroutine. running () -> running : thread 2. ismain : boolean","title":"coroutine.running"},{"location":"api/coroutine/#coroutinestatus","text":"function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\"","title":"coroutine.status"},{"location":"api/coroutine/#coroutinewrap","text":"function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown","title":"coroutine.wrap"},{"location":"api/coroutine/#coroutineyield","text":"( async ) function coroutine. yield (... any ) -> ... any","title":"coroutine.yield"},{"location":"api/coroutinelib/","text":"close function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any Closes coroutine co , closing all its pending to-be-closed variables and putting the coroutine in a dead state. View documents create function coroutine. create ( f : fun (... any ):... unknown ) -> thread Creates a new coroutine, with body f . f must be a function. Returns this new coroutine, an object with type \"thread\" . View documents isyieldable function coroutine. isyieldable () -> boolean Returns true when the running coroutine can yield. View documents resume function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any Starts or continues the execution of coroutine co . View documents running function coroutine. running () -> running : thread 2. ismain : boolean Returns the running coroutine plus a boolean, true when the running coroutine is the main one. View documents status function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" Returns the status of coroutine co . View documents return # 1 : | \"running\" -- Is running. | \"suspended\" -- Is suspended or not started. | \"normal\" -- Is active but not running. | \"dead\" -- Has finished or stopped with an error. wrap function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown Creates a new coroutine, with body f ; f must be a function. Returns a function that resumes the coroutine each time it is called. View documents yield ( async ) function coroutine. yield (... any ) -> ... any Suspends the execution of the calling coroutine. View documents","title":"coroutinelib"},{"location":"api/coroutinelib/#close","text":"function coroutine. close ( co : thread) -> noerror : boolean 2. errorobject : any Closes coroutine co , closing all its pending to-be-closed variables and putting the coroutine in a dead state. View documents","title":"close"},{"location":"api/coroutinelib/#create","text":"function coroutine. create ( f : fun (... any ):... unknown ) -> thread Creates a new coroutine, with body f . f must be a function. Returns this new coroutine, an object with type \"thread\" . View documents","title":"create"},{"location":"api/coroutinelib/#isyieldable","text":"function coroutine. isyieldable () -> boolean Returns true when the running coroutine can yield. View documents","title":"isyieldable"},{"location":"api/coroutinelib/#resume","text":"function coroutine. resume ( co : thread, val1 ? : any , ... any ) -> success : boolean 2. ... any Starts or continues the execution of coroutine co . View documents","title":"resume"},{"location":"api/coroutinelib/#running","text":"function coroutine. running () -> running : thread 2. ismain : boolean Returns the running coroutine plus a boolean, true when the running coroutine is the main one. View documents","title":"running"},{"location":"api/coroutinelib/#status","text":"function coroutine. status ( co : thread) -> \"dead\" | \"normal\" | \"running\" | \"suspended\" Returns the status of coroutine co . View documents return # 1 : | \"running\" -- Is running. | \"suspended\" -- Is suspended or not started. | \"normal\" -- Is active but not running. | \"dead\" -- Has finished or stopped with an error.","title":"status"},{"location":"api/coroutinelib/#wrap","text":"function coroutine. wrap ( f : fun (... any ):... unknown ) -> fun (... any ):... unknown Creates a new coroutine, with body f ; f must be a function. Returns a function that resumes the coroutine each time it is called. View documents","title":"wrap"},{"location":"api/coroutinelib/#yield","text":"( async ) function coroutine. yield (... any ) -> ... any Suspends the execution of the calling coroutine. View documents","title":"yield"},{"location":"api/debug/","text":"debuglib debug.debug function debug. debug () debug.getfenv function debug. getfenv ( o : any) -> table debug.gethook function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer debug.getinfo function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo debug.getlocal function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any debug.getmetatable function debug. getmetatable ( object : any) -> metatable : table debug.getregistry function debug. getregistry () -> table debug.getupvalue function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any debug.getuservalue function debug. getuservalue ( u : userdata) -> any debug.setcstacklimit function debug. setcstacklimit ( limit : integer) -> boolean | integer debug.setfenv function debug. setfenv ( object : < T>, env : table) -> object : < T> debug.sethook function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) debug.setlocal function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string debug.setmetatable function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> debug.setupvalue function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string debug.setuservalue function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata debug.traceback function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string debug.upvalueid function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata debug.upvaluejoin function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer)","title":"debug"},{"location":"api/debug/#debugdebug","text":"function debug. debug ()","title":"debug.debug"},{"location":"api/debug/#debuggetfenv","text":"function debug. getfenv ( o : any) -> table","title":"debug.getfenv"},{"location":"api/debug/#debuggethook","text":"function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer","title":"debug.gethook"},{"location":"api/debug/#debuggetinfo","text":"function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo","title":"debug.getinfo"},{"location":"api/debug/#debuggetlocal","text":"function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any","title":"debug.getlocal"},{"location":"api/debug/#debuggetmetatable","text":"function debug. getmetatable ( object : any) -> metatable : table","title":"debug.getmetatable"},{"location":"api/debug/#debuggetregistry","text":"function debug. getregistry () -> table","title":"debug.getregistry"},{"location":"api/debug/#debuggetupvalue","text":"function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any","title":"debug.getupvalue"},{"location":"api/debug/#debuggetuservalue","text":"function debug. getuservalue ( u : userdata) -> any","title":"debug.getuservalue"},{"location":"api/debug/#debugsetcstacklimit","text":"function debug. setcstacklimit ( limit : integer) -> boolean | integer","title":"debug.setcstacklimit"},{"location":"api/debug/#debugsetfenv","text":"function debug. setfenv ( object : < T>, env : table) -> object : < T>","title":"debug.setfenv"},{"location":"api/debug/#debugsethook","text":"function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer )","title":"debug.sethook"},{"location":"api/debug/#debugsetlocal","text":"function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string","title":"debug.setlocal"},{"location":"api/debug/#debugsetmetatable","text":"function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T>","title":"debug.setmetatable"},{"location":"api/debug/#debugsetupvalue","text":"function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string","title":"debug.setupvalue"},{"location":"api/debug/#debugsetuservalue","text":"function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata","title":"debug.setuservalue"},{"location":"api/debug/#debugtraceback","text":"function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string","title":"debug.traceback"},{"location":"api/debug/#debugupvalueid","text":"function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata","title":"debug.upvalueid"},{"location":"api/debug/#debugupvaluejoin","text":"function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer)","title":"debug.upvaluejoin"},{"location":"api/debuginfo/","text":"activelines table currentline integer func function istailcall boolean isvararg boolean lastlinedefined integer linedefined integer name string namewhat string nparams integer nups integer short_src string source string what string","title":"debuginfo"},{"location":"api/debuginfo/#activelines","text":"table","title":"activelines"},{"location":"api/debuginfo/#currentline","text":"integer","title":"currentline"},{"location":"api/debuginfo/#func","text":"function","title":"func"},{"location":"api/debuginfo/#istailcall","text":"boolean","title":"istailcall"},{"location":"api/debuginfo/#isvararg","text":"boolean","title":"isvararg"},{"location":"api/debuginfo/#lastlinedefined","text":"integer","title":"lastlinedefined"},{"location":"api/debuginfo/#linedefined","text":"integer","title":"linedefined"},{"location":"api/debuginfo/#name","text":"string","title":"name"},{"location":"api/debuginfo/#namewhat","text":"string","title":"namewhat"},{"location":"api/debuginfo/#nparams","text":"integer","title":"nparams"},{"location":"api/debuginfo/#nups","text":"integer","title":"nups"},{"location":"api/debuginfo/#short_src","text":"string","title":"short_src"},{"location":"api/debuginfo/#source","text":"string","title":"source"},{"location":"api/debuginfo/#what","text":"string","title":"what"},{"location":"api/debuglib/","text":"debug function debug. debug () Enters an interactive mode with the user, running each string that the user enters. View documents getfenv function debug. getfenv ( o : any) -> table Returns the environment of object o . View documents gethook function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer Returns the current hook settings of the thread. View documents getinfo function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo Returns a table with information about a function. View documents what : +> \" n \" -- `name` and `namewhat` +> \" S \" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what` +> \" l \" -- `currentline` +> \" t \" -- `istailcall` +> \" u \" -- `nups`, `nparams`, and `isvararg` +> \" f \" -- `func` +> \" L \" -- `activelines` getlocal function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any Returns the name and the value of the local variable with index local of the function at level f of the stack. View documents getmetatable function debug. getmetatable ( object : any) -> metatable : table Returns the metatable of the given value. View documents getregistry function debug. getregistry () -> table Returns the registry table. View documents getupvalue function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any Returns the name and the value of the upvalue with index up of the function. View documents getuservalue function debug. getuservalue ( u : userdata) -> any Returns the Lua value associated to u. View documents setcstacklimit function debug. setcstacklimit ( limit : integer) -> boolean | integer Deprecated in Lua 5.4.2 Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. In case of success, this function returns the old limit. In case of error, it returns false . View documents setfenv function debug. setfenv ( object : < T>, env : table) -> object : < T> Sets the environment of the given object to the given table . View documents sethook function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) Sets the given function as a hook. View documents mask : +> \" c \" -- Calls hook when Lua calls a function. +> \" r \" -- Calls hook when Lua returns from a function. +> \" l \" -- Calls hook when Lua enters a new line of code. setlocal function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string Assigns the value to the local variable with index local of the function at level of the stack. View documents setmetatable function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> Sets the metatable for the given value to the given table (which can be nil ). View documents setupvalue function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string Assigns the value to the upvalue with index up of the function. View documents setuservalue function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata Sets the given value as the Lua value associated to the given udata. View documents traceback function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback. View documents upvalueid function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata Returns a unique identifier (as a light userdata) for the upvalue numbered n from the given function. View documents upvaluejoin function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer) Make the n1 -th upvalue of the Lua closure f1 refer to the n2 -th upvalue of the Lua closure f2 . View documents","title":"debuglib"},{"location":"api/debuglib/#debug","text":"function debug. debug () Enters an interactive mode with the user, running each string that the user enters. View documents","title":"debug"},{"location":"api/debuglib/#getfenv","text":"function debug. getfenv ( o : any) -> table Returns the environment of object o . View documents","title":"getfenv"},{"location":"api/debuglib/#gethook","text":"function debug. gethook ( co ? : thread ) -> hook : function 2. mask : string 3. count : integer Returns the current hook settings of the thread. View documents","title":"gethook"},{"location":"api/debuglib/#getinfo","text":"function debug. getinfo ( thread : thread, f : integer| fun (... any ):... unknown , what ? : string | \"L\" | \"S\" | \"f\" | \"l\" ...(+ 3 )) -> debuginfo Returns a table with information about a function. View documents what : +> \" n \" -- `name` and `namewhat` +> \" S \" -- `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what` +> \" l \" -- `currentline` +> \" t \" -- `istailcall` +> \" u \" -- `nups`, `nparams`, and `isvararg` +> \" f \" -- `func` +> \" L \" -- `activelines`","title":"getinfo"},{"location":"api/debuglib/#getlocal","text":"function debug. getlocal ( thread : thread, f : integer| fun (... any ):... unknown , index : integer) -> name : string 2. value : any Returns the name and the value of the local variable with index local of the function at level f of the stack. View documents","title":"getlocal"},{"location":"api/debuglib/#getmetatable","text":"function debug. getmetatable ( object : any) -> metatable : table Returns the metatable of the given value. View documents","title":"getmetatable"},{"location":"api/debuglib/#getregistry","text":"function debug. getregistry () -> table Returns the registry table. View documents","title":"getregistry"},{"location":"api/debuglib/#getupvalue","text":"function debug. getupvalue ( f : fun (... any ):... unknown , up : integer) -> name : string 2. value : any Returns the name and the value of the upvalue with index up of the function. View documents","title":"getupvalue"},{"location":"api/debuglib/#getuservalue","text":"function debug. getuservalue ( u : userdata) -> any Returns the Lua value associated to u. View documents","title":"getuservalue"},{"location":"api/debuglib/#setcstacklimit","text":"function debug. setcstacklimit ( limit : integer) -> boolean | integer","title":"setcstacklimit"},{"location":"api/debuglib/#deprecated-in-lua-542","text":"Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. In case of success, this function returns the old limit. In case of error, it returns false . View documents","title":"Deprecated in Lua 5.4.2"},{"location":"api/debuglib/#setfenv","text":"function debug. setfenv ( object : < T>, env : table) -> object : < T> Sets the environment of the given object to the given table . View documents","title":"setfenv"},{"location":"api/debuglib/#sethook","text":"function debug. sethook ( thread : thread, hook : fun (... any ):... unknown , mask : string| \"c\" | \"l\" | \"r\" , count ? : integer ) Sets the given function as a hook. View documents mask : +> \" c \" -- Calls hook when Lua calls a function. +> \" r \" -- Calls hook when Lua returns from a function. +> \" l \" -- Calls hook when Lua enters a new line of code.","title":"sethook"},{"location":"api/debuglib/#setlocal","text":"function debug. setlocal ( thread : thread, level : integer, index : integer, value : any) -> name : string Assigns the value to the local variable with index local of the function at level of the stack. View documents","title":"setlocal"},{"location":"api/debuglib/#setmetatable","text":"function debug. setmetatable ( value : < T>, meta ? : table ) -> value : < T> Sets the metatable for the given value to the given table (which can be nil ). View documents","title":"setmetatable"},{"location":"api/debuglib/#setupvalue","text":"function debug. setupvalue ( f : fun (... any ):... unknown , up : integer, value : any) -> name : string Assigns the value to the upvalue with index up of the function. View documents","title":"setupvalue"},{"location":"api/debuglib/#setuservalue","text":"function debug. setuservalue ( udata : userdata, value : any) -> udata : userdata Sets the given value as the Lua value associated to the given udata. View documents","title":"setuservalue"},{"location":"api/debuglib/#traceback","text":"function debug. traceback ( thread : thread, message ? : any , level ? : integer ) -> message : string Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback. View documents","title":"traceback"},{"location":"api/debuglib/#upvalueid","text":"function debug. upvalueid ( f : fun (... any ):... unknown , n : integer) -> id : lightuserdata Returns a unique identifier (as a light userdata) for the upvalue numbered n from the given function. View documents","title":"upvalueid"},{"location":"api/debuglib/#upvaluejoin","text":"function debug. upvaluejoin ( f1 : fun (... any ):... unknown , n1 : integer, f2 : fun (... any ):... unknown , n2 : integer) Make the n1 -th upvalue of the Lua closure f1 refer to the n2 -th upvalue of the Lua closure f2 . View documents","title":"upvaluejoin"},{"location":"api/debugmessage/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) DebugMessage : __new ( message : string) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. message string A human readable message for why we stopped her. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"debugmessage"},{"location":"api/debugmessage/#__call","text":"function","title":"__call"},{"location":"api/debugmessage/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/debugmessage/#__new","text":"( method ) DebugMessage : __new ( message : string)","title":"__new"},{"location":"api/debugmessage/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/debugmessage/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/debugmessage/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/debugmessage/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/debugmessage/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/debugmessage/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/debugmessage/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/debugmessage/#message","text":"string A human readable message for why we stopped her.","title":"message"},{"location":"api/debugmessage/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/debugmessage/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/debugmessage/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/debugmessage/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/debugmessage/#stripname","text":"boolean","title":"stripName"},{"location":"api/decision/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table actor Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean validateResponse ( method ) Decision : validateResponse ()","title":"decision"},{"location":"api/decision/#__call","text":"function","title":"__call"},{"location":"api/decision/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/decision/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/decision/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/decision/#actor","text":"Actor An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"actor"},{"location":"api/decision/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/decision/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/decision/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/decision/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/decision/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/decision/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/decision/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/decision/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/decision/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/decision/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/decision/#stripname","text":"boolean","title":"stripName"},{"location":"api/decision/#validateresponse","text":"( method ) Decision : validateResponse ()","title":"validateResponse"},{"location":"api/display/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Display : __new ( spriteAtlas : SpriteAtlas, cellSize : Vector2, attachable : SpectrumAttachable) Initializes a new Display instance. @ param spriteAtlas \u2014 The sprite atlas for rendering. @ param cellSize \u2014 Size of each cell in pixels. @ param attachable \u2014 Object containing cells and actors to render. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterDrawActors ( method ) Display : afterDrawActors () Hook for custom behavior after drawing actors. attachable SpectrumAttachable The current level being displayed. beforeDrawActors ( method ) Display : beforeDrawActors () Hook for custom behavior before drawing actors. beforeDrawCells ( method ) Display : beforeDrawCells () Hook for custom behavior before drawing cells. buildSenseInfo function Display. buildSenseInfo ( primary : SensesComponent[], secondary : SensesComponent[]) -> SparseGrid 2. SparseGrid 3. table 4. table 5. SparseGrid @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses. camera Camera The camera used to render the display. cellSize Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Display : draw () Renders the display. drawActor ( method ) Display : drawActor ( actor : Actor, alpha ? : number , color ? : Color4 , drawnSet ? : table , x : any, y : any) Draws an actor. @ param actor \u2014 The actor to draw. @ param alpha \u2014 Optional alpha transparency. @ param color \u2014 Optional color tint. @ param drawnSet \u2014 Optional set to track drawn actors. drawDrawable function Display. drawDrawable ( drawable : DrawableComponent, spriteAtlas : SpriteAtlas, cellSize : Vector2, x : integer, y : integer, color ? : Color4 , alpha ? : number ) Draws a drawable object. @ param drawable \u2014 Drawable to render. @ param spriteAtlas \u2014 Sprite atlas to use. @ param cellSize \u2014 Size of each cell. @ param x \u2014 X-coordinate. @ param y \u2014 Y-coordinate. @ param color \u2014 Optional color tint. @ param alpha \u2014 Optional alpha transparency. drawPerspective ( method ) Display : drawPerspective ( primary : SensesComponent[], secondary : SensesComponent[]) Draws the perspective of primary and secondary senses. @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses. dt number Delta time for updates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCellUnderMouse ( method ) Display : getCellUnderMouse () -> integer 2. The : integer Gets the cell under the mouse cursor. @ return The \u2014 X and Y coordinates of the cell. getQuad function Display. getQuad ( spriteAtlas : SpriteAtlas, drawable : DrawableComponent) -> The : love.Quad| nil Retrieves the quad for a drawable. @ param spriteAtlas \u2014 The sprite atlas. @ param drawable \u2014 The drawable component. @ return The \u2014 quad used for rendering. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. message nil mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. override fun ( dt : integer, drawnSet : table< Actor , boolean >)| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setOverride ( method ) Display : setOverride ( functionFactory : fun ( display : Display, message : any): fun ( dt : number): boolean , message : any) Sets an override rendering function. @ param functionFactory \u2014 A factory for override functions. @ param message \u2014 Optional message to pass to the function. spriteAtlas SpriteAtlas The sprite atlas used for rendering graphics. stripName boolean update ( method ) Display : update ( dt : number) Updates the display state. @ param dt \u2014 Delta time for updates.","title":"display"},{"location":"api/display/#__call","text":"function","title":"__call"},{"location":"api/display/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/display/#__new","text":"( method ) Display : __new ( spriteAtlas : SpriteAtlas, cellSize : Vector2, attachable : SpectrumAttachable) Initializes a new Display instance. @ param spriteAtlas \u2014 The sprite atlas for rendering. @ param cellSize \u2014 Size of each cell in pixels. @ param attachable \u2014 Object containing cells and actors to render.","title":"__new"},{"location":"api/display/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/display/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/display/#afterdrawactors","text":"( method ) Display : afterDrawActors () Hook for custom behavior after drawing actors.","title":"afterDrawActors"},{"location":"api/display/#attachable","text":"SpectrumAttachable The current level being displayed.","title":"attachable"},{"location":"api/display/#beforedrawactors","text":"( method ) Display : beforeDrawActors () Hook for custom behavior before drawing actors.","title":"beforeDrawActors"},{"location":"api/display/#beforedrawcells","text":"( method ) Display : beforeDrawCells () Hook for custom behavior before drawing cells.","title":"beforeDrawCells"},{"location":"api/display/#buildsenseinfo","text":"function Display. buildSenseInfo ( primary : SensesComponent[], secondary : SensesComponent[]) -> SparseGrid 2. SparseGrid 3. table 4. table 5. SparseGrid @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses.","title":"buildSenseInfo"},{"location":"api/display/#camera","text":"Camera The camera used to render the display.","title":"camera"},{"location":"api/display/#cellsize","text":"Vector2","title":"cellSize"},{"location":"api/display/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/display/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/display/#draw","text":"( method ) Display : draw () Renders the display.","title":"draw"},{"location":"api/display/#drawactor","text":"( method ) Display : drawActor ( actor : Actor, alpha ? : number , color ? : Color4 , drawnSet ? : table , x : any, y : any) Draws an actor. @ param actor \u2014 The actor to draw. @ param alpha \u2014 Optional alpha transparency. @ param color \u2014 Optional color tint. @ param drawnSet \u2014 Optional set to track drawn actors.","title":"drawActor"},{"location":"api/display/#drawdrawable","text":"function Display. drawDrawable ( drawable : DrawableComponent, spriteAtlas : SpriteAtlas, cellSize : Vector2, x : integer, y : integer, color ? : Color4 , alpha ? : number ) Draws a drawable object. @ param drawable \u2014 Drawable to render. @ param spriteAtlas \u2014 Sprite atlas to use. @ param cellSize \u2014 Size of each cell. @ param x \u2014 X-coordinate. @ param y \u2014 Y-coordinate. @ param color \u2014 Optional color tint. @ param alpha \u2014 Optional alpha transparency.","title":"drawDrawable"},{"location":"api/display/#drawperspective","text":"( method ) Display : drawPerspective ( primary : SensesComponent[], secondary : SensesComponent[]) Draws the perspective of primary and secondary senses. @ param primary \u2014 List of primary senses. @ param secondary \u2014 List of secondary senses.","title":"drawPerspective"},{"location":"api/display/#dt","text":"number Delta time for updates.","title":"dt"},{"location":"api/display/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/display/#getcellundermouse","text":"( method ) Display : getCellUnderMouse () -> integer 2. The : integer Gets the cell under the mouse cursor. @ return The \u2014 X and Y coordinates of the cell.","title":"getCellUnderMouse"},{"location":"api/display/#getquad","text":"function Display. getQuad ( spriteAtlas : SpriteAtlas, drawable : DrawableComponent) -> The : love.Quad| nil Retrieves the quad for a drawable. @ param spriteAtlas \u2014 The sprite atlas. @ param drawable \u2014 The drawable component. @ return The \u2014 quad used for rendering.","title":"getQuad"},{"location":"api/display/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/display/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/display/#message","text":"nil","title":"message"},{"location":"api/display/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/display/#override","text":"fun ( dt : integer, drawnSet : table< Actor , boolean >)| nil","title":"override"},{"location":"api/display/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/display/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/display/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/display/#setoverride","text":"( method ) Display : setOverride ( functionFactory : fun ( display : Display, message : any): fun ( dt : number): boolean , message : any) Sets an override rendering function. @ param functionFactory \u2014 A factory for override functions. @ param message \u2014 Optional message to pass to the function.","title":"setOverride"},{"location":"api/display/#spriteatlas","text":"SpriteAtlas The sprite atlas used for rendering graphics.","title":"spriteAtlas"},{"location":"api/display/#stripname","text":"boolean","title":"stripName"},{"location":"api/display/#update","text":"( method ) Display : update ( dt : number) Updates the display state. @ param dt \u2014 Delta time for updates.","title":"update"},{"location":"api/distancetype/","text":"","title":"distancetype"},{"location":"api/dofile/","text":"function dofile ( filename ? : string ) -> ... any","title":"dofile"},{"location":"api/drawablecomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) DrawableComponent : __new ( index : string| integer , color : Color4) Index needs to be a string associated with a sprite in the SpriteAtlas, or an integer index associated with a sprite. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. color Color4 deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. index string | integer initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"drawablecomponent"},{"location":"api/drawablecomponent/#__call","text":"function","title":"__call"},{"location":"api/drawablecomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/drawablecomponent/#__new","text":"( method ) DrawableComponent : __new ( index : string| integer , color : Color4) Index needs to be a string associated with a sprite in the SpriteAtlas, or an integer index associated with a sprite.","title":"__new"},{"location":"api/drawablecomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/drawablecomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/drawablecomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/drawablecomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/drawablecomponent/#color","text":"Color4","title":"color"},{"location":"api/drawablecomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/drawablecomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/drawablecomponent/#index","text":"string | integer","title":"index"},{"location":"api/drawablecomponent/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/drawablecomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/drawablecomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/drawablecomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/drawablecomponent/#name","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"api/drawablecomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/drawablecomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/drawablecomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/drawablecomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/drawablecomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/drawablecomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/editor/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Editor : __new ( attachable : any, display : any, fileEnabled : any) _serializationBlacklist table active boolean adopt ( method ) Object : adopt ( o : any) -> unknown attachable SpectrumAttachable camera Camera className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown display Display draw ( method ) Editor : draw () editorRoot EditorRoot execute ( method ) Editor : execute ( modification : Modification) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fileEnabled boolean filepath string | nil fillMode boolean instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. isActive ( method ) Editor : isActive () -> boolean keybindsEnabled boolean keypressed ( method ) Editor : keypressed ( key : any, scancode : any) mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) Editor : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) Editor : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) Editor : mousereleased ( x : any, y : any, button : any) placeable Actor | Cell | nil An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. redo ( method ) Editor : redo () redoStack Modification [] selectorMode string selectorModes table < string , string > serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setAttachable ( method ) Editor : setAttachable ( attachable : SpectrumAttachable) startEditing ( method ) Editor : startEditing () stripName boolean textinput ( method ) Editor : textinput ( text : any) tool Tool undo ( method ) Editor : undo () undoStack Modification [] update ( method ) Editor : update ( dt : any) wheelmoved ( method ) Editor : wheelmoved ( dx : any, dy : any)","title":"editor"},{"location":"api/editor/#__call","text":"function","title":"__call"},{"location":"api/editor/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/editor/#__new","text":"( method ) Editor : __new ( attachable : any, display : any, fileEnabled : any)","title":"__new"},{"location":"api/editor/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/editor/#active","text":"boolean","title":"active"},{"location":"api/editor/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/editor/#attachable","text":"SpectrumAttachable","title":"attachable"},{"location":"api/editor/#camera","text":"Camera","title":"camera"},{"location":"api/editor/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/editor/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/editor/#display","text":"Display","title":"display"},{"location":"api/editor/#draw","text":"( method ) Editor : draw ()","title":"draw"},{"location":"api/editor/#editorroot","text":"EditorRoot","title":"editorRoot"},{"location":"api/editor/#execute","text":"( method ) Editor : execute ( modification : Modification)","title":"execute"},{"location":"api/editor/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/editor/#fileenabled","text":"boolean","title":"fileEnabled"},{"location":"api/editor/#filepath","text":"string | nil","title":"filepath"},{"location":"api/editor/#fillmode","text":"boolean","title":"fillMode"},{"location":"api/editor/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/editor/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/editor/#isactive","text":"( method ) Editor : isActive () -> boolean","title":"isActive"},{"location":"api/editor/#keybindsenabled","text":"boolean","title":"keybindsEnabled"},{"location":"api/editor/#keypressed","text":"( method ) Editor : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"api/editor/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/editor/#mousemoved","text":"( method ) Editor : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"api/editor/#mousepressed","text":"( method ) Editor : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"api/editor/#mousereleased","text":"( method ) Editor : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"api/editor/#placeable","text":"Actor | Cell | nil An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/editor/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/editor/#redo","text":"( method ) Editor : redo ()","title":"redo"},{"location":"api/editor/#redostack","text":"Modification []","title":"redoStack"},{"location":"api/editor/#selectormode","text":"string","title":"selectorMode"},{"location":"api/editor/#selectormodes","text":"table < string , string >","title":"selectorModes"},{"location":"api/editor/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/editor/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/editor/#setattachable","text":"( method ) Editor : setAttachable ( attachable : SpectrumAttachable)","title":"setAttachable"},{"location":"api/editor/#startediting","text":"( method ) Editor : startEditing ()","title":"startEditing"},{"location":"api/editor/#stripname","text":"boolean","title":"stripName"},{"location":"api/editor/#textinput","text":"( method ) Editor : textinput ( text : any)","title":"textinput"},{"location":"api/editor/#tool","text":"Tool","title":"tool"},{"location":"api/editor/#undo","text":"( method ) Editor : undo ()","title":"undo"},{"location":"api/editor/#undostack","text":"Modification []","title":"undoStack"},{"location":"api/editor/#update","text":"( method ) Editor : update ( dt : any)","title":"update"},{"location":"api/editor/#wheelmoved","text":"( method ) Editor : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"api/editorgrid/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props EditorGridProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"editorgrid"},{"location":"api/editorgrid/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/editorgrid/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/editorgrid/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/editorgrid/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/editorgrid/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/editorgrid/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/editorgrid/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/editorgrid/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/editorgrid/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/editorgrid/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/editorgrid/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/editorgrid/#props","text":"EditorGridProps","title":"props"},{"location":"api/editorgrid/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/editorgrid/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/editorgrid/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/editorgridinit/","text":"","title":"editorgridinit"},{"location":"api/editorgridprops/","text":"_internal Inky .Props.Internal attachable SpectrumAttachable display Display editor Editor offset Vector2 scale Vector2","title":"editorgridprops"},{"location":"api/editorgridprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/editorgridprops/#attachable","text":"SpectrumAttachable","title":"attachable"},{"location":"api/editorgridprops/#display","text":"Display","title":"display"},{"location":"api/editorgridprops/#editor","text":"Editor","title":"editor"},{"location":"api/editorgridprops/#offset","text":"Vector2","title":"offset"},{"location":"api/editorgridprops/#scale","text":"Vector2","title":"scale"},{"location":"api/editorroot/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props EditorRootProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"editorroot"},{"location":"api/editorroot/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/editorroot/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/editorroot/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/editorroot/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/editorroot/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/editorroot/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/editorroot/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/editorroot/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/editorroot/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/editorroot/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/editorroot/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/editorroot/#props","text":"EditorRootProps","title":"props"},{"location":"api/editorroot/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/editorroot/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/editorroot/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/editorrootprops/","text":"_internal Inky .Props.Internal attachable SpectrumAttachable display Display editor Editor gridPosition Vector2 quit boolean scale Vector2","title":"editorrootprops"},{"location":"api/editorrootprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/editorrootprops/#attachable","text":"SpectrumAttachable","title":"attachable"},{"location":"api/editorrootprops/#display","text":"Display","title":"display"},{"location":"api/editorrootprops/#editor","text":"Editor","title":"editor"},{"location":"api/editorrootprops/#gridposition","text":"Vector2","title":"gridPosition"},{"location":"api/editorrootprops/#quit","text":"boolean","title":"quit"},{"location":"api/editorrootprops/#scale","text":"Vector2","title":"scale"},{"location":"api/editorstate/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EditorState : __new ( attachable : SpectrumAttachable, display : any, fileEnabled : any) Create a new Editor managing gamestate, attached to a SpectrumAttachable, this is a Level|MapBuilder interface. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) EditorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"editorstate"},{"location":"api/editorstate/#__call","text":"function","title":"__call"},{"location":"api/editorstate/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/editorstate/#__new","text":"( method ) EditorState : __new ( attachable : SpectrumAttachable, display : any, fileEnabled : any) Create a new Editor managing gamestate, attached to a SpectrumAttachable, this is a Level|MapBuilder interface.","title":"__new"},{"location":"api/editorstate/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/editorstate/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/editorstate/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/editorstate/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/editorstate/#draw","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"api/editorstate/#editor","text":"Editor","title":"editor"},{"location":"api/editorstate/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/editorstate/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"api/editorstate/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/editorstate/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/editorstate/#keypressed","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"api/editorstate/#load","text":"( method ) EditorState : load ()","title":"load"},{"location":"api/editorstate/#manager","text":"GameStateManager","title":"manager"},{"location":"api/editorstate/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/editorstate/#mousemoved","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"api/editorstate/#mousepressed","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"api/editorstate/#mousereleased","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"api/editorstate/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/editorstate/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/editorstate/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/editorstate/#stripname","text":"boolean","title":"stripName"},{"location":"api/editorstate/#textinput","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"api/editorstate/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"api/editorstate/#update","text":"( method ) EditorState : update ( dt : any)","title":"update"},{"location":"api/editorstate/#wheelmoved","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"api/ellipsemodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EllipseModification : __new ( placeable : Actor| Cell , center : any, rx : any, ry : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 center any className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) EllipseModification : execute ( attachable : SpectrumAttachable, editor : Editor) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. rx any ry any serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"ellipsemodification"},{"location":"api/ellipsemodification/#__call","text":"function","title":"__call"},{"location":"api/ellipsemodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/ellipsemodification/#__new","text":"( method ) EllipseModification : __new ( placeable : Actor| Cell , center : any, rx : any, ry : any)","title":"__new"},{"location":"api/ellipsemodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/ellipsemodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/ellipsemodification/#bottomright","text":"Vector2","title":"bottomright"},{"location":"api/ellipsemodification/#center","text":"any","title":"center"},{"location":"api/ellipsemodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/ellipsemodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/ellipsemodification/#execute","text":"( method ) EllipseModification : execute ( attachable : SpectrumAttachable, editor : Editor)","title":"execute"},{"location":"api/ellipsemodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/ellipsemodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/ellipsemodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/ellipsemodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/ellipsemodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/ellipsemodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/ellipsemodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/ellipsemodification/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"api/ellipsemodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/ellipsemodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/ellipsemodification/#removed","text":"table","title":"removed"},{"location":"api/ellipsemodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/ellipsemodification/#rx","text":"any","title":"rx"},{"location":"api/ellipsemodification/#ry","text":"any","title":"ry"},{"location":"api/ellipsemodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/ellipsemodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/ellipsemodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/ellipsemodification/#topleft","text":"Vector2","title":"topleft"},{"location":"api/ellipsemodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/ellipsetool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown center Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EllipseTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) EllipseTool : mouseclicked ( editor : Editor, attachable : any, x : number, y : number) mousereleased ( method ) EllipseTool : mousereleased ( editor : Editor, level : any, x : number, y : number) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"ellipsetool"},{"location":"api/ellipsetool/#__call","text":"function","title":"__call"},{"location":"api/ellipsetool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/ellipsetool/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/ellipsetool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/ellipsetool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/ellipsetool/#center","text":"Vector2","title":"center"},{"location":"api/ellipsetool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/ellipsetool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/ellipsetool/#draw","text":"( method ) EllipseTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/ellipsetool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/ellipsetool/#editor","text":"Editor","title":"editor"},{"location":"api/ellipsetool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/ellipsetool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/ellipsetool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/ellipsetool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/ellipsetool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/ellipsetool/#mouseclicked","text":"( method ) EllipseTool : mouseclicked ( editor : Editor, attachable : any, x : number, y : number)","title":"mouseclicked"},{"location":"api/ellipsetool/#mousereleased","text":"( method ) EllipseTool : mousereleased ( editor : Editor, level : any, x : number, y : number)","title":"mousereleased"},{"location":"api/ellipsetool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/ellipsetool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/ellipsetool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/ellipsetool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/ellipsetool/#stripname","text":"boolean","title":"stripName"},{"location":"api/ellipsetool/#update","text":"( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"update"},{"location":"api/erasemodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EraseModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) EraseModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"erasemodification"},{"location":"api/erasemodification/#__call","text":"function","title":"__call"},{"location":"api/erasemodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/erasemodification/#__new","text":"( method ) EraseModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2)","title":"__new"},{"location":"api/erasemodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/erasemodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/erasemodification/#bottomright","text":"Vector2","title":"bottomright"},{"location":"api/erasemodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/erasemodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/erasemodification/#execute","text":"( method ) EraseModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"api/erasemodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/erasemodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/erasemodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/erasemodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/erasemodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/erasemodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/erasemodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/erasemodification/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"api/erasemodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/erasemodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/erasemodification/#removed","text":"table","title":"removed"},{"location":"api/erasemodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/erasemodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/erasemodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/erasemodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/erasemodification/#topleft","text":"Vector2","title":"topleft"},{"location":"api/erasemodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/erasetool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) EraseTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EraseTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) EraseTool : getCurrentRect () -> topleftx : number ? 2. toplefy : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) EraseTool : mouseclicked ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) EraseTool : mousereleased ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) -> nil @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) EraseTool : update ( dt : number, editor : Editor)","title":"erasetool"},{"location":"api/erasetool/#__call","text":"function","title":"__call"},{"location":"api/erasetool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/erasetool/#__new","text":"( method ) EraseTool : __new ()","title":"__new"},{"location":"api/erasetool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/erasetool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/erasetool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/erasetool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/erasetool/#draw","text":"( method ) EraseTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/erasetool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/erasetool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/erasetool/#getcurrentrect","text":"( method ) EraseTool : getCurrentRect () -> topleftx : number ? 2. toplefy : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"api/erasetool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/erasetool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/erasetool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/erasetool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/erasetool/#mouseclicked","text":"( method ) EraseTool : mouseclicked ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"api/erasetool/#mousereleased","text":"( method ) EraseTool : mousereleased ( editor : Editor, attached : SpectrumAttachable, x : integer, y : integer) -> nil @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"api/erasetool/#origin","text":"Vector2","title":"origin"},{"location":"api/erasetool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/erasetool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/erasetool/#second","text":"Vector2","title":"second"},{"location":"api/erasetool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/erasetool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/erasetool/#stripname","text":"boolean","title":"stripName"},{"location":"api/erasetool/#update","text":"( method ) EraseTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"api/filepanel/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props FilePanelProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"filepanel"},{"location":"api/filepanel/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/filepanel/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/filepanel/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/filepanel/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/filepanel/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/filepanel/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/filepanel/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/filepanel/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/filepanel/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/filepanel/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/filepanel/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/filepanel/#props","text":"FilePanelProps","title":"props"},{"location":"api/filepanel/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/filepanel/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/filepanel/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/filepanelinit/","text":"","title":"filepanelinit"},{"location":"api/filepanelprops/","text":"_internal Inky .Props.Internal editor Editor name string open boolean overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser scale Vector2","title":"filepanelprops"},{"location":"api/filepanelprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/filepanelprops/#editor","text":"Editor","title":"editor"},{"location":"api/filepanelprops/#name","text":"string","title":"name"},{"location":"api/filepanelprops/#open","text":"boolean","title":"open"},{"location":"api/filepanelprops/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"api/filepanelprops/#scale","text":"Vector2","title":"scale"},{"location":"api/filetype/","text":"","title":"filetype"},{"location":"api/fill/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bucket ( method ) Fill : bucket ( attachable : SpectrumAttachable, x : any, y : any) className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals. drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) Fill : mouseclicked ( editor : Editor, level : Level, cellx : number, celly : number) Begins a paint drag. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked. mousereleased ( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release. overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Fill : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update.","title":"fill"},{"location":"api/fill/#__call","text":"function","title":"__call"},{"location":"api/fill/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/fill/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/fill/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/fill/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/fill/#bucket","text":"( method ) Fill : bucket ( attachable : SpectrumAttachable, x : any, y : any)","title":"bucket"},{"location":"api/fill/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/fill/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/fill/#draw","text":"( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals.","title":"draw"},{"location":"api/fill/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/fill/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/fill/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/fill/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/fill/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/fill/#locations","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"api/fill/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/fill/#mouseclicked","text":"( method ) Fill : mouseclicked ( editor : Editor, level : Level, cellx : number, celly : number) Begins a paint drag. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked.","title":"mouseclicked"},{"location":"api/fill/#mousereleased","text":"( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release.","title":"mousereleased"},{"location":"api/fill/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/fill/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/fill/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/fill/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/fill/#stripname","text":"boolean","title":"stripName"},{"location":"api/fill/#update","text":"( method ) Fill : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update.","title":"update"},{"location":"api/fraction/","text":"__add function Fraction. __add ( lhs : any, rhs : any) __call function __eq function Fraction. __eq ( lhs : any, rhs : any) -> boolean __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __le function Fraction. __le ( lhs : any, rhs : any) -> boolean __lt function Fraction. __lt ( lhs : any, rhs : any) -> boolean __mul ( method ) Fraction : __mul ( other : any) __new ( method ) Fraction : __new ( numerator : any, denominator : any) __sub function Fraction. __sub ( lhs : any, rhs : any) __tostring ( method ) Fraction : __tostring () -> unknown __unm ( method ) Fraction : __unm () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. denominator any deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. numerator any prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean tonumber ( method ) Fraction : tonumber () -> unknown","title":"fraction"},{"location":"api/fraction/#__add","text":"function Fraction. __add ( lhs : any, rhs : any)","title":"__add"},{"location":"api/fraction/#__call","text":"function","title":"__call"},{"location":"api/fraction/#__eq","text":"function Fraction. __eq ( lhs : any, rhs : any) -> boolean","title":"__eq"},{"location":"api/fraction/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/fraction/#__le","text":"function Fraction. __le ( lhs : any, rhs : any) -> boolean","title":"__le"},{"location":"api/fraction/#__lt","text":"function Fraction. __lt ( lhs : any, rhs : any) -> boolean","title":"__lt"},{"location":"api/fraction/#__mul","text":"( method ) Fraction : __mul ( other : any)","title":"__mul"},{"location":"api/fraction/#__new","text":"( method ) Fraction : __new ( numerator : any, denominator : any)","title":"__new"},{"location":"api/fraction/#__sub","text":"function Fraction. __sub ( lhs : any, rhs : any)","title":"__sub"},{"location":"api/fraction/#__tostring","text":"( method ) Fraction : __tostring () -> unknown","title":"__tostring"},{"location":"api/fraction/#__unm","text":"( method ) Fraction : __unm ()","title":"__unm"},{"location":"api/fraction/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/fraction/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/fraction/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/fraction/#denominator","text":"any","title":"denominator"},{"location":"api/fraction/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/fraction/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/fraction/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/fraction/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/fraction/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/fraction/#numerator","text":"any","title":"numerator"},{"location":"api/fraction/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/fraction/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/fraction/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/fraction/#stripname","text":"boolean","title":"stripName"},{"location":"api/fraction/#tonumber","text":"( method ) Fraction : tonumber () -> unknown","title":"tonumber"},{"location":"api/function/","text":"","title":"function"},{"location":"api/gamestate/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) GameState : draw () Called on each draw. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress. load ( method ) GameState : load () Called when the gamestate is started. manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousepressed ( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) GameState : update ( dt : any) Called on each update. wheelmoved ( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"gamestate"},{"location":"api/gamestate/#__call","text":"function","title":"__call"},{"location":"api/gamestate/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/gamestate/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/gamestate/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/gamestate/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/gamestate/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/gamestate/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/gamestate/#draw","text":"( method ) GameState : draw () Called on each draw.","title":"draw"},{"location":"api/gamestate/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/gamestate/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"api/gamestate/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/gamestate/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/gamestate/#keypressed","text":"( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress.","title":"keypressed"},{"location":"api/gamestate/#load","text":"( method ) GameState : load () Called when the gamestate is started.","title":"load"},{"location":"api/gamestate/#manager","text":"GameStateManager","title":"manager"},{"location":"api/gamestate/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/gamestate/#mousepressed","text":"( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"api/gamestate/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/gamestate/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/gamestate/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/gamestate/#stripname","text":"boolean","title":"stripName"},{"location":"api/gamestate/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"api/gamestate/#update","text":"( method ) GameState : update ( dt : any) Called on each update.","title":"update"},{"location":"api/gamestate/#wheelmoved","text":"( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"wheelmoved"},{"location":"api/gamestatemanager/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) GameStateManager : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) GameStateManager : draw () Called each draw, calls draw on top state in stack. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameStateManager : keypressed ( key : any, scancode : any) Called on keypress, calls keypressed on top state in stack mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) GameStateManager : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) GameStateManager : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) mousereleased ( method ) GameStateManager : mousereleased ( x : any, y : any, button : any) pop ( method ) GameStateManager : pop () -> unknown Pops the state from the top of the stack. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) GameStateManager : push ( state : GameState) @ param state \u2014 State to push to the top of the stack. replace ( method ) GameStateManager : replace ( state : GameState) @ param state \u2014 Swap the top of the stack with this state. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stateStack table stripName boolean textinput ( method ) GameStateManager : textinput ( text : any) update ( method ) GameStateManager : update ( dt : any) Called each update, calls update on top state in stack. wheelmoved ( method ) GameStateManager : wheelmoved ( dx : any, dy : any)","title":"gamestatemanager"},{"location":"api/gamestatemanager/#__call","text":"function","title":"__call"},{"location":"api/gamestatemanager/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/gamestatemanager/#__new","text":"( method ) GameStateManager : __new ()","title":"__new"},{"location":"api/gamestatemanager/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/gamestatemanager/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/gamestatemanager/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/gamestatemanager/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/gamestatemanager/#draw","text":"( method ) GameStateManager : draw () Called each draw, calls draw on top state in stack.","title":"draw"},{"location":"api/gamestatemanager/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/gamestatemanager/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/gamestatemanager/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/gamestatemanager/#keypressed","text":"( method ) GameStateManager : keypressed ( key : any, scancode : any) Called on keypress, calls keypressed on top state in stack","title":"keypressed"},{"location":"api/gamestatemanager/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/gamestatemanager/#mousemoved","text":"( method ) GameStateManager : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"api/gamestatemanager/#mousepressed","text":"( method ) GameStateManager : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"api/gamestatemanager/#mousereleased","text":"( method ) GameStateManager : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"api/gamestatemanager/#pop","text":"( method ) GameStateManager : pop () -> unknown Pops the state from the top of the stack.","title":"pop"},{"location":"api/gamestatemanager/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/gamestatemanager/#push","text":"( method ) GameStateManager : push ( state : GameState) @ param state \u2014 State to push to the top of the stack.","title":"push"},{"location":"api/gamestatemanager/#replace","text":"( method ) GameStateManager : replace ( state : GameState) @ param state \u2014 Swap the top of the stack with this state.","title":"replace"},{"location":"api/gamestatemanager/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/gamestatemanager/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/gamestatemanager/#statestack","text":"table","title":"stateStack"},{"location":"api/gamestatemanager/#stripname","text":"boolean","title":"stripName"},{"location":"api/gamestatemanager/#textinput","text":"( method ) GameStateManager : textinput ( text : any)","title":"textinput"},{"location":"api/gamestatemanager/#update","text":"( method ) GameStateManager : update ( dt : any) Called each update, calls update on top state in stack.","title":"update"},{"location":"api/gamestatemanager/#wheelmoved","text":"( method ) GameStateManager : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"api/geometer/","text":"table geometer.Editor unknown geometer.EditorState unknown geometer.MapGeneratorState unknown geometer.Modification unknown geometer.PrefabEditorState unknown geometer.Tool unknown geometer.assetPath string geometer.path unknown geometer.require function geometer. require ( p : any) -> unknown 2. nil","title":"geometer"},{"location":"api/geometer/#geometereditor","text":"unknown","title":"geometer.Editor"},{"location":"api/geometer/#geometereditorstate","text":"unknown","title":"geometer.EditorState"},{"location":"api/geometer/#geometermapgeneratorstate","text":"unknown","title":"geometer.MapGeneratorState"},{"location":"api/geometer/#geometermodification","text":"unknown","title":"geometer.Modification"},{"location":"api/geometer/#geometerprefabeditorstate","text":"unknown","title":"geometer.PrefabEditorState"},{"location":"api/geometer/#geometertool","text":"unknown","title":"geometer.Tool"},{"location":"api/geometer/#geometerassetpath","text":"string","title":"geometer.assetPath"},{"location":"api/geometer/#geometerpath","text":"unknown","title":"geometer.path"},{"location":"api/geometer/#geometerrequire","text":"function geometer. require ( p : any) -> unknown 2. nil","title":"geometer.require"},{"location":"api/grid/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Grid : __new ( w : integer, h : integer, initialValue : < T>) -> The : Grid<< T >> The constructor for the 'Grid' class. Initializes the grid with the specified dimensions and initial value. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param initialValue \u2014 The initial value to fill the grid with. @ return The \u2014 initialized grid. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. data any [] The data stored in the grid. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fill ( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with. fromData ( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid. get ( method ) Grid : get ( x : integer, y : integer) -> value : < T> ? Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if out of bounds. getIndex ( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds. h integer The height of the grid. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) Grid : set ( x : integer, y : integer, value : < T>) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. stripName boolean w integer The width of the grid.","title":"grid"},{"location":"api/grid/#__call","text":"function","title":"__call"},{"location":"api/grid/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/grid/#__new","text":"( method ) Grid : __new ( w : integer, h : integer, initialValue : < T>) -> The : Grid<< T >> The constructor for the 'Grid' class. Initializes the grid with the specified dimensions and initial value. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param initialValue \u2014 The initial value to fill the grid with. @ return The \u2014 initialized grid.","title":"__new"},{"location":"api/grid/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/grid/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/grid/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/grid/#data","text":"any [] The data stored in the grid.","title":"data"},{"location":"api/grid/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/grid/#each","text":"( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell.","title":"each"},{"location":"api/grid/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/grid/#fill","text":"( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with.","title":"fill"},{"location":"api/grid/#fromdata","text":"( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid.","title":"fromData"},{"location":"api/grid/#get","text":"( method ) Grid : get ( x : integer, y : integer) -> value : < T> ? Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if out of bounds.","title":"get"},{"location":"api/grid/#getindex","text":"( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds.","title":"getIndex"},{"location":"api/grid/#h","text":"integer The height of the grid.","title":"h"},{"location":"api/grid/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/grid/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/grid/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/grid/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/grid/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/grid/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/grid/#set","text":"( method ) Grid : set ( x : integer, y : integer, value : < T>) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"api/grid/#stripname","text":"boolean","title":"stripName"},{"location":"api/grid/#w","text":"integer The width of the grid.","title":"w"},{"location":"api/ibehavior/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown behaviorOwner IBehavior ? className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. run fun ( self : any, level : Level, actor : Actor, controller : ControllerComponent): Action serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"ibehavior"},{"location":"api/ibehavior/#__call","text":"function","title":"__call"},{"location":"api/ibehavior/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/ibehavior/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/ibehavior/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/ibehavior/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/ibehavior/#behaviorowner","text":"IBehavior ?","title":"behaviorOwner"},{"location":"api/ibehavior/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/ibehavior/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/ibehavior/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/ibehavior/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/ibehavior/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/ibehavior/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/ibehavior/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/ibehavior/#run","text":"fun ( self : any, level : Level, actor : Actor, controller : ControllerComponent): Action","title":"run"},{"location":"api/ibehavior/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/ibehavior/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/ibehavior/#stripname","text":"boolean","title":"stripName"},{"location":"api/keybinding/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Keybinding : __new ( schema : table) Constructor for the Keybinding class. Initializes the keymap and modes with a predefined schema and defaults. @ param schema \u2014 A list of predefined keybindings with their schema and defaults. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) Keybinding : clear ( mode : string| nil ) Resets keybindings for a specific mode or all modes to their defaults. @ param mode \u2014 The mode to reset. If nil, resets all modes. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keymap table Stores modifications keypressed ( method ) Keybinding : keypressed ( key : string, mode : string| nil ) -> The : string| nil Handles key press events and retrieves the associated action if a binding exists. Falls back to the schema if no modification is found. @ param key \u2014 The key that was pressed. @ param mode \u2014 The mode to use for the keybinding. @ return The \u2014 action associated with the key, or nil if no binding exists. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. schema table Holds the schema for all modes, including \"default\" serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) Keybinding : set ( key : string, action : string, mode : string| nil ) Sets or updates a keybinding, validating it exists in the schema. @ param key \u2014 The key to bind. @ param action \u2014 The new action to associate with the key. @ param mode \u2014 An optional mode for the binding (defaults to \"default\"). stripName boolean","title":"keybinding"},{"location":"api/keybinding/#__call","text":"function","title":"__call"},{"location":"api/keybinding/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/keybinding/#__new","text":"( method ) Keybinding : __new ( schema : table) Constructor for the Keybinding class. Initializes the keymap and modes with a predefined schema and defaults. @ param schema \u2014 A list of predefined keybindings with their schema and defaults.","title":"__new"},{"location":"api/keybinding/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/keybinding/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/keybinding/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/keybinding/#clear","text":"( method ) Keybinding : clear ( mode : string| nil ) Resets keybindings for a specific mode or all modes to their defaults. @ param mode \u2014 The mode to reset. If nil, resets all modes.","title":"clear"},{"location":"api/keybinding/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/keybinding/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/keybinding/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/keybinding/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/keybinding/#keymap","text":"table Stores modifications","title":"keymap"},{"location":"api/keybinding/#keypressed","text":"( method ) Keybinding : keypressed ( key : string, mode : string| nil ) -> The : string| nil Handles key press events and retrieves the associated action if a binding exists. Falls back to the schema if no modification is found. @ param key \u2014 The key that was pressed. @ param mode \u2014 The mode to use for the keybinding. @ return The \u2014 action associated with the key, or nil if no binding exists.","title":"keypressed"},{"location":"api/keybinding/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/keybinding/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/keybinding/#schema","text":"table Holds the schema for all modes, including \"default\"","title":"schema"},{"location":"api/keybinding/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/keybinding/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/keybinding/#set","text":"( method ) Keybinding : set ( key : string, action : string, mode : string| nil ) Sets or updates a keybinding, validating it exists in the schema. @ param key \u2014 The key to bind. @ param action \u2014 The new action to associate with the key. @ param mode \u2014 An optional mode for the binding (defaults to \"default\").","title":"set"},{"location":"api/keybinding/#stripname","text":"boolean","title":"stripName"},{"location":"api/level/","text":"RNG RNG The level's local random number generator, use this for randomness within the level like attack rolls. __call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Level : __new ( map : Map, actors : [ Actor], systems : [ System], scheduler : any, seed : any) Constructor for the Level class. @ param map \u2014 The map to use for the level. @ param actors \u2014 A list of actors to _serializationBlacklist table actorStorage ActorStorage The main actor storage containing all of the level's actors. addActor ( method ) Level : addActor ( actor : Actor) Adds an actor to the level. Handles updating the component cache and inserting the actor into the sparse map. It will also add the actor to the scheduler if it has a controller. @ param actor \u2014 The actor to add. addComponent ( method ) Level : addComponent ( actor : Actor, component : Component) Adds a component to an actor. It handles updating the component cache and the opacity cache. You can do this manually, but it's easier to use this function. @ param actor \u2014 The actor to add the component to. @ param component \u2014 The component to add. addSystem ( method ) Level : addSystem ( system : System) Attaches a system to the level. This function will error if the system doesn't have a name or if a system with the same name already exists, or if the system has a requirement that hasn't been attached yet. @ param system \u2014 The system to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. computeFOV ( method ) Level : computeFOV ( origin : any, maxDepth : any, callback : any) debug boolean debugYield ( method ) Level : debugYield ( stringMessage : any) decision ActionDecision Used during deserialization to resume. deserialize function Object. deserialize ( data : any) -> unknown eachActor ( method ) Level : eachActor (... Component ) -> An : function This method returns an iterator that will return all actors in the level that have the given components. If no components are given it iterate over all actors. A thin wrapper over the inner ActorStorage. @ param ... \u2014 The components to filter by. @ return An \u2014 iterator that returns the next actor that matches the given components. eachActorAt ( method ) Level : eachActorAt ( x : number, y : number) -> iter : function Returns an iterator that will return all actors at the given position. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return iter \u2014 An iterator that returns the next actor at the given position. eachCell ( method ) Level : eachCell () -> fun (): number , number , < T > extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. findPath ( method ) Level : findPath ( startPos : Vector2, goalPos : Vector2, minDistance : any, mask : any) -> Path | nil Finds a path from startpos to endpos getAOE ( method ) Level : getAOE ( type : \"box\" | \"fov\" , position : Vector2, range : number) -> actors : table ? 2. fov : table ? Returns a list of all actors that are within the given range of the given position. The type parameter determines the type of range to use. Currently only \"fov\" and \"box\" are supported. The fov type uses a field of view algorithm to determine what actors are visible from the given position. The box type uses a simple box around the given position. @ param type \u2014 The type of range to use. @ param position \u2014 The position to check from. @ param range \u2014 The range to check. @ return actors @ return fov \u2014 A list of actors within the given range. type : | \"box\" | \"fov\" getActorByType ( method ) Level : getActorByType ( prototype : Actor) -> The : Actor| nil Returns the first actor that extends the given prototype, or nil if no actor is found. Useful for one offs like stairs in some games. @ param prototype \u2014 The prototype to check for. @ return The \u2014 first actor that extends the given prototype, or nil if no actor is found. getActorController ( method ) Level : getActorController ( actor : Actor) -> controller : ControllerComponent Gets the actor's controller. This is a utility function that checks the actor's conditions for an override controller and returns it if it exists. Otherwise it returns the actor's normal controller. @ param actor \u2014 The actor to get the controller for. @ return controller \u2014 The actor's controller. getActorsAt ( method ) Level : getActorsAt ( x : number, y : number) -> A : table Returns a list of all actors at the given position. A thin wrapper over the inner ActorStorage. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return A \u2014 list of all actors at the given position. getCell ( method ) Level : getCell ( x : number, y : number) -> The : Cell Gets the cell at the given position. @ param x \u2014 The x component of the position to get. @ param y \u2014 The y component of the position to get. @ return The \u2014 cell at the given position. getCellOpaque ( method ) Level : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the given position is opaque, false otherwise. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is opaque, false otherwise. getCellPassable ( method ) Level : getCellPassable ( x : number, y : number, mask : integer) -> True : boolean Returns true if the cell at the given position is passable, false otherwise. Considers actors in the sparse map as well as the cell's passable property. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is passable, false otherwise. getID ( method ) Level : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the Level but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found. getOpacityCache ( method ) Level : getOpacityCache () -> map : BooleanBuffer Returns the opacity cache for the level. This generally shouldn't be used outside of systems that need to know about opacity. @ return map \u2014 The opacity cache for the level. getSystem ( method ) Level : getSystem ( className : string) -> system : System ? Gets a system by name. @ param className \u2014 The name of the system to get. @ return system \u2014 The system with the given name. hasActor ( method ) Level : hasActor ( actor : Actor) -> hasActor : boolean Returns true if the level contains the given actor, false otherwise. A thin wrapper over the inner ActorStorage. @ param actor \u2014 The actor to check for. @ return hasActor \u2014 True if the level contains the given actor, false otherwise. inBounds ( method ) Level : inBounds ( x : integer, y : integer) -> boolean Is there a cell at this x, y? Part of the interface with MapBuilder @ param x \u2014 The x component to check if in bounds. initialize ( method ) Level : initialize ( actors : [ Actor], systems : [ System]) initializeOpacityCache ( method ) Level : initializeOpacityCache () Initialize the opacity cache. This should be called after the level is created and before the game loop starts. It will initialize the opacity cache with the cell opacity cache. This is handled automatically by the Level class. initializePassabilityCache ( method ) Level : initializePassabilityCache () Initialize the passable cache. This should be called after the level is created and before the game loop starts. It will initialize the passable cache with the cell passable cache. This is handled automatically by the Level class. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. map Map The level's map. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. moveActor ( method ) Level : moveActor ( actor : Actor, pos : Vector2, skipSparseMap : boolean) Moves an actor to the given position. This function doesn't do any checking for overlaps or collisions. It's used by the moveActorChecked function, you should generally not invoke this yourself using moveActorChecked instead. @ param actor \u2014 The actor to move. @ param pos \u2014 The position to move the actor to. @ param skipSparseMap \u2014 If true the sparse map won't be updated. onDeserialize ( method ) Level : onDeserialize () opacityCache BooleanBuffer A cache of cell opacity || actor opacity for each cell. Used to speed up fov/lighting calculations. passableCache BitmaskBuffer A cache of cell passability || actor passability for each cell. Used to speed up pathfinding. performAction ( method ) Level : performAction ( action : Action, silent ? : boolean ) Executes an Action, updating the level's state and triggering any events through the systems attached to the Actor or Level respectively. It also updates the 'Scheduler' if the action isn't a reaction or free action. Lastly, it calls the 'onAction' method on the 'Cell' that the 'Actor' is standing on. @ param action \u2014 The action to perform. @ param silent \u2014 If true this action emits no events. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Level : removeActor ( actor : Actor) Removes an actor from the level. Handles updating the component cache and removing the actor from the sparse map. It will also remove the actor from the scheduler if it has a controller. @ param actor \u2014 The actor to remove. removeComponent ( method ) Level : removeComponent ( actor : Actor, component : Component) Removes a component from an actor. It handles updating the component cache and the opacity cache. @ param actor \u2014 The actor to remove the component from. @ param component \u2014 The component to remove. run ( method ) Level : run () Initializes the level, Update is the main game loop for a level. It's a coroutine that yields back to the main thread when it needs to wait for input from the player. This function is the heart of the game loop. scheduler Scheduler The main scheduler driving the loop of the game. serializationBlacklist table serialize function Object. serialize ( object : any) -> table setCell ( method ) Level : setCell ( x : number, y : number, cell : Cell) Sets the cell at the given position to the given cell. @ param x \u2014 The x component of the position to set. @ param y \u2014 The y component of the position to set. @ param cell \u2014 The cell to set. sparseMapCallback ( method ) Level : sparseMapCallback () -> function step ( method ) Level : step () stripName boolean systemManager SystemManager A table containing all of the systems active in the level, set in the constructor. trigger ( method ) Level : trigger ( eventName : any, ... any ) updateCaches ( method ) Level : updateCaches ( x : any, y : any) updateOpacityCache ( method ) Level : updateOpacityCache ( x : number, y : number) Updates the opacity cache at the given position. This should be called whenever an actor moves or a cell's opacity changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update. updatePassabilityCache ( method ) Level : updatePassabilityCache ( x : number, y : number) Updates the passability cache at the given position. This should be called whenever an actor moves or a cell's passability changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update. yield ( method ) Level : yield ( message : Message) -> Decision | nil Yields to the main 'thread', a coroutine in this case. This is called in run, and a few systems. Any time you want the interface to update you should call this. Avoid calling coroutine.yield directly, as this function will call the onYield method on all systems.","title":"level"},{"location":"api/level/#rng","text":"RNG The level's local random number generator, use this for randomness within the level like attack rolls.","title":"RNG"},{"location":"api/level/#__call","text":"function","title":"__call"},{"location":"api/level/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/level/#__new","text":"( method ) Level : __new ( map : Map, actors : [ Actor], systems : [ System], scheduler : any, seed : any) Constructor for the Level class. @ param map \u2014 The map to use for the level. @ param actors \u2014 A list of actors to","title":"__new"},{"location":"api/level/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/level/#actorstorage","text":"ActorStorage The main actor storage containing all of the level's actors.","title":"actorStorage"},{"location":"api/level/#addactor","text":"( method ) Level : addActor ( actor : Actor) Adds an actor to the level. Handles updating the component cache and inserting the actor into the sparse map. It will also add the actor to the scheduler if it has a controller. @ param actor \u2014 The actor to add.","title":"addActor"},{"location":"api/level/#addcomponent","text":"( method ) Level : addComponent ( actor : Actor, component : Component) Adds a component to an actor. It handles updating the component cache and the opacity cache. You can do this manually, but it's easier to use this function. @ param actor \u2014 The actor to add the component to. @ param component \u2014 The component to add.","title":"addComponent"},{"location":"api/level/#addsystem","text":"( method ) Level : addSystem ( system : System) Attaches a system to the level. This function will error if the system doesn't have a name or if a system with the same name already exists, or if the system has a requirement that hasn't been attached yet. @ param system \u2014 The system to add.","title":"addSystem"},{"location":"api/level/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/level/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/level/#computefov","text":"( method ) Level : computeFOV ( origin : any, maxDepth : any, callback : any)","title":"computeFOV"},{"location":"api/level/#debug","text":"boolean","title":"debug"},{"location":"api/level/#debugyield","text":"( method ) Level : debugYield ( stringMessage : any)","title":"debugYield"},{"location":"api/level/#decision","text":"ActionDecision Used during deserialization to resume.","title":"decision"},{"location":"api/level/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/level/#eachactor","text":"( method ) Level : eachActor (... Component ) -> An : function This method returns an iterator that will return all actors in the level that have the given components. If no components are given it iterate over all actors. A thin wrapper over the inner ActorStorage. @ param ... \u2014 The components to filter by. @ return An \u2014 iterator that returns the next actor that matches the given components.","title":"eachActor"},{"location":"api/level/#eachactorat","text":"( method ) Level : eachActorAt ( x : number, y : number) -> iter : function Returns an iterator that will return all actors at the given position. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return iter \u2014 An iterator that returns the next actor at the given position.","title":"eachActorAt"},{"location":"api/level/#eachcell","text":"( method ) Level : eachCell () -> fun (): number , number , < T >","title":"eachCell"},{"location":"api/level/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/level/#findpath","text":"( method ) Level : findPath ( startPos : Vector2, goalPos : Vector2, minDistance : any, mask : any) -> Path | nil Finds a path from startpos to endpos","title":"findPath"},{"location":"api/level/#getaoe","text":"( method ) Level : getAOE ( type : \"box\" | \"fov\" , position : Vector2, range : number) -> actors : table ? 2. fov : table ? Returns a list of all actors that are within the given range of the given position. The type parameter determines the type of range to use. Currently only \"fov\" and \"box\" are supported. The fov type uses a field of view algorithm to determine what actors are visible from the given position. The box type uses a simple box around the given position. @ param type \u2014 The type of range to use. @ param position \u2014 The position to check from. @ param range \u2014 The range to check. @ return actors @ return fov \u2014 A list of actors within the given range. type : | \"box\" | \"fov\"","title":"getAOE"},{"location":"api/level/#getactorbytype","text":"( method ) Level : getActorByType ( prototype : Actor) -> The : Actor| nil Returns the first actor that extends the given prototype, or nil if no actor is found. Useful for one offs like stairs in some games. @ param prototype \u2014 The prototype to check for. @ return The \u2014 first actor that extends the given prototype, or nil if no actor is found.","title":"getActorByType"},{"location":"api/level/#getactorcontroller","text":"( method ) Level : getActorController ( actor : Actor) -> controller : ControllerComponent Gets the actor's controller. This is a utility function that checks the actor's conditions for an override controller and returns it if it exists. Otherwise it returns the actor's normal controller. @ param actor \u2014 The actor to get the controller for. @ return controller \u2014 The actor's controller.","title":"getActorController"},{"location":"api/level/#getactorsat","text":"( method ) Level : getActorsAt ( x : number, y : number) -> A : table Returns a list of all actors at the given position. A thin wrapper over the inner ActorStorage. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return A \u2014 list of all actors at the given position.","title":"getActorsAt"},{"location":"api/level/#getcell","text":"( method ) Level : getCell ( x : number, y : number) -> The : Cell Gets the cell at the given position. @ param x \u2014 The x component of the position to get. @ param y \u2014 The y component of the position to get. @ return The \u2014 cell at the given position.","title":"getCell"},{"location":"api/level/#getcellopaque","text":"( method ) Level : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the given position is opaque, false otherwise. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is opaque, false otherwise.","title":"getCellOpaque"},{"location":"api/level/#getcellpassable","text":"( method ) Level : getCellPassable ( x : number, y : number, mask : integer) -> True : boolean Returns true if the cell at the given position is passable, false otherwise. Considers actors in the sparse map as well as the cell's passable property. @ param x \u2014 The x component of the position to check. @ param y \u2014 The y component of the position to check. @ return True \u2014 if the cell is passable, false otherwise.","title":"getCellPassable"},{"location":"api/level/#getid","text":"( method ) Level : getID ( actor : Actor) -> The : integer ? Retrieves the unique ID associated with the specified actor. Note: IDs are unique to actors within the Level but may be reused when indices are freed. @ param actor \u2014 The actor whose ID is to be retrieved. @ return The \u2014 unique ID of the actor, or nil if the actor is not found.","title":"getID"},{"location":"api/level/#getopacitycache","text":"( method ) Level : getOpacityCache () -> map : BooleanBuffer Returns the opacity cache for the level. This generally shouldn't be used outside of systems that need to know about opacity. @ return map \u2014 The opacity cache for the level.","title":"getOpacityCache"},{"location":"api/level/#getsystem","text":"( method ) Level : getSystem ( className : string) -> system : System ? Gets a system by name. @ param className \u2014 The name of the system to get. @ return system \u2014 The system with the given name.","title":"getSystem"},{"location":"api/level/#hasactor","text":"( method ) Level : hasActor ( actor : Actor) -> hasActor : boolean Returns true if the level contains the given actor, false otherwise. A thin wrapper over the inner ActorStorage. @ param actor \u2014 The actor to check for. @ return hasActor \u2014 True if the level contains the given actor, false otherwise.","title":"hasActor"},{"location":"api/level/#inbounds","text":"( method ) Level : inBounds ( x : integer, y : integer) -> boolean Is there a cell at this x, y? Part of the interface with MapBuilder @ param x \u2014 The x component to check if in bounds.","title":"inBounds"},{"location":"api/level/#initialize","text":"( method ) Level : initialize ( actors : [ Actor], systems : [ System])","title":"initialize"},{"location":"api/level/#initializeopacitycache","text":"( method ) Level : initializeOpacityCache () Initialize the opacity cache. This should be called after the level is created and before the game loop starts. It will initialize the opacity cache with the cell opacity cache. This is handled automatically by the Level class.","title":"initializeOpacityCache"},{"location":"api/level/#initializepassabilitycache","text":"( method ) Level : initializePassabilityCache () Initialize the passable cache. This should be called after the level is created and before the game loop starts. It will initialize the passable cache with the cell passable cache. This is handled automatically by the Level class.","title":"initializePassabilityCache"},{"location":"api/level/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/level/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/level/#map","text":"Map The level's map.","title":"map"},{"location":"api/level/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/level/#moveactor","text":"( method ) Level : moveActor ( actor : Actor, pos : Vector2, skipSparseMap : boolean) Moves an actor to the given position. This function doesn't do any checking for overlaps or collisions. It's used by the moveActorChecked function, you should generally not invoke this yourself using moveActorChecked instead. @ param actor \u2014 The actor to move. @ param pos \u2014 The position to move the actor to. @ param skipSparseMap \u2014 If true the sparse map won't be updated.","title":"moveActor"},{"location":"api/level/#ondeserialize","text":"( method ) Level : onDeserialize ()","title":"onDeserialize"},{"location":"api/level/#opacitycache","text":"BooleanBuffer A cache of cell opacity || actor opacity for each cell. Used to speed up fov/lighting calculations.","title":"opacityCache"},{"location":"api/level/#passablecache","text":"BitmaskBuffer A cache of cell passability || actor passability for each cell. Used to speed up pathfinding.","title":"passableCache"},{"location":"api/level/#performaction","text":"( method ) Level : performAction ( action : Action, silent ? : boolean ) Executes an Action, updating the level's state and triggering any events through the systems attached to the Actor or Level respectively. It also updates the 'Scheduler' if the action isn't a reaction or free action. Lastly, it calls the 'onAction' method on the 'Cell' that the 'Actor' is standing on. @ param action \u2014 The action to perform. @ param silent \u2014 If true this action emits no events.","title":"performAction"},{"location":"api/level/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/level/#removeactor","text":"( method ) Level : removeActor ( actor : Actor) Removes an actor from the level. Handles updating the component cache and removing the actor from the sparse map. It will also remove the actor from the scheduler if it has a controller. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"api/level/#removecomponent","text":"( method ) Level : removeComponent ( actor : Actor, component : Component) Removes a component from an actor. It handles updating the component cache and the opacity cache. @ param actor \u2014 The actor to remove the component from. @ param component \u2014 The component to remove.","title":"removeComponent"},{"location":"api/level/#run","text":"( method ) Level : run () Initializes the level, Update is the main game loop for a level. It's a coroutine that yields back to the main thread when it needs to wait for input from the player. This function is the heart of the game loop.","title":"run"},{"location":"api/level/#scheduler","text":"Scheduler The main scheduler driving the loop of the game.","title":"scheduler"},{"location":"api/level/#serializationblacklist","text":"table","title":"serializationBlacklist"},{"location":"api/level/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/level/#setcell","text":"( method ) Level : setCell ( x : number, y : number, cell : Cell) Sets the cell at the given position to the given cell. @ param x \u2014 The x component of the position to set. @ param y \u2014 The y component of the position to set. @ param cell \u2014 The cell to set.","title":"setCell"},{"location":"api/level/#sparsemapcallback","text":"( method ) Level : sparseMapCallback () -> function","title":"sparseMapCallback"},{"location":"api/level/#step","text":"( method ) Level : step ()","title":"step"},{"location":"api/level/#stripname","text":"boolean","title":"stripName"},{"location":"api/level/#systemmanager","text":"SystemManager A table containing all of the systems active in the level, set in the constructor.","title":"systemManager"},{"location":"api/level/#trigger","text":"( method ) Level : trigger ( eventName : any, ... any )","title":"trigger"},{"location":"api/level/#updatecaches","text":"( method ) Level : updateCaches ( x : any, y : any)","title":"updateCaches"},{"location":"api/level/#updateopacitycache","text":"( method ) Level : updateOpacityCache ( x : number, y : number) Updates the opacity cache at the given position. This should be called whenever an actor moves or a cell's opacity changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update.","title":"updateOpacityCache"},{"location":"api/level/#updatepassabilitycache","text":"( method ) Level : updatePassabilityCache ( x : number, y : number) Updates the passability cache at the given position. This should be called whenever an actor moves or a cell's passability changes. This is handled automatically by the Level class. @ param x \u2014 The x component of the position to update. @ param y \u2014 The y component of the position to update.","title":"updatePassabilityCache"},{"location":"api/level/#yield","text":"( method ) Level : yield ( message : Message) -> Decision | nil Yields to the main 'thread', a coroutine in this case. This is called in run, and a few systems. Any time you want the interface to update you should call this. Avoid calling coroutine.yield directly, as this function will call the onYield method on all systems.","title":"yield"},{"location":"api/levelstate/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LevelState : __new ( level : Level, display : Display, actionHandlers : table< fun (): fun ()>) Constructs a new LevelState. Sets up the game loop, initializes decision handlers, and binds custom callbacks for drawing. @ param level \u2014 The level object to be managed by this state. @ param display \u2014 The display object for rendering the level. @ param actionHandlers \u2014 A table of callback generators for handling actions. _serializationBlacklist table actionHandlers table < fun (): fun ()> adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. decision Decision The current decision being processed, if any. deserialize function Object. deserialize ( data : any) -> unknown display Display The display object used for rendering. draw ( method ) LevelState : draw () Draws the current state of the level, including the perspective of relevant actors. drawBeforeCells ( method ) LevelState : drawBeforeCells ( display : Display) Draws content before rendering cells. Override in subclasses for custom behavior. @ param display \u2014 The display object used for drawing. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. geometer EditorState An editor state for debugging or managing geometry. getManager ( method ) GameState : getManager () -> GameStateManager handleActionMessage ( method ) LevelState : handleActionMessage ( message : ActionMessage) Handles an action message by determining visibility and setting display overrides. @ param message \u2014 The action message to handle. handleMessage ( method ) LevelState : handleMessage ( message : any) Handles incoming messages from the coroutine. Processes decisions, action messages, and debug messages as appropriate. @ param message \u2014 The message to handle. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress. level Level The level object representing the game environment. load ( method ) GameState : load () Called when the gamestate is started. manager GameStateManager message ActionMessage The most recent action message. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousepressed ( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table shouldAdvance ( method ) LevelState : shouldAdvance () -> shouldAdvance : boolean| nil Determines if the coroutine should proceed to the next step. @ return shouldAdvance \u2014 True if the coroutine should advance; false otherwise. stripName boolean time integer unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) LevelState : update ( dt : number) Updates the state of the level. Advances the coroutine and processes decisions or messages if necessary. @ param dt \u2014 The time delta since the last update. updateCoroutine thread updateDecision ( method ) LevelState : updateDecision ( dt : number, actor : Actor, decision : ActionDecision) This method is invoked each update when a decision exists and its response is not yet valid.. Override this method in subclasses to implement custom decision-handling logic. @ param dt \u2014 The time delta since the last update. @ param actor \u2014 The actor responsible for making the decision. @ param decision \u2014 The decision being updated. wheelmoved ( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"levelstate"},{"location":"api/levelstate/#__call","text":"function","title":"__call"},{"location":"api/levelstate/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/levelstate/#__new","text":"( method ) LevelState : __new ( level : Level, display : Display, actionHandlers : table< fun (): fun ()>) Constructs a new LevelState. Sets up the game loop, initializes decision handlers, and binds custom callbacks for drawing. @ param level \u2014 The level object to be managed by this state. @ param display \u2014 The display object for rendering the level. @ param actionHandlers \u2014 A table of callback generators for handling actions.","title":"__new"},{"location":"api/levelstate/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/levelstate/#actionhandlers","text":"table < fun (): fun ()>","title":"actionHandlers"},{"location":"api/levelstate/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/levelstate/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/levelstate/#decision","text":"Decision The current decision being processed, if any.","title":"decision"},{"location":"api/levelstate/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/levelstate/#display","text":"Display The display object used for rendering.","title":"display"},{"location":"api/levelstate/#draw","text":"( method ) LevelState : draw () Draws the current state of the level, including the perspective of relevant actors.","title":"draw"},{"location":"api/levelstate/#drawbeforecells","text":"( method ) LevelState : drawBeforeCells ( display : Display) Draws content before rendering cells. Override in subclasses for custom behavior. @ param display \u2014 The display object used for drawing.","title":"drawBeforeCells"},{"location":"api/levelstate/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/levelstate/#geometer","text":"EditorState An editor state for debugging or managing geometry.","title":"geometer"},{"location":"api/levelstate/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"api/levelstate/#handleactionmessage","text":"( method ) LevelState : handleActionMessage ( message : ActionMessage) Handles an action message by determining visibility and setting display overrides. @ param message \u2014 The action message to handle.","title":"handleActionMessage"},{"location":"api/levelstate/#handlemessage","text":"( method ) LevelState : handleMessage ( message : any) Handles incoming messages from the coroutine. Processes decisions, action messages, and debug messages as appropriate. @ param message \u2014 The message to handle.","title":"handleMessage"},{"location":"api/levelstate/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/levelstate/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/levelstate/#keypressed","text":"( method ) GameState : keypressed ( key : any, scancode : any) Called on each keypress.","title":"keypressed"},{"location":"api/levelstate/#level","text":"Level The level object representing the game environment.","title":"level"},{"location":"api/levelstate/#load","text":"( method ) GameState : load () Called when the gamestate is started.","title":"load"},{"location":"api/levelstate/#manager","text":"GameStateManager","title":"manager"},{"location":"api/levelstate/#message","text":"ActionMessage The most recent action message.","title":"message"},{"location":"api/levelstate/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/levelstate/#mousepressed","text":"( method ) GameState : mousepressed ( x : any, y : any, button : any, istouch : any, presses : any)","title":"mousepressed"},{"location":"api/levelstate/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/levelstate/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/levelstate/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/levelstate/#shouldadvance","text":"( method ) LevelState : shouldAdvance () -> shouldAdvance : boolean| nil Determines if the coroutine should proceed to the next step. @ return shouldAdvance \u2014 True if the coroutine should advance; false otherwise.","title":"shouldAdvance"},{"location":"api/levelstate/#stripname","text":"boolean","title":"stripName"},{"location":"api/levelstate/#time","text":"integer","title":"time"},{"location":"api/levelstate/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"api/levelstate/#update","text":"( method ) LevelState : update ( dt : number) Updates the state of the level. Advances the coroutine and processes decisions or messages if necessary. @ param dt \u2014 The time delta since the last update.","title":"update"},{"location":"api/levelstate/#updatecoroutine","text":"thread","title":"updateCoroutine"},{"location":"api/levelstate/#updatedecision","text":"( method ) LevelState : updateDecision ( dt : number, actor : Actor, decision : ActionDecision) This method is invoked each update when a decision exists and its response is not yet valid.. Override this method in subclasses to implement custom decision-handling logic. @ param dt \u2014 The time delta since the last update. @ param actor \u2014 The actor responsible for making the decision. @ param decision \u2014 The decision being updated.","title":"updateDecision"},{"location":"api/levelstate/#wheelmoved","text":"( method ) GameState : wheelmoved ( dx : any, dy : any) Called when the mouse wheel is moved.","title":"wheelmoved"},{"location":"api/linemodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LineModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomright Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) LineModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topleft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"linemodification"},{"location":"api/linemodification/#__call","text":"function","title":"__call"},{"location":"api/linemodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/linemodification/#__new","text":"( method ) LineModification : __new ( placeable : Actor| Cell , topleft : Vector2, bottomright : Vector2)","title":"__new"},{"location":"api/linemodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/linemodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/linemodification/#bottomright","text":"Vector2","title":"bottomright"},{"location":"api/linemodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/linemodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/linemodification/#execute","text":"( method ) LineModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"api/linemodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/linemodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/linemodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/linemodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/linemodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/linemodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/linemodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/linemodification/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"api/linemodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/linemodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/linemodification/#removed","text":"table","title":"removed"},{"location":"api/linemodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/linemodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/linemodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/linemodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/linemodification/#topleft","text":"Vector2","title":"topleft"},{"location":"api/linemodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/linetool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) LineTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) LineTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) LineTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) LineTool : mousereleased ( editor : Editor) origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean to Vector2 update ( method ) LineTool : update ( dt : number, editor : Editor)","title":"linetool"},{"location":"api/linetool/#__call","text":"function","title":"__call"},{"location":"api/linetool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/linetool/#__new","text":"( method ) LineTool : __new ()","title":"__new"},{"location":"api/linetool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/linetool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/linetool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/linetool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/linetool/#draw","text":"( method ) LineTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/linetool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/linetool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/linetool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/linetool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/linetool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/linetool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/linetool/#mouseclicked","text":"( method ) LineTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"api/linetool/#mousereleased","text":"( method ) LineTool : mousereleased ( editor : Editor)","title":"mousereleased"},{"location":"api/linetool/#origin","text":"Vector2","title":"origin"},{"location":"api/linetool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/linetool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/linetool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/linetool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/linetool/#stripname","text":"boolean","title":"stripName"},{"location":"api/linetool/#to","text":"Vector2","title":"to"},{"location":"api/linetool/#update","text":"( method ) LineTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"api/map/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Map : __new ( w : number, h : number, initialValue : Cell) The constructor for the 'Map' class. Initializes the map with the specified dimensions and initial value, and sets up the opacity caches. @ param w \u2014 The width of the map. @ param h \u2014 The height of the map. @ param initialValue \u2014 The initial value to fill the map with. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. data any [] The data stored in the grid. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fill ( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with. fromData ( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid. get ( method ) Map : get ( x : number, y : number) -> cell : Cell Gets the cell at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return cell \u2014 The cell at the specified coordinates. getCellOpaque ( method ) Map : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the specified coordinates is opaque, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is opaque, false otherwise. getCellPassable ( method ) Map : getCellPassable ( x : number, y : number, mask : any) -> True : boolean Returns true if the cell at the specified coordinates is passable, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is passable, false otherwise. getIndex ( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds. h integer The height of the grid. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onDeserialize ( method ) Map : onDeserialize () opacityCache BooleanBuffer Caches the opaciy of the cell + actors in each tile for faster fov calculation. passableCache BitmaskBuffer A class representing a 2D bitmask buffer using 16-bit integers. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table serialize function Object. serialize ( object : any) -> table set ( method ) Map : set ( x : number, y : number, cell : Cell) Sets the cell at the specified coordinates to the given value. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param cell \u2014 The cell to set. stripName boolean updateCaches ( method ) Map : updateCaches ( x : number, y : number) Updates the opacity cache at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. w integer The width of the grid.","title":"map"},{"location":"api/map/#__call","text":"function","title":"__call"},{"location":"api/map/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/map/#__new","text":"( method ) Map : __new ( w : number, h : number, initialValue : Cell) The constructor for the 'Map' class. Initializes the map with the specified dimensions and initial value, and sets up the opacity caches. @ param w \u2014 The width of the map. @ param h \u2014 The height of the map. @ param initialValue \u2014 The initial value to fill the map with.","title":"__new"},{"location":"api/map/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/map/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/map/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/map/#data","text":"any [] The data stored in the grid.","title":"data"},{"location":"api/map/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/map/#each","text":"( method ) Grid : each () -> An : fun (): number , number , < T > Iterates over each cell in the grid, yielding x, y, and the value. @ return An \u2014 iterator returning x, y, and value for each cell.","title":"each"},{"location":"api/map/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/map/#fill","text":"( method ) Grid : fill ( value : < T>) Fills the entire grid with the specified value. @ param value \u2014 The value to fill the grid with.","title":"fill"},{"location":"api/map/#fromdata","text":"( method ) Grid : fromData ( w : integer, h : integer, data : < T>[]) -> The : Grid<< T >> Initializes the grid with the specified dimensions and data. @ param w \u2014 The width of the grid. @ param h \u2014 The height of the grid. @ param data \u2014 The data to fill the grid with. @ return The \u2014 initialized grid.","title":"fromData"},{"location":"api/map/#get","text":"( method ) Map : get ( x : number, y : number) -> cell : Cell Gets the cell at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return cell \u2014 The cell at the specified coordinates.","title":"get"},{"location":"api/map/#getcellopaque","text":"( method ) Map : getCellOpaque ( x : number, y : number) -> True : boolean Returns true if the cell at the specified coordinates is opaque, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is opaque, false otherwise.","title":"getCellOpaque"},{"location":"api/map/#getcellpassable","text":"( method ) Map : getCellPassable ( x : number, y : number, mask : any) -> True : boolean Returns true if the cell at the specified coordinates is passable, false otherwise. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return True \u2014 if the cell is passable, false otherwise.","title":"getCellPassable"},{"location":"api/map/#getindex","text":"( method ) Grid : getIndex ( x : integer, y : integer) -> The : number ? Gets the index in the data array for the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 index in the data array, or nil if out of bounds.","title":"getIndex"},{"location":"api/map/#h","text":"integer The height of the grid.","title":"h"},{"location":"api/map/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/map/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/map/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/map/#ondeserialize","text":"( method ) Map : onDeserialize ()","title":"onDeserialize"},{"location":"api/map/#opacitycache","text":"BooleanBuffer Caches the opaciy of the cell + actors in each tile for faster fov calculation.","title":"opacityCache"},{"location":"api/map/#passablecache","text":"BitmaskBuffer A class representing a 2D bitmask buffer using 16-bit integers.","title":"passableCache"},{"location":"api/map/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/map/#serializationblacklist","text":"table","title":"serializationBlacklist"},{"location":"api/map/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/map/#set","text":"( method ) Map : set ( x : number, y : number, cell : Cell) Sets the cell at the specified coordinates to the given value. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param cell \u2014 The cell to set.","title":"set"},{"location":"api/map/#stripname","text":"boolean","title":"stripName"},{"location":"api/map/#updatecaches","text":"( method ) Map : updateCaches ( x : number, y : number) Updates the opacity cache at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate.","title":"updateCaches"},{"location":"api/map/#w","text":"integer The width of the grid.","title":"w"},{"location":"api/mapbuilder/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) MapBuilder : __new ( initialValue : Cell) The constructor for the 'MapBuilder' class. Initializes the map with an empty data table and actors list. @ param initialValue \u2014 The initial value to fill the map with. _serializationBlacklist table actors ActorStorage A list of actors present in the map. addActor ( method ) MapBuilder : addActor ( actor : table, x ? : number , y ? : number ) Adds an actor to the map at the specified coordinates. @ param actor \u2014 The actor to add. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. addPadding ( method ) MapBuilder : addPadding ( width : number, cell : Cell) Adds padding around the map with a specified width and cell value. @ param width \u2014 The width of the padding to add. @ param cell \u2014 The cell value to use for padding. adopt ( method ) Object : adopt ( o : any) -> unknown blit ( method ) MapBuilder : blit ( source : MapBuilder, destX : number, destY : number, maskFn : fun ( x : integer, y : integer, source : Cell, dest : Cell)| nil ) Blits the source MapBuilder onto this MapBuilder at the specified coordinates. @ param source \u2014 The source MapBuilder to copy from. @ param destX \u2014 The x-coordinate of the top-left corner in the destination MapBuilder. @ param destY \u2014 The y-coordinate of the top-left corner in the destination MapBuilder. @ param maskFn \u2014 A callback function for masking. Should return true if the cell should be copied, false otherwise. build ( method ) MapBuilder : build () -> Map 2. actors : table Builds the map and returns the map and list of actors. Converts the sparse grid to a contiguous grid. @ return actors \u2014 map and the list of actors. className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseGrid : clear () Clears all values in the sparse grid. data table debug boolean deserialize function Object. deserialize ( data : any) -> unknown drawEllipse ( method ) MapBuilder : drawEllipse ( cx : number, cy : number, rx : number, ry : number, cell : Cell) Draws an ellipse on the map. @ param cx \u2014 The x-coordinate of the center. @ param cy \u2014 The y-coordinate of the center. @ param rx \u2014 The radius along the x-axis. @ param ry \u2014 The radius along the y-axis. @ param cell \u2014 The cell to fill the ellipse with. drawLine ( method ) MapBuilder : drawLine ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a line on the map using Bresenham's line algorithm. @ param x1 \u2014 The x-coordinate of the starting point. @ param y1 \u2014 The y-coordinate of the starting point. @ param x2 \u2014 The x-coordinate of the ending point. @ param y2 \u2014 The y-coordinate of the ending point. @ param cell \u2014 The cell to draw the line with. drawRectangle ( method ) MapBuilder : drawRectangle ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a rectangle on the map. @ param x1 \u2014 The x-coordinate of the top-left corner. @ param y1 \u2014 The y-coordinate of the top-left corner. @ param x2 \u2014 The x-coordinate of the bottom-right corner. @ param y2 \u2014 The y-coordinate of the bottom-right corner. @ param cell \u2014 The cell to fill the rectangle with. each ( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry. eachActor ( method ) MapBuilder : eachActor (... any ) -> function eachActorAt ( method ) MapBuilder : eachActorAt ( x : any, y : any) -> function eachCell ( method ) MapBuilder : eachCell () -> fun ( x : integer, y : integer, V : any) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) MapBuilder : get ( x : number, y : number) -> value : any Gets the value at the specified coordinates, or the initialValue if not set. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or the initialValue if not set. getActorsAt fun ( self : any, x : integer, y : integer) getCell ( method ) MapBuilder : getCell ( x : any, y : any) -> unknown inBounds ( method ) MapBuilder : inBounds ( x : any, y : any) -> boolean initialValue Cell The initial value to fill the map with. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) MapBuilder : removeActor ( actor : table) Removes an actor from the map. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) MapBuilder : set ( x : number, y : number, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. setCell ( method ) MapBuilder : setCell ( x : any, y : any, value : any) Mirror set. stripName boolean","title":"mapbuilder"},{"location":"api/mapbuilder/#__call","text":"function","title":"__call"},{"location":"api/mapbuilder/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/mapbuilder/#__new","text":"( method ) MapBuilder : __new ( initialValue : Cell) The constructor for the 'MapBuilder' class. Initializes the map with an empty data table and actors list. @ param initialValue \u2014 The initial value to fill the map with.","title":"__new"},{"location":"api/mapbuilder/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/mapbuilder/#actors","text":"ActorStorage A list of actors present in the map.","title":"actors"},{"location":"api/mapbuilder/#addactor","text":"( method ) MapBuilder : addActor ( actor : table, x ? : number , y ? : number ) Adds an actor to the map at the specified coordinates. @ param actor \u2014 The actor to add. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate.","title":"addActor"},{"location":"api/mapbuilder/#addpadding","text":"( method ) MapBuilder : addPadding ( width : number, cell : Cell) Adds padding around the map with a specified width and cell value. @ param width \u2014 The width of the padding to add. @ param cell \u2014 The cell value to use for padding.","title":"addPadding"},{"location":"api/mapbuilder/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/mapbuilder/#blit","text":"( method ) MapBuilder : blit ( source : MapBuilder, destX : number, destY : number, maskFn : fun ( x : integer, y : integer, source : Cell, dest : Cell)| nil ) Blits the source MapBuilder onto this MapBuilder at the specified coordinates. @ param source \u2014 The source MapBuilder to copy from. @ param destX \u2014 The x-coordinate of the top-left corner in the destination MapBuilder. @ param destY \u2014 The y-coordinate of the top-left corner in the destination MapBuilder. @ param maskFn \u2014 A callback function for masking. Should return true if the cell should be copied, false otherwise.","title":"blit"},{"location":"api/mapbuilder/#build","text":"( method ) MapBuilder : build () -> Map 2. actors : table Builds the map and returns the map and list of actors. Converts the sparse grid to a contiguous grid. @ return actors \u2014 map and the list of actors.","title":"build"},{"location":"api/mapbuilder/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/mapbuilder/#clear","text":"( method ) SparseGrid : clear () Clears all values in the sparse grid.","title":"clear"},{"location":"api/mapbuilder/#data","text":"table","title":"data"},{"location":"api/mapbuilder/#debug","text":"boolean","title":"debug"},{"location":"api/mapbuilder/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/mapbuilder/#drawellipse","text":"( method ) MapBuilder : drawEllipse ( cx : number, cy : number, rx : number, ry : number, cell : Cell) Draws an ellipse on the map. @ param cx \u2014 The x-coordinate of the center. @ param cy \u2014 The y-coordinate of the center. @ param rx \u2014 The radius along the x-axis. @ param ry \u2014 The radius along the y-axis. @ param cell \u2014 The cell to fill the ellipse with.","title":"drawEllipse"},{"location":"api/mapbuilder/#drawline","text":"( method ) MapBuilder : drawLine ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a line on the map using Bresenham's line algorithm. @ param x1 \u2014 The x-coordinate of the starting point. @ param y1 \u2014 The y-coordinate of the starting point. @ param x2 \u2014 The x-coordinate of the ending point. @ param y2 \u2014 The y-coordinate of the ending point. @ param cell \u2014 The cell to draw the line with.","title":"drawLine"},{"location":"api/mapbuilder/#drawrectangle","text":"( method ) MapBuilder : drawRectangle ( x1 : number, y1 : number, x2 : number, y2 : number, cell : Cell) Draws a rectangle on the map. @ param x1 \u2014 The x-coordinate of the top-left corner. @ param y1 \u2014 The y-coordinate of the top-left corner. @ param x2 \u2014 The x-coordinate of the bottom-right corner. @ param y2 \u2014 The y-coordinate of the bottom-right corner. @ param cell \u2014 The cell to fill the rectangle with.","title":"drawRectangle"},{"location":"api/mapbuilder/#each","text":"( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry.","title":"each"},{"location":"api/mapbuilder/#eachactor","text":"( method ) MapBuilder : eachActor (... any ) -> function","title":"eachActor"},{"location":"api/mapbuilder/#eachactorat","text":"( method ) MapBuilder : eachActorAt ( x : any, y : any) -> function","title":"eachActorAt"},{"location":"api/mapbuilder/#eachcell","text":"( method ) MapBuilder : eachCell () -> fun ( x : integer, y : integer, V : any)","title":"eachCell"},{"location":"api/mapbuilder/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/mapbuilder/#get","text":"( method ) MapBuilder : get ( x : number, y : number) -> value : any Gets the value at the specified coordinates, or the initialValue if not set. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or the initialValue if not set.","title":"get"},{"location":"api/mapbuilder/#getactorsat","text":"fun ( self : any, x : integer, y : integer)","title":"getActorsAt"},{"location":"api/mapbuilder/#getcell","text":"( method ) MapBuilder : getCell ( x : any, y : any) -> unknown","title":"getCell"},{"location":"api/mapbuilder/#inbounds","text":"( method ) MapBuilder : inBounds ( x : any, y : any) -> boolean","title":"inBounds"},{"location":"api/mapbuilder/#initialvalue","text":"Cell The initial value to fill the map with.","title":"initialValue"},{"location":"api/mapbuilder/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/mapbuilder/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/mapbuilder/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/mapbuilder/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/mapbuilder/#removeactor","text":"( method ) MapBuilder : removeActor ( actor : table) Removes an actor from the map. @ param actor \u2014 The actor to remove.","title":"removeActor"},{"location":"api/mapbuilder/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/mapbuilder/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/mapbuilder/#set","text":"( method ) MapBuilder : set ( x : number, y : number, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"api/mapbuilder/#setcell","text":"( method ) MapBuilder : setCell ( x : any, y : any, value : any) Mirror set.","title":"setCell"},{"location":"api/mapbuilder/#stripname","text":"boolean","title":"stripName"},{"location":"api/mapgeneratorstate/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) MapGeneratorState : __new ( generator : fun ( mapbuilder : MapBuilder): fun ()) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. generator thread getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) MapGeneratorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"mapgeneratorstate"},{"location":"api/mapgeneratorstate/#__call","text":"function","title":"__call"},{"location":"api/mapgeneratorstate/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/mapgeneratorstate/#__new","text":"( method ) MapGeneratorState : __new ( generator : fun ( mapbuilder : MapBuilder): fun ())","title":"__new"},{"location":"api/mapgeneratorstate/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/mapgeneratorstate/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/mapgeneratorstate/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/mapgeneratorstate/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/mapgeneratorstate/#draw","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"api/mapgeneratorstate/#editor","text":"Editor","title":"editor"},{"location":"api/mapgeneratorstate/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/mapgeneratorstate/#generator","text":"thread","title":"generator"},{"location":"api/mapgeneratorstate/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"api/mapgeneratorstate/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/mapgeneratorstate/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/mapgeneratorstate/#keypressed","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"api/mapgeneratorstate/#load","text":"( method ) EditorState : load ()","title":"load"},{"location":"api/mapgeneratorstate/#manager","text":"GameStateManager","title":"manager"},{"location":"api/mapgeneratorstate/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/mapgeneratorstate/#mousemoved","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"api/mapgeneratorstate/#mousepressed","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"api/mapgeneratorstate/#mousereleased","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"api/mapgeneratorstate/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/mapgeneratorstate/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/mapgeneratorstate/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/mapgeneratorstate/#stripname","text":"boolean","title":"stripName"},{"location":"api/mapgeneratorstate/#textinput","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"api/mapgeneratorstate/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"api/mapgeneratorstate/#update","text":"( method ) MapGeneratorState : update ( dt : any)","title":"update"},{"location":"api/mapgeneratorstate/#wheelmoved","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"api/message/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"message"},{"location":"api/message/#__call","text":"function","title":"__call"},{"location":"api/message/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/message/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/message/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/message/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/message/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/message/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/message/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/message/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/message/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/message/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/message/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/message/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/message/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/message/#stripname","text":"boolean","title":"stripName"},{"location":"api/modification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) Modification : execute ( attachable : SpectrumAttachable, editor : Editor) Executes the modification. Override this method in subclasses to define the behavior of the modification. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placed table prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"modification"},{"location":"api/modification/#__call","text":"function","title":"__call"},{"location":"api/modification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/modification/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/modification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/modification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/modification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/modification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/modification/#execute","text":"( method ) Modification : execute ( attachable : SpectrumAttachable, editor : Editor) Executes the modification. Override this method in subclasses to define the behavior of the modification.","title":"execute"},{"location":"api/modification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/modification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/modification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/modification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/modification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/modification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/modification/#placed","text":"table","title":"placed"},{"location":"api/modification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/modification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/modification/#removed","text":"table","title":"removed"},{"location":"api/modification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/modification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/modification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/modification/#stripname","text":"boolean","title":"stripName"},{"location":"api/modification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/neighborhood/","text":"","title":"neighborhood"},{"location":"api/object/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"object"},{"location":"api/object/#__call","text":"function","title":"__call"},{"location":"api/object/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/object/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/object/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/object/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/object/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/object/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/object/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/object/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/object/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/object/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/object/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/object/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/object/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/object/#stripname","text":"boolean","title":"stripName"},{"location":"api/opaquecomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"opaquecomponent"},{"location":"api/opaquecomponent/#__call","text":"function","title":"__call"},{"location":"api/opaquecomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/opaquecomponent/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/opaquecomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/opaquecomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/opaquecomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/opaquecomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/opaquecomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/opaquecomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/opaquecomponent/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/opaquecomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/opaquecomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/opaquecomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/opaquecomponent/#name","text":"string","title":"name"},{"location":"api/opaquecomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/opaquecomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/opaquecomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/opaquecomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/opaquecomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/opaquecomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/pastemodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PasteModification : __new ( cells : SparseGrid, actors : SparseMap, topLeft : Vector2) _serializationBlacklist table actors SparseMap A sparse grid of buckets that objects can be placed into. Used for tracking actors by x,y position in Level. adopt ( method ) Object : adopt ( o : any) -> unknown cells SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) PasteModification : execute ( attachable : SpectrumAttachable, editor : Editor) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placed table prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topLeft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"pastemodification"},{"location":"api/pastemodification/#__call","text":"function","title":"__call"},{"location":"api/pastemodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/pastemodification/#__new","text":"( method ) PasteModification : __new ( cells : SparseGrid, actors : SparseMap, topLeft : Vector2)","title":"__new"},{"location":"api/pastemodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/pastemodification/#actors","text":"SparseMap A sparse grid of buckets that objects can be placed into. Used for tracking actors by x,y position in Level.","title":"actors"},{"location":"api/pastemodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/pastemodification/#cells","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"cells"},{"location":"api/pastemodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/pastemodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/pastemodification/#execute","text":"( method ) PasteModification : execute ( attachable : SpectrumAttachable, editor : Editor)","title":"execute"},{"location":"api/pastemodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/pastemodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/pastemodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/pastemodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/pastemodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/pastemodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/pastemodification/#placed","text":"table","title":"placed"},{"location":"api/pastemodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/pastemodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/pastemodification/#removed","text":"table","title":"removed"},{"location":"api/pastemodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/pastemodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/pastemodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/pastemodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/pastemodification/#topleft","text":"Vector2","title":"topLeft"},{"location":"api/pastemodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/penmodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PenModification : __new ( placeable : Actor| Cell , locations : SparseGrid) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) PenModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"penmodification"},{"location":"api/penmodification/#__call","text":"function","title":"__call"},{"location":"api/penmodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/penmodification/#__new","text":"( method ) PenModification : __new ( placeable : Actor| Cell , locations : SparseGrid)","title":"__new"},{"location":"api/penmodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/penmodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/penmodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/penmodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/penmodification/#execute","text":"( method ) PenModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"api/penmodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/penmodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/penmodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/penmodification/#locations","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"api/penmodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/penmodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/penmodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/penmodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/penmodification/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"api/penmodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/penmodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/penmodification/#removed","text":"table","title":"removed"},{"location":"api/penmodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/penmodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/penmodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/penmodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/penmodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/pentool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown dragging boolean draw ( method ) PenTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. locations SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) PenTool : mouseclicked ( editor : Editor, level : any, x : number, y : number) mousereleased ( method ) PenTool : mousereleased ( editor : Editor, level : any, x : number, y : number) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) PenTool : update ( dt : number, editor : Editor)","title":"pentool"},{"location":"api/pentool/#__call","text":"function","title":"__call"},{"location":"api/pentool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/pentool/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/pentool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/pentool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/pentool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/pentool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/pentool/#dragging","text":"boolean","title":"dragging"},{"location":"api/pentool/#draw","text":"( method ) PenTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/pentool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/pentool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/pentool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/pentool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/pentool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/pentool/#locations","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"locations"},{"location":"api/pentool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/pentool/#mouseclicked","text":"( method ) PenTool : mouseclicked ( editor : Editor, level : any, x : number, y : number)","title":"mouseclicked"},{"location":"api/pentool/#mousereleased","text":"( method ) PenTool : mousereleased ( editor : Editor, level : any, x : number, y : number)","title":"mousereleased"},{"location":"api/pentool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/pentool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/pentool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/pentool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/pentool/#stripname","text":"boolean","title":"stripName"},{"location":"api/pentool/#update","text":"( method ) PenTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"api/placeable/","text":"","title":"placeable"},{"location":"api/playercontrollercomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table act ( method ) PlayerControllerComponent : act ( level : Level, actor : Actor) -> Action | nil adopt ( method ) Object : adopt ( o : any) -> unknown blackboard table | nil checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"playercontrollercomponent"},{"location":"api/playercontrollercomponent/#__call","text":"function","title":"__call"},{"location":"api/playercontrollercomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/playercontrollercomponent/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/playercontrollercomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/playercontrollercomponent/#act","text":"( method ) PlayerControllerComponent : act ( level : Level, actor : Actor) -> Action | nil","title":"act"},{"location":"api/playercontrollercomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/playercontrollercomponent/#blackboard","text":"table | nil","title":"blackboard"},{"location":"api/playercontrollercomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/playercontrollercomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/playercontrollercomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/playercontrollercomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/playercontrollercomponent/#initialize","text":"( method ) Component : initialize ( owner : Actor) Called after the actor is loaded and ready, this is where the component should do any initialization requiring the actor. This would include stuff like attaching systems, etc.","title":"initialize"},{"location":"api/playercontrollercomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/playercontrollercomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/playercontrollercomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/playercontrollercomponent/#name","text":"string","title":"name"},{"location":"api/playercontrollercomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/playercontrollercomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/playercontrollercomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/playercontrollercomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/playercontrollercomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/playercontrollercomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/prefabeditorstate/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PrefabEditorState : __new ( mb : SpectrumAttachable) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) EditorState : draw () editor Editor extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getManager ( method ) GameState : getManager () -> GameStateManager instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. keypressed ( method ) EditorState : keypressed ( key : any, scancode : any) load ( method ) EditorState : load () manager GameStateManager mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mousemoved ( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any) mousepressed ( method ) EditorState : mousepressed ( x : any, y : any, button : any) mousereleased ( method ) EditorState : mousereleased ( x : any, y : any, button : any) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean textinput ( method ) EditorState : textinput ( text : any) unload ( method ) GameState : unload () Calls when the gamestate is stopped. update ( method ) PrefabEditorState : update ( dt : any) wheelmoved ( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"prefabeditorstate"},{"location":"api/prefabeditorstate/#__call","text":"function","title":"__call"},{"location":"api/prefabeditorstate/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/prefabeditorstate/#__new","text":"( method ) PrefabEditorState : __new ( mb : SpectrumAttachable)","title":"__new"},{"location":"api/prefabeditorstate/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/prefabeditorstate/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/prefabeditorstate/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/prefabeditorstate/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/prefabeditorstate/#draw","text":"( method ) EditorState : draw ()","title":"draw"},{"location":"api/prefabeditorstate/#editor","text":"Editor","title":"editor"},{"location":"api/prefabeditorstate/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/prefabeditorstate/#getmanager","text":"( method ) GameState : getManager () -> GameStateManager","title":"getManager"},{"location":"api/prefabeditorstate/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/prefabeditorstate/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/prefabeditorstate/#keypressed","text":"( method ) EditorState : keypressed ( key : any, scancode : any)","title":"keypressed"},{"location":"api/prefabeditorstate/#load","text":"( method ) EditorState : load ()","title":"load"},{"location":"api/prefabeditorstate/#manager","text":"GameStateManager","title":"manager"},{"location":"api/prefabeditorstate/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/prefabeditorstate/#mousemoved","text":"( method ) EditorState : mousemoved ( x : any, y : any, dx : any, dy : any, istouch : any)","title":"mousemoved"},{"location":"api/prefabeditorstate/#mousepressed","text":"( method ) EditorState : mousepressed ( x : any, y : any, button : any)","title":"mousepressed"},{"location":"api/prefabeditorstate/#mousereleased","text":"( method ) EditorState : mousereleased ( x : any, y : any, button : any)","title":"mousereleased"},{"location":"api/prefabeditorstate/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/prefabeditorstate/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/prefabeditorstate/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/prefabeditorstate/#stripname","text":"boolean","title":"stripName"},{"location":"api/prefabeditorstate/#textinput","text":"( method ) EditorState : textinput ( text : any)","title":"textinput"},{"location":"api/prefabeditorstate/#unload","text":"( method ) GameState : unload () Calls when the gamestate is stopped.","title":"unload"},{"location":"api/prefabeditorstate/#update","text":"( method ) PrefabEditorState : update ( dt : any)","title":"update"},{"location":"api/prefabeditorstate/#wheelmoved","text":"( method ) EditorState : wheelmoved ( dx : any, dy : any)","title":"wheelmoved"},{"location":"api/priorityqueue/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) PriorityQueue : __new () _bubbleDown ( method ) PriorityQueue : _bubbleDown ( i : integer) Bubble down the element at index i to its proper place in the heap _bubbleUp ( method ) PriorityQueue : _bubbleUp ( i : integer) Bubble up the element at index i to its proper place in the heap _heap table _serializationBlacklist table _swap ( method ) PriorityQueue : _swap ( i : integer, j : integer) Swap elements at indices i and j in the heap adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. isEmpty ( method ) PriorityQueue : isEmpty () -> boolean mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. pop ( method ) PriorityQueue : pop () -> < T >| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) PriorityQueue : push ( data : any, priority : integer) Push a new element to the PriorityQueue. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table size ( method ) PriorityQueue : size () -> integer stripName boolean","title":"priorityqueue"},{"location":"api/priorityqueue/#__call","text":"function","title":"__call"},{"location":"api/priorityqueue/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/priorityqueue/#__new","text":"( method ) PriorityQueue : __new ()","title":"__new"},{"location":"api/priorityqueue/#_bubbledown","text":"( method ) PriorityQueue : _bubbleDown ( i : integer) Bubble down the element at index i to its proper place in the heap","title":"_bubbleDown"},{"location":"api/priorityqueue/#_bubbleup","text":"( method ) PriorityQueue : _bubbleUp ( i : integer) Bubble up the element at index i to its proper place in the heap","title":"_bubbleUp"},{"location":"api/priorityqueue/#_heap","text":"table","title":"_heap"},{"location":"api/priorityqueue/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/priorityqueue/#_swap","text":"( method ) PriorityQueue : _swap ( i : integer, j : integer) Swap elements at indices i and j in the heap","title":"_swap"},{"location":"api/priorityqueue/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/priorityqueue/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/priorityqueue/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/priorityqueue/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/priorityqueue/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/priorityqueue/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/priorityqueue/#isempty","text":"( method ) PriorityQueue : isEmpty () -> boolean","title":"isEmpty"},{"location":"api/priorityqueue/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/priorityqueue/#pop","text":"( method ) PriorityQueue : pop () -> < T >| nil","title":"pop"},{"location":"api/priorityqueue/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/priorityqueue/#push","text":"( method ) PriorityQueue : push ( data : any, priority : integer) Push a new element to the PriorityQueue.","title":"push"},{"location":"api/priorityqueue/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/priorityqueue/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/priorityqueue/#size","text":"( method ) PriorityQueue : size () -> integer","title":"size"},{"location":"api/priorityqueue/#stripname","text":"boolean","title":"stripName"},{"location":"api/prism/","text":"table prism.Action unknown prism.Actor unknown prism.ActorStorage unknown prism.BehaviorTree table prism.BehaviorTree.Node unknown prism.BehaviorTree.Root unknown prism.BehaviorTree.Selector unknown prism.BehaviorTree.Sequence unknown prism.BehaviorTree.Succeeder unknown prism.BitmaskBuffer unknown prism.BooleanBuffer unknown prism.BoundingBox unknown prism.BreadthFirstSearch unknown prism.Bresenham unknown prism.Cell unknown prism.Collision unknown prism.Color4 unknown prism.Component unknown prism.Decision unknown prism.Ellipse unknown prism.Grid unknown prism.Level unknown prism.Map unknown prism.MapBuilder unknown prism.Message unknown prism.Object unknown prism.Path unknown prism.PriorityQueue unknown prism.Queue unknown prism.RNG unknown prism.Scheduler unknown prism.SimpleScheduler unknown prism.SparseArray unknown prism.SparseGrid unknown prism.SparseMap unknown prism.System unknown prism.SystemManager unknown prism.Target unknown prism.Vector2 unknown prism._ISCLASS table prism._OBJECTREGISTRY table prism._defaultDistance string prism._defaultRangeType string prism._initialized boolean prism._itemPatterns table prism._items table prism.actions table prism.actors table prism.advanceCoroutine function prism. advanceCoroutine ( updateCoroutine : any, level : any, decision : any) -> Message | nil prism.astar unknown prism.behaviors table prism.cells table prism.components table prism.components.Collider unknown prism.components.Controller unknown prism.components.Opaque unknown prism.components.PlayerController unknown prism.components.Senses unknown prism.computeFOV unknown prism.decisions table prism.decisions.ActionDecision unknown prism.fov table prism.fov.Fraction unknown prism.fov.Quadrant unknown prism.fov.Row unknown prism.hotload function prism. hotload () prism.json unknown prism.loadModule function prism. loadModule ( directory : any) prism.messages table table prism.messages.ActionMessage unknown prism.messages.DebugMessage unknown prism.modules table prism.neighborhood Vector2 [] Vector2 [] prism.path unknown prism.require function prism. require ( p : any) -> unknown 2. nil prism.setDefaultNeighborhood function prism. setDefaultNeighborhood ( neighborhood : Vector2[]) prism.systems table prism.systems.Senses unknown prism.targets table prism.turn function prism. turn ( level : Level, actor : Actor, controller : ControllerComponent)","title":"prism"},{"location":"api/prism/#prismaction","text":"unknown","title":"prism.Action"},{"location":"api/prism/#prismactor","text":"unknown","title":"prism.Actor"},{"location":"api/prism/#prismactorstorage","text":"unknown","title":"prism.ActorStorage"},{"location":"api/prism/#prismbehaviortree","text":"table","title":"prism.BehaviorTree"},{"location":"api/prism/#prismbehaviortreenode","text":"unknown","title":"prism.BehaviorTree.Node"},{"location":"api/prism/#prismbehaviortreeroot","text":"unknown","title":"prism.BehaviorTree.Root"},{"location":"api/prism/#prismbehaviortreeselector","text":"unknown","title":"prism.BehaviorTree.Selector"},{"location":"api/prism/#prismbehaviortreesequence","text":"unknown","title":"prism.BehaviorTree.Sequence"},{"location":"api/prism/#prismbehaviortreesucceeder","text":"unknown","title":"prism.BehaviorTree.Succeeder"},{"location":"api/prism/#prismbitmaskbuffer","text":"unknown","title":"prism.BitmaskBuffer"},{"location":"api/prism/#prismbooleanbuffer","text":"unknown","title":"prism.BooleanBuffer"},{"location":"api/prism/#prismboundingbox","text":"unknown","title":"prism.BoundingBox"},{"location":"api/prism/#prismbreadthfirstsearch","text":"unknown","title":"prism.BreadthFirstSearch"},{"location":"api/prism/#prismbresenham","text":"unknown","title":"prism.Bresenham"},{"location":"api/prism/#prismcell","text":"unknown","title":"prism.Cell"},{"location":"api/prism/#prismcollision","text":"unknown","title":"prism.Collision"},{"location":"api/prism/#prismcolor4","text":"unknown","title":"prism.Color4"},{"location":"api/prism/#prismcomponent","text":"unknown","title":"prism.Component"},{"location":"api/prism/#prismdecision","text":"unknown","title":"prism.Decision"},{"location":"api/prism/#prismellipse","text":"unknown","title":"prism.Ellipse"},{"location":"api/prism/#prismgrid","text":"unknown","title":"prism.Grid"},{"location":"api/prism/#prismlevel","text":"unknown","title":"prism.Level"},{"location":"api/prism/#prismmap","text":"unknown","title":"prism.Map"},{"location":"api/prism/#prismmapbuilder","text":"unknown","title":"prism.MapBuilder"},{"location":"api/prism/#prismmessage","text":"unknown","title":"prism.Message"},{"location":"api/prism/#prismobject","text":"unknown","title":"prism.Object"},{"location":"api/prism/#prismpath","text":"unknown","title":"prism.Path"},{"location":"api/prism/#prismpriorityqueue","text":"unknown","title":"prism.PriorityQueue"},{"location":"api/prism/#prismqueue","text":"unknown","title":"prism.Queue"},{"location":"api/prism/#prismrng","text":"unknown","title":"prism.RNG"},{"location":"api/prism/#prismscheduler","text":"unknown","title":"prism.Scheduler"},{"location":"api/prism/#prismsimplescheduler","text":"unknown","title":"prism.SimpleScheduler"},{"location":"api/prism/#prismsparsearray","text":"unknown","title":"prism.SparseArray"},{"location":"api/prism/#prismsparsegrid","text":"unknown","title":"prism.SparseGrid"},{"location":"api/prism/#prismsparsemap","text":"unknown","title":"prism.SparseMap"},{"location":"api/prism/#prismsystem","text":"unknown","title":"prism.System"},{"location":"api/prism/#prismsystemmanager","text":"unknown","title":"prism.SystemManager"},{"location":"api/prism/#prismtarget","text":"unknown","title":"prism.Target"},{"location":"api/prism/#prismvector2","text":"unknown","title":"prism.Vector2"},{"location":"api/prism/#prism_isclass","text":"table","title":"prism._ISCLASS"},{"location":"api/prism/#prism_objectregistry","text":"table","title":"prism._OBJECTREGISTRY"},{"location":"api/prism/#prism_defaultdistance","text":"string","title":"prism._defaultDistance"},{"location":"api/prism/#prism_defaultrangetype","text":"string","title":"prism._defaultRangeType"},{"location":"api/prism/#prism_initialized","text":"boolean","title":"prism._initialized"},{"location":"api/prism/#prism_itempatterns","text":"table","title":"prism._itemPatterns"},{"location":"api/prism/#prism_items","text":"table","title":"prism._items"},{"location":"api/prism/#prismactions","text":"table","title":"prism.actions"},{"location":"api/prism/#prismactors","text":"table","title":"prism.actors"},{"location":"api/prism/#prismadvancecoroutine","text":"function prism. advanceCoroutine ( updateCoroutine : any, level : any, decision : any) -> Message | nil","title":"prism.advanceCoroutine"},{"location":"api/prism/#prismastar","text":"unknown","title":"prism.astar"},{"location":"api/prism/#prismbehaviors","text":"table","title":"prism.behaviors"},{"location":"api/prism/#prismcells","text":"table","title":"prism.cells"},{"location":"api/prism/#prismcomponents","text":"table","title":"prism.components"},{"location":"api/prism/#prismcomponentscollider","text":"unknown","title":"prism.components.Collider"},{"location":"api/prism/#prismcomponentscontroller","text":"unknown","title":"prism.components.Controller"},{"location":"api/prism/#prismcomponentsopaque","text":"unknown","title":"prism.components.Opaque"},{"location":"api/prism/#prismcomponentsplayercontroller","text":"unknown","title":"prism.components.PlayerController"},{"location":"api/prism/#prismcomponentssenses","text":"unknown","title":"prism.components.Senses"},{"location":"api/prism/#prismcomputefov","text":"unknown","title":"prism.computeFOV"},{"location":"api/prism/#prismdecisions","text":"table","title":"prism.decisions"},{"location":"api/prism/#prismdecisionsactiondecision","text":"unknown","title":"prism.decisions.ActionDecision"},{"location":"api/prism/#prismfov","text":"table","title":"prism.fov"},{"location":"api/prism/#prismfovfraction","text":"unknown","title":"prism.fov.Fraction"},{"location":"api/prism/#prismfovquadrant","text":"unknown","title":"prism.fov.Quadrant"},{"location":"api/prism/#prismfovrow","text":"unknown","title":"prism.fov.Row"},{"location":"api/prism/#prismhotload","text":"function prism. hotload ()","title":"prism.hotload"},{"location":"api/prism/#prismjson","text":"unknown","title":"prism.json"},{"location":"api/prism/#prismloadmodule","text":"function prism. loadModule ( directory : any)","title":"prism.loadModule"},{"location":"api/prism/#prismmessages","text":"table table","title":"prism.messages"},{"location":"api/prism/#prismmessagesactionmessage","text":"unknown","title":"prism.messages.ActionMessage"},{"location":"api/prism/#prismmessagesdebugmessage","text":"unknown","title":"prism.messages.DebugMessage"},{"location":"api/prism/#prismmodules","text":"table","title":"prism.modules"},{"location":"api/prism/#prismneighborhood","text":"Vector2 [] Vector2 []","title":"prism.neighborhood"},{"location":"api/prism/#prismpath_1","text":"unknown","title":"prism.path"},{"location":"api/prism/#prismrequire","text":"function prism. require ( p : any) -> unknown 2. nil","title":"prism.require"},{"location":"api/prism/#prismsetdefaultneighborhood","text":"function prism. setDefaultNeighborhood ( neighborhood : Vector2[])","title":"prism.setDefaultNeighborhood"},{"location":"api/prism/#prismsystems","text":"table","title":"prism.systems"},{"location":"api/prism/#prismsystemssenses","text":"unknown","title":"prism.systems.Senses"},{"location":"api/prism/#prismtargets","text":"table","title":"prism.targets"},{"location":"api/prism/#prismturn","text":"function prism. turn ( level : Level, actor : Actor, controller : ControllerComponent)","title":"prism.turn"},{"location":"api/quadrant/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Quadrant : __new ( cardinal : any, origin : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown cardinal any className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. ox unknown oy unknown prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean transform ( method ) Quadrant : transform ( row : any, col : any) -> unknown 2. unknown","title":"quadrant"},{"location":"api/quadrant/#__call","text":"function","title":"__call"},{"location":"api/quadrant/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/quadrant/#__new","text":"( method ) Quadrant : __new ( cardinal : any, origin : any)","title":"__new"},{"location":"api/quadrant/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/quadrant/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/quadrant/#cardinal","text":"any","title":"cardinal"},{"location":"api/quadrant/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/quadrant/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/quadrant/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/quadrant/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/quadrant/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/quadrant/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/quadrant/#ox","text":"unknown","title":"ox"},{"location":"api/quadrant/#oy","text":"unknown","title":"oy"},{"location":"api/quadrant/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/quadrant/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/quadrant/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/quadrant/#stripname","text":"boolean","title":"stripName"},{"location":"api/quadrant/#transform","text":"( method ) Quadrant : transform ( row : any, col : any) -> unknown 2. unknown","title":"transform"},{"location":"api/queue/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Queue : __new () Initializes a new Queue instance. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) Queue : clear () Removes all elements from the queue. contains ( method ) Queue : contains ( value : any) -> True : boolean Checks if the queue contains a specific value. @ param value \u2014 The value to check for. @ return True \u2014 if the value is in the queue, false otherwise. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) Queue : empty () -> True : boolean Checks if the queue is empty. @ return True \u2014 if the queue is empty, false otherwise. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. first integer instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. last integer mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. peek ( method ) Queue : peek () -> The : any Returns the element at the start of the queue without removing it. @ return The \u2014 value at the start of the queue. pop ( method ) Queue : pop () -> The : any Removes and returns the element from the start of the queue. @ return The \u2014 value at the start of the queue. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. push ( method ) Queue : push ( value : any) Adds an element to the end of the queue. @ param value \u2014 The value to be added to the queue. queue table remove ( method ) Queue : remove ( value : any) -> True : boolean Removes the first occurrence of the specified value from the queue. @ param value \u2014 The value to be removed from the queue. @ return True \u2014 if the value was removed, false otherwise. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table size ( method ) Queue : size () -> The : number Returns the number of elements in the queue. @ return The \u2014 size of the queue. stripName boolean","title":"queue"},{"location":"api/queue/#__call","text":"function","title":"__call"},{"location":"api/queue/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/queue/#__new","text":"( method ) Queue : __new () Initializes a new Queue instance.","title":"__new"},{"location":"api/queue/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/queue/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/queue/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/queue/#clear","text":"( method ) Queue : clear () Removes all elements from the queue.","title":"clear"},{"location":"api/queue/#contains","text":"( method ) Queue : contains ( value : any) -> True : boolean Checks if the queue contains a specific value. @ param value \u2014 The value to check for. @ return True \u2014 if the value is in the queue, false otherwise.","title":"contains"},{"location":"api/queue/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/queue/#empty","text":"( method ) Queue : empty () -> True : boolean Checks if the queue is empty. @ return True \u2014 if the queue is empty, false otherwise.","title":"empty"},{"location":"api/queue/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/queue/#first","text":"integer","title":"first"},{"location":"api/queue/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/queue/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/queue/#last","text":"integer","title":"last"},{"location":"api/queue/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/queue/#peek","text":"( method ) Queue : peek () -> The : any Returns the element at the start of the queue without removing it. @ return The \u2014 value at the start of the queue.","title":"peek"},{"location":"api/queue/#pop","text":"( method ) Queue : pop () -> The : any Removes and returns the element from the start of the queue. @ return The \u2014 value at the start of the queue.","title":"pop"},{"location":"api/queue/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/queue/#push","text":"( method ) Queue : push ( value : any) Adds an element to the end of the queue. @ param value \u2014 The value to be added to the queue.","title":"push"},{"location":"api/queue/#queue","text":"table","title":"queue"},{"location":"api/queue/#remove","text":"( method ) Queue : remove ( value : any) -> True : boolean Removes the first occurrence of the specified value from the queue. @ param value \u2014 The value to be removed from the queue. @ return True \u2014 if the value was removed, false otherwise.","title":"remove"},{"location":"api/queue/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/queue/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/queue/#size","text":"( method ) Queue : size () -> The : number Returns the number of elements in the queue. @ return The \u2014 size of the queue.","title":"size"},{"location":"api/queue/#stripname","text":"boolean","title":"stripName"},{"location":"api/rectmodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RectModification : __new ( placeable : Actor| Cell , topLeft : Vector2, bottomRight : Vector2, fillMode : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown bottomRight Vector2 className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) RectModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fillMode any instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeBoundaryCell ( method ) RectModification : placeBoundaryCell ( attachable : SpectrumAttachable, x : number, y : number) Helper function to place a cell on the boundary placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed Actor | Cell []| nil prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean topLeft Vector2 undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"rectmodification"},{"location":"api/rectmodification/#__call","text":"function","title":"__call"},{"location":"api/rectmodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/rectmodification/#__new","text":"( method ) RectModification : __new ( placeable : Actor| Cell , topLeft : Vector2, bottomRight : Vector2, fillMode : any)","title":"__new"},{"location":"api/rectmodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/rectmodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/rectmodification/#bottomright","text":"Vector2","title":"bottomRight"},{"location":"api/rectmodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/rectmodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/rectmodification/#execute","text":"( method ) RectModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"api/rectmodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/rectmodification/#fillmode","text":"any","title":"fillMode"},{"location":"api/rectmodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/rectmodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/rectmodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/rectmodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/rectmodification/#placeboundarycell","text":"( method ) RectModification : placeBoundaryCell ( attachable : SpectrumAttachable, x : number, y : number) Helper function to place a cell on the boundary","title":"placeBoundaryCell"},{"location":"api/rectmodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/rectmodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/rectmodification/#placed","text":"Actor | Cell []| nil","title":"placed"},{"location":"api/rectmodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/rectmodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/rectmodification/#removed","text":"table","title":"removed"},{"location":"api/rectmodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/rectmodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/rectmodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/rectmodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/rectmodification/#topleft","text":"Vector2","title":"topLeft"},{"location":"api/rectmodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/recttool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RectTool : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) RectTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) RectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) RectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) RectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) RectTool : update ( dt : number, editor : Editor)","title":"recttool"},{"location":"api/recttool/#__call","text":"function","title":"__call"},{"location":"api/recttool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/recttool/#__new","text":"( method ) RectTool : __new ()","title":"__new"},{"location":"api/recttool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/recttool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/recttool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/recttool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/recttool/#draw","text":"( method ) RectTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/recttool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/recttool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/recttool/#getcurrentrect","text":"( method ) RectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"api/recttool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/recttool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/recttool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/recttool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/recttool/#mouseclicked","text":"( method ) RectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"api/recttool/#mousereleased","text":"( method ) RectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"api/recttool/#origin","text":"Vector2","title":"origin"},{"location":"api/recttool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/recttool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/recttool/#second","text":"Vector2","title":"second"},{"location":"api/recttool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/recttool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/recttool/#stripname","text":"boolean","title":"stripName"},{"location":"api/recttool/#update","text":"( method ) RectTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"api/rng/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) RNG : __new ( seed : any) Initializes a new RNG instance. @ param seed \u2014 The seed for the RNG (optional). _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown carrier integer className string A unique name for this class. By convention this should match the annotation name you use. clone ( method ) RNG : clone () -> The : RNG Clones the RNG. @ return The \u2014 cloned RNG. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getNormal ( method ) RNG : getNormal ( mean : number, stddev : number) -> normal : number Gets a normally distributed random number with the given mean and standard deviation. @ param mean \u2014 The mean (optional, default is 0). @ param stddev \u2014 The standard deviation (optional, default is 1). @ return normal \u2014 A normally distributed random number. getPercentage ( method ) RNG : getPercentage () -> percentage : number Gets a random percentage between 1 and 100. @ return percentage \u2014 A random percentage. getSeed ( method ) RNG : getSeed () -> seed : any Gets the current seed. @ return seed \u2014 The current seed. getState ( method ) RNG : getState () -> The : table Gets the current state of the RNG. @ return The \u2014 current state. getUniform ( method ) RNG : getUniform () -> uniform : number Gets a uniform random number between 0 and 1. @ return uniform \u2014 A uniform random number. getUniformInt ( method ) RNG : getUniformInt ( lowerBound : number, upperBound : number) -> uniformInteger : number Gets a uniform random integer between lowerBound and upperBound. @ param lowerBound \u2014 The lower bound. @ param upperBound \u2014 The upper bound. @ return uniformInteger \u2014 A uniform random integer. getWeightedValue ( method ) RNG : getWeightedValue ( tbl : table<< K >, < V >>) -> value : < V> Gets a random value from a weighted table. @ param tbl \u2014 The weighted table. @ return value \u2014 The selected value. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. random ( method ) RNG : random ( a : number, b : number) -> A : number Gets a random number. @ param a \u2014 The lower threshold (optional). @ param b \u2014 The upper threshold (optional). @ return A \u2014 random number. randomseed function seed string serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setSeed ( method ) RNG : setSeed ( seed : string) Sets the seed for the RNG. @ param seed \u2014 The seed to set (optional). setState ( method ) RNG : setState ( stateTable : table) Sets the state of the RNG. @ param stateTable \u2014 The state to set. state0 integer state1 integer state2 integer stripName boolean","title":"rng"},{"location":"api/rng/#__call","text":"function","title":"__call"},{"location":"api/rng/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/rng/#__new","text":"( method ) RNG : __new ( seed : any) Initializes a new RNG instance. @ param seed \u2014 The seed for the RNG (optional).","title":"__new"},{"location":"api/rng/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/rng/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/rng/#carrier","text":"integer","title":"carrier"},{"location":"api/rng/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/rng/#clone","text":"( method ) RNG : clone () -> The : RNG Clones the RNG. @ return The \u2014 cloned RNG.","title":"clone"},{"location":"api/rng/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/rng/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/rng/#getnormal","text":"( method ) RNG : getNormal ( mean : number, stddev : number) -> normal : number Gets a normally distributed random number with the given mean and standard deviation. @ param mean \u2014 The mean (optional, default is 0). @ param stddev \u2014 The standard deviation (optional, default is 1). @ return normal \u2014 A normally distributed random number.","title":"getNormal"},{"location":"api/rng/#getpercentage","text":"( method ) RNG : getPercentage () -> percentage : number Gets a random percentage between 1 and 100. @ return percentage \u2014 A random percentage.","title":"getPercentage"},{"location":"api/rng/#getseed","text":"( method ) RNG : getSeed () -> seed : any Gets the current seed. @ return seed \u2014 The current seed.","title":"getSeed"},{"location":"api/rng/#getstate","text":"( method ) RNG : getState () -> The : table Gets the current state of the RNG. @ return The \u2014 current state.","title":"getState"},{"location":"api/rng/#getuniform","text":"( method ) RNG : getUniform () -> uniform : number Gets a uniform random number between 0 and 1. @ return uniform \u2014 A uniform random number.","title":"getUniform"},{"location":"api/rng/#getuniformint","text":"( method ) RNG : getUniformInt ( lowerBound : number, upperBound : number) -> uniformInteger : number Gets a uniform random integer between lowerBound and upperBound. @ param lowerBound \u2014 The lower bound. @ param upperBound \u2014 The upper bound. @ return uniformInteger \u2014 A uniform random integer.","title":"getUniformInt"},{"location":"api/rng/#getweightedvalue","text":"( method ) RNG : getWeightedValue ( tbl : table<< K >, < V >>) -> value : < V> Gets a random value from a weighted table. @ param tbl \u2014 The weighted table. @ return value \u2014 The selected value.","title":"getWeightedValue"},{"location":"api/rng/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/rng/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/rng/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/rng/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/rng/#random","text":"( method ) RNG : random ( a : number, b : number) -> A : number Gets a random number. @ param a \u2014 The lower threshold (optional). @ param b \u2014 The upper threshold (optional). @ return A \u2014 random number.","title":"random"},{"location":"api/rng/#randomseed","text":"function","title":"randomseed"},{"location":"api/rng/#seed","text":"string","title":"seed"},{"location":"api/rng/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/rng/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/rng/#setseed","text":"( method ) RNG : setSeed ( seed : string) Sets the seed for the RNG. @ param seed \u2014 The seed to set (optional).","title":"setSeed"},{"location":"api/rng/#setstate","text":"( method ) RNG : setState ( stateTable : table) Sets the state of the RNG. @ param stateTable \u2014 The state to set.","title":"setState"},{"location":"api/rng/#state0","text":"integer","title":"state0"},{"location":"api/rng/#state1","text":"integer","title":"state1"},{"location":"api/rng/#state2","text":"integer","title":"state2"},{"location":"api/rng/#stripname","text":"boolean","title":"stripName"},{"location":"api/row/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Row : __new ( depth : any, startSlope : any, endSlope : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. depth integer deserialize function Object. deserialize ( data : any) -> unknown eachTile ( method ) Row : eachTile () -> function endSlope Fraction extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) Row : next () -> Row prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. roundTiesDown function Row. roundTiesDown ( n : any) -> integer roundTiesUp function Row. roundTiesUp ( n : any) -> integer serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table startSlope Fraction stripName boolean","title":"row"},{"location":"api/row/#__call","text":"function","title":"__call"},{"location":"api/row/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/row/#__new","text":"( method ) Row : __new ( depth : any, startSlope : any, endSlope : any)","title":"__new"},{"location":"api/row/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/row/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/row/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/row/#depth","text":"integer","title":"depth"},{"location":"api/row/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/row/#eachtile","text":"( method ) Row : eachTile () -> function","title":"eachTile"},{"location":"api/row/#endslope","text":"Fraction","title":"endSlope"},{"location":"api/row/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/row/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/row/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/row/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/row/#next","text":"( method ) Row : next () -> Row","title":"next"},{"location":"api/row/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/row/#roundtiesdown","text":"function Row. roundTiesDown ( n : any) -> integer","title":"roundTiesDown"},{"location":"api/row/#roundtiesup","text":"function Row. roundTiesUp ( n : any) -> integer","title":"roundTiesUp"},{"location":"api/row/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/row/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/row/#startslope","text":"Fraction","title":"startSlope"},{"location":"api/row/#stripname","text":"boolean","title":"stripName"},{"location":"api/scheduler/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Scheduler : __new () Constructor for the Scheduler class. Initializes an empty queue and sets the actCount to 0. _serializationBlacklist table add ( method ) Scheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) Scheduler : empty () extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. has ( method ) Scheduler : has ( actor : Actor) -> hasActor : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return hasActor \u2014 True if the actor is in the scheduler, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) Scheduler : next () -> next : Actor Returns the next actor to act. @ return next \u2014 The actor who is next to act. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) Scheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean timestamp ( method ) Scheduler : timestamp ()","title":"scheduler"},{"location":"api/scheduler/#__call","text":"function","title":"__call"},{"location":"api/scheduler/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/scheduler/#__new","text":"( method ) Scheduler : __new () Constructor for the Scheduler class. Initializes an empty queue and sets the actCount to 0.","title":"__new"},{"location":"api/scheduler/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/scheduler/#add","text":"( method ) Scheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add.","title":"add"},{"location":"api/scheduler/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/scheduler/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/scheduler/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/scheduler/#empty","text":"( method ) Scheduler : empty ()","title":"empty"},{"location":"api/scheduler/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/scheduler/#has","text":"( method ) Scheduler : has ( actor : Actor) -> hasActor : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return hasActor \u2014 True if the actor is in the scheduler, false otherwise.","title":"has"},{"location":"api/scheduler/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/scheduler/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/scheduler/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/scheduler/#next","text":"( method ) Scheduler : next () -> next : Actor Returns the next actor to act. @ return next \u2014 The actor who is next to act.","title":"next"},{"location":"api/scheduler/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/scheduler/#remove","text":"( method ) Scheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove.","title":"remove"},{"location":"api/scheduler/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/scheduler/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/scheduler/#stripname","text":"boolean","title":"stripName"},{"location":"api/scheduler/#timestamp","text":"( method ) Scheduler : timestamp ()","title":"timestamp"},{"location":"api/selectiongrid/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props SelectionGridProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"selectiongrid"},{"location":"api/selectiongrid/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/selectiongrid/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/selectiongrid/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/selectiongrid/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/selectiongrid/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/selectiongrid/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/selectiongrid/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/selectiongrid/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/selectiongrid/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/selectiongrid/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/selectiongrid/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/selectiongrid/#props","text":"SelectionGridProps","title":"props"},{"location":"api/selectiongrid/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/selectiongrid/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/selectiongrid/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/selectiongridinit/","text":"","title":"selectiongridinit"},{"location":"api/selectiongridprops/","text":"_internal Inky .Props.Internal display Display elements TileElement [] endRange number filtered number [] onSelect function overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeables Actor | Cell [] selected Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. size Vector2 the final size of a tile in editor startRange number","title":"selectiongridprops"},{"location":"api/selectiongridprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/selectiongridprops/#display","text":"Display","title":"display"},{"location":"api/selectiongridprops/#elements","text":"TileElement []","title":"elements"},{"location":"api/selectiongridprops/#endrange","text":"number","title":"endRange"},{"location":"api/selectiongridprops/#filtered","text":"number []","title":"filtered"},{"location":"api/selectiongridprops/#onselect","text":"function","title":"onSelect"},{"location":"api/selectiongridprops/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"api/selectiongridprops/#placeables","text":"Actor | Cell []","title":"placeables"},{"location":"api/selectiongridprops/#selected","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"selected"},{"location":"api/selectiongridprops/#size","text":"Vector2 the final size of a tile in editor","title":"size"},{"location":"api/selectiongridprops/#startrange","text":"number","title":"startRange"},{"location":"api/selectionpanel/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props SelectionPanelProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"selectionpanel"},{"location":"api/selectionpanel/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/selectionpanel/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/selectionpanel/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/selectionpanel/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/selectionpanel/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/selectionpanel/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/selectionpanel/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/selectionpanel/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/selectionpanel/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/selectionpanel/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/selectionpanel/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/selectionpanel/#props","text":"SelectionPanelProps","title":"props"},{"location":"api/selectionpanel/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/selectionpanel/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/selectionpanel/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/selectionpanelinit/","text":"","title":"selectionpanelinit"},{"location":"api/selectionpanelprops/","text":"_internal Inky .Props.Internal display Display editor Editor filtered number [] overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeables Actor | Cell [] selected Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. selectedText love .Text Drawable text. Open in Browser size Vector2","title":"selectionpanelprops"},{"location":"api/selectionpanelprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/selectionpanelprops/#display","text":"Display","title":"display"},{"location":"api/selectionpanelprops/#editor","text":"Editor","title":"editor"},{"location":"api/selectionpanelprops/#filtered","text":"number []","title":"filtered"},{"location":"api/selectionpanelprops/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"api/selectionpanelprops/#placeables","text":"Actor | Cell []","title":"placeables"},{"location":"api/selectionpanelprops/#selected","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"selected"},{"location":"api/selectionpanelprops/#selectedtext","text":"love .Text Drawable text. Open in Browser","title":"selectedText"},{"location":"api/selectionpanelprops/#size","text":"Vector2","title":"size"},{"location":"api/selecttool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SelectTool : __new () _serializationBlacklist table actors SparseMap the copied actors from the attachable adopt ( method ) Object : adopt ( o : any) -> unknown cells Grid the copied cells from the attachable className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) SelectTool : copy ( attachable : SpectrumAttachable) deserialize function Object. deserialize ( data : any) -> unknown dragOrigin Vector2 where we started dragging from when moving a pasted selection dragging boolean whether we're dragging, either actively creating a selection or pasting one draw ( method ) SelectTool : draw ( editor : Editor, display : Display) drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getCurrentRect ( method ) SelectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) SelectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. mousereleased ( method ) SelectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked. origin Vector2 location of the first point in a selection (creating or pasted) overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) paste ( method ) SelectTool : paste () pasted boolean whether a selection is currently pasted/active prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. second Vector2 location of the other point in a selection (creating or pasted) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) SelectTool : update ( dt : number, editor : Editor)","title":"selecttool"},{"location":"api/selecttool/#__call","text":"function","title":"__call"},{"location":"api/selecttool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/selecttool/#__new","text":"( method ) SelectTool : __new ()","title":"__new"},{"location":"api/selecttool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/selecttool/#actors","text":"SparseMap the copied actors from the attachable","title":"actors"},{"location":"api/selecttool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/selecttool/#cells","text":"Grid the copied cells from the attachable","title":"cells"},{"location":"api/selecttool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/selecttool/#copy","text":"( method ) SelectTool : copy ( attachable : SpectrumAttachable)","title":"copy"},{"location":"api/selecttool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/selecttool/#dragorigin","text":"Vector2 where we started dragging from when moving a pasted selection","title":"dragOrigin"},{"location":"api/selecttool/#dragging","text":"boolean whether we're dragging, either actively creating a selection or pasting one","title":"dragging"},{"location":"api/selecttool/#draw","text":"( method ) SelectTool : draw ( editor : Editor, display : Display)","title":"draw"},{"location":"api/selecttool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/selecttool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/selecttool/#getcurrentrect","text":"( method ) SelectTool : getCurrentRect () -> topleftx : number ? 2. toplefty : number ? 3. bottomrightx : number ? 4. bottomrighty : number ? Returns the four corners of the current rect.","title":"getCurrentRect"},{"location":"api/selecttool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/selecttool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/selecttool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/selecttool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/selecttool/#mouseclicked","text":"( method ) SelectTool : mouseclicked ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mouseclicked"},{"location":"api/selecttool/#mousereleased","text":"( method ) SelectTool : mousereleased ( editor : Editor, attachable : SpectrumAttachable, x : integer, y : integer) @ param x \u2014 The cell coordinate clicked. @ param y \u2014 The cell coordinate clicked.","title":"mousereleased"},{"location":"api/selecttool/#origin","text":"Vector2 location of the first point in a selection (creating or pasted)","title":"origin"},{"location":"api/selecttool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/selecttool/#paste","text":"( method ) SelectTool : paste ()","title":"paste"},{"location":"api/selecttool/#pasted","text":"boolean whether a selection is currently pasted/active","title":"pasted"},{"location":"api/selecttool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/selecttool/#second","text":"Vector2 location of the other point in a selection (creating or pasted)","title":"second"},{"location":"api/selecttool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/selecttool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/selecttool/#stripname","text":"boolean","title":"stripName"},{"location":"api/selecttool/#update","text":"( method ) SelectTool : update ( dt : number, editor : Editor)","title":"update"},{"location":"api/sensescomponent/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table actors ActorStorage An actor storage with the actors the player is aware of. adopt ( method ) Object : adopt ( o : any) -> unknown cells SparseGrid A sparse grid of cells representing the portion of the map the actor's senses reveal. checkRequirements ( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown explored SparseGrid A sparse grid of cells the actor's senses have previously revealed. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. initialize ( method ) SensesComponent : initialize ( actor : Actor) instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string Each component prototype MUST have a unique name! owner Actor The Actor this component is composing. This is set by Actor when a component is added or removed. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table A list of component prototypes the actor must first have, before this can be applied. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unknown SparseMap < Vector2 > Unkown actors are things the player is aware of the location of, but not the components.","title":"sensescomponent"},{"location":"api/sensescomponent/#__call","text":"function","title":"__call"},{"location":"api/sensescomponent/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sensescomponent/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/sensescomponent/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sensescomponent/#actors","text":"ActorStorage An actor storage with the actors the player is aware of.","title":"actors"},{"location":"api/sensescomponent/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sensescomponent/#cells","text":"SparseGrid A sparse grid of cells representing the portion of the map the actor's senses reveal.","title":"cells"},{"location":"api/sensescomponent/#checkrequirements","text":"( method ) Component : checkRequirements ( actor : Actor) -> meetsRequirements : boolean Checks whether an actor has the required components to attach this component. @ param actor \u2014 The actor to check the requirements against. @ return meetsRequirements \u2014 the actor meets all requirements, false otherwise.","title":"checkRequirements"},{"location":"api/sensescomponent/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sensescomponent/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sensescomponent/#explored","text":"SparseGrid A sparse grid of cells the actor's senses have previously revealed.","title":"explored"},{"location":"api/sensescomponent/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sensescomponent/#initialize","text":"( method ) SensesComponent : initialize ( actor : Actor)","title":"initialize"},{"location":"api/sensescomponent/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sensescomponent/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sensescomponent/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sensescomponent/#name","text":"string Each component prototype MUST have a unique name!","title":"name"},{"location":"api/sensescomponent/#owner","text":"Actor The Actor this component is composing. This is set by Actor when a component is added or removed.","title":"owner"},{"location":"api/sensescomponent/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sensescomponent/#requirements","text":"table A list of component prototypes the actor must first have, before this can be applied.","title":"requirements"},{"location":"api/sensescomponent/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sensescomponent/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sensescomponent/#stripname","text":"boolean","title":"stripName"},{"location":"api/sensescomponent/#unknown","text":"SparseMap < Vector2 > Unkown actors are things the player is aware of the location of, but not the components.","title":"unknown"},{"location":"api/sensessystem/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed. afterActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. afterOpacityChanged ( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute. beforeActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. beforeMove ( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. global boolean A system defined global can only be attached to the Game object. It will see all events from all levels. initialize ( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string onActorAdded ( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added. onActorRemoved ( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed. onDescend ( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to. onMove ( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to. onTick ( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to. onTurn ( method ) SensesSystem : onTurn ( level : Level, actor : Actor) onTurnEnd ( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onYield ( method ) SensesSystem : onYield ( level : Level, event : Message) owner Level ? The level that holds this system. postInitialize ( method ) SensesSystem : postInitialize ( level : Level) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements table The message system requires the Senses system. While we don't directly reference it here we do grab data off the Senses component serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table softRequirements string [] A table of optional requirements that ensure proper order if both Systems are attached. stripName boolean triggerRebuild ( method ) SensesSystem : triggerRebuild ( level : any, actor : any)","title":"sensessystem"},{"location":"api/sensessystem/#__call","text":"function","title":"__call"},{"location":"api/sensessystem/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sensessystem/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/sensessystem/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sensessystem/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sensessystem/#afteraction","text":"( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed.","title":"afterAction"},{"location":"api/sensessystem/#afteractions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"afterActions"},{"location":"api/sensessystem/#afteropacitychanged","text":"( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"api/sensessystem/#beforeaction","text":"( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute.","title":"beforeAction"},{"location":"api/sensessystem/#beforeactions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"beforeActions"},{"location":"api/sensessystem/#beforemove","text":"( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to.","title":"beforeMove"},{"location":"api/sensessystem/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sensessystem/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sensessystem/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sensessystem/#global","text":"boolean A system defined global can only be attached to the Game object. It will see all events from all levels.","title":"global"},{"location":"api/sensessystem/#initialize","text":"( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to.","title":"initialize"},{"location":"api/sensessystem/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sensessystem/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sensessystem/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sensessystem/#name","text":"string","title":"name"},{"location":"api/sensessystem/#onactoradded","text":"( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added.","title":"onActorAdded"},{"location":"api/sensessystem/#onactorremoved","text":"( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed.","title":"onActorRemoved"},{"location":"api/sensessystem/#ondescend","text":"( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to.","title":"onDescend"},{"location":"api/sensessystem/#onmove","text":"( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to.","title":"onMove"},{"location":"api/sensessystem/#ontick","text":"( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to.","title":"onTick"},{"location":"api/sensessystem/#onturn","text":"( method ) SensesSystem : onTurn ( level : Level, actor : Actor)","title":"onTurn"},{"location":"api/sensessystem/#onturnend","text":"( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurnEnd"},{"location":"api/sensessystem/#onyield","text":"( method ) SensesSystem : onYield ( level : Level, event : Message)","title":"onYield"},{"location":"api/sensessystem/#owner","text":"Level ? The level that holds this system.","title":"owner"},{"location":"api/sensessystem/#postinitialize","text":"( method ) SensesSystem : postInitialize ( level : Level)","title":"postInitialize"},{"location":"api/sensessystem/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sensessystem/#requirements","text":"table The message system requires the Senses system. While we don't directly reference it here we do grab data off the Senses component","title":"requirements"},{"location":"api/sensessystem/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sensessystem/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sensessystem/#softrequirements","text":"string [] A table of optional requirements that ensure proper order if both Systems are attached.","title":"softRequirements"},{"location":"api/sensessystem/#stripname","text":"boolean","title":"stripName"},{"location":"api/sensessystem/#triggerrebuild","text":"( method ) SensesSystem : triggerRebuild ( level : any, actor : any)","title":"triggerRebuild"},{"location":"api/sensestracker/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SensesTracker : __new () _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. createSensedMaps ( method ) SensesTracker : createSensedMaps ( level : Level, curActor : Actor| nil ) deserialize function Object. deserialize ( data : any) -> unknown exploredCells SparseGrid A grid tracking cells that have been explored by any actor with a PlayerController. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. otherSensedActors SparseMap A map tracking actors sensed by other actors (excluding the current actor). otherSensedCells SparseGrid A grid tracking cells sensed by other actors (excluding the current actor). passableCallback ( method ) SensesTracker : passableCallback () -> function prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean totalSensedActors SparseMap A map tracking all actors sensed by the current actor or others.","title":"sensestracker"},{"location":"api/sensestracker/#__call","text":"function","title":"__call"},{"location":"api/sensestracker/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sensestracker/#__new","text":"( method ) SensesTracker : __new ()","title":"__new"},{"location":"api/sensestracker/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sensestracker/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sensestracker/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sensestracker/#createsensedmaps","text":"( method ) SensesTracker : createSensedMaps ( level : Level, curActor : Actor| nil )","title":"createSensedMaps"},{"location":"api/sensestracker/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sensestracker/#exploredcells","text":"SparseGrid A grid tracking cells that have been explored by any actor with a PlayerController.","title":"exploredCells"},{"location":"api/sensestracker/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sensestracker/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sensestracker/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sensestracker/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sensestracker/#othersensedactors","text":"SparseMap A map tracking actors sensed by other actors (excluding the current actor).","title":"otherSensedActors"},{"location":"api/sensestracker/#othersensedcells","text":"SparseGrid A grid tracking cells sensed by other actors (excluding the current actor).","title":"otherSensedCells"},{"location":"api/sensestracker/#passablecallback","text":"( method ) SensesTracker : passableCallback () -> function","title":"passableCallback"},{"location":"api/sensestracker/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sensestracker/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sensestracker/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sensestracker/#stripname","text":"boolean","title":"stripName"},{"location":"api/sensestracker/#totalsensedactors","text":"SparseMap A map tracking all actors sensed by the current actor or others.","title":"totalSensedActors"},{"location":"api/simplescheduler/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SimpleScheduler : __new () Constructor for the SimpleScheduler class. Initializes an empty queue and sets the round count to 0. _serializationBlacklist table add ( method ) SimpleScheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. currentQueue Queue A basic FIFO (First In, First Out) queue implementation. deserialize function Object. deserialize ( data : any) -> unknown empty ( method ) SimpleScheduler : empty () -> boolean extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. has ( method ) SimpleScheduler : has ( actor : Actor) -> True : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return True \u2014 if the actor is in the scheduler, false otherwise. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. next ( method ) SimpleScheduler : next () -> The : Actor Returns the next actor to act. Moves the actor to the next queue and returns the actor. If the current queue is empty, it swaps the current and next queues and increments the round count. @ return The \u2014 actor who is next to act. nextQueue Queue A basic FIFO (First In, First Out) queue implementation. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SimpleScheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove. roundCount integer serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean swapQueues ( method ) SimpleScheduler : swapQueues () Swaps the current and next queues. timestamp ( method ) SimpleScheduler : timestamp () -> The : number Returns the current round count as a timestamp. @ return The \u2014 current round count.","title":"simplescheduler"},{"location":"api/simplescheduler/#__call","text":"function","title":"__call"},{"location":"api/simplescheduler/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/simplescheduler/#__new","text":"( method ) SimpleScheduler : __new () Constructor for the SimpleScheduler class. Initializes an empty queue and sets the round count to 0.","title":"__new"},{"location":"api/simplescheduler/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/simplescheduler/#add","text":"( method ) SimpleScheduler : add ( actor : string| Actor ) Adds an actor to the scheduler. @ param actor \u2014 The actor, or special tick, to add.","title":"add"},{"location":"api/simplescheduler/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/simplescheduler/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/simplescheduler/#currentqueue","text":"Queue A basic FIFO (First In, First Out) queue implementation.","title":"currentQueue"},{"location":"api/simplescheduler/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/simplescheduler/#empty","text":"( method ) SimpleScheduler : empty () -> boolean","title":"empty"},{"location":"api/simplescheduler/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/simplescheduler/#has","text":"( method ) SimpleScheduler : has ( actor : Actor) -> True : boolean Checks if an actor is in the scheduler. @ param actor \u2014 The actor to check. @ return True \u2014 if the actor is in the scheduler, false otherwise.","title":"has"},{"location":"api/simplescheduler/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/simplescheduler/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/simplescheduler/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/simplescheduler/#next","text":"( method ) SimpleScheduler : next () -> The : Actor Returns the next actor to act. Moves the actor to the next queue and returns the actor. If the current queue is empty, it swaps the current and next queues and increments the round count. @ return The \u2014 actor who is next to act.","title":"next"},{"location":"api/simplescheduler/#nextqueue","text":"Queue A basic FIFO (First In, First Out) queue implementation.","title":"nextQueue"},{"location":"api/simplescheduler/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/simplescheduler/#remove","text":"( method ) SimpleScheduler : remove ( actor : Actor) Removes an actor from the scheduler. @ param actor \u2014 The actor to remove.","title":"remove"},{"location":"api/simplescheduler/#roundcount","text":"integer","title":"roundCount"},{"location":"api/simplescheduler/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/simplescheduler/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/simplescheduler/#stripname","text":"boolean","title":"stripName"},{"location":"api/simplescheduler/#swapqueues","text":"( method ) SimpleScheduler : swapQueues () Swaps the current and next queues.","title":"swapQueues"},{"location":"api/simplescheduler/#timestamp","text":"( method ) SimpleScheduler : timestamp () -> The : number Returns the current round count as a timestamp. @ return The \u2014 current round count.","title":"timestamp"},{"location":"api/sparsearray/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseArray : __new () Constructor for SparseArray. _serializationBlacklist table add ( method ) SparseArray : add ( item : any) -> index : number Adds an item to the sparse array. @ param item \u2014 The item to add. @ return index \u2014 The index where the item was added. adopt ( method ) Object : adopt ( o : any) -> unknown bake ( method ) SparseArray : bake () -> The : table Bakes the sparse array into a dense array. This removes all nil values and reassigns indices. @ return The \u2014 new dense array. className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseArray : clear () Clears the sparse array. data table Holds the actual values debugPrint ( method ) SparseArray : debugPrint () Prints the sparse array for debugging purposes. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. freeIndices table Tracks free indices get ( method ) SparseArray : get ( index : number) -> The : any Gets an item from the sparse array. @ param index \u2014 The index of the item. @ return The \u2014 item at the specified index, or nil if none exists. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SparseArray : remove ( index : number) Removes an item from the sparse array. @ param index \u2014 The index to remove the item from. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"sparsearray"},{"location":"api/sparsearray/#__call","text":"function","title":"__call"},{"location":"api/sparsearray/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sparsearray/#__new","text":"( method ) SparseArray : __new () Constructor for SparseArray.","title":"__new"},{"location":"api/sparsearray/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sparsearray/#add","text":"( method ) SparseArray : add ( item : any) -> index : number Adds an item to the sparse array. @ param item \u2014 The item to add. @ return index \u2014 The index where the item was added.","title":"add"},{"location":"api/sparsearray/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sparsearray/#bake","text":"( method ) SparseArray : bake () -> The : table Bakes the sparse array into a dense array. This removes all nil values and reassigns indices. @ return The \u2014 new dense array.","title":"bake"},{"location":"api/sparsearray/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sparsearray/#clear","text":"( method ) SparseArray : clear () Clears the sparse array.","title":"clear"},{"location":"api/sparsearray/#data","text":"table Holds the actual values","title":"data"},{"location":"api/sparsearray/#debugprint","text":"( method ) SparseArray : debugPrint () Prints the sparse array for debugging purposes.","title":"debugPrint"},{"location":"api/sparsearray/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sparsearray/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sparsearray/#freeindices","text":"table Tracks free indices","title":"freeIndices"},{"location":"api/sparsearray/#get","text":"( method ) SparseArray : get ( index : number) -> The : any Gets an item from the sparse array. @ param index \u2014 The index of the item. @ return The \u2014 item at the specified index, or nil if none exists.","title":"get"},{"location":"api/sparsearray/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sparsearray/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sparsearray/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sparsearray/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sparsearray/#remove","text":"( method ) SparseArray : remove ( index : number) Removes an item from the sparse array. @ param index \u2014 The index to remove the item from.","title":"remove"},{"location":"api/sparsearray/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sparsearray/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sparsearray/#stripname","text":"boolean","title":"stripName"},{"location":"api/sparsegrid/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseGrid : __new () -> SparseGrid The constructor for the 'SparseGrid' class. Initializes the sparse grid with an empty data table. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. clear ( method ) SparseGrid : clear () Clears all values in the sparse grid. data table deserialize function Object. deserialize ( data : any) -> unknown each ( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) SparseGrid : get ( x : integer, y : integer) -> value : any Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if not set. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table set ( method ) SparseGrid : set ( x : integer, y : integer, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set. stripName boolean","title":"sparsegrid"},{"location":"api/sparsegrid/#__call","text":"function","title":"__call"},{"location":"api/sparsegrid/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sparsegrid/#__new","text":"( method ) SparseGrid : __new () -> SparseGrid The constructor for the 'SparseGrid' class. Initializes the sparse grid with an empty data table.","title":"__new"},{"location":"api/sparsegrid/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sparsegrid/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sparsegrid/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sparsegrid/#clear","text":"( method ) SparseGrid : clear () Clears all values in the sparse grid.","title":"clear"},{"location":"api/sparsegrid/#data","text":"table","title":"data"},{"location":"api/sparsegrid/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sparsegrid/#each","text":"( method ) SparseGrid : each () -> iter : fun ( x : integer, y : integer, V : any) Iterator function for the SparseGrid. Iterates over all entries in the sparse grid, returning the coordinates and value for each entry. @ return iter \u2014 An iterator function that returns the x-coordinate, y-coordinate, and value for each entry.","title":"each"},{"location":"api/sparsegrid/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sparsegrid/#get","text":"( method ) SparseGrid : get ( x : integer, y : integer) -> value : any Gets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return value \u2014 The value at the specified coordinates, or nil if not set.","title":"get"},{"location":"api/sparsegrid/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sparsegrid/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sparsegrid/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sparsegrid/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sparsegrid/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sparsegrid/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sparsegrid/#set","text":"( method ) SparseGrid : set ( x : integer, y : integer, value : any) Sets the value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to set.","title":"set"},{"location":"api/sparsegrid/#stripname","text":"boolean","title":"stripName"},{"location":"api/sparsemap/","text":"__call function __count integer __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SparseMap : __new () The constructor for the 'SparseMap' class. Initializes the map and counters. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. contains ( method ) SparseMap : contains ( value : any) -> containsValue : boolean Checks where the specified value exists within the map. count ( method ) SparseMap : count () -> The : number Returns the total number of entries in the sparse map. @ return The \u2014 total number of entries. countCell ( method ) SparseMap : countCell ( x : integer, y : integer) -> The : number Returns the number of values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 number of values stored at the specified coordinates. deserialize function Object. deserialize ( data : any) -> unknown each ( method ) SparseMap : each () -> An : function Returns an iterator over all entries in the sparse map. @ return An \u2014 iterator that returns the value, coordinates, and hash for each entry. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. get ( method ) SparseMap : get ( x : integer, y : integer) -> elements : table Gets the values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return elements \u2014 A set[actor]=bool of values stored at the specified coordinates, or an empty table if none. getByHash ( method ) SparseMap : getByHash ( hash : number) -> A : table Gets the values stored at the specified hash. @ param hash \u2014 The hash value of the coordinates. @ return A \u2014 table of values stored at the specified hash, or an empty table if none. has ( method ) SparseMap : has ( x : integer, y : integer, value : any) -> True : boolean Checks whether the specified value is stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to check. @ return True \u2014 if the value is stored at the specified coordinates, false otherwise. insert ( method ) SparseMap : insert ( x : integer, y : integer, val : any) Inserts a value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to insert. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. list table map table mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. remove ( method ) SparseMap : remove ( x : integer, y : integer, val : any) -> True : boolean Removes a value from the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to remove. @ return True \u2014 if the value was successfully removed, false otherwise. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"sparsemap"},{"location":"api/sparsemap/#__call","text":"function","title":"__call"},{"location":"api/sparsemap/#__count","text":"integer","title":"__count"},{"location":"api/sparsemap/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/sparsemap/#__new","text":"( method ) SparseMap : __new () The constructor for the 'SparseMap' class. Initializes the map and counters.","title":"__new"},{"location":"api/sparsemap/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/sparsemap/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/sparsemap/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/sparsemap/#contains","text":"( method ) SparseMap : contains ( value : any) -> containsValue : boolean Checks where the specified value exists within the map.","title":"contains"},{"location":"api/sparsemap/#count","text":"( method ) SparseMap : count () -> The : number Returns the total number of entries in the sparse map. @ return The \u2014 total number of entries.","title":"count"},{"location":"api/sparsemap/#countcell","text":"( method ) SparseMap : countCell ( x : integer, y : integer) -> The : number Returns the number of values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return The \u2014 number of values stored at the specified coordinates.","title":"countCell"},{"location":"api/sparsemap/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/sparsemap/#each","text":"( method ) SparseMap : each () -> An : function Returns an iterator over all entries in the sparse map. @ return An \u2014 iterator that returns the value, coordinates, and hash for each entry.","title":"each"},{"location":"api/sparsemap/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/sparsemap/#get","text":"( method ) SparseMap : get ( x : integer, y : integer) -> elements : table Gets the values stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ return elements \u2014 A set[actor]=bool of values stored at the specified coordinates, or an empty table if none.","title":"get"},{"location":"api/sparsemap/#getbyhash","text":"( method ) SparseMap : getByHash ( hash : number) -> A : table Gets the values stored at the specified hash. @ param hash \u2014 The hash value of the coordinates. @ return A \u2014 table of values stored at the specified hash, or an empty table if none.","title":"getByHash"},{"location":"api/sparsemap/#has","text":"( method ) SparseMap : has ( x : integer, y : integer, value : any) -> True : boolean Checks whether the specified value is stored at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param value \u2014 The value to check. @ return True \u2014 if the value is stored at the specified coordinates, false otherwise.","title":"has"},{"location":"api/sparsemap/#insert","text":"( method ) SparseMap : insert ( x : integer, y : integer, val : any) Inserts a value at the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to insert.","title":"insert"},{"location":"api/sparsemap/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/sparsemap/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/sparsemap/#list","text":"table","title":"list"},{"location":"api/sparsemap/#map","text":"table","title":"map"},{"location":"api/sparsemap/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/sparsemap/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/sparsemap/#remove","text":"( method ) SparseMap : remove ( x : integer, y : integer, val : any) -> True : boolean Removes a value from the specified coordinates. @ param x \u2014 The x-coordinate. @ param y \u2014 The y-coordinate. @ param val \u2014 The value to remove. @ return True \u2014 if the value was successfully removed, false otherwise.","title":"remove"},{"location":"api/sparsemap/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/sparsemap/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/sparsemap/#stripname","text":"boolean","title":"stripName"},{"location":"api/spectrum/","text":"table spectrum.Camera unknown spectrum.Display unknown spectrum.GameState unknown spectrum.Keybinding unknown spectrum.LevelState unknown spectrum.SensesTracker unknown spectrum.SpriteAtlas unknown spectrum.StateManager unknown spectrum.path unknown spectrum.require function spectrum. require ( p : any) -> unknown 2. nil","title":"spectrum"},{"location":"api/spectrum/#spectrumcamera","text":"unknown","title":"spectrum.Camera"},{"location":"api/spectrum/#spectrumdisplay","text":"unknown","title":"spectrum.Display"},{"location":"api/spectrum/#spectrumgamestate","text":"unknown","title":"spectrum.GameState"},{"location":"api/spectrum/#spectrumkeybinding","text":"unknown","title":"spectrum.Keybinding"},{"location":"api/spectrum/#spectrumlevelstate","text":"unknown","title":"spectrum.LevelState"},{"location":"api/spectrum/#spectrumsensestracker","text":"unknown","title":"spectrum.SensesTracker"},{"location":"api/spectrum/#spectrumspriteatlas","text":"unknown","title":"spectrum.SpriteAtlas"},{"location":"api/spectrum/#spectrumstatemanager","text":"unknown","title":"spectrum.StateManager"},{"location":"api/spectrum/#spectrumpath","text":"unknown","title":"spectrum.path"},{"location":"api/spectrum/#spectrumrequire","text":"function spectrum. require ( p : any) -> unknown 2. nil","title":"spectrum.require"},{"location":"api/spectrumattachable/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table addActor fun ( self : any, actor : Actor) adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. debug boolean deserialize function Object. deserialize ( data : any) -> unknown eachActor fun ( self : any): fun () eachActorAt fun ( self : any, x : integer, y : integer): fun () eachCell fun ( self : any): fun () extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getActorsAt fun ( self : any, x : integer, y : integer) getCell fun ( self : any, x : integer, y : integer): Cell inBounds fun ( self : any, x : integer, y : integer) instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor fun ( self : any, actor : Actor) serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table setCell fun ( self : any, x : integer, y : integer, cell : Cell| nil ) stripName boolean","title":"spectrumattachable"},{"location":"api/spectrumattachable/#__call","text":"function","title":"__call"},{"location":"api/spectrumattachable/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/spectrumattachable/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/spectrumattachable/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/spectrumattachable/#addactor","text":"fun ( self : any, actor : Actor)","title":"addActor"},{"location":"api/spectrumattachable/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/spectrumattachable/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/spectrumattachable/#debug","text":"boolean","title":"debug"},{"location":"api/spectrumattachable/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/spectrumattachable/#eachactor","text":"fun ( self : any): fun ()","title":"eachActor"},{"location":"api/spectrumattachable/#eachactorat","text":"fun ( self : any, x : integer, y : integer): fun ()","title":"eachActorAt"},{"location":"api/spectrumattachable/#eachcell","text":"fun ( self : any): fun ()","title":"eachCell"},{"location":"api/spectrumattachable/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/spectrumattachable/#getactorsat","text":"fun ( self : any, x : integer, y : integer)","title":"getActorsAt"},{"location":"api/spectrumattachable/#getcell","text":"fun ( self : any, x : integer, y : integer): Cell","title":"getCell"},{"location":"api/spectrumattachable/#inbounds","text":"fun ( self : any, x : integer, y : integer)","title":"inBounds"},{"location":"api/spectrumattachable/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/spectrumattachable/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/spectrumattachable/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/spectrumattachable/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/spectrumattachable/#removeactor","text":"fun ( self : any, actor : Actor)","title":"removeActor"},{"location":"api/spectrumattachable/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/spectrumattachable/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/spectrumattachable/#setcell","text":"fun ( self : any, x : integer, y : integer, cell : Cell| nil )","title":"setCell"},{"location":"api/spectrumattachable/#stripname","text":"boolean","title":"stripName"},{"location":"api/spriteatlas/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SpriteAtlas : __new ( imagePath : string, spriteData : table, names : string[]) The constructor for the SpriteAtlas class @ param imagePath \u2014 The path to the texture atlas image @ param spriteData \u2014 A table containing sprite names and their respective quads _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown drawByIndex ( method ) SpriteAtlas : drawByIndex ( index : number, x : number, y : number) Draws a sprite by index at the given position @ param index \u2014 The index of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite drawByName ( method ) SpriteAtlas : drawByName ( name : string, x : number, y : number) Draws a sprite by name at the given position @ param name \u2014 The name of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. fromAtlased function SpriteAtlas. fromAtlased ( imagePath : string, jsonPath : string) -> The : SpriteAtlas Creates a SpriteAtlas from an Atlased JSON and PNG file @ param imagePath \u2014 The path to the texture atlas image @ param jsonPath \u2014 The path to the Atlased JSON file @ return The \u2014 created SpriteAtlas instance fromGrid function SpriteAtlas. fromGrid ( imagePath : string, cellWidth : number, cellHeight : number, names ? : table ) -> The : SpriteAtlas Creates a SpriteAtlas from a grid of cells @ param imagePath \u2014 The path to the texture atlas image @ param cellWidth \u2014 The width of each cell in the grid @ param cellHeight \u2014 The height of each cell in the grid @ param names \u2014 The names of the sprites, mapping left to right, top to bottom. If not supplied the quads will be sorted by index not name. @ return The \u2014 created SpriteAtlas instance getQuadByIndex ( method ) SpriteAtlas : getQuadByIndex ( index : number) -> quad : any Gets a quad by index @ param index \u2014 The index of the sprite @ return quad \u2014 The love quad associated with the sprite index getQuadByName ( method ) SpriteAtlas : getQuadByName ( name : string) -> quad : any Gets a quad by name @ param name \u2014 The name of the sprite @ return quad \u2014 The love quad associated with the sprite name image any The texture atlas love image instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. quadsByIndex table < number , any > A table of quads indexed by sprite indices quadsByName table < string , any > A table of quads indexed by sprite names serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean","title":"spriteatlas"},{"location":"api/spriteatlas/#__call","text":"function","title":"__call"},{"location":"api/spriteatlas/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/spriteatlas/#__new","text":"( method ) SpriteAtlas : __new ( imagePath : string, spriteData : table, names : string[]) The constructor for the SpriteAtlas class @ param imagePath \u2014 The path to the texture atlas image @ param spriteData \u2014 A table containing sprite names and their respective quads","title":"__new"},{"location":"api/spriteatlas/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/spriteatlas/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/spriteatlas/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/spriteatlas/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/spriteatlas/#drawbyindex","text":"( method ) SpriteAtlas : drawByIndex ( index : number, x : number, y : number) Draws a sprite by index at the given position @ param index \u2014 The index of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite","title":"drawByIndex"},{"location":"api/spriteatlas/#drawbyname","text":"( method ) SpriteAtlas : drawByName ( name : string, x : number, y : number) Draws a sprite by name at the given position @ param name \u2014 The name of the sprite @ param x \u2014 The x coordinate to draw the sprite @ param y \u2014 The y coordinate to draw the sprite","title":"drawByName"},{"location":"api/spriteatlas/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/spriteatlas/#fromatlased","text":"function SpriteAtlas. fromAtlased ( imagePath : string, jsonPath : string) -> The : SpriteAtlas Creates a SpriteAtlas from an Atlased JSON and PNG file @ param imagePath \u2014 The path to the texture atlas image @ param jsonPath \u2014 The path to the Atlased JSON file @ return The \u2014 created SpriteAtlas instance","title":"fromAtlased"},{"location":"api/spriteatlas/#fromgrid","text":"function SpriteAtlas. fromGrid ( imagePath : string, cellWidth : number, cellHeight : number, names ? : table ) -> The : SpriteAtlas Creates a SpriteAtlas from a grid of cells @ param imagePath \u2014 The path to the texture atlas image @ param cellWidth \u2014 The width of each cell in the grid @ param cellHeight \u2014 The height of each cell in the grid @ param names \u2014 The names of the sprites, mapping left to right, top to bottom. If not supplied the quads will be sorted by index not name. @ return The \u2014 created SpriteAtlas instance","title":"fromGrid"},{"location":"api/spriteatlas/#getquadbyindex","text":"( method ) SpriteAtlas : getQuadByIndex ( index : number) -> quad : any Gets a quad by index @ param index \u2014 The index of the sprite @ return quad \u2014 The love quad associated with the sprite index","title":"getQuadByIndex"},{"location":"api/spriteatlas/#getquadbyname","text":"( method ) SpriteAtlas : getQuadByName ( name : string) -> quad : any Gets a quad by name @ param name \u2014 The name of the sprite @ return quad \u2014 The love quad associated with the sprite name","title":"getQuadByName"},{"location":"api/spriteatlas/#image","text":"any The texture atlas love image","title":"image"},{"location":"api/spriteatlas/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/spriteatlas/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/spriteatlas/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/spriteatlas/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/spriteatlas/#quadsbyindex","text":"table < number , any > A table of quads indexed by sprite indices","title":"quadsByIndex"},{"location":"api/spriteatlas/#quadsbyname","text":"table < string , any > A table of quads indexed by sprite names","title":"quadsByName"},{"location":"api/spriteatlas/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/spriteatlas/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/spriteatlas/#stripname","text":"boolean","title":"stripName"},{"location":"api/system/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed. afterActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. afterOpacityChanged ( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute. beforeActions table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks. beforeMove ( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. global boolean A system defined global can only be attached to the Game object. It will see all events from all levels. initialize ( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. name string A system must define a name that is unique to the System. onActorAdded ( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added. onActorRemoved ( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed. onDescend ( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to. onMove ( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to. onTick ( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to. onTurn ( method ) System : onTurn ( level : Level, actor : Actor) This method is called when a new turn begins. The actor is the actor that is about to take their turn. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onTurnEnd ( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn. onYield ( method ) System : onYield ( level : Level, event : Message) This method is called whenever the level yields back to the interface. The most common usage for this right now is updating the sight component of any input controlled actors in the Sight system. @ param level \u2014 The Level object this System is attached to. @ param event \u2014 The event data that caused the yield. owner Level ? The level that holds this system. postInitialize ( method ) System : postInitialize ( level : Level) This method is called after the Level is initialized. It is called after all of the Systems have been initialized. @ param level \u2014 The Level object this System is attached to. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. requirements string [] A table of requirements that must be met for the System to be attached to a Level. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table softRequirements string [] A table of optional requirements that ensure proper order if both Systems are attached. stripName boolean","title":"system"},{"location":"api/system/#__call","text":"function","title":"__call"},{"location":"api/system/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/system/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/system/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/system/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/system/#afteraction","text":"( method ) System : afterAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has taken an action. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has taken an action. @ param action \u2014 The Action object that the Actor has executed.","title":"afterAction"},{"location":"api/system/#afteractions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"afterActions"},{"location":"api/system/#afteropacitychanged","text":"( method ) System : afterOpacityChanged ( level : Level, x : number, y : number) Called when an actor or tile has its opacity changed. @ param level \u2014 The Level object this System is attached to. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"api/system/#beforeaction","text":"( method ) System : beforeAction ( level : Level, actor : Actor, action : Action) This method is called after an actor has selected an action, but before it is executed. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has selected an action. @ param action \u2014 The Action object that the Actor has selected to execute.","title":"beforeAction"},{"location":"api/system/#beforeactions","text":"table < Action , fun ( level : Level, actor : Actor, action : Action)> A table mapping specific actions to event hooks.","title":"beforeActions"},{"location":"api/system/#beforemove","text":"( method ) System : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called before an actor moves. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is moving. @ param from \u2014 The position the Actor is moving from. @ param to \u2014 The position the Actor is moving to.","title":"beforeMove"},{"location":"api/system/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/system/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/system/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/system/#global","text":"boolean A system defined global can only be attached to the Game object. It will see all events from all levels.","title":"global"},{"location":"api/system/#initialize","text":"( method ) System : initialize ( level : Level) This method is called when the Level is initialized. It is called after all of the Systems have been attached. @ param level \u2014 The Level object this System is attached to.","title":"initialize"},{"location":"api/system/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/system/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/system/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/system/#name","text":"string A system must define a name that is unique to the System.","title":"name"},{"location":"api/system/#onactoradded","text":"( method ) System : onActorAdded ( level : Level, actor : Actor) This method is called after an actor has been added to the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been added.","title":"onActorAdded"},{"location":"api/system/#onactorremoved","text":"( method ) System : onActorRemoved ( level : Level, actor : Actor) This method is called after an actor has been removed from the Level. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has been removed.","title":"onActorRemoved"},{"location":"api/system/#ondescend","text":"( method ) System : onDescend ( level : Level) This method is called when descending to a lower level. @ param level \u2014 The Level object this System is attached to.","title":"onDescend"},{"location":"api/system/#onmove","text":"( method ) System : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) This method is called after an actor has moved. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that has moved. @ param from \u2014 The position the Actor moved from. @ param to \u2014 The position the Actor moved to.","title":"onMove"},{"location":"api/system/#ontick","text":"( method ) System : onTick ( level : Level) This method is called every 100 units of time, a second, and can be used for mechanics such as hunger and fire spreading. @ param level \u2014 The Level object this System is attached to.","title":"onTick"},{"location":"api/system/#onturn","text":"( method ) System : onTurn ( level : Level, actor : Actor) This method is called when a new turn begins. The actor is the actor that is about to take their turn. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurn"},{"location":"api/system/#onturnend","text":"( method ) System : onTurnEnd ( level : Level, actor : Actor) This method is called when a new turn ends. @ param level \u2014 The Level object this System is attached to. @ param actor \u2014 The Actor object that is about to take its turn.","title":"onTurnEnd"},{"location":"api/system/#onyield","text":"( method ) System : onYield ( level : Level, event : Message) This method is called whenever the level yields back to the interface. The most common usage for this right now is updating the sight component of any input controlled actors in the Sight system. @ param level \u2014 The Level object this System is attached to. @ param event \u2014 The event data that caused the yield.","title":"onYield"},{"location":"api/system/#owner","text":"Level ? The level that holds this system.","title":"owner"},{"location":"api/system/#postinitialize","text":"( method ) System : postInitialize ( level : Level) This method is called after the Level is initialized. It is called after all of the Systems have been initialized. @ param level \u2014 The Level object this System is attached to.","title":"postInitialize"},{"location":"api/system/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/system/#requirements","text":"string [] A table of requirements that must be met for the System to be attached to a Level.","title":"requirements"},{"location":"api/system/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/system/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/system/#softrequirements","text":"string [] A table of optional requirements that ensure proper order if both Systems are attached.","title":"softRequirements"},{"location":"api/system/#stripname","text":"boolean","title":"stripName"},{"location":"api/systemmanager/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) SystemManager : __new ( owner : Level) _serializationBlacklist table addSystem ( method ) SystemManager : addSystem ( system : System) Adds a system to the manager. @ param system \u2014 The system to add. adopt ( method ) Object : adopt ( o : any) -> unknown afterAction ( method ) SystemManager : afterAction ( level : Level, actor : Actor, action : Action) Calls the afterAction method for all systems. @ param level \u2014 The level to call afterAction for. @ param actor \u2014 The actor that has taken an action. @ param action \u2014 The action the actor has executed. afterOpacityChanged ( method ) SystemManager : afterOpacityChanged ( level : Level, x : number, y : number) Calls the afterOpacityChanged method for all systems. @ param level \u2014 The level to call afterOpacityChanged for. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile. beforeAction ( method ) SystemManager : beforeAction ( level : Level, actor : Actor, action : Action) Calls the beforeAction method for all systems. @ param level \u2014 The level to call beforeAction for. @ param actor \u2014 The actor that has selected an action. @ param action \u2014 The action the actor has selected. beforeMove ( method ) SystemManager : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the beforeMove method for all systems. @ param level \u2014 The level to call beforeMove for. @ param actor \u2014 The actor that is moving. @ param from \u2014 The position the actor is moving from. @ param to \u2014 The position the actor is moving to. className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getSystem ( method ) SystemManager : getSystem ( systemName : string) -> The : System ? Gets a system by name. @ param systemName \u2014 The name of the system to get. @ return The \u2014 system with the given name, or nil if not found. initialize ( method ) SystemManager : initialize ( level : Level) Initializes all systems attached to the manager. @ param level \u2014 The level to initialize the systems for. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. onActorAdded ( method ) SystemManager : onActorAdded ( level : Level, actor : Actor) Calls the onActorAdded method for all systems. @ param level \u2014 The level to call onActorAdded for. @ param actor \u2014 The actor that has been added. onActorRemoved ( method ) SystemManager : onActorRemoved ( level : Level, actor : Actor) Calls the onActorRemoved method for all systems. @ param level \u2014 The level to call onActorRemoved for. @ param actor \u2014 The actor that has been removed. onMove ( method ) SystemManager : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the onMove method for all systems. @ param level \u2014 The level to call onMove for. @ param actor \u2014 The actor that has moved. @ param from \u2014 The position the actor moved from. @ param to \u2014 The position the actor moved to. onTick ( method ) SystemManager : onTick ( level : Level) Calls the onTick method for all systems. @ param level \u2014 The level to call onTick for. onTurn ( method ) SystemManager : onTurn ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn. onTurnEnd ( method ) SystemManager : onTurnEnd ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn. onYield ( method ) SystemManager : onYield ( level : Level, event : Message) Calls the on yield method for each system right before the level hands a Decision back to the interface. Used by the Sight system to ensure that the player's fov is always updated when we yield even if it's not their turn. @ param level \u2014 The level to call onYield for. @ param event \u2014 The event data that caused the yield. owner Level The 'Level' holds all of the actors and systems, and runs the game loop. Through the ActorStorage and SystemManager postInitialize ( method ) SystemManager : postInitialize ( level : Level) Post-initializes all systems after the level has been populated. @ param level \u2014 The level to post-initialize the systems for. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean systems System [] trigger ( method ) SystemManager : trigger ( eventString : string, ... any ) This is useful for calling custom events you define in your Actions, Systems, etc. An example usage of this can be found in the Sight system. @ param eventString \u2014 The key of the event handler method into the system. @ param ... \u2014 The arguments to be passed to the event handler method.","title":"systemmanager"},{"location":"api/systemmanager/#__call","text":"function","title":"__call"},{"location":"api/systemmanager/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/systemmanager/#__new","text":"( method ) SystemManager : __new ( owner : Level)","title":"__new"},{"location":"api/systemmanager/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/systemmanager/#addsystem","text":"( method ) SystemManager : addSystem ( system : System) Adds a system to the manager. @ param system \u2014 The system to add.","title":"addSystem"},{"location":"api/systemmanager/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/systemmanager/#afteraction","text":"( method ) SystemManager : afterAction ( level : Level, actor : Actor, action : Action) Calls the afterAction method for all systems. @ param level \u2014 The level to call afterAction for. @ param actor \u2014 The actor that has taken an action. @ param action \u2014 The action the actor has executed.","title":"afterAction"},{"location":"api/systemmanager/#afteropacitychanged","text":"( method ) SystemManager : afterOpacityChanged ( level : Level, x : number, y : number) Calls the afterOpacityChanged method for all systems. @ param level \u2014 The level to call afterOpacityChanged for. @ param x \u2014 The x coordinate of the tile. @ param y \u2014 The y coordinate of the tile.","title":"afterOpacityChanged"},{"location":"api/systemmanager/#beforeaction","text":"( method ) SystemManager : beforeAction ( level : Level, actor : Actor, action : Action) Calls the beforeAction method for all systems. @ param level \u2014 The level to call beforeAction for. @ param actor \u2014 The actor that has selected an action. @ param action \u2014 The action the actor has selected.","title":"beforeAction"},{"location":"api/systemmanager/#beforemove","text":"( method ) SystemManager : beforeMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the beforeMove method for all systems. @ param level \u2014 The level to call beforeMove for. @ param actor \u2014 The actor that is moving. @ param from \u2014 The position the actor is moving from. @ param to \u2014 The position the actor is moving to.","title":"beforeMove"},{"location":"api/systemmanager/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/systemmanager/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/systemmanager/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/systemmanager/#getsystem","text":"( method ) SystemManager : getSystem ( systemName : string) -> The : System ? Gets a system by name. @ param systemName \u2014 The name of the system to get. @ return The \u2014 system with the given name, or nil if not found.","title":"getSystem"},{"location":"api/systemmanager/#initialize","text":"( method ) SystemManager : initialize ( level : Level) Initializes all systems attached to the manager. @ param level \u2014 The level to initialize the systems for.","title":"initialize"},{"location":"api/systemmanager/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/systemmanager/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/systemmanager/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/systemmanager/#onactoradded","text":"( method ) SystemManager : onActorAdded ( level : Level, actor : Actor) Calls the onActorAdded method for all systems. @ param level \u2014 The level to call onActorAdded for. @ param actor \u2014 The actor that has been added.","title":"onActorAdded"},{"location":"api/systemmanager/#onactorremoved","text":"( method ) SystemManager : onActorRemoved ( level : Level, actor : Actor) Calls the onActorRemoved method for all systems. @ param level \u2014 The level to call onActorRemoved for. @ param actor \u2014 The actor that has been removed.","title":"onActorRemoved"},{"location":"api/systemmanager/#onmove","text":"( method ) SystemManager : onMove ( level : Level, actor : Actor, from : Vector2, to : Vector2) Calls the onMove method for all systems. @ param level \u2014 The level to call onMove for. @ param actor \u2014 The actor that has moved. @ param from \u2014 The position the actor moved from. @ param to \u2014 The position the actor moved to.","title":"onMove"},{"location":"api/systemmanager/#ontick","text":"( method ) SystemManager : onTick ( level : Level) Calls the onTick method for all systems. @ param level \u2014 The level to call onTick for.","title":"onTick"},{"location":"api/systemmanager/#onturn","text":"( method ) SystemManager : onTurn ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn.","title":"onTurn"},{"location":"api/systemmanager/#onturnend","text":"( method ) SystemManager : onTurnEnd ( level : Level, actor : Actor) Calls the onTurn method for all systems. @ param level \u2014 The level to call onTurn for. @ param actor \u2014 The actor taking its turn.","title":"onTurnEnd"},{"location":"api/systemmanager/#onyield","text":"( method ) SystemManager : onYield ( level : Level, event : Message) Calls the on yield method for each system right before the level hands a Decision back to the interface. Used by the Sight system to ensure that the player's fov is always updated when we yield even if it's not their turn. @ param level \u2014 The level to call onYield for. @ param event \u2014 The event data that caused the yield.","title":"onYield"},{"location":"api/systemmanager/#owner","text":"Level The 'Level' holds all of the actors and systems, and runs the game loop. Through the ActorStorage and SystemManager","title":"owner"},{"location":"api/systemmanager/#postinitialize","text":"( method ) SystemManager : postInitialize ( level : Level) Post-initializes all systems after the level has been populated. @ param level \u2014 The level to post-initialize the systems for.","title":"postInitialize"},{"location":"api/systemmanager/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/systemmanager/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/systemmanager/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/systemmanager/#stripname","text":"boolean","title":"stripName"},{"location":"api/systemmanager/#systems","text":"System []","title":"systems"},{"location":"api/systemmanager/#trigger","text":"( method ) SystemManager : trigger ( eventString : string, ... any ) This is useful for calling custom events you define in your Actions, Systems, etc. An example usage of this can be found in the Sight system. @ param eventString \u2014 The key of the event handler method into the system. @ param ... \u2014 The arguments to be passed to the event handler method.","title":"trigger"},{"location":"api/target/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table _validate ( method ) Target : _validate ( owner : Actor, targetObject : any, targets : [ Object]) -> boolean @ param owner \u2014 The owner of the action. @ param targetObject \u2014 The target object of the action. @ param targets \u2014 A list of the previous targets. adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown distanceType \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. range number The distance in tiles this actor can be away from the Action's owner. If nil this check is skipped. rangeLastTarget nil rangeType \"chebyshev\" | \"manhattan\" serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean typesAllowed table < \"Actor\" | \"Any\" | \"Cell\" | \"Point\" , true > unique boolean If true this will make sure this target is unique, and not one of the targets already selected. validate ( method ) Target : validate ( owner : Actor, targetObject : Actor| Cell | Vector2 , targets : any) -> boolean The inner validate for the target. This is what you override with your own custom logic. @ param owner \u2014 The actor performing the action. @ param targetObject \u2014 The target to validate.","title":"target"},{"location":"api/target/#__call","text":"function","title":"__call"},{"location":"api/target/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/target/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/target/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/target/#_validate","text":"( method ) Target : _validate ( owner : Actor, targetObject : any, targets : [ Object]) -> boolean @ param owner \u2014 The owner of the action. @ param targetObject \u2014 The target object of the action. @ param targets \u2014 A list of the previous targets.","title":"_validate"},{"location":"api/target/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/target/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/target/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/target/#distancetype","text":"\"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\"","title":"distanceType"},{"location":"api/target/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/target/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/target/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/target/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/target/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/target/#range","text":"number The distance in tiles this actor can be away from the Action's owner. If nil this check is skipped.","title":"range"},{"location":"api/target/#rangelasttarget","text":"nil","title":"rangeLastTarget"},{"location":"api/target/#rangetype","text":"\"chebyshev\" | \"manhattan\"","title":"rangeType"},{"location":"api/target/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/target/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/target/#stripname","text":"boolean","title":"stripName"},{"location":"api/target/#typesallowed","text":"table < \"Actor\" | \"Any\" | \"Cell\" | \"Point\" , true >","title":"typesAllowed"},{"location":"api/target/#unique","text":"boolean If true this will make sure this target is unique, and not one of the targets already selected.","title":"unique"},{"location":"api/target/#validate","text":"( method ) Target : validate ( owner : Actor, targetObject : Actor| Cell | Vector2 , targets : any) -> boolean The inner validate for the target. This is what you override with your own custom logic. @ param owner \u2014 The actor performing the action. @ param targetObject \u2014 The target to validate.","title":"validate"},{"location":"api/textinput/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props TextInputProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"textinput"},{"location":"api/textinput/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/textinput/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/textinput/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/textinput/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/textinput/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/textinput/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/textinput/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/textinput/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/textinput/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/textinput/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/textinput/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/textinput/#props","text":"TextInputProps","title":"props"},{"location":"api/textinput/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/textinput/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/textinput/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/textinputinit/","text":"","title":"textinputinit"},{"location":"api/textinputprops/","text":"_internal Inky .Props.Internal content string focused boolean font love .Font Defines the shape of characters that can be drawn onto the screen. Open in Browser limit number the number of characters before we start panning onEdit function ? overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeholder string size Vector2","title":"textinputprops"},{"location":"api/textinputprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/textinputprops/#content","text":"string","title":"content"},{"location":"api/textinputprops/#focused","text":"boolean","title":"focused"},{"location":"api/textinputprops/#font","text":"love .Font Defines the shape of characters that can be drawn onto the screen. Open in Browser","title":"font"},{"location":"api/textinputprops/#limit","text":"number the number of characters before we start panning","title":"limit"},{"location":"api/textinputprops/#onedit","text":"function ?","title":"onEdit"},{"location":"api/textinputprops/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"api/textinputprops/#placeholder","text":"string","title":"placeholder"},{"location":"api/textinputprops/#size","text":"Vector2","title":"size"},{"location":"api/tileelement/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props TileElementProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"tileelement"},{"location":"api/tileelement/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/tileelement/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/tileelement/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/tileelement/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/tileelement/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/tileelement/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/tileelement/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/tileelement/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/tileelement/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/tileelement/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/tileelement/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/tileelement/#props","text":"TileElementProps","title":"props"},{"location":"api/tileelement/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/tileelement/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/tileelement/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/tileelementprops/","text":"_internal Inky .Props.Internal display Display onSelect function overlay love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. size Vector2 the final size of a tile in editor","title":"tileelementprops"},{"location":"api/tileelementprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/tileelementprops/#display","text":"Display","title":"display"},{"location":"api/tileelementprops/#onselect","text":"function","title":"onSelect"},{"location":"api/tileelementprops/#overlay","text":"love .Canvas A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\". By drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item, you can reduce the number of draw operations performed each frame. In versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime. Open in Browser","title":"overlay"},{"location":"api/tileelementprops/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/tileelementprops/#size","text":"Vector2 the final size of a tile in editor","title":"size"},{"location":"api/tool/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this. _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown draw ( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals. drawCell ( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getDrawable ( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. mouseclicked ( method ) Tool : mouseclicked ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse click events. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked. mousereleased ( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release. overrideCellDraw ( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer) prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean update ( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"tool"},{"location":"api/tool/#__call","text":"function","title":"__call"},{"location":"api/tool/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/tool/#__new","text":"( method ) Object : __new (... any ) The default constructor for the class. Subclasses should override this.","title":"__new"},{"location":"api/tool/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/tool/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/tool/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/tool/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/tool/#draw","text":"( method ) Tool : draw ( editor : Editor, display : Display) Draws the tool visuals.","title":"draw"},{"location":"api/tool/#drawcell","text":"( method ) Tool : drawCell ( display : Display, drawable : DrawableComponent, x : number, y : number) Draws a cell at the given coordinates.","title":"drawCell"},{"location":"api/tool/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/tool/#getdrawable","text":"( method ) Tool : getDrawable ( placeable : Actor| Cell ) -> DrawableComponent Returns the DrawableComponent from placeable","title":"getDrawable"},{"location":"api/tool/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/tool/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/tool/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/tool/#mouseclicked","text":"( method ) Tool : mouseclicked ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse click events. @ param cellx \u2014 The x-coordinate of the cell clicked. @ param celly \u2014 The y-coordinate of the cell clicked.","title":"mouseclicked"},{"location":"api/tool/#mousereleased","text":"( method ) Tool : mousereleased ( editor : Editor, level : any, cellx : number, celly : number) Handles mouse release events. @ param cellx \u2014 The x-coordinate of the cell release. @ param celly \u2014 The y-coordinate of the cell release.","title":"mousereleased"},{"location":"api/tool/#overridecelldraw","text":"( method ) Tool : overrideCellDraw ( editor : Editor, level : Level, cellx : integer, celly : integer)","title":"overrideCellDraw"},{"location":"api/tool/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/tool/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/tool/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/tool/#stripname","text":"boolean","title":"stripName"},{"location":"api/tool/#update","text":"( method ) Tool : update ( dt : number, editor : Editor) Updates the tool state. @ param dt \u2014 The time delta since the last update. @ param editor \u2014 The editor instance.","title":"update"},{"location":"api/tools/","text":"__getInternal ( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing _internal Inky .Element.Internal constructor ( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number )) getView ( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at on ( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise onDisable ( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame onEnable ( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame onPointer ( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement onPointerEnter ( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element onPointerExit ( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element onPointerInHierarchy ( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer props ToolsProps render ( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame useEffect ( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render useOverlapCheck ( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"tools"},{"location":"api/tools/#__getinternal","text":"( method ) Inky .Element: __getInternal () -> Inky .Element.Internal Get the internal representation of the Element For internal use\\ Don't touch unless you know what you're doing","title":"__getInternal"},{"location":"api/tools/#_internal","text":"Inky .Element.Internal","title":"_internal"},{"location":"api/tools/#constructor","text":"( method ) Inky .Element: constructor ( scene : any, initializer : fun ( self : Inky.Element, scene : Inky.Scene): fun ( self : Inky.Element, x : number, y : number, w : number, h : number, depth ? : number ))","title":"constructor"},{"location":"api/tools/#getview","text":"( method ) Inky .Element: getView () -> x : number 2. y : number 3. w : number 4. h : number Return the x, y, w, h that the Element was last rendered at","title":"getView"},{"location":"api/tools/#on","text":"( method ) Inky .Element: on ( eventName : string, callback : fun ( element : Inky.Element, ... any ): nil ) -> Inky .Element Execute callback when Scene event is raised from the parent Scene \\ See: Inky.Scene.raise","title":"on"},{"location":"api/tools/#ondisable","text":"( method ) Inky .Element: onDisable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element isn't rendered, when it was rendered last frame","title":"onDisable"},{"location":"api/tools/#onenable","text":"( method ) Inky .Element: onEnable ( callback ? : fun ( element : Inky.Element): nil ) -> Inky .Element Execute callback when an Element is rendered, when it wasn't rendered last frame","title":"onEnable"},{"location":"api/tools/#onpointer","text":"( method ) Inky .Element: onPointer ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event is raised from an overlapping/capturing Pointer \\ See: * Inky.Pointer.raise * Inky.Pointer.captureElement","title":"onPointer"},{"location":"api/tools/#onpointerenter","text":"( method ) Inky .Element: onPointerEnter ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer enters the bounding box of the Element","title":"onPointerEnter"},{"location":"api/tools/#onpointerexit","text":"( method ) Inky .Element: onPointerExit ( callback : fun ( element : Inky.Element, pointer : Inky.Pointer): nil ) -> Inky .Element Execute callback when a Pointer exits the bounding box of the Element","title":"onPointerExit"},{"location":"api/tools/#onpointerinhierarchy","text":"( method ) Inky .Element: onPointerInHierarchy ( eventName : string, callback : fun ( element : Inky.Element, pointer : Inky.Pointer, ... any ): nil ) -> Inky .Element Execute callback when a Pointer event was accepted by a child Element \\ See: * Inky.Pointer.raise * Inky.Element.onPointer","title":"onPointerInHierarchy"},{"location":"api/tools/#props","text":"ToolsProps","title":"props"},{"location":"api/tools/#render","text":"( method ) Inky .Element: render ( x : number, y : number, w : number, h : number, depth ? : number ) -> Inky .Element Render the Element, setting up all the hooks and drawing the Element Note: The parent Scene's frame must have been begun to be able to render\\ See: Inky.Scene.beginFrame","title":"render"},{"location":"api/tools/#useeffect","text":"( method ) Inky .Element: useEffect ( effect : fun ( element : Inky.Element): nil , ... any ) -> Inky .Element Execute a side effect when any specified Element's prop changes Note: The effect is ran right before a render","title":"useEffect"},{"location":"api/tools/#useoverlapcheck","text":"( method ) Inky .Element: useOverlapCheck ( predicate : fun ( pointerX : number, pointerY : number, x : number, y : number, w : number, h : number): boolean ) -> Inky .Element Use an additional check to determine if a Pointer is overlapping an Element Note: Check is performed after a bounding box check","title":"useOverlapCheck"},{"location":"api/toolsprops/","text":"_internal Inky .Props.Internal editor Editor selected Button","title":"toolsprops"},{"location":"api/toolsprops/#_internal","text":"Inky .Props.Internal","title":"_internal"},{"location":"api/toolsprops/#editor","text":"Editor","title":"editor"},{"location":"api/toolsprops/#selected","text":"Button","title":"selected"},{"location":"api/unfloatselectionmodification/","text":"__call function __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __new ( method ) UnfloatSelectionModification : __new ( placeable : any, position : any, floatingSelection : any) _serializationBlacklist table adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. deserialize function Object. deserialize ( data : any) -> unknown execute ( method ) UnfloatSelectionModification : execute ( attachable : SpectrumAttachable) extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. floatingSelection MapBuilder A map builder class that extends the SparseGrid class to handle map-specific functionalities. instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. placeActor ( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor) placeCell ( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil ) placeable Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects. placed table position Vector2 prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. removeActor ( method ) Modification : removeActor ( level : any, actor : any) removed table replaced SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean undo ( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"unfloatselectionmodification"},{"location":"api/unfloatselectionmodification/#__call","text":"function","title":"__call"},{"location":"api/unfloatselectionmodification/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/unfloatselectionmodification/#__new","text":"( method ) UnfloatSelectionModification : __new ( placeable : any, position : any, floatingSelection : any)","title":"__new"},{"location":"api/unfloatselectionmodification/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/unfloatselectionmodification/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/unfloatselectionmodification/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/unfloatselectionmodification/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/unfloatselectionmodification/#execute","text":"( method ) UnfloatSelectionModification : execute ( attachable : SpectrumAttachable)","title":"execute"},{"location":"api/unfloatselectionmodification/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/unfloatselectionmodification/#floatingselection","text":"MapBuilder A map builder class that extends the SparseGrid class to handle map-specific functionalities.","title":"floatingSelection"},{"location":"api/unfloatselectionmodification/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/unfloatselectionmodification/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/unfloatselectionmodification/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/unfloatselectionmodification/#placeactor","text":"( method ) Modification : placeActor ( attachable : SpectrumAttachable, x : integer, y : integer, actorPrototype : Actor)","title":"placeActor"},{"location":"api/unfloatselectionmodification/#placecell","text":"( method ) Modification : placeCell ( attachable : SpectrumAttachable, x : integer, y : integer, cellPrototype : Cell| nil )","title":"placeCell"},{"location":"api/unfloatselectionmodification/#placeable","text":"Actor | Cell An 'Actor' represents entities in the game, including the player, enemies, and items. Actors are composed of Components that define their state and behavior. For example, an actor may have a Sight component that determines their field of vision, explored tiles, and other related aspects.","title":"placeable"},{"location":"api/unfloatselectionmodification/#placed","text":"table","title":"placed"},{"location":"api/unfloatselectionmodification/#position","text":"Vector2","title":"position"},{"location":"api/unfloatselectionmodification/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/unfloatselectionmodification/#removeactor","text":"( method ) Modification : removeActor ( level : any, actor : any)","title":"removeActor"},{"location":"api/unfloatselectionmodification/#removed","text":"table","title":"removed"},{"location":"api/unfloatselectionmodification/#replaced","text":"SparseGrid A sparse grid class that stores data using hashed coordinates. Similar to a SparseMap except here there is only one entry per grid coordinate. This is suitable for stuff like Cells.","title":"replaced"},{"location":"api/unfloatselectionmodification/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/unfloatselectionmodification/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/unfloatselectionmodification/#stripname","text":"boolean","title":"stripName"},{"location":"api/unfloatselectionmodification/#undo","text":"( method ) Modification : undo ( attachable : SpectrumAttachable) Undoes the modification. Override this method in subclasses to define how the modification is undone.","title":"undo"},{"location":"api/vector2/","text":"DOWN Vector2 The static DOWN vector. DOWN_LEFT Vector2 The static DOWN_LEFT vector. DOWN_RIGHT Vector2 The static DOWN_RIGHT vector. LEFT Vector2 The static LEFT vector. RIGHT Vector2 The static RIGHT vector. UP Vector2 The static UP vector. UP_LEFT Vector2 The static UP_LEFT vector. UP_RIGHT Vector2 The static UP_RIGHT vector. __add function Vector2. __add ( a : Vector2, b : Vector2) -> Vector2 Adds two vectors together. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The sum of the two vectors. __call function __eq function Vector2. __eq ( a : Vector2, b : Vector2) -> boolean Checks the equality of two vectors. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 True if the vectors are equal, false otherwise. __index Object A simple class system for Lua. This is the base class for all other classes in PRISM. __mul function Vector2. __mul ( a : Vector2, b : number) -> Vector2 Multiplies a vector by a scalar. @ param a \u2014 The vector. @ param b \u2014 The scalar. @ return \u2014 The product of the vector and the scalar. __new ( method ) Vector2 : __new ( x : number, y : number) Constructor for Vector2 accepts two numbers, x and y. @ param x \u2014 The x component of the vector. @ param y \u2014 The y component of the vector. __sub function Vector2. __sub ( a : Vector2, b : Vector2) -> Vector2 Subtracts vector b from vector a. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The difference of the two vectors. __tostring ( method ) Vector2 : __tostring () -> string Creates a string representation of the vector. @ return \u2014 The string representation of the vector. __unm function Vector2. __unm ( a : Vector2) -> Vector2 Negates the vector. @ param a \u2014 The vector to negate. @ return \u2014 The negated vector. _hash function Vector2. _hash ( x : integer, y : integer) -> integer _serializationBlacklist table _unhash function Vector2. _unhash ( hash : number) -> number 2. integer adopt ( method ) Object : adopt ( o : any) -> unknown className string A unique name for this class. By convention this should match the annotation name you use. copy ( method ) Vector2 : copy () -> Vector2 Returns a copy of the vector. @ return \u2014 A copy of the vector. decompose ( method ) Vector2 : decompose () -> x : number 2. y : number @ return x \u2014 The x component of the vector. @ return y \u2014 The y component of the vector. deserialize function Object. deserialize ( data : any) -> unknown distance ( method ) Vector2 : distance ( vec : Vector2) -> distance : number Euclidian distance from another point. distanceChebyshev ( method ) Vector2 : distanceChebyshev ( vec : Vector2) -> distance : number Chebyshev distance from another point. distanceManhattan ( method ) Vector2 : distanceManhattan ( vec : Vector2) -> distance : number Manhattan distance from another point. extend ( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one. getRange ( method ) Vector2 : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , vec : Vector2) -> number Gets the range, a ciel'd integer representing the number of tiles away the other vector is type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\" hash ( method ) Vector2 : hash () -> hash : number instanceOf ( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise. is ( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise. length ( method ) Vector2 : length () -> number Returns the length of the vector. @ return \u2014 The length of the vector. lerp ( method ) Vector2 : lerp ( vec : Vector2, t : number) -> Vector2 Linearly interpolates between two vectors. @ param self \u2014 The starting vector (A). @ param vec \u2014 The ending vector (B). @ param t \u2014 The interpolation factor (0 <= t <= 1). @ return \u2014 The interpolated vector. mixin ( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in. neighborhood4 Vector2 [] neighborhood8 Vector2 [] prettyprint function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references. rotateClockwise ( method ) Vector2 : rotateClockwise () -> The : Vector2 Rotates the vector clockwise. @ return The \u2014 rotated vector. serializationBlacklist table < string , boolean > serialize function Object. serialize ( object : any) -> table stripName boolean unhash function Vector2. unhash ( hash : any) -> Vector2 x number The x component of the vector. y number The y component of the vector.","title":"vector2"},{"location":"api/vector2/#down","text":"Vector2 The static DOWN vector.","title":"DOWN"},{"location":"api/vector2/#down_left","text":"Vector2 The static DOWN_LEFT vector.","title":"DOWN_LEFT"},{"location":"api/vector2/#down_right","text":"Vector2 The static DOWN_RIGHT vector.","title":"DOWN_RIGHT"},{"location":"api/vector2/#left","text":"Vector2 The static LEFT vector.","title":"LEFT"},{"location":"api/vector2/#right","text":"Vector2 The static RIGHT vector.","title":"RIGHT"},{"location":"api/vector2/#up","text":"Vector2 The static UP vector.","title":"UP"},{"location":"api/vector2/#up_left","text":"Vector2 The static UP_LEFT vector.","title":"UP_LEFT"},{"location":"api/vector2/#up_right","text":"Vector2 The static UP_RIGHT vector.","title":"UP_RIGHT"},{"location":"api/vector2/#__add","text":"function Vector2. __add ( a : Vector2, b : Vector2) -> Vector2 Adds two vectors together. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The sum of the two vectors.","title":"__add"},{"location":"api/vector2/#__call","text":"function","title":"__call"},{"location":"api/vector2/#__eq","text":"function Vector2. __eq ( a : Vector2, b : Vector2) -> boolean Checks the equality of two vectors. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 True if the vectors are equal, false otherwise.","title":"__eq"},{"location":"api/vector2/#__index","text":"Object A simple class system for Lua. This is the base class for all other classes in PRISM.","title":"__index"},{"location":"api/vector2/#__mul","text":"function Vector2. __mul ( a : Vector2, b : number) -> Vector2 Multiplies a vector by a scalar. @ param a \u2014 The vector. @ param b \u2014 The scalar. @ return \u2014 The product of the vector and the scalar.","title":"__mul"},{"location":"api/vector2/#__new","text":"( method ) Vector2 : __new ( x : number, y : number) Constructor for Vector2 accepts two numbers, x and y. @ param x \u2014 The x component of the vector. @ param y \u2014 The y component of the vector.","title":"__new"},{"location":"api/vector2/#__sub","text":"function Vector2. __sub ( a : Vector2, b : Vector2) -> Vector2 Subtracts vector b from vector a. @ param a \u2014 The first vector. @ param b \u2014 The second vector. @ return \u2014 The difference of the two vectors.","title":"__sub"},{"location":"api/vector2/#__tostring","text":"( method ) Vector2 : __tostring () -> string Creates a string representation of the vector. @ return \u2014 The string representation of the vector.","title":"__tostring"},{"location":"api/vector2/#__unm","text":"function Vector2. __unm ( a : Vector2) -> Vector2 Negates the vector. @ param a \u2014 The vector to negate. @ return \u2014 The negated vector.","title":"__unm"},{"location":"api/vector2/#_hash","text":"function Vector2. _hash ( x : integer, y : integer) -> integer","title":"_hash"},{"location":"api/vector2/#_serializationblacklist","text":"table","title":"_serializationBlacklist"},{"location":"api/vector2/#_unhash","text":"function Vector2. _unhash ( hash : number) -> number 2. integer","title":"_unhash"},{"location":"api/vector2/#adopt","text":"( method ) Object : adopt ( o : any) -> unknown","title":"adopt"},{"location":"api/vector2/#classname","text":"string A unique name for this class. By convention this should match the annotation name you use.","title":"className"},{"location":"api/vector2/#copy","text":"( method ) Vector2 : copy () -> Vector2 Returns a copy of the vector. @ return \u2014 A copy of the vector.","title":"copy"},{"location":"api/vector2/#decompose","text":"( method ) Vector2 : decompose () -> x : number 2. y : number @ return x \u2014 The x component of the vector. @ return y \u2014 The y component of the vector.","title":"decompose"},{"location":"api/vector2/#deserialize","text":"function Object. deserialize ( data : any) -> unknown","title":"deserialize"},{"location":"api/vector2/#distance","text":"( method ) Vector2 : distance ( vec : Vector2) -> distance : number Euclidian distance from another point.","title":"distance"},{"location":"api/vector2/#distancechebyshev","text":"( method ) Vector2 : distanceChebyshev ( vec : Vector2) -> distance : number Chebyshev distance from another point.","title":"distanceChebyshev"},{"location":"api/vector2/#distancemanhattan","text":"( method ) Vector2 : distanceManhattan ( vec : Vector2) -> distance : number Manhattan distance from another point.","title":"distanceManhattan"},{"location":"api/vector2/#extend","text":"( method ) Object : extend ( className : string, ignoreclassName ? : boolean ) -> prototype : < T> Creates a new class and sets its metatable to the extended class. @ param className \u2014 name for the class @ param ignoreclassName \u2014 if true, skips the uniqueness check in prism's registry @ return prototype \u2014 The new class prototype extended from this one.","title":"extend"},{"location":"api/vector2/#getrange","text":"( method ) Vector2 : getRange ( type : \"4way\" | \"8way\" | \"chebyshev\" | \"euclidean\" | \"manhattan\" , vec : Vector2) -> number Gets the range, a ciel'd integer representing the number of tiles away the other vector is type : | \"euclidean\" | \"chebyshev\" | \"manhattan\" | \"4way\" | \"8way\"","title":"getRange"},{"location":"api/vector2/#hash","text":"( method ) Vector2 : hash () -> hash : number","title":"hash"},{"location":"api/vector2/#instanceof","text":"( method ) Object : instanceOf ( o : table) -> extends : boolean Checks if o is the first class in the inheritance chain of self. @ param o \u2014 The class to check. @ return extends \u2014 True if o is the first class in the inheritance chain of self, false otherwise.","title":"instanceOf"},{"location":"api/vector2/#is","text":"( method ) Object : is ( o : table) -> is : boolean Checks if o is in the inheritance chain of self. @ param o \u2014 The class to check. @ return is \u2014 True if o is in the inheritance chain of self, false otherwise.","title":"is"},{"location":"api/vector2/#length","text":"( method ) Vector2 : length () -> number Returns the length of the vector. @ return \u2014 The length of the vector.","title":"length"},{"location":"api/vector2/#lerp","text":"( method ) Vector2 : lerp ( vec : Vector2, t : number) -> Vector2 Linearly interpolates between two vectors. @ param self \u2014 The starting vector (A). @ param vec \u2014 The ending vector (B). @ param t \u2014 The interpolation factor (0 <= t <= 1). @ return \u2014 The interpolated vector.","title":"lerp"},{"location":"api/vector2/#mixin","text":"( method ) Object : mixin ( mixin : table) -> Object Mixes in methods and properties from another table, excluding blacklisted metamethods. THis does not deep copy or merge tables, currently. It's a shallow mixin. @ param mixin \u2014 The table containing methods and properties to mix in.","title":"mixin"},{"location":"api/vector2/#neighborhood4","text":"Vector2 []","title":"neighborhood4"},{"location":"api/vector2/#neighborhood8","text":"Vector2 []","title":"neighborhood8"},{"location":"api/vector2/#prettyprint","text":"function Object. prettyprint ( obj : table, indent : string, visited : table) -> string Pretty-prints an object for debugging or visualization. @ param obj \u2014 The object to pretty-print. @ param indent \u2014 The current indentation level (used for recursion). @ param visited \u2014 A table of visited objects to prevent circular references.","title":"prettyprint"},{"location":"api/vector2/#rotateclockwise","text":"( method ) Vector2 : rotateClockwise () -> The : Vector2 Rotates the vector clockwise. @ return The \u2014 rotated vector.","title":"rotateClockwise"},{"location":"api/vector2/#serializationblacklist","text":"table < string , boolean >","title":"serializationBlacklist"},{"location":"api/vector2/#serialize","text":"function Object. serialize ( object : any) -> table","title":"serialize"},{"location":"api/vector2/#stripname","text":"boolean","title":"stripName"},{"location":"api/vector2/#unhash","text":"function Vector2. unhash ( hash : any) -> Vector2","title":"unhash"},{"location":"api/vector2/#x","text":"number The x component of the vector.","title":"x"},{"location":"api/vector2/#y","text":"number The y component of the vector.","title":"y"}]}